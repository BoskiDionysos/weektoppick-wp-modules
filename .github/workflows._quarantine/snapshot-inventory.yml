name: Snapshot Inventory (prod, from SSOT)

on:
  workflow_dispatch: {}

permissions:
  contents: write

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      SSOT_FILE: ssot/SSOT_PACK.yml

    steps:
      - uses: actions/checkout@v4
        with: { lfs: true, fetch-depth: 0 }

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y sshpass curl jq
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Read SSOT
        id: ssot
        run: |
          set -euo pipefail
          test -f "$SSOT_FILE" || { echo "::error::Missing $SSOT_FILE"; exit 1; }
          host_s=$(yq -r '.environments.production.host_secret'   "$SSOT_FILE")
          port_s=$(yq -r '.environments.production.port_secret'   "$SSOT_FILE")
          user_s=$(yq -r '.environments.production.user_secret'   "$SSOT_FILE")
          pass_s=$(yq -r '.environments.production.pass_secret'   "$SSOT_FILE")
          targ_s=$(yq -r '.environments.production.target_secret' "$SSOT_FILE")
          echo "HOST=${!host_s}"   >> "$GITHUB_OUTPUT"
          echo "PORT=${!port_s}"   >> "$GITHUB_OUTPUT"
          echo "USER=${!user_s}"   >> "$GITHUB_OUTPUT"
          echo "PASS=${!pass_s}"   >> "$GITHUB_OUTPUT"
          echo "TARGET=${!targ_s}" >> "$GITHUB_OUTPUT"
          echo "DOCCHK=$(yq -r '.environments.production.wp_docroot_must_have' $SSOT_FILE)" >> "$GITHUB_OUTPUT"

      - name: Collect remote snapshot
        env:
          HOST:   ${{ steps.ssot.outputs.HOST }}
          PORT:   ${{ steps.ssot.outputs.PORT }}
          USER:   ${{ steps.ssot.outputs.USER }}
          PASS:   ${{ steps.ssot.outputs.PASS }}
          TARGET: ${{ steps.ssot.outputs.TARGET }}
          DOCCHK: ${{ steps.ssot.outputs.DOCCHK }}
        run: |
          set -euo pipefail
          TS="$(date +%Y%m%d-%H%M%S)"
          OUTDIR=".wtp/state/snapshots/${TS}"
          mkdir -p "${OUTDIR}"

          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' DOCCHK='${DOCCHK}' bash -s" <<'RMT' > "${OUTDIR}/raw.txt" 2>&1
            set -euo pipefail
            cd "$TARGET" || { echo "::error::Cannot cd to TARGET"; exit 1; }
            echo "== pwd =="; pwd
            echo "== ls top =="; ls -la
            echo "== docroot must have =="; if [ -f "$DOCCHK" ]; then echo "OK $DOCCHK"; else echo "MISSING $DOCCHK"; fi
            echo "== php -v =="; php -v || true
            echo "== php -m zip/curl/openssl =="; php -m | sort | grep -Ei 'zip|curl|openssl' || true
            if [ ! -x "./wp" ]; then
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null
              chmod +x wp.phar && mv wp.phar wp
            fi
            export WP_ALLOW_ROOT=1
            WP='php ./wp --skip-plugins --path="$TARGET"'
            echo "== wp core is-installed =="; eval $WP core is-installed && echo YES || echo NO
            echo "== plugins dir =="; ls -1 wp-content/plugins 2>/dev/null || echo "(no plugins dir)"
            echo "== mu-plugins =="; ls -1 wp-content/mu-plugins 2>/dev/null || echo "(no mu-plugins dir)"
            echo "== active plugins ==";  eval $WP plugin list --status=active --field=name || true
            echo "== all plugins ==";     eval $WP plugin list --field=name || true
            echo "== themes ==";          eval $WP theme list || true
          RMT

          # surowe -> JSON + szybki podgląd
          awk 'BEGIN{print "{"}
               /== pwd ==/{sec="pwd"; next}
               /== ls top ==/{sec="ls_top"; next}
               /== docroot must have ==/{sec="docroot"; next}
               /== php -v ==/{sec="php_v"; next}
               /== php -m zip\/curl\/openssl ==/{sec="php_m"; next}
               /== wp core is-installed ==/{sec="core_inst"; next}
               /== plugins dir ==/{sec="plugins_dir"; next}
               /== mu-plugins ==/{sec="mu_plugins"; next}
               /== active plugins ==/{sec="plugins_active"; next}
               /== all plugins ==/{sec="plugins_all"; next}
               /== themes ==/{sec="themes"; next}
               { gsub(/"/,"\\\""); if(length($0) && $0 !~ /^==/) printf "\"%s\": \"%s\",\n", sec, $0 }
               END{print "\"_end\":\"ok\"}"}' "${OUTDIR}/raw.txt" \
          | sed 's/,\"_end\":\"ok\"}/}/' > "${OUTDIR}/manifest.json"

          # szybki podgląd „live” zawsze pod tą samą ścieżką
          cp "${OUTDIR}/manifest.json" "ssot/LIVE_STATE.json"

      - name: Upload + commit
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "snapshot: refresh LIVE_STATE + manifest"
          file_pattern: |
            .wtp/state/snapshots/**
            ssot/LIVE_STATE.json
