name: Exporter Watchdog

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

concurrency:
  group: exporter-watchdog
  cancel-in-progress: true

env:
  BASE: https://weektoppick.com
  NS_OPEN: wtp-ro-open/v1
  NS_SNAP: wtp-ro/v1
  SITE_KEY: 5Depft8Y9LU0t6Sv
  OPS: ops-exporter-watchdog
  UA: WTP-ExporterWatchdog/1.0 (+https://weektoppick.com)

jobs:
  watchdog:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Prepare dirs
        run: mkdir -p "$OPS/headers" "$OPS/bodies"

      - name: Health checks (open + snap)
        id: hc
        shell: bash
        run: |
          set -euo pipefail
          ok=0

          check () {
            local label="$1" url="$2"
            local h="${OPS}/headers/${label}.hdr"
            local b="${OPS}/bodies/${label}.out"
            echo "GET $url"
            if curl -A "$UA" -sS --show-error \
                 --retry 2 --retry-delay 2 --retry-connrefused \
                 --connect-timeout 10 --max-time 30 \
                 -D "$h" "$url" -o "$b"; then
              local code ct
              code=$(awk 'NR==1{print $2}' "$h" 2>/dev/null || echo "")
              ct=$(awk -F': ' 'BEGIN{IGNORECASE=1} tolower($1)=="content-type"{print tolower($2)}' "$h" 2>/dev/null | tr -d '\r')
              if [ "$code" = "200" ]; then
                if jq -e type "$b" >/dev/null 2>&1; then
                  echo "${label}|${code}|json|OK" >> "${OPS}/summary.tsv"
                  ok=$((ok+1))
                else
                  echo "${label}|${code}|${ct}|INVALID_JSON" >> "${OPS}/summary.tsv"
                fi
              else
                echo "${label}|${code}|${ct}|HTTP_ERROR" >> "${OPS}/summary.tsv"
              fi
            else
              echo "${label}|curl-fail||CURL_ERROR" >> "${OPS}/summary.tsv"
            fi
          }

          : > "${OPS}/summary.tsv"
          check "open_ls.json"         "${BASE}/wp-json/${NS_OPEN}/ls?site_key=${SITE_KEY}"
          check "open_index.json"      "${BASE}/wp-json/${NS_OPEN}/get?site_key=${SITE_KEY}&file=index.json"
          check "snap_manifest.json"   "${BASE}/wp-json/${NS_SNAP}/snap?file=manifest.json"
          check "snap_gh-digest.json"  "${BASE}/wp-json/${NS_SNAP}/snap?file=gh-digest.json"

          echo "ok=${ok}" >> "$GITHUB_OUTPUT"

      - name: Upload diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: exporter-watchdog-${{ github.run_id }}
          path: ops-exporter-watchdog/**
          retention-days: 7

      - name: Create Issue on failure
        if: ${{ steps.hc.outputs.ok == '0' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            let body = `Exporter watchdog: **NO PASSING CHECKS**\n\nRun: ${runUrl}\n\n`;

            try {
              const summary = fs.readFileSync('ops-exporter-watchdog/summary.tsv','utf8');
              body += 'Summary:\n\n```\n' + summary + '\n```\n\n';
            } catch(e){}

            const labels = ['open_ls.json','open_index.json','snap_manifest.json','snap_gh-digest.json'];
            for (const lbl of labels) {
              try {
                const h = fs.readFileSync(`ops-exporter-watchdog/headers/${lbl}.hdr`, 'utf8');
                const b = fs.readFileSync(`ops-exporter-watchdog/bodies/${lbl}.out`, 'utf8');
                body += `### ${lbl}\n**Headers (first 600)**\n\n\`\`\`\n${h.slice(0,600)}\n\`\`\`\n`;
                body += `**Body (first 1000)**\n\n\`\`\`\n${b.slice(0,1000)}\n\`\`\`\n\n`;
              } catch(e){}
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Exporter watchdog: NO PASSING CHECKS (${context.runNumber})`,
              body
            });

      - name: Final gate
        run: |
          if [ "${{ steps.hc.outputs.ok }}" = "0" ]; then
            echo "::error::Exporter watchdog failed (no endpoints OK)."
            exit 1
          fi
          echo "At least one endpoint OK."
