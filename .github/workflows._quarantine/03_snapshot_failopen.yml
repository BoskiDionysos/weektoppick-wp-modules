name: 03_snapshot_failopen (ALWAYS PUBLISH latest)

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot-failopen
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      RUN_ID: ${{ github.run_id }}
      OUTDIR: "_ci_logs/${{ github.run_id }}/snapshot"
      RO_DIR: ".wtp/state/ro/public/${{ github.run_id }}"
      RO_LATEST: ".wtp/state/ro/public/latest"
      SNAP_DIR: ".wtp/snapshots"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools
        run: |
          set -euo pipefail
          sudo apt-get update -y >/dev/null
          sudo apt-get install -y jq sshpass >/dev/null || true

      # 1) Spróbuj zebrać dane po SSH (ale nie psuj joba, jeśli się nie uda)
      - name: Try remote snapshot (best effort, NEVER fail)
        continue-on-error: true
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          password: ${{ secrets.DEPLOY_PASS }}
          port:     ${{ secrets.DEPLOY_PORT }}
          request_pty: true
          envs: RUN_ID
          script: |
            set -euo pipefail
            TARGET="${HOME}/domains/weektoppick.com/public_html"
            OUTDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
            mkdir -p "${OUTDIR}" || true
            cd "${TARGET}" || exit 0

            # PHP/WP/host/timestamp – każdy pomiar "best effort"
            php -r 'echo PHP_VERSION;' > "${OUTDIR}/php_version.txt" 2>/dev/null || echo "unknown" > "${OUTDIR}/php_version.txt"
            (command -v wp >/dev/null 2>&1 && wp core version 2>/dev/null > "${OUTDIR}/wp_version.txt") || echo "unknown" > "${OUTDIR}/wp_version.txt"
            (command -v wp >/dev/null 2>&1 && wp option get home 2>/dev/null   > "${OUTDIR}/home.txt")    || : > "${OUTDIR}/home.txt"
            (command -v wp >/dev/null 2>&1 && wp option get siteurl 2>/dev/null> "${OUTDIR}/siteurl.txt") || : > "${OUTDIR}/siteurl.txt"
            hostname > "${OUTDIR}/hostname.txt" 2>/dev/null || echo "unknown" > "${OUTDIR}/hostname.txt"
            date -u +%FT%TZ > "${OUTDIR}/ts_utc.txt" 2>/dev/null || echo "unknown" > "${OUTDIR}/ts_utc.txt"

            (command -v wp >/dev/null 2>&1 && wp plugin list --format=json 2>/dev/null > "${OUTDIR}/plugins.json") || echo "[]" > "${OUTDIR}/plugins.json"
            (command -v wp >/dev/null 2>&1 && wp theme  list --format=json 2>/dev/null > "${OUTDIR}/themes.json")  || echo "[]" > "${OUTDIR}/themes.json"
            (command -v wp >/dev/null 2>&1 && wp user   list --role=administrator --format=json 2>/dev/null > "${OUTDIR}/admins.json") || echo "[]" > "${OUTDIR}/admins.json"
            (command -v wp >/dev/null 2>&1 && wp theme list --status=active --field=name 2>/dev/null | head -n1 > "${OUTDIR}/active_theme.txt") || : > "${OUTDIR}/active_theme.txt"

            # MU-plugins scan (lokalny, bez wp-cli)
            MUDIR="${TARGET}/wp-content/mu-plugins"
            if [ -d "${MUDIR}" ]; then
              php -r '
                $d=getenv("MUDIR"); $out=[];
                if (is_dir($d)) { foreach (scandir($d) as $f) {
                  if($f==="."||$f==="..") continue; $p="$d/$f";
                  if (is_file($p)) { $out[]=["file"=>$f,"size"=>@filesize($p),"md5"=>@md5_file($p)]; }
                }}
                echo json_encode($out, JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
              ' > "${OUTDIR}/mu_plugins.json" 2>/dev/null || echo "[]" > "${OUTDIR}/mu_plugins.json"
            else
              echo "[]" > "${OUTDIR}/mu_plugins.json"
            fi

            : > "${OUTDIR}/errors.txt" || true
            echo "[INFO] remote snapshot written to ${OUTDIR}" || true

      # 2) Pobierz co się da (ale nie przerywaj, jeśli serwer nic nie dał)
      - name: Collect raw logs (best effort)
        run: |
          set -euo pipefail
          mkdir -p "${OUTDIR}"
          if [ -n "${{ secrets.DEPLOY_HOST }}" ]; then
            sshpass -p "${{ secrets.DEPLOY_PASS }}" scp -P "${{ secrets.DEPLOY_PORT }}" -o StrictHostKeyChecking=no -r \
              "${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}:${HOME}/domains/weektoppick.com/public_html/.wtp/state/ci_logs/snapshot" \
              "${OUTDIR%/}/" || echo "[WARN] no remote snapshot pulled"
          else
            echo "[WARN] SSH not configured, skipping pull"
          fi
          ls -la "${OUTDIR}" || true
          ls -la "${OUTDIR}/snapshot" || true

      # 3) Zbuduj snapshot.json LUB minimalny fallback jeśli brak danych
      - name: Assemble snapshot.json (fail-open)
        run: |
          set -euo pipefail
          RAW="${OUTDIR}/snapshot"
          mkdir -p "${RAW}"

          # jeśli nie ma plików z serwera – utwórz puste
          [ -f "${RAW}/plugins.json" ]    || echo '[]' > "${RAW}/plugins.json"
          [ -f "${RAW}/themes.json" ]     || echo '[]' > "${RAW}/themes.json"
          [ -f "${RAW}/mu_plugins.json" ] || echo '[]' > "${RAW}/mu_plugins.json"
          [ -f "${RAW}/admins.json" ]     || echo '[]' > "${RAW}/admins.json"
          [ -f "${RAW}/home.txt" ]        || echo ''   > "${RAW}/home.txt"
          [ -f "${RAW}/siteurl.txt" ]     || echo ''   > "${RAW}/siteurl.txt"
          [ -f "${RAW}/wp_version.txt" ]  || echo 'unknown' > "${RAW}/wp_version.txt"
          [ -f "${RAW}/php_version.txt" ] || echo 'unknown' > "${RAW}/php_version.txt"
          [ -f "${RAW}/hostname.txt" ]    || echo 'unknown' > "${RAW}/hostname.txt"
          [ -f "${RAW}/ts_utc.txt" ]      || date -u +%FT%TZ > "${RAW}/ts_utc.txt"
          [ -f "${RAW}/active_theme.txt" ]|| echo '' > "${RAW}/active_theme.txt"
          [ -f "${RAW}/errors.txt" ]      || : > "${RAW}/errors.txt"

          SNAP="${RAW}/snapshot.json"
          jq -n \
            --arg run_id   "${RUN_ID}" \
            --arg run_ts   "$(date -u +%FT%TZ)" \
            --rawfile home      "${RAW}/home.txt" \
            --rawfile siteurl   "${RAW}/siteurl.txt" \
            --rawfile wpv       "${RAW}/wp_version.txt" \
            --rawfile phpv      "${RAW}/php_version.txt" \
            --rawfile host      "${RAW}/hostname.txt" \
            --rawfile ts_utc    "${RAW}/ts_utc.txt" \
            --rawfile active    "${RAW}/active_theme.txt" \
            --slurpfile plugins "${RAW}/plugins.json" \
            --slurpfile themes  "${RAW}/themes.json" \
            --slurpfile mupl    "${RAW}/mu_plugins.json" \
            --slurpfile admins  "${RAW}/admins.json" \
            --rawfile   errs    "${RAW}/errors.txt" '
            def trimnl: sub("[\r\n]+$";"");
            {
              run_id: $run_id,
              run_ts: $run_ts,
              site: {
                home: ($home|trimnl),
                siteurl: ($siteurl|trimnl),
                wp_version: ($wpv|trimnl),
                php_version: ($phpv|trimnl),
                hostname: ($host|trimnl),
                timestamp_utc: ($ts_utc|trimnl)
              },
              plugins: ($plugins[0] // []),
              themes:  ($themes[0]  // []),
              mu_plugins: ($mupl[0] // []),
              admins:  ($admins[0]  // []),
              active_theme: { active: ($active|trimnl) },
              errors: ( ($errs | split("\n")) | map(select(length>0)) )
            }' > "${SNAP}"

          echo "::notice::Built snapshot.json"
          jq '.run_id,.site.wp_version,.site.php_version,.active_theme' "${SNAP}" || true

      - name: Generate ARCHITECTURE.md
        run: |
          set -euo pipefail
          RAW="${OUTDIR}/snapshot"
          SNAP="${RAW}/snapshot.json"
          OUT="${RAW}/ARCHITECTURE.md"

          SITE_HOME=$(jq -r '.site.home // ""' "${SNAP}")
          SITE_WP=$(jq -r '.site.wp_version // "unknown"' "${SNAP}")
          SITE_PHP=$(jq -r '.site.php_version // "unknown"' "${SNAP}")
          ACTIVE_THEME=$(jq -r '.active_theme.active // ""' "${SNAP}")
          PL_COUNT=$(jq -r '.plugins | length' "${SNAP}")
          MU_COUNT=$(jq -r '.mu_plugins | length' "${SNAP}")
          ADM_COUNT=$(jq -r '.admins | length' "${SNAP}")
          RUN_TS=$(jq -r '.run_ts' "${SNAP}")

          {
            echo "# Snapshot Architecture"
            echo "- Run ID: ${RUN_ID}"
            echo "- Run TS (UTC): ${RUN_TS}"
            echo "- Home URL: ${SITE_HOME}"
            echo "- WordPress: ${SITE_WP}"
            echo "- PHP: ${SITE_PHP}"
            echo "- Active theme: ${ACTIVE_THEME}"
            echo "- Plugins: ${PL_COUNT} (MU: ${MU_COUNT})"
            echo "- Admins: ${ADM_COUNT}"
          } > "${OUT}"

      - name: Upload artifact (raw)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: Publish to repo (ALWAYS, even if data is partial)
        run: |
          set -euo pipefail
          mkdir -p "${RO_DIR}" "${RO_LATEST}" "${SNAP_DIR}"
          cp -a "${OUTDIR}/snapshot/." "${RO_DIR}/"

          # aliasy/history
          cp -f "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-${RUN_ID}.json" || true
          cp -f "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-latest.json" || true

          # latest = fizyczna kopia
          rm -rf "${RO_LATEST}"
          mkdir -p "${RO_LATEST}"
          cp -a "${RO_DIR}/." "${RO_LATEST}/"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${RO_DIR}" "${RO_LATEST}" "${SNAP_DIR}"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "snapshot(fail-open): publish ${RUN_ID}"
            git push
          fi

      - name: Done
        run: echo "::notice::03_snapshot_failopen completed for run ${RUN_ID}"
