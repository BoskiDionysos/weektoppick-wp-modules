name: WP deploy + WP-CLI

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  deploy_and_wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass jq

      - name: Verify secrets & lists
        run: |
          set -euo pipefail
          test -n "${HOST:-}" && test -n "${PORT:-}" && test -n "${USER:-}" && test -n "${PASS:-}" && test -n "${TARGET:-}" \
            || { echo "::error::Missing deploy secrets"; exit 1; }
          # listy mogą nie istnieć, ale pokażemy stan
          if [ -f ".wtp/protected-plugins.txt" ]; then echo "protected list present"; else echo "::warning::no .wtp/protected-plugins.txt"; fi
          if [ -f ".wtp/allowed-plugins.txt" ]; then echo "allowed list present"; else echo "::warning::no .wtp/allowed-plugins.txt"; fi

      - name: Build rsync exclude (from .wtp/protected-plugins.txt)
        id: excl
        shell: bash
        run: |
          set -euo pipefail
          EX=".wtp/rsync-exclude.txt"
          : > "$EX"
          if [ -f ".wtp/protected-plugins.txt" ]; then
            # normalizacja: usuń BOM/CR, komentarze, puste
            sed -e 's/\r$//' .wtp/protected-plugins.txt | sed 's/^\xEF\xBB\xBF//' \
              | while IFS= read -r raw; do
                  line="${raw%%#*}"; line="$(echo "$line" | xargs)"
                  [ -z "$line" ] && continue
                  echo "wp-content/plugins/${line}/***" >> "$EX"
                done
          fi
          echo "---- RSYNC EXCLUDE ----"
          if [ -s "$EX" ]; then cat "$EX"; else echo "(empty)"; fi
          echo "-----------------------"
          echo "file=$EX" >> "$GITHUB_OUTPUT"

      - name: Deploy code (MU/plugins/themes)
        shell: bash
        run: |
          set -euo pipefail
          SRC="."
          echo "Deploy -> $USER@$HOST:$TARGET"
          if [ -s "${{ steps.excl.outputs.file }}" ]; then
            RSYNC_EX="--exclude-from='${{ steps.excl.outputs.file }}'"
          else
            RSYNC_EX=""
          fi
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            $RSYNC_EX \
            -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$SRC/" "$USER@$HOST:$TARGET/"

      - name: Upload allowlist to remote (if present)
        if: ${{ hashFiles('.wtp/allowed-plugins.txt') != '' }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: Remote WP-CLI install/update allowed plugins (+ theme fallback)
        env:
          WP_ALLOW_ROOT: true
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" /bin/bash <<'EOF'
            set -euo pipefail
            cd "$TARGET"

            mkdir -p .wtp/state/ci_logs .wtp-vendor

            # Install wp-cli locally if missing
            if ! [ -x ./wp ]; then
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null
              chmod +x wp.phar && mv wp.phar wp
            fi

            export WP_ALLOW_ROOT=1
            WP="php ./wp --skip-plugins"

            # Prepare logs
            LOG_DIR=".wtp/state/ci_logs"
            : > "$LOG_DIR/plugins_installed.txt"
            : > "$LOG_DIR/plugins_updated.txt"
            : > "$LOG_DIR/plugins_existing.txt"
            : > "$LOG_DIR/wpcli_summary.txt"

            if [ ! -f ".wtp-allowed-plugins.txt" ]; then
              echo "no .wtp-allowed-plugins.txt – skipping installs" | tee -a "$LOG_DIR/wpcli_summary.txt"
            else
              TMP=".wtp-allowed-plugins.norm"
              sed -e 's/\r$//' .wtp-allowed-plugins.txt | sed 's/^\xEF\xBB\xBF//' > "$TMP"

              while IFS= read -r raw; do
                line="\$(echo "\$raw" | sed 's/#.*$//' | xargs)"
                [ -z "\$line" ] && continue

                # local/premium zip: prefix zip:/path/file.zip (optional)
                if [[ "\$line" =~ ^zip:(.+)$ ]]; then
                  src="\${BASH_REMATCH[1]}"
                  [ -f "\$src" ] || src=".wtp-vendor/\$(basename "\$src")"
                  if [ ! -f "\$src" ]; then
                    echo "::warning::ZIP not found: \$src" | tee -a "$LOG_DIR/wpcli_summary.txt"
                    continue
                  fi
                  echo ">> install \$src"
                  if \$WP plugin is-installed "\$src" 2>/dev/null; then
                    \$WP plugin install "\$src" --force --activate && echo "\$src" >> "$LOG_DIR/plugins_updated.txt"
                  else
                    \$WP plugin install "\$src" --activate && echo "\$src" >> "$LOG_DIR/plugins_installed.txt"
                  fi
                  continue
                fi

                # slug[@version]
                slug="\${line%@*}"
                ver="\${line#*@}"; [ "\$slug" = "\$ver" ] && ver=""

                if \$WP plugin is-installed "\$slug" >/dev/null 2>&1; then
                  if [ -n "\$ver" ]; then
                    \$WP plugin update "\$slug" --version="\$ver" --activate && echo "\$slug@\${ver} (updated)" >> "$LOG_DIR/plugins_updated.txt"
                  else
                    \$WP plugin update "\$slug" --activate && echo "\$slug (updated)" >> "$LOG_DIR/plugins_updated.txt"
                  fi
                else
                  if [ -n "\$ver" ]; then
                    \$WP plugin install "\$slug" --version="\$ver" --activate && echo "\$slug@\${ver} (installed)" >> "$LOG_DIR/plugins_installed.txt"
                  else
                    \$WP plugin install "\$slug" --activate && echo "\$slug (installed)" >> "$LOG_DIR/plugins_installed.txt"
                  fi
                fi
                \$WP plugin is-installed "\$slug" && echo "\$slug" >> "$LOG_DIR/plugins_existing.txt"
              done < "\$TMP"
            fi

            echo "=== ACTIVE after run ==="        >> "$LOG_DIR/wpcli_summary.txt"
            \$WP plugin list --status=active >> "$LOG_DIR/wpcli_summary.txt" || true

            # Theme fallback (if your theme missing)
            if ! \$WP theme is-installed wtp-core-theme >/dev/null 2>&1; then
              \$WP theme install twentytwentyfive --activate || true
            fi
          EOF

      - name: Fetch remote logs as artifact
        run: |
          set -euo pipefail
          mkdir -p _ci_logs
          sshpass -p "$PASS" rsync -az -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/" "_ci_logs/"

      - name: Upload logs artifact
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs
          path: _ci_logs/
