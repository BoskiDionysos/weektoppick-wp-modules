name: AI Upsert File

on:
  repository_dispatch:
    types: [ai-upsert-file]
  workflow_dispatch:
    inputs:
      path:
        description: 'Target path in repo (e.g., mu-plugins/00-mu-safe-loader.php)'
        required: true
        type: string
      content_b64:
        description: 'File content (Base64). Leave empty if you use content_plain.'
        required: false
        type: string
      content_plain:
        description: 'File content (plain text). Will be Base64-encoded in the job.'
        required: false
        type: string
      message:
        description: 'Commit message'
        required: true
        type: string
      branch:
        description: 'Target branch'
        required: false
        default: 'main'
        type: string
      sha256:
        description: 'Optional SHA-256 of decoded content for verification'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: ai-upsert-file
  cancel-in-progress: true

jobs:
  upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.WTP_GITHUB_PAT || github.token }}
    steps:
      - name: Resolve inputs / payload
        id: inp
        shell: bash
        run: |
          set -euo pipefail

          # Read from repository_dispatch (client_payload) OR workflow_dispatch (inputs)
          if [[ "${GITHUB_EVENT_NAME}" == "repository_dispatch" ]]; then
            PATH_IN="$(jq -r '.client_payload.path // empty' "$GITHUB_EVENT_PATH")"
            CONTENT_B64="$(jq -r '.client_payload.content_b64 // empty' "$GITHUB_EVENT_PATH")"
            CONTENT_PLAIN="$(jq -r '.client_payload.content_plain // empty' "$GITHUB_EVENT_PATH")"
            MESSAGE="$(jq -r '.client_payload.message // empty' "$GITHUB_EVENT_PATH")"
            BRANCH="$(jq -r '.client_payload.branch // "main"' "$GITHUB_EVENT_PATH")"
            SHA256_OPT="$(jq -r '.client_payload.sha256 // empty' "$GITHUB_EVENT_PATH")"
          else
            PATH_IN="${{ inputs.path }}"
            CONTENT_B64="${{ inputs.content_b64 }}"
            CONTENT_PLAIN="${{ inputs.content_plain }}"
            MESSAGE="${{ inputs.message }}"
            BRANCH="${{ inputs.branch }}"
            SHA256_OPT="${{ inputs.sha256 }}"
          fi

          # Ensure path/message provided
          [[ -n "${PATH_IN}" && -n "${MESSAGE}" ]] || { echo "::error::Missing required 'path' or 'message'"; exit 1; }

          # If only plain provided, encode to Base64 (no line wraps)
          if [[ -z "${CONTENT_B64}" && -n "${CONTENT_PLAIN}" ]]; then
            CONTENT_B64="$(python3 - <<'PY'
import base64, sys, json, os
data = os.environ["CONTENT_PLAIN"].encode("utf-8")
print(base64.b64encode(data).decode("ascii"))
PY
)"
          fi

          # Final content presence check
          [[ -n "${CONTENT_B64}" ]] || { echo "::error::Provide content_b64 or content_plain"; exit 1; }

          # Optional SHA-256 verification against decoded content
          if [[ -n "${SHA256_OPT}" ]]; then
            GOT="$(python3 - <<'PY'
import base64, hashlib, os
b64 = os.environ["CONTENT_B64"]
raw = base64.b64decode(b64.encode("ascii"), validate=True)
print(hashlib.sha256(raw).hexdigest())
PY
)"
            echo "expected=${SHA256_OPT}"
            echo "calculated=${GOT}"
            [[ "${SHA256_OPT}" == "${GOT}" ]] || { echo "::error::SHA-256 mismatch"; exit 1; }
          fi

          {
            echo "path=${PATH_IN}"
            echo "branch=${BRANCH}"
            echo "message<<EOF"
            echo "${MESSAGE}"
            echo "EOF"
            echo "content_b64<<EOF"
            echo "${CONTENT_B64}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Get current file SHA (if exists)
        id: cur
        shell: bash
        run: |
          set -euo pipefail
          PATH_ENC="$(python3 - <<'PY'
import urllib.parse, os
print(urllib.parse.quote(os.environ["PATH_IN"], safe=""))
PY
)"
          BRANCH="${{ steps.inp.outputs.branch }}"
          API="https://api.github.com/repos/${GH_REPO}/contents/${PATH_ENC}?ref=${BRANCH}"
          echo "GET $API"
          set +e
          RESP="$(curl -fsS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$API")"
          CODE=$?
          set -e
          if [[ $CODE -eq 0 ]]; then
            SHA="$(python3 - <<'PY'
import json,sys,os
j=json.loads(os.environ["RESP"])
print(j.get("sha",""))
PY
)"
            echo "sha=${SHA}" >> "$GITHUB_OUTPUT"
          else
            echo "sha=" >> "$GITHUB_OUTPUT"
          fi

      - name: Create/Update file (PUT)
        shell: bash
        run: |
          set -euo pipefail

          # Build request body in Python to avoid jq dependence/quoting issues
          BODY="$(python3 - <<'PY'
import json, os
payload = {
  "message": os.environ["MSG"],
  "content": os.environ["B64"],
  "branch":  os.environ["BR"],
}
sha = os.environ.get("CUR_SHA","")
if sha:
    payload["sha"] = sha
print(json.dumps(payload, separators=(",",":")))
PY
)"
          PATH_ENC="$(python3 - <<'PY'
import urllib.parse, os
print(urllib.parse.quote(os.environ["PATH_IN"], safe=""))
PY
)"
          API="https://api.github.com/repos/${GH_REPO}/contents/${PATH_ENC}"
          echo "PUT $API"
          RESP="$(curl -fsS -X PUT "$API" \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "$BODY")"
          echo "$RESP" | python3 - <<'PY'
# Fail fast if response doesn't contain content or commit
import json, sys, os
r=json.loads(sys.stdin.read())
ok = ("content" in r) or ("commit" in r)
print(json.dumps({"ok":ok, "path": r.get("content",{}).get("path",""), "commit":(r.get("commit",{}) or {}).get("sha","")}, indent=2))
sys.exit(0 if ok else 1)
PY
        env:
          PATH_IN: ${{ steps.inp.outputs.path }}
          BR:      ${{ steps.inp.outputs.branch }}
          MSG:     ${{ steps.inp.outputs.message }}
          B64:     ${{ steps.inp.outputs.content_b64 }}
          CUR_SHA: ${{ steps.cur.outputs.sha }}

      - name: Summary
        run: |
          echo "âœ… Upserted: ${{ steps.inp.outputs.path }} on branch ${{ steps.inp.outputs.branch }}"
