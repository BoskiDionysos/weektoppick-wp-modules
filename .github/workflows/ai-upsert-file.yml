name: AI Upsert File

on:
  repository_dispatch:
    types: [ai-upsert-file]
  workflow_dispatch:
    inputs:
      path:
        description: "Target path in repo (e.g., mu-plugins/00-mu-safe-loader.php)"
        required: true
        type: string
      content_b64:
        description: "File content in base64"
        required: true
        type: string
      message:
        description: "Commit message"
        required: true
        type: string
      branch:
        description: "Target branch"
        required: false
        default: "main"
        type: string
      sha256:
        description: "Optional SHA-256 of decoded content for verification"
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: ai-upsert-file
  cancel-in-progress: true

jobs:
  upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.WTP_GITHUB_PAT || github.token }}

    steps:
      - name: Install jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Gather inputs/payload
        id: inp
        shell: bash
        run: |
          set -euo pipefail
          if [[ "$GITHUB_EVENT_NAME" == "repository_dispatch" ]]; then
            PATH_IN=$(jq -r '.client_payload.path // empty' "$GITHUB_EVENT_PATH")
            CONTENT_B64=$(jq -r '.client_payload.content_b64 // empty' "$GITHUB_EVENT_PATH")
            MESSAGE=$(jq -r '.client_payload.message // "upsert via workflow"' "$GITHUB_EVENT_PATH")
            BRANCH=$(jq -r '.client_payload.branch // "main"' "$GITHUB_EVENT_PATH")
            SHA256=$(jq -r '.client_payload.sha256 // empty' "$GITHUB_EVENT_PATH")
          else
            PATH_IN="${{ inputs.path }}"
            CONTENT_B64="${{ inputs.content_b64 }}"
            MESSAGE="${{ inputs.message }}"
            BRANCH="${{ inputs.branch }}"
            SHA256="${{ inputs.sha256 }}"
            [[ -z "${BRANCH:-}" ]] && BRANCH="main"
          fi

          if [[ -z "${PATH_IN}" || -z "${CONTENT_B64}" ]]; then
            echo "::error::Missing required path/content_b64."
            exit 1
          fi

          {
            echo "path=${PATH_IN}"
            echo "branch=${BRANCH}"
            echo "sha256=${SHA256}"
            echo "message<<EOF"
            echo "${MESSAGE}"
            echo "EOF"
            echo "content_b64<<EOF"
            echo "${CONTENT_B64}"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Verify SHA-256 (optional)
        if: ${{ steps.inp.outputs.sha256 != '' }}
        shell: bash
        run: |
          set -euo pipefail
          WANT='${{ steps.inp.outputs.sha256 }}'
          CALC=$(python3 - <<'PY' <<< '${{ steps.inp.outputs.content_b64 }}')
import base64, sys, hashlib
b64 = sys.stdin.read()
# toleruj spacje/nowe linie; validate=False nie przerwie na whitespace
data = base64.b64decode(b64.encode(), validate=False)
print(hashlib.sha256(data).hexdigest())
PY
          echo "expected=$WANT"
          echo "calculated=$CALC"
          if [[ "$WANT" != "$CALC" ]]; then
            echo "::error::SHA-256 mismatch."
            exit 1
          fi

      - name: Read current file sha (if any)
        id: cur
        shell: bash
        run: |
          set -euo pipefail
          URL="https://api.github.com/repos/${REPO}/contents/${{ steps.inp.outputs.path }}?ref=${{ steps.inp.outputs.branch }}"
          echo "GET $URL"
          RESP=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$URL" || true)
          SHA=$(jq -r '.sha // empty' <<<"$RESP")
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: PUT (create/update) file
        shell: bash
        run: |
          set -euo pipefail
          URL="https://api.github.com/repos/${REPO}/contents/${{ steps.inp.outputs.path }}"
          SHA='${{ steps.cur.outputs.sha }}'
          if [[ -n "$SHA" ]]; then
            BODY=$(jq -n --arg message '${{ steps.inp.outputs.message }}' \
                        --arg content '${{ steps.inp.outputs.content_b64 }}' \
                        --arg branch  '${{ steps.inp.outputs.branch }}' \
                        --arg sha     "$SHA" \
                        '{message:$message, content:$content, branch:$branch, sha:$sha}')
          else
            BODY=$(jq -n --arg message '${{ steps.inp.outputs.message }}' \
                        --arg content '${{ steps.inp.outputs.content_b64 }}' \
                        --arg branch  '${{ steps.inp.outputs.branch }}' \
                        '{message:$message, content:$content, branch:$branch}')
          fi

          echo "PUT $URL"
          RESP=$(curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "$BODY" \
            "$URL")
          echo "$RESP" | jq .
          jq -e '.content.path or .commit.sha' <<<"$RESP" >/dev/null

      - name: Summary
        run: |
          echo "Upserted: ${{ steps.inp.outputs.path }} on branch ${{ steps.inp.outputs.branch }}"
