name: Deploy Site (MU, plugins, themes, wp-config)

on:
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/themes/**'
      - '.wtp/wp-config.tpl.php'
      - '.github/workflows/deploy-site.yml'
      - 'wtp/**'
      - '.wtp/**'
  workflow_dispatch: {}

concurrency:
  group: deploy-site-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      ALLOW_WPCONFIG_DEPLOY: ${{ secrets.ALLOW_WPCONFIG_DEPLOY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install tools
        shell: bash
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass jq

      - name: Sanity check secrets
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            test -n "$(printenv $v)" || { echo "::error::Missing env $v (check repository secrets)"; exit 1; }
          done

      - name: Create target folders (first connect)
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "mkdir -p '$TARGET/wp-content/mu-plugins' \
                      '$TARGET/wp-content/plugins' \
                      '$TARGET/wp-content/themes' \
                      '$TARGET/.wtp-bot'"

      # ---------- PROTECTED PLUGINS FILTER ----------
      - name: Build rsync protect filter (plugins)
        id: protect
        shell: bash
        run: |
          set -euo pipefail
          SRC_A="wtp/protected-plugins.txt"
          SRC_B=".wtp/protected-plugins.txt"
          OUT="/tmp/rsync-protect.txt"

          if [ -f "$SRC_A" ]; then
            SRC="$SRC_A"
          elif [ -f "$SRC_B" ]; then
            SRC="$SRC_B"
          else
            SRC=""
          fi

          : > "$OUT"

          if [ -n "$SRC" ]; then
            echo "::notice::Using protected list: $SRC"
            # Czyść, usuń puste/komentarze i spacje, i generuj reguły "protect <nazwa>/"
            CLEAN=$(sed -e 's/#.*$//' -e 's/\r$//' "$SRC" | awk 'NF>0{print $0}')
            while IFS= read -r name; do
              # tylko nazwa katalogu (bez ukośników)
              n="$(echo "$name" | sed 's#^/*##; s#/*$##')"
              [ -z "$n" ] && continue
              echo "protect ${n}/" >> "$OUT"
            done <<< "$CLEAN"
          else
            echo "::notice::No protected-plugins list found; proceeding without protects."
          fi

          echo "::group::Protect filter content"
          cat "$OUT"
          echo "::endgroup::"

          echo "filter_file=$OUT" >> "$GITHUB_OUTPUT"

      # ---------- MU-PLUGINS ----------
      - name: Deploy MU plugins
        if: ${{ hashFiles('mu-plugins/**') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          rsync -avz --delete \
            -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
            mu-plugins/ "$USER@$HOST:$TARGET/wp-content/mu-plugins/"

      # ---------- PLUGINS (with protect filter) ----------
      - name: Deploy standard plugins (with protect)
        if: ${{ hashFiles('plugins/**') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          FILTER_ARG=()
          if [ -s "${{ steps.protect.outputs.filter_file }}" ]; then
            FILTER_ARG=( --filter="merge ${{ steps.protect.outputs.filter_file }}" )
            echo "::notice::Applying protect filter for plugins sync."
          fi
          rsync -avz --delete "${FILTER_ARG[@]}" \
            -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
            plugins/ "$USER@$HOST:$TARGET/wp-content/plugins/"

      # ---------- THEMES ----------
      - name: Deploy themes
        if: ${{ hashFiles('themes/**') != '' || hashFiles('wp-content/themes/**') != '' }}
        shell: bash
        run: |
          set -euo pipefail
          if [ -d "themes" ]; then SRC="themes/"; else SRC="wp-content/themes/"; fi
          rsync -avz --delete \
            -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$SRC" "$USER@$HOST:$TARGET/wp-content/themes/"

      # ---------- WP-CONFIG (optional) ----------
      - name: Generate & deploy wp-config.php (optional)
        if: ${{ env.ALLOW_WPCONFIG_DEPLOY == 'true' && hashFiles('.wtp/wp-config.tpl.php') != '' }}
        env:
          WTP_AGENT_TOKEN:  ${{ secrets.WTP_AGENT_TOKEN }}
          WTP_GH_SYNC_PAT:  ${{ secrets.WTP_GH_SYNC_PAT }}
          WTP_GH_SECRET:    ${{ secrets.WTP_GH_SECRET }}
          WTP_BRIDGE_KEY:   ${{ secrets.WTP_BRIDGE_KEY }}
          WTP_BRIDGE_HMAC:  ${{ secrets.WTP_BRIDGE_HMAC }}
          RUNNER_URL:       ${{ secrets.RUNNER_URL }}
        shell: bash
        run: |
          set -euo pipefail
          python3 - <<'PYCODE'
          import os, re, io
          tpl = io.open('.wtp/wp-config.tpl.php','r',encoding='utf-8').read()
          rendered = re.sub(r'\{\{(\w+)\}\}', lambda m: os.environ.get(m.group(1),''), tpl)
          io.open('wp-config.php','w',encoding='utf-8').write(rendered)
          PYCODE
          rsync -avz \
            -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
            wp-config.php "$USER@$HOST:$TARGET/wp-config.php"

      # ---------- MARKER ----------
      - name: Write deploy marker
        shell: bash
        run: |
          set -euo pipefail
          echo "deploy $(date -u +%FT%TZ)" > .deploy.txt
          rsync -avz -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
            .deploy.txt "$USER@$HOST:$TARGET/.wtp-bot/deploy.txt"
