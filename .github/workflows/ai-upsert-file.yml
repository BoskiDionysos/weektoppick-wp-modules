name: AI Upsert File

on:
  repository_dispatch:
    types: [ai-upsert-file]
  workflow_dispatch:
    inputs:
      path:
        description: 'Target path in repo (e.g., mu-plugins/00-mu-safe-loader.php)'
        required: true
        type: string
      content_b64:
        description: 'File content in base64'
        required: true
        type: string
      message:
        description: 'Commit message'
        required: true
        type: string
      branch:
        description: 'Target branch'
        required: false
        default: 'main'
        type: string
      sha256:
        description: 'Optional SHA-256 of decoded content for verification'
        required: false
        type: string

permissions:
  contents: write

concurrency:
  group: ai-upsert-file
  cancel-in-progress: true

jobs:
  upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.WTP_GITHUB_PAT || github.token }}

    steps:
      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Read inputs/payload
        id: inp
        shell: bash
        run: |
          set -euo pipefail
          EV="${GITHUB_EVENT_NAME}"
          if [[ "$EV" == "repository_dispatch" ]]; then
            PATH_IN=$(jq -r '.client_payload.path // empty' "$GITHUB_EVENT_PATH")
            CONTENT_B64=$(jq -r '.client_payload.content_b64 // empty' "$GITHUB_EVENT_PATH")
            MESSAGE=$(jq -r '.client_payload.message // "upsert via workflow"' "$GITHUB_EVENT_PATH")
            BRANCH=$(jq -r '.client_payload.branch // "main"' "$GITHUB_EVENT_PATH")
            SHA256=$(jq -r '.client_payload.sha256 // empty' "$GITHUB_EVENT_PATH")
          else
            PATH_IN="${{ inputs.path }}"
            CONTENT_B64="${{ inputs.content_b64 }}"
            MESSAGE="${{ inputs.message }}"
            BRANCH="${{ inputs.branch }}"
            SHA256="${{ inputs.sha256 }}"
          fi

          if [[ -z "${PATH_IN}" || -z "${CONTENT_B64}" ]]; then
            echo "::error::Missing required path/content_b64."
            exit 1
          fi

          printf '%s' "${CONTENT_B64}" > b64.txt

          {
            echo "path=${PATH_IN}"
            echo "branch=${BRANCH:-main}"
            echo "message=${MESSAGE}"
            echo "sha256=${SHA256}"
          } >> "$GITHUB_OUTPUT"

      - name: Verify SHA-256 (optional)
        if: ${{ steps.inp.outputs.sha256 != '' }}
        shell: bash
        run: |
          set -euo pipefail
          WANT="${{ steps.inp.outputs.sha256 }}"
          python3 - <<'PY'
import base64, hashlib, pathlib
b64 = pathlib.Path('b64.txt').read_bytes()
data = base64.b64decode(b64, validate=False)
pathlib.Path('decoded.bin').write_bytes(data)
pathlib.Path('sha.txt').write_text(hashlib.sha256(data).hexdigest())
PY
          GOT="$(cat sha.txt)"
          echo "expected=$WANT"
          echo "calculated=$GOT"
          if [[ "$WANT" != "$GOT" ]]; then
            echo "::error::SHA-256 mismatch."
            exit 1
          fi

      - name: Determine existing file SHA (if any)
        id: cur
        shell: bash
        run: |
          set -euo pipefail
          enc() { jq -nr --arg x "$1" '$x|@uri'; }
          URL="https://api.github.com/repos/${REPO}/contents/$(enc '${{ steps.inp.outputs.path }}')?ref=$(enc '${{ steps.inp.outputs.branch }}')"
          RESP="$(curl -fsS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$URL" || true)"
          SHA="$(jq -r '.sha // empty' <<<"$RESP")"
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: PUT (create/update) file
        id: put
        shell: bash
        run: |
          set -euo pipefail
          enc() { jq -nr --arg x "$1" '$x|@uri'; }
          URL="https://api.github.com/repos/${REPO}/contents/$(enc '${{ steps.inp.outputs.path }}')"

          if [[ -n "${{ steps.cur.outputs.sha }}" ]]; then
            BODY="$(jq -n \
              --arg message "${{ steps.inp.outputs.message }}" \
              --arg content "$(cat b64.txt)" \
              --arg branch  "${{ steps.inp.outputs.branch }}" \
              --arg sha     "${{ steps.cur.outputs.sha }}" \
              '{message:$message, content:$content, branch:$branch, sha:$sha}')"
          else
            BODY="$(jq -n \
              --arg message "${{ steps.inp.outputs.message }}" \
              --arg content "$(cat b64.txt)" \
              --arg branch  "${{ steps.inp.outputs.branch }}" \
              '{message:$message, content:$content, branch:$branch}')"
          fi

          RESP="$(curl -fsS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d "$BODY" \
            "$URL")"

          echo "$RESP" | jq -e '.content.path or .commit.sha' >/dev/null
          echo "$RESP" | jq -r '.content.path? // empty' | sed 's/^/::notice::content: /'
          echo "$RESP" | jq -r '.commit.sha?  // empty' | sed 's/^/::notice::commit:  /'
          printf '%s\n' "$RESP" > put.json

      - name: Summary
        run: |
          echo "Upserted: ${{ steps.inp.outputs.path }} on branch ${{ steps.inp.outputs.branch }}"
