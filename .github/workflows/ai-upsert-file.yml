name: AI Upsert File

on:
  workflow_dispatch:
    inputs:
      path:
        description: "Target path in repo (e.g., mu-plugins/00-mu-safe-loader.php)"
        required: true
        type: string
      content_b64:
        description: "File content in base64"
        required: true
        type: string
      message:
        description: "Commit message"
        required: true
        type: string
      branch:
        description: "Target branch"
        required: false
        default: "main"
        type: string
      sha256:
        description: "Optional SHA-256 of decoded content for verification"
        required: false
        type: string

permissions:
  contents: write

jobs:
  upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Prepare inputs
        id: prep
        run: |
          set -euo pipefail
          echo "REPO=${GITHUB_REPOSITORY}" >> "$GITHUB_OUTPUT"
          echo "PATH_IN=${{ inputs.path }}" >> "$GITHUB_OUTPUT"
          echo "BRANCH=${{ inputs.branch }}" >> "$GITHUB_OUTPUT"
          printf "%s" "${{ inputs.message }}" > msg.txt
          printf "%s" "${{ inputs.content_b64 }}" > content.b64

      - name: Verify SHA-256 (optional)
        if: ${{ inputs.sha256 != '' }}
        run: |
          set -euo pipefail
          CALC=$(python3 -c "import base64,hashlib,pathlib;b=pathlib.Path('content.b64').read_text();d=base64.b64decode(b.encode(), validate=False);print(hashlib.sha256(d).hexdigest())")
          echo "expected=${{ inputs.sha256 }}"
          echo "calculated=$CALC"
          [ "$CALC" = "${{ inputs.sha256 }}" ] || { echo '::error::SHA-256 mismatch'; exit 1; }

      - name: Read current file sha (if any)
        id: cur
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/contents/${{ inputs.path }}?ref=${{ inputs.branch }}"
          echo "GET $URL"
          RESP=$(curl -sS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$URL" || true)
          SHA=$(python3 -c "import sys,json; print(json.loads(sys.stdin.read() or '{}').get('sha',''))" <<<"$RESP")
          echo "sha=$SHA" >> "$GITHUB_OUTPUT"

      - name: Build body.json
        env:
          BRANCH: ${{ steps.prep.outputs.BRANCH }}
          SHA: ${{ steps.cur.outputs.sha }}
        run: |
          set -euo pipefail
          python3 -c "import os,json,pathlib; body={'message':pathlib.Path('msg.txt').read_text(),'content':pathlib.Path('content.b64').read_text(),'branch':os.environ.get('BRANCH') or 'main'}; sha=os.environ.get('SHA','').strip(); 
if sha: body['sha']=sha; pathlib.Path('body.json').write_text(json.dumps(body))"

      - name: PUT (create/update) file
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          set -euo pipefail
          URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/contents/${{ inputs.path }}"
          echo "PUT $URL"
          curl -sS -X PUT \
            -H "Authorization: Bearer ${GH_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -d @body.json \
            "$URL" | tee resp.json
          python3 -c "import json; j=json.load(open('resp.json')); print('path:', j.get('content',{}).get('path')); print('commit:', j.get('commit',{}).get('sha'))"
