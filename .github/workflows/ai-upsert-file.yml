name: AI Upsert File

on:
  workflow_dispatch:
    inputs:
      path:
        description: 'Target path in repo (np. mu-plugins/00-mu-safe-loader.php)'
        required: true
        type: string
      message:
        description: 'Commit message'
        required: true
        type: string
      content_plain:
        description: 'File content (PLAIN). Jeśli podasz – workflow sam zakoduje do Base64'
        required: false
        type: string
      content_b64:
        description: 'File content (Base64). Zostaw puste, jeśli używasz content_plain'
        required: false
        type: string
      branch:
        description: 'Target branch'
        required: false
        default: 'main'
        type: string

permissions:
  contents: write

concurrency:
  group: ai-upsert-file
  cancel-in-progress: true

jobs:
  upsert:
    runs-on: ubuntu-latest
    steps:
      - name: Upsert file via GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const path = core.getInput('path', { required: true });
            const message = core.getInput('message', { required: true });
            const branch = core.getInput('branch') || 'main';
            let content_b64 = core.getInput('content_b64') || '';
            const content_plain = core.getInput('content_plain') || '';

            if (!content_b64 && !content_plain) {
              core.setFailed('Provide either content_plain or content_b64.');
              return;
            }
            if (!content_b64) {
              content_b64 = Buffer.from(content_plain, 'utf8').toString('base64');
            }

            const { owner, repo } = context.repo;

            // spróbuj pobrać SHA (jeśli plik istnieje)
            let sha;
            try {
              const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
                owner, repo, path, ref: branch,
              });
              if (data && data.sha) sha = data.sha;
            } catch (e) {
              if (e.status !== 404) {
                core.setFailed(`getContent failed: ${e.message}`);
                return;
              }
              core.info('File does not exist yet (creating new).');
            }

            // PUT create/update
            const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
              owner, repo, path, message, branch, content: content_b64, sha
            });

            core.info(`OK: ${res.status}, commit: ${res.data.commit?.sha}`);
            await core.summary
              .addHeading('AI Upsert File')
              .addList([
                `path: ${path}`,
                `branch: ${branch}`,
                `commit: ${res.data.commit?.sha || ''}`
              ])
              .write();
