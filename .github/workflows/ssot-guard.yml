name: SSOT Guard

on:
  push:
    paths:
      - "ssot/state.json"
      - ".github/workflows/ssot-guard.yml"
  workflow_dispatch:

permissions:
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      # === SEKRETY WYMAGANE wg SSOT ===
      DEPLOY_HOST: ${{ secrets.DEPLOY_HOST }}
      DEPLOY_PORT: ${{ secrets.DEPLOY_PORT }}
      DEPLOY_USER: ${{ secrets.DEPLOY_USER }}
      DEPLOY_PASS: ${{ secrets.DEPLOY_PASS }}
      DEPLOY_TARGET: ${{ secrets.DEPLOY_TARGET }}

      # === SEKRETY OPCJONALNE (ale sprawdzamy, czy istnieją jeśli są używane) ===
      RUNNER_URL: ${{ secrets.RUNNER_URL }}
      WTP_AGENT_TOKEN: ${{ secrets.WTP_AGENT_TOKEN }}
      WTP_BRIDGE_HMAC: ${{ secrets.WTP_BRIDGE_HMAC }}
      WTP_BRIDGE_KEY:  ${{ secrets.WTP_BRIDGE_KEY }}
      WTP_GH_SECRET:   ${{ secrets.WTP_GH_SECRET }}
      WTP_GH_SYNC_PAT: ${{ secrets.WTP_GH_SYNC_PAT }}
      WTP_GITHUB_PAT:  ${{ secrets.WTP_GITHUB_PAT }}
      WTP_GSC_SITE:    ${{ secrets.WTP_GSC_SITE }}
      WTP_SITE_KEY:    ${{ secrets.WTP_SITE_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate SSOT file presence & JSON
        run: |
          set -euo pipefail
          test -f ssot/state.json || { echo "::error::Missing ssot/state.json"; exit 1; }
          jq . ssot/state.json >/dev/null 2>&1 || { echo "::error::Invalid JSON in ssot/state.json"; exit 1; }
          echo "SSOT OK"

      - name: Check required secrets (must be non-empty)
        run: |
          set -euo pipefail
          missing=0
          req=( DEPLOY_HOST DEPLOY_PORT DEPLOY_USER DEPLOY_PASS DEPLOY_TARGET )
          for key in "${req[@]}"; do
            val="${!key:-}"
            if [ -z "$val" ]; then
              echo "::error::Missing required secret: $key"
              missing=1
            else
              echo "::notice::$key present"
            fi
          done
          if [ "$missing" -ne 0 ]; then
            exit 1
          fi

      - name: Report optional secrets presence
        run: |
          opt=( RUNNER_URL WTP_AGENT_TOKEN WTP_BRIDGE_HMAC WTP_BRIDGE_KEY WTP_GH_SECRET WTP_GH_SYNC_PAT WTP_GITHUB_PAT WTP_GSC_SITE WTP_SITE_KEY )
          for key in "${opt[@]}"; do
            val="${!key:-}"
            if [ -z "$val" ]; then
              echo "::warning::Optional secret not set: $key"
            else
              echo "::notice::$key present"
            fi
          done
