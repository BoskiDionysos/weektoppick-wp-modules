name: WTP Snapshot Sync

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Vars
        id: v
        run: |
          echo "SITE_KEY=5Depft8Y9LU0t6Sv" >> $GITHUB_OUTPUT
          echo "BASE=https://weektoppick.com/wp-json/wtp-ro-open/v1" >> $GITHUB_OUTPUT
          echo "OUT=snapshots/5Depft8Y9LU0t6Sv" >> $GITHUB_OUTPUT

      - name: Create output dir (idempotent)
        run: |
          mkdir -p "${{ steps.v.outputs.OUT }}/logs"

      - name: Probe LS (dir + urls)
        id: ls
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ steps.v.outputs.BASE }}/ls?site_key=${{ steps.v.outputs.SITE_KEY }}"
          echo "GET $URL"
          RESP=$(curl -fsSL --retry 3 --retry-delay 2 "$URL")
          echo "$RESP" > "${{ steps.v.outputs.OUT }}/ls.json"
          # wyciągnij public_url jeżeli jest
          PUB=$(echo "$RESP" | jq -r '.urls.public_url // empty')
          echo "public_url=$PUB" >> $GITHUB_OUTPUT

      - name: Try manifest.json (primary)
        id: manifest_try
        continue-on-error: true
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ steps.v.outputs.BASE }}/get?site_key=${{ steps.v.outputs.SITE_KEY }}&file=manifest.json"
          echo "GET $URL"
          curl -fsSL --retry 3 --retry-delay 2 "$URL" \
            -o "${{ steps.v.outputs.OUT }}/manifest.json"
          jq -e 'type=="object"' "${{ steps.v.outputs.OUT }}/manifest.json" >/dev/null
          echo "ok=true" >> $GITHUB_OUTPUT

      - name: Fallback to index.json (list files_*), if manifest missing
        if: steps.manifest_try.outcomes.failure
        shell: bash
        run: |
          set -euo pipefail
          URL="${{ steps.v.outputs.BASE }}/get?site_key=${{ steps.v.outputs.SITE_KEY }}&file=index.json"
          echo "GET $URL"
          curl -fsSL --retry 3 --retry-delay 2 "$URL" \
            -o "${{ steps.v.outputs.OUT }}/index.json"
          jq -e '.files | type=="array"' "${{ steps.v.outputs.OUT }}/index.json" >/dev/null

      - name: Download file lists (handles both manifest or index)
        shell: bash
        run: |
          set -euo pipefail
          BASE="${{ steps.v.outputs.BASE }}"
          SK="${{ steps.v.outputs.SITE_KEY }}"
          OUT="${{ steps.v.outputs.OUT }}"

          if [ -f "$OUT/manifest.json" ] && jq -e 'has("files")' "$OUT/manifest.json" >/dev/null 2>&1; then
            FILES=$(jq -r '.files[]' "$OUT/manifest.json")
          else
            FILES=$(jq -r '.files[]' "$OUT/index.json")
          fi

          for F in $FILES; do
            echo "Downloading $F"
            curl -fsSL --retry 3 --retry-delay 2 \
              "$BASE/get?site_key=$SK&file=$F" -o "$OUT/$F"
          done

          # logi (jeśli są)
          for L in wp-debug-latest.txt php_errors-latest.txt; do
            curl -fsS --retry 2 --retry-delay 2 \
              "$BASE/get?site_key=$SK&file=$L" -o "$OUT/logs/$L" || echo "no $L (ok)"
          done
