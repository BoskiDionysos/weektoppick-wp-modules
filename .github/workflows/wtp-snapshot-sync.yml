name: WTP Snapshot Sync (resilient)

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (uploads/wtp-ro/public/<key>)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools (jq, curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Set vars
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SITE_KEY="${{ github.event.inputs.site_key }}"
          REST_BASE="${{ github.event.inputs.rest_base }}"
          [ -z "${SITE_KEY:-}" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
          [ -z "${REST_BASE:-}" ] && REST_BASE="https://weektoppick.com/wp-json/wtp-ro-open/v1"
          OUT_DIR="snapshots/${SITE_KEY}"
          echo "SITE_KEY=${SITE_KEY}"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=${REST_BASE}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=${OUT_DIR}"     >> "$GITHUB_OUTPUT"

      - name: Prepare output dirs (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "${{ steps.vars.outputs.OUT_DIR }}" || true
          mkdir -p "${{ steps.vars.outputs.OUT_DIR }}/logs" || true

      - name: Set curl flags (browser-like)
        id: dl
        shell: bash
        run: |
          FLAGS='-fL --retry 5 --retry-delay 2 --connect-timeout 20 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64)" -H "Accept: application/json,text/plain,*/*"'
          echo "CURL_FLAGS=${FLAGS}" >> "$GITHUB_OUTPUT"

      - name: Fetch /ls and save list
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.vars.outputs.OUT_DIR }}"
          BASE="${{ steps.vars.outputs.REST_BASE }}"
          KEY="${{ steps.vars.outputs.SITE_KEY }}"
          URL="${BASE}/ls?site_key=${KEY}"
          echo "GET ${URL}"
          RESP="$(curl ${{ steps.dl.outputs.CURL_FLAGS }} "$URL")"
          echo "$RESP" | jq '.' > "${OUT}/ls.json"
          # Wyciągnij listę plików, pomiń katalog 'logs'
          echo "$RESP" | jq -r '(.list.dirA // .list.dirB // []) | map(select(. != "logs")) | .[]' > "${OUT}/files.list"
          if ! [ -s "${OUT}/files.list" ]; then
            echo "::error::Brak plików do pobrania (lista pusta)"; exit 1
          fi

      - name: Download files via /get
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.vars.outputs.OUT_DIR }}"
          BASE="${{ steps.vars.outputs.REST_BASE }}"
          KEY="${{ steps.vars.outputs.SITE_KEY }}"
          while IFS= read -r fname; do
            [ -z "$fname" ] && continue
            # przygotuj podkatalog jeśli potrzeba
            subdir="$(dirname "$fname")"
            if [ "$subdir" != "." ]; then
              mkdir -p "${OUT}/${subdir}" || true
            fi
            URL="${BASE}/get?site_key=${KEY}&file=${fname}&_b=$(date +%s)"
            echo "GET ${URL}"
            curl ${{ steps.dl.outputs.CURL_FLAGS }} "$URL" -o "${OUT}/${fname}"
          done < "${OUT}/files.list"

      - name: Stamp runner metadata (idempotent)
        shell: bash
        run: |
          set -euo pipefail
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner || true
          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s synchronized via REST /ls+get"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_response.json
          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (REST)"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_logs.json
          if [ -f runner/runner_health.json ]; then
            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
            mv runner/_tmp.json runner/runner_health.json
          else
            printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","disk_free_mb":0,"last_snapshot_at":"%s"}\n' \
              "$NOW" \
              > runner/runner_health.json
          fi

      - name: Commit & push (only if changed)
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "wtp-snapshot-bot"
          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
          git add snapshots runner/*.json || true
          if ! git diff --cached --quiet; then
            git commit -m "mirror: sync ${{ steps.vars.outputs.SITE_KEY }} via REST list"
            git push
          else
            echo "No changes to commit."
          fi
