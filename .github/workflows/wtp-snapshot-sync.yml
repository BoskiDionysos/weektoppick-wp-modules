name: WTP Snapshot Sync

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (folder w uploads/wtp-ro/public)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools (jq, curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Set vars
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SITE_KEY="${{ github.event.inputs.site_key || '5Depft8Y9LU0t6Sv' }}"
          REST_BASE="${{ github.event.inputs.rest_base || 'https://weektoppick.com/wp-json/wtp-ro-open/v1' }}"
          OUT_DIR="snapshots/${SITE_KEY}"
          LOG_DIR="${OUT_DIR}/logs"
          echo "SITE_KEY=${SITE_KEY}"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=${REST_BASE}" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=${OUT_DIR}"     >> "$GITHUB_OUTPUT"
          echo "LOG_DIR=${LOG_DIR}"     >> "$GITHUB_OUTPUT"

      - name: Prepare dirs
        run: |
          mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"
          mkdir -p "${{ steps.vars.outputs.LOG_DIR }}"

      - name: Curl flags
        id: dl
        shell: bash
        run: |
          FLAGS='-fL --retry 5 --retry-delay 2 --connect-timeout 15 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36" -H "Accept: application/json,text/plain,*/*"'
          echo "CURL_FLAGS=$FLAGS" >> "$GITHUB_OUTPUT"

      - name: Fetch file list via /ls
        id: ls
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.vars.outputs.REST_BASE }}/ls?site_key=${{ steps.vars.outputs.SITE_KEY }}"
          echo "GET $url"
          resp="$(curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url")"
          echo "$resp" | jq '.' > "${{ steps.vars.outputs.OUT_DIR }}/ls.json"

          # Zbierz listę plików z obu koszy (dirA/dirB), usuń duplikaty
          FILES=$(echo "$resp" | jq -r '((.list.dirA // []) + (.list.dirB // [])) | unique | .[]')
          {
            echo "FILES<<EOF"
            echo "$FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download all files via /get (robust)
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r fname; do
            [ -z "$fname" ] && continue
            url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=${fname}&_b=$(date +%s)"
            dest="${{ steps.vars.outputs.OUT_DIR }}/${fname}"
            echo "GET $url"
            # Upewnij się, że katalog docelowy istnieje (na wypadek podkatalogów)
            mkdir -p "$(dirname "$dest")"
            if curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url" -o "$dest"; then
              echo "✓ saved $fname"
            else
              echo "::warning::skip ${fname} (HTTP error)"
            fi
          done << 'EOF'
          ${{ steps.ls.outputs.FILES }}
          EOF

      - name: Extract logs from downloaded set (if present)
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.vars.outputs.OUT_DIR }}"
          DST="${{ steps.vars.outputs.LOG_DIR }}"
          mkdir -p "$DST"

          # Kandydaci na logi/metadane
          for f in "wp-debug-latest.txt" "php_errors-latest.txt" "wp-debug-meta.json"; do
            if [ -f "${SRC}/${f}" ]; then
              cp -f "${SRC}/${f}" "${DST}/"
            fi
          done

          # Dodatkowo — jeśli logi są podkatalogiem "logs/" w snapshot
          if [ -d "${SRC}/logs" ]; then
            cp -rf "${SRC}/logs/." "${DST}/" || true
          fi

          echo "Log files in ${DST}:"
          ls -la "${DST}" || true

      - name: Stamp runner metadata
        shell: bash
        run: |
          set -euo pipefail
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner
          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s + logs via REST"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_response.json
          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (REST) with logs"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_logs.json
          if [ -f runner/runner_health.json ]; then
            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
            mv runner/_tmp.json runner/runner_health.json
          else
            printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","disk_free_mb":0,"last_snapshot_at":"%s"}\n' \
              "$NOW" \
              > runner/runner_health.json
          fi

      - name: Upload artifact (snapshots)
        uses: actions/upload-artifact@v4
        with:
          name: wtp-snapshots-${{ steps.vars.outputs.SITE_KEY }}
          path: |
            ${{ steps.vars.outputs.OUT_DIR }}/**
            runner/*.json
          if-no-files-found: warn
          retention-days: 7

      - name: Upload artifact (logs only)
        uses: actions/upload-artifact@v4
        with:
          name: wtp-logs-${{ steps.vars.outputs.SITE_KEY }}
          path: |
            ${{ steps.vars.outputs.LOG_DIR }}/**
          if-no-files-found: warn
          retention-days: 14
