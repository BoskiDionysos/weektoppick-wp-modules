name: WTP Snapshot Sync

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (folder w uploads/wtp-ro/public)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      CURL_UA: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Vars
        id: vars
        shell: bash
        run: |
          SITE_KEY="${{ github.event.inputs.site_key }}"
          REST_BASE="${{ github.event.inputs.rest_base }}"
          [ -z "$SITE_KEY" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
          [ -z "$REST_BASE" ] && REST_BASE="https://weektoppick.com/wp-json/wtp-ro-open/v1"
          OUT_DIR="snapshots/$SITE_KEY"
          echo "SITE_KEY=$SITE_KEY"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=$REST_BASE" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=$OUT_DIR"     >> "$GITHUB_OUTPUT"

      - name: Create output dir
        run: mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"

      - name: Fetch manifest.json (single source of truth)
        id: manifest
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=manifest.json&_b=$(date +%s)"
          echo "GET $url"
          curl -fL --retry 5 --retry-delay 2 --connect-timeout 15 \
               -A "$CURL_UA" \
               -H 'Accept: application/json' \
               "$url" -o "${{ steps.vars.outputs.OUT_DIR }}/manifest.json"
          jq '.' "${{ steps.vars.outputs.OUT_DIR }}/manifest.json" > /dev/null

      - name: Parse file list from manifest
        id: list
        shell: bash
        run: |
          FILES=$(jq -r '.files[]' "${{ steps.vars.outputs.OUT_DIR }}/manifest.json")
          {
            echo "FILES<<EOF"
            echo "$FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download files from manifest
        shell: bash
        run: |
          set -euo pipefail
          while read -r fname; do
            [ -z "$fname" ] && continue
            url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=${fname}&_b=$(date +%s)"
            echo "GET $url"
            curl -fL --retry 5 --retry-delay 2 --connect-timeout 15 \
                 -A "$CURL_UA" \
                 -H 'Accept: application/json' \
                 "$url" -o "${{ steps.vars.outputs.OUT_DIR }}/${fname}"
          done << 'EOF'
          ${{ steps.list.outputs.FILES }}
          EOF

      - name: Fetch aux (options/selftest/index)
        shell: bash
        run: |
          set -euo pipefail
          for aux in options.json selftest.json index.json; do
            url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=${aux}&_b=$(date +%s)"
            echo "GET $url"
            curl -fL --retry 5 --retry-delay 2 --connect-timeout 15 \
                 -A "$CURL_UA" \
                 -H 'Accept: application/json' \
                 "$url" -o "${{ steps.vars.outputs.OUT_DIR }}/${aux}" || true
          done

      - name: Stamp runner metadata
        shell: bash
        run: |
          set -e
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner
          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s synchronized via manifest"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" > runner/runner_response.json
          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (manifest)"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" > runner/runner_logs.json
          if [ -f runner/runner_health.json ]; then
            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
            mv runner/_tmp.json runner/runner_health.json
          else
            printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","last_snapshot_at":"%s"}\n' "$NOW" > runner/runner_health.json
          fi

      - name: Commit & push
        shell: bash
        run: |
          git config user.name  "wtp-snapshot-bot"
          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
          git add snapshots runner/*.json
          git commit -m "snapshot: sync ${{ steps.vars.outputs.SITE_KEY }} via manifest" || echo "No changes"
          git push
