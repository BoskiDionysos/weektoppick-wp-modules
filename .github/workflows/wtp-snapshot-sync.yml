name: WTP Snapshot Sync

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - ".github/workflows/wtp-snapshot-sync.yml"

concurrency:
  group: wtp-snapshot-sync
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      BASE: https://weektoppick.com
      SITE_KEY: 5Depft8Y9LU0t6Sv
      OUTDIR: snapshots/5Depft8Y9LU0t6Sv
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl sshpass
          mkdir -p "$OUTDIR/logs"

      - name: Fetch ls.json (health + URLs)
        id: ls
        run: |
          set -euo pipefail
          URL="$BASE/wp-json/wtp-ro-open/v1/ls?site_key=$SITE_KEY"
          echo "GET $URL"
          curl -fsS "$URL" -o "$OUTDIR/ls.json"
          jq '{version, urls, exists}' "$OUTDIR/ls.json" || true

      - name: Resolve files list & download chunks (robust)
        run: |
          set -euo pipefail
          LS="$OUTDIR/ls.json"
          OUT="$OUTDIR"
          PUB=$(jq -r '.urls.public_url? // empty' "$LS")
          if [ -z "$PUB" ]; then
            PUB="$BASE/wp-content/uploads/wtp-ro/public/$SITE_KEY/"
          fi
          PUB="${PUB%/}/"
          FILES=$(jq -r '.list.dirA? // [] | .[] | select(test("^files_\\d{3}\\.json$"))' "$LS")
          if [ -z "$FILES" ]; then
            echo "No files from ls.json; trying public index.json"
            curl -fsS "${PUB}index.json" -o "$OUT/index.json" || true
            FILES=$(jq -r '.files[]? | select(test("^files_\\d{3}\\.json$"))' "$OUT/index.json" 2>/dev/null || echo "")
          fi
          if [ -z "$FILES" ]; then
            echo "::warning::No snapshot files found. Skipping."
            exit 0
          fi
          echo "Will download:"; echo "$FILES" | sed 's/^/ - /'
          while IFS= read -r f; do
            [ -z "$f" ] && continue
            echo "â†’ $f"
            if ! curl -fsS "$BASE/wp-json/wtp-ro-open/v1/get?site_key=$SITE_KEY&file=$f" -o "$OUT/$f"; then
              curl -fsS "${PUB}${f}" -o "$OUT/$f"
            fi
          done <<< "$FILES"
          for f in index.json bundle.json options.json selftest.json; do
            curl -fsS "$BASE/wp-json/wtp-ro-open/v1/get?site_key=$SITE_KEY&file=$f" -o "$OUT/$f" || \
            curl -fsS "${PUB}${f}" -o "$OUT/$f" || true
          done

      - name: Request fresh logs (/emit-logs)
        run: |
          set -euo pipefail
          curl -fsS -X POST "$BASE/wp-json/wtp-ro-open/v1/emit-logs?site_key=$SITE_KEY" -o /dev/null || true
          for f in wp-debug-latest.txt php_errors-latest.txt mu-loader-latest.txt errors-tail.txt wp-debug-meta.json; do
            curl -fsS "$BASE/wp-json/wtp-ro-open/v1/get?site_key=$SITE_KEY&file=$f" -o "$OUTDIR/logs/$f" || true
          done

      - name: Commit snapshot (if changed)
        run: |
          set -e
          git add -A
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git config user.name  "wtp-bot"
            git config user.email "wtp-bot@users.noreply.github.com"
            git commit -m "snapshot: ${SITE_KEY} $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            git push origin HEAD:main
          fi

      - name: Upload artifact (for quick download)
        uses: actions/upload-artifact@v4
        with:
          name: wtp-snapshot-${{ env.SITE_KEY }}
          path: ${{ env.OUTDIR }}/**
          if-no-files-found: warn
          retention-days: 7

            - name: Publish public diag (always)
        if: always()
        env:
          HOST:   ${{ secrets.DEPLOY_HOST }}
          PORT:   ${{ secrets.DEPLOY_PORT }}
          USER:   ${{ secrets.DEPLOY_USER }}
          PASS:   ${{ secrets.DEPLOY_PASS }}
          TARGET: ${{ secrets.DEPLOY_TARGET }}
        run: |
          set -euo pipefail
          SITE_KEY="${{ env.SITE_KEY }}"   # ten sam, co w fetchach

          NOW="$(date -u +%FT%TZ)"
          RUN="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          FILES=""
          if [ -f "${{ env.OUTDIR }}/ls.json" ]; then
            FILES=$(jq -r '.list.dirA? // [] | join(",")' "${{ env.OUTDIR }}/ls.json" 2>/dev/null || echo "")
          fi
          jq -n --arg workflow "wtp-snapshot-sync" --arg run_url "$RUN" --arg time "$NOW" --arg files "$FILES" \
            '{workflow:$workflow,run_url:$run_url,time:$time,files_from_ls: ($files|split(",")|map(select(. != "")))}' > snapshot-sync-last.json

          REMOTE_DIR="$TARGET/wp-content/uploads/wtp-ro/public/${SITE_KEY}"
          echo "REMOTE_DIR=$REMOTE_DIR"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "mkdir -p '$REMOTE_DIR'"
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no snapshot-sync-last.json "$USER@$HOST:$REMOTE_DIR/snapshot-sync-last.json"

          echo "Listing remote dir:"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "ls -la '$REMOTE_DIR' | sed 's/^/remote: /'"

          # Self-check HTTP
          URL="${{ env.BASE }}/wp-json/wtp-ro-open/v1/get?site_key=${SITE_KEY}&file=snapshot-sync-last.json"
          echo "GET $URL"
          code=$(curl -s -o /dev/null -w '%{http_code}' "$URL")
          echo "HTTP $code"
          if [ "$code" != "200" ]; then
            echo "::error::Public diag not reachable (HTTP $code)"
            exit 1
          fi
