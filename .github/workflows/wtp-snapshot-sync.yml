name: WTP Snapshot Sync

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (folder w uploads/wtp-ro/public)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Set vars
        id: vars
        shell: bash
        run: |
          SITE_KEY="${{ github.event.inputs.site_key }}"
          REST_BASE="${{ github.event.inputs.rest_base }}"
          [ -z "$SITE_KEY" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
          [ -z "$REST_BASE" ] && REST_BASE="https://weektoppick.com/wp-json/wtp-ro-open/v1"
          OUT_DIR="snapshots/$SITE_KEY"
          echo "SITE_KEY=$SITE_KEY"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=$REST_BASE" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=$OUT_DIR"     >> "$GITHUB_OUTPUT"

      - name: Create output dir
        run: mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"

      - name: Set curl flags
        id: dl
        shell: bash
        run: |
          FLAGS='-sS -L --retry 5 --retry-delay 2 --connect-timeout 15 -A "Mozilla/5.0" -H "Accept: application/json,text/plain,*/*"'
          echo "CURL_FLAGS=$FLAGS" >> "$GITHUB_OUTPUT"

      - name: Try /ls (best-effort)
        id: ls
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.vars.outputs.REST_BASE }}/ls?site_key=${{ steps.vars.outputs.SITE_KEY }}"
          echo "GET $url"
          # Pobierz /ls, ale nie kończ joba przy 4xx/5xx – wtedy fallback
          code=$(curl ${{ steps.dl.outputs.CURL_FLAGS }} -w "%{http_code}" -o "$RUNNER_TEMP/ls.json" "$url" || true)
          echo "HTTP $code (/ls)"
          if [ "$code" = "200" ]; then
            cat "$RUNNER_TEMP/ls.json" | jq '.' > "${{ steps.vars.outputs.OUT_DIR }}/ls.json"
            FILES=$(cat "$RUNNER_TEMP/ls.json" | jq -r '(.list.dirA // []) + (.list.dirB // []) | .[] | select(test("^files_\\d{3}\\.json$") or . == "index.json" or . == "manifest.json" or . == "options.json" or . == "selftest.json" or . == "logs")')
          else
            FILES=""
          fi
          {
            echo "FILES<<EOF"
            echo "$FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download snapshot files (with fallback)
        shell: bash
        run: |
          set -euo pipefail
          OUT="${{ steps.vars.outputs.OUT_DIR }}"
          REST="${{ steps.vars.outputs.REST_BASE }}"
          KEY="${{ steps.vars.outputs.SITE_KEY }}"
          FLAGS='${{ steps.dl.outputs.CURL_FLAGS }}'

          dl() {
            local f="$1"
            local url="${REST}/get?site_key=${KEY}&file=${f}&_b=$(date +%s)"
            echo "GET $url"
            # Nie przerywaj przy błędach pojedynczych plików
            curl $FLAGS -o "${OUT}/${f}" "$url" || {
              echo "skip ${f}"
              rm -f "${OUT}/${f}" 2>/dev/null || true
            }
          }

          mkdir -p "$OUT"

          if [ -n "${{ steps.ls.outputs.FILES }}" ]; then
            # Normalny tryb na podstawie /ls
            while read -r f; do
              [ -z "$f" ] && continue
              if [ "$f" = "logs" ]; then
                # katalog logs – ściągnijmy opcjonalne aliasy
                dl "logs/wp-debug-latest.txt"
                dl "logs/php-errors-latest.txt"
                dl "wp-debug-latest.txt"
                dl "php-errors-latest.txt"
              else
                dl "$f"
              fi
            done << 'EOF'
            ${{ steps.ls.outputs.FILES }}
            EOF
          else
            echo "Fallback (no /ls)"
            # stałe pliki
            for f in index.json manifest.json options.json selftest.json; do
              dl "$f"
            done
            # spróbuj paczki files_000..files_030 (błędy ignorujemy)
            for i in $(seq -w 0 30); do
              dl "files_${i}.json"
            done
            # logi – opcjonalnie, różne ścieżki
            dl "logs/wp-debug-latest.txt"
            dl "logs/php-errors-latest.txt"
            dl "wp-debug-latest.txt"
            dl "php-errors-latest.txt"
          fi

      - name: Stamp runner metadata
        shell: bash
        run: |
          set -e
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner
          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s synchronized via REST"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_response.json
          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (REST)"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_logs.json
          if [ -f runner/runner_health.json ]; then
            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
            mv runner/_tmp.json runner/runner_health.json
          else
            printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","disk_free_mb":0,"last_snapshot_at":"%s"}\n' "$NOW" > runner/runner_health.json
          fi

      - name: Commit & push
        shell: bash
        run: |
          git config user.name  "wtp-snapshot-bot"
          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
          git add snapshots runner/*.json || true
          git commit -m "mirror: sync ${{ steps.vars.outputs.SITE_KEY }} (robust fallback)" || echo "No changes"
          git push || true
