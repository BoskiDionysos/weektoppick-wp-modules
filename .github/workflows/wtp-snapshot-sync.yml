name: WTP Snapshot Sync

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (folder w uploads/wtp-ro/public)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

jobs:
  sync:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Set vars
        id: vars
        shell: bash
        run: |
          SITE_KEY="${{ github.event.inputs.site_key }}"
          REST_BASE="${{ github.event.inputs.rest_base }}"
          [ -z "$SITE_KEY" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
          [ -z "$REST_BASE" ] && REST_BASE="https://weektoppick.com/wp-json/wtp-ro-open/v1"
          OUT_DIR="snapshots/$SITE_KEY"
          echo "SITE_KEY=$SITE_KEY"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=$REST_BASE" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=$OUT_DIR"     >> "$GITHUB_OUTPUT"

      - name: Create output dir
        run: mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"

      - name: Set curl flags (browser-like)
        id: dl
        shell: bash
        run: |
          FLAGS='-fL --retry 5 --retry-delay 2 --connect-timeout 15 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36" -H "Accept: application/json,text/plain,*/*"'
          echo "CURL_FLAGS=$FLAGS" >> "$GITHUB_OUTPUT"

      - name: Fetch file list via /ls
        id: ls
        shell: bash
        run: |
          url="${{ steps.vars.outputs.REST_BASE }}/ls?site_key=${{ steps.vars.outputs.SITE_KEY }}"
          echo "GET $url"
          resp="$(curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url")"
          echo "$resp" | jq '.' > "${{ steps.vars.outputs.OUT_DIR }}/ls.json"
          FILES=$(echo "$resp" | jq -r '.list.dirA // [] | .[]')
          if [ -z "$FILES" ]; then
            FILES=$(echo "$resp" | jq -r '.list.dirB // [] | .[]')
          fi
          {
            echo "FILES<<EOF"
            echo "$FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download listed files via /get
        shell: bash
        run: |
          set -e
          while read -r fname; do
            [ -z "$fname" ] && continue
            url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=${fname}&_b=$(date +%s)"
            echo "GET $url"
            curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url" -o "${{ steps.vars.outputs.OUT_DIR }}/${fname}"
          done << 'EOF'
          ${{ steps.ls.outputs.FILES }}
          EOF

      # === NOWE KROKI: snapshot logÃ³w ===
      - name: Write log snapshots (POST /write-logs)
        run: |
          set -euo pipefail
          BASE="${{ steps.vars.outputs.REST_BASE }}"
          KEY="${{ steps.vars.outputs.SITE_KEY }}"
          curl -fLs -X POST "$BASE/write-logs?site_key=$KEY" -o /dev/null

      - name: Fetch latest logs (REST /get)
        run: |
          set -euo pipefail
          BASE="${{ steps.vars.outputs.REST_BASE }}"
          KEY="${{ steps.vars.outputs.SITE_KEY }}"
          OUT="${{ steps.vars.outputs.OUT_DIR }}/logs"
          mkdir -p "$OUT"
          for f in wp-debug-latest.txt php_errors-latest.txt wp-debug-meta.json; do
            echo "GET $BASE/get?site_key=$KEY&file=$f"
            curl -fLs "$BASE/get?site_key=$KEY&file=$f&_b=$(date +%s)" -o "$OUT/$f" || echo "{}" > "$OUT/$f"
          done

      - name: Stamp runner metadata
        shell: bash
        run: |
          set -e
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner
          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s synchronized via REST /ls+get"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_response.json
          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (REST)"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_logs.json
          printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","disk_free_mb":0,"last_snapshot_at":"%s"}\n' \
            "$NOW" \
            > runner/runner_health.json

      - name: Commit & push
        shell: bash
        run: |
          git config user.name  "wtp-snapshot-bot"
          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
          git add snapshots runner/*.json
          git commit -m "mirror: sync ${{ steps.vars.outputs.SITE_KEY }} via REST list" || echo "No changes"
          git push
