name: WTP Snapshot Sync

on:
  workflow_dispatch:
    inputs:
      site_key:
        description: "WTP site_key (folder w uploads/wtp-ro/public)"
        required: false
        default: "5Depft8Y9LU0t6Sv"
      rest_base:
        description: "Base REST URL (wtp-ro-open)"
        required: false
        default: "https://weektoppick.com/wp-json/wtp-ro-open/v1"
  schedule:
    - cron: "*/30 * * * *"

permissions:
  contents: write

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq & curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Set vars
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          SITE_KEY="${{ github.event.inputs.site_key || '' }}"
          REST_BASE="${{ github.event.inputs.rest_base || '' }}"
          [ -z "$SITE_KEY" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
          [ -z "$REST_BASE" ] && REST_BASE="https://weektoppick.com/wp-json/wtp-ro-open/v1"
          OUT_DIR="snapshots/$SITE_KEY"
          LOG_DIR="$OUT_DIR/logs"
          echo "SITE_KEY=$SITE_KEY"   >> "$GITHUB_OUTPUT"
          echo "REST_BASE=$REST_BASE" >> "$GITHUB_OUTPUT"
          echo "OUT_DIR=$OUT_DIR"     >> "$GITHUB_OUTPUT"
          echo "LOG_DIR=$LOG_DIR"     >> "$GITHUB_OUTPUT"

      - name: Prepare output dirs
        run: |
          mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"
          mkdir -p "${{ steps.vars.outputs.LOG_DIR }}"

      - name: Set curl flags (browser-like)
        id: dl
        shell: bash
        run: |
          FLAGS='-fL --retry 5 --retry-delay 2 --connect-timeout 15 -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0 Safari/537.36" -H "Accept: application/json,text/plain,*/*"'
          echo "CURL_FLAGS=$FLAGS" >> "$GITHUB_OUTPUT"

      - name: Fetch file list via /ls (filter out directories like 'logs')
        id: ls
        shell: bash
        run: |
          set -euo pipefail
          url="${{ steps.vars.outputs.REST_BASE }}/ls?site_key=${{ steps.vars.outputs.SITE_KEY }}"
          echo "GET $url"
          resp="$(curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url")"
          # zapisz pełną odpowiedź ls do artefaktów
          echo "$resp" | jq '.' > "${{ steps.vars.outputs.OUT_DIR }}/ls.json" || echo "$resp" > "${{ steps.vars.outputs.OUT_DIR }}/ls.raw.json"

          # Weź listę plików; odfiltruj 'logs' i cokolwiek co wygląda na katalog
          FILES="$(echo "$resp" | jq -r '.list.dirA // [] | .[]' 2>/dev/null | grep -v '^logs$' || true)"
          if [ -z "$FILES" ]; then
            FILES="$(echo "$resp" | jq -r '.list.dirB // [] | .[]' 2>/dev/null | grep -v '^logs$' || true)"
          fi

          if [ -z "$FILES" ]; then
            echo "::error::Brak plików w /ls – sprawdź endpoint."
            exit 1
          fi

          {
            echo "FILES<<EOF"
            echo "$FILES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Download listed files via /get
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r fname; do
            [ -z "$fname" ] && continue
            # bezpieczeństwo: pomiń cokolwiek co jest katalogiem
            if echo "$fname" | grep -q '/$'; then
              echo "skip dir entry: $fname"
              continue
            fi
            url="${{ steps.vars.outputs.REST_BASE }}/get?site_key=${{ steps.vars.outputs.SITE_KEY }}&file=${fname}&_b=$(date +%s)"
            out="${{ steps.vars.outputs.OUT_DIR }}/${fname}"
            echo "GET $url"
            curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url" -o "$out"
          done << 'EOF'
          ${{ steps.ls.outputs.FILES }}
          EOF

      - name: Try to fetch log files explicitly (ignore if absent)
        shell: bash
        run: |
          set -euo pipefail
          base="${{ steps.vars.outputs.REST_BASE }}"
          sk="${{ steps.vars.outputs.SITE_KEY }}"
          # Nazwy logów, które generujemy po stronie WP
          for f in "wp-debug-latest.txt" "php_errors-latest.txt" "wp-debug-meta.json"; do
            url="${base}/get?site_key=${sk}&file=${f}&_b=$(date +%s)"
            out="${{ steps.vars.outputs.OUT_DIR }}/${f}"
            echo "TRY $url"
            if curl ${{ steps.dl.outputs.CURL_FLAGS }} "$url" -o "$out"; then
              echo "downloaded $f"
            else
              echo "no $f (skipping)"
              rm -f "$out" || true
            fi
          done

      - name: Stamp runner metadata
        shell: bash
        run: |
          set -euo pipefail
          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          mkdir -p runner

          printf '{"status":"ok","started_at":"%s","finished_at":"%s","commit_sha":"%s","summary":"Mirror %s synchronized via REST /ls+get"}\n' \
            "$NOW" "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_response.json

          printf '{"logs":[{"ts":"%s","level":"info","step":"mirror","msg":"Synced %s (REST)"}]}\n' \
            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
            > runner/runner_logs.json

          if [ -f runner/runner_health.json ]; then
            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
            mv runner/_tmp.json runner/runner_health.json
          else
            printf '{"php_version":"","wp_version":"","wp_cli":"","server":"","memory_limit":"","disk_free_mb":0,"last_snapshot_at":"%s"}\n' \
              "$NOW" \
              > runner/runner_health.json
          fi

      - name: Commit & push
        shell: bash
        run: |
          set -euo pipefail
          git config user.name  "wtp-snapshot-bot"
          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
          git add snapshots runner/*.json || true
          if git diff --cached --quiet; then
            echo "No changes to commit."
          else
            git commit -m "mirror: sync ${{ steps.vars.outputs.SITE_KEY }} via REST"
            git push
          fi

      - name: Upload artifact (snapshot)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-${{ steps.vars.outputs.SITE_KEY }}
          path: |
            snapshots/${{ steps.vars.outputs.SITE_KEY }}/**
            runner/**
          if-no-files-found: warn
          retention-days: 7
