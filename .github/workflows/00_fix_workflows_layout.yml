name: 00_fix_workflows_layout

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: fix-workflows-layout
  cancel-in-progress: true

jobs:
  fix:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Keep 6 core, move tools to _maintenance, rest to _quarantine
        shell: bash
        run: |
          set -euo pipefail

          WF_DIR=".github/workflows"
          Q_DIR=".github/workflows._quarantine"
          M_DIR=".github/workflows._maintenance"
          mkdir -p "$WF_DIR" "$Q_DIR" "$M_DIR"

          # 6 aktywnych (zostają)
          CORE=("01_deploy.yml" "02_wpcli.yml" "03_snapshot_full.yml" "ai-upsert-file.yml" "apply-inbox-patch.yml" "gsc-collector.yml")
          # 5 narzędziowych (do _maintenance)
          TOOLS=("00_repo_housekeeping.yml" "00_prune_wtp.yml" "03_repo_snapshot.yml" "03_repo_audit.yml" "03_snapshot_core.yml")

          in_list() { local x="$1"; shift; for a in "$@"; do [[ "$x" == "$a" ]] && return 0; done; return 1; }

          shopt -s nullglob
          CHANGED=0
          for f in "$WF_DIR"/*.yml "$WF_DIR"/*.yaml; do
            base="$(basename "$f")"
            if in_list "$base" "${CORE[@]}"; then
              echo "[KEEP] $base"
            elif in_list "$base" "${TOOLS[@]}"; then
              mv -f "$f" "$M_DIR/$base"
              echo "[TOOL -> _maintenance] $base"
              CHANGED=1
            else
              mv -f "$f" "$Q_DIR/$base"
              echo "[MOVE -> _quarantine] $base"
              CHANGED=1
            fi
          done
          shopt -u nullglob

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if [[ $CHANGED -eq 1 ]]; then
            git add "$WF_DIR" "$Q_DIR" "$M_DIR"
            git commit -m "layout: keep 6 core; tools -> _maintenance; rest -> _quarantine" || true
            git push || true
          else
            echo "::notice::No changes needed."
          fi

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Snapshot repo → latest/repo
        shell: bash
        run: |
          set -euo pipefail

          python - << 'PY'
          import os, json, time
          from pathlib import Path

          ROOT = Path(".")
          out = ROOT / "_ci_logs" / os.environ.get("GITHUB_RUN_ID","0") / "repo"
          out.mkdir(parents=True, exist_ok=True)

          def cat(p: Path):
              s = p.as_posix()
              if s.startswith(".git/"): return "git"
              if s.startswith(".github/workflows._quarantine/") and s.endswith((".yml",".yaml")): return "workflow-quarantine"
              if s.startswith(".github/workflows._maintenance/") and s.endswith((".yml",".yaml")): return "workflow-maintenance"
              if s.startswith(".github/workflows/") and s.endswith((".yml",".yaml")): return "workflow-active"
              if s.startswith("wp-content/mu-plugins/"): return "mu-plugin"
              if s.startswith("wp-content/plugins/"): return "plugin"
              if s.startswith("wp-content/themes/"): return "theme"
              if s.startswith(".wtp/"): return "wtp"
              if s.startswith("docs/") or s.endswith(".md"): return "docs"
              if s.endswith((".json",".yml",".yaml",".toml",".ini",".env",".editorconfig",".gitattributes",".gitignore",".htaccess")): return "config"
              return "other"

          rec=[]
          for dp, dn, fn in os.walk(ROOT):
              if "/.git" in dp or dp.endswith("/.git"): continue
              if "/_ci_logs" in dp: continue
              for n in fn:
                  rel = Path(dp).joinpath(n).relative_to(ROOT)
                  p = ROOT / rel
                  try:
                      sz = p.stat().st_size
                  except Exception:
                      sz = None
                  rec.append({"path": rel.as_posix(), "category": cat(rel), "size": sz})

          from collections import defaultdict
          by = defaultdict(lambda: {"count":0,"size":0})
          for r in rec:
              by[r["category"]]["count"] += 1
              by[r["category"]]["size"]  += (r["size"] or 0)

          snap = {
              "run_ts": time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime()),
              "counts": {"files": len(rec), "by_category": by},
              "files": rec
          }

          (out / "repo-snapshot.json").write_text(json.dumps(snap, indent=2), encoding="utf-8")
          (out / "REPO_ARCHITECTURE.md").write_text("# Repo updated after workflow layout\n", encoding="utf-8")
          PY

          RO_DIR=".wtp/state/ro/public/${GITHUB_RUN_ID}/repo"
          RO_LATEST=".wtp/state/ro/public/latest/repo"
          mkdir -p "$RO_DIR" "$RO_LATEST"
          cp -a "_ci_logs/${GITHUB_RUN_ID}/repo/." "$RO_DIR/"
          rm -rf "$RO_LATEST"
          mkdir -p "$RO_LATEST"
          cp -a "$RO_DIR/." "$RO_LATEST/"

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$RO_DIR" "$RO_LATEST"
          git commit -m "update repo snapshot after workflow layout" || true
          git push || true

      - name: Done
        run: echo "::notice::workflows layout fixed"
