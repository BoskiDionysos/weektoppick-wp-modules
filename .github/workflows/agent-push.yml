name: Agent Push (Silent Mode)

on:
  workflow_dispatch:          # ręczny start
  push:                       # auto po zmianach w pluginach / manifeście / pliku workflow
    paths:
      - 'manifest.json'
      - 'plugins/'
      - '.github/workflows/agent-push.yml'
  schedule:                   # watchdog co 30 minut (UTC)
    - cron: '*/30 * * * *'

concurrency:
  group: agent-push-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: write

env:
  RAW_BASE: https://raw.githubusercontent.com/${{ github.repository }}/main
  DIST_DIR: dist
  OPS_DIR: ops
  MANIFEST_FILE: manifest.json

jobs:
  build-deploy-sync-and-verify:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false  # użyjemy własnego PAT gdy jest

      - name: Configure git (use PAT if provided)
        run: |
          git config user.name  "wtp-bot"
          git config user.email "wtp-bot@weektoppick.com"
          if [ -n "${{ secrets.WTP_GITHUB_PAT }}" ]; then
            git remote set-url origin \
              https://x-access-token:${{ secrets.WTP_GITHUB_PAT }}@github.com/${{ github.repository }}
          fi

      - name: Ensure tools (jq, zip, curl)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq zip curl

      - name: Prepare output dirs
        run: |
          mkdir -p "$DIST_DIR" "$OPS_DIR"

      - name: Zip plugins
        run: |
          set -euo pipefail
          rm -f $DIST_DIR/*.zip || true
          if [ -d plugins ]; then
            for d in plugins/*; do
              [ -d "$d" ] || continue
              slug="$(basename "$d")"
              zip -rq "$DIST_DIR/${slug}.zip" "$d"
            done
          fi

      - name: Build manifest.json (hash-based)
        id: manifest
        run: |
          set -euo pipefail
          plugins_json="[]"
          if compgen -G "$DIST_DIR/*.zip" > /dev/null; then
            arr="["
            first=1
            for z in $DIST_DIR/*.zip; do
              slug=$(basename "$z" .zip)
              sha=$(sha256sum "$z" | awk '{print $1}')
              url="${RAW_BASE}/$DIST_DIR/${slug}.zip"
              item=$(jq -n --arg name "$slug" --arg url "$url" --arg ver "${sha:0:7}" \
                    '{name:$name, url:$url, version:$ver}')
              if [ $first -eq 1 ]; then arr="$arr$item"; first=0; else arr="$arr,$item"; fi
            done
            arr="$arr]"
            plugins_json="$arr"
          fi
          jq -n --argjson p "$plugins_json" '{plugins:$p}' > "$MANIFEST_FILE"
          cp "$MANIFEST_FILE" "$OPS_DIR/manifest.built.json"
          echo "plugins_count=$(jq '.plugins|length' $MANIFEST_FILE)" >> $GITHUB_OUTPUT

      - name: Commit ZIPs + manifest (only if changed)
        run: |
          set -e
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "chore: update zips + manifest"
            git push
          else
            echo "No changes to commit."
          fi

      - name: Derive runner endpoints (from RUNNER_URL)
        id: ep
        run: |
          set -euo pipefail
          BASE="${{ secrets.RUNNER_URL }}"
          if [ -z "$BASE" ]; then
            echo "::warning::RUNNER_URL secret is empty – using https://weektoppick.com"
            BASE="https://weektoppick.com"
          fi
          BASE="${BASE%%/}"
          echo "install=${BASE}/wp-json/wtp/v1/agent/install"         >> $GITHUB_OUTPUT
          echo "inventory=${BASE}/wp-json/wtp-runner/v1/inventory"   >> $GITHUB_OUTPUT
          echo "sync=${BASE}/wp-json/wtp-runner/v1/sync"             >> $GITHUB_OUTPUT
          echo "ingest=${BASE}/wp-json/wtp/v1/runner/ingest"         >> $GITHUB_OUTPUT

      # ===================== DEPLOY (Bridge /install) =====================
      - name: Call runner /install (deploy + purge)
        env:
          BRIDGE_KEY:  ${{ secrets.WTP_BRIDGE_KEY }}
          BRIDGE_HMAC: ${{ secrets.WTP_BRIDGE_HMAC }}
        run: |
          set -euo pipefail
          if [ -z "${BRIDGE_KEY:-}" ] || [ -z "${BRIDGE_HMAC:-}" ]; then
            echo "Bridge secrets not set; skipping remote install."
            exit 0
          fi
          PATHONLY="/wp-json/wtp/v1/agent/install"
          BODY=$(jq -c '.' "${MANIFEST_FILE}")
          TS=$(date +%s)
          SIG=$(printf "%s\nPOST\n%s\n%s" "$TS" "$PATHONLY" "$BODY" \
                | openssl dgst -sha256 -hmac "$BRIDGE_HMAC" -binary | xxd -p -c 256)
          curl -sS -X POST "${{ steps.ep.outputs.install }}" \
            -H "Content-Type: application/json" \
            -H "X-WTP-Key: ${BRIDGE_KEY}" \
            -H "X-WTP-Timestamp: ${TS}" \
            -H "X-WTP-Signature: ${SIG}" \
            --data-binary "$BODY" \
            -o "$OPS_DIR/install.response.json" || true

      - name: Runner /inventory snapshot (GET)
        run: |
          set -euo pipefail
          curl -sS "${{ steps.ep.outputs.inventory }}" \
            -o "$OPS_DIR/inventory.json" || true

      - name: Runner /sync (WP → GitHub)
        run: |
          set -euo pipefail
          curl -sS -X POST "${{ steps.ep.outputs.sync }}" \
            -o "$OPS_DIR/runner_sync.json" || true

      - name: Fetch runner health + logs (placeholders)
        run: |
          set -euo pipefail
          echo '{"ok":true}' > "$OPS_DIR/health.json"
          echo '[]' > "$OPS_DIR/logs.json"

      - name: Upload artifacts (ops + dist + manifest)
        uses: actions/upload-artifact@v4
        with:
          name: wtp-runner-ops
          path: |
            ops/**
            dist/**
            manifest.json
          if-no-files-found: ignore
          retention-days: 7

      # ===================== SUMMARY → WP =====================
      - name: Prepare summary
        run: |
          set -euo pipefail
          SENT=$(jq '.plugins|length' manifest.json 2>/dev/null || echo 0)
          ERRORS=$(jq -r '.errors // 0' "$OPS_DIR/install.response.json" 2>/dev/null || echo 0)
          SKIPPED=0
          jq -n --argjson sent "${SENT}" --argjson skipped "${SKIPPED}" --argjson errors "${ERRORS}" \
               '{sent:$sent, skipped:$skipped, errors:$errors, ts: now|floor}' \
               > "$OPS_DIR/summary.json"

      - name: POST summary to WP (Bridge)
        env:
          BRIDGE_KEY:  ${{ secrets.WTP_BRIDGE_KEY }}
          BRIDGE_HMAC: ${{ secrets.WTP_BRIDGE_HMAC }}
          BASE:        ${{ secrets.RUNNER_URL }}
        run: |
          set -euo pipefail
          if [ -z "${BRIDGE_KEY:-}" ] || [ -z "${BRIDGE_HMAC:-}" ]; then
            echo "Bridge secrets not set; skipping summary POST."
            exit 0
          fi
          BASE="${BASE:-https://weektoppick.com}"
          BASE="${BASE%%/}"
          TS=$(date +%s)
          PATHONLY="/wp-json/wtp/v1/runner/ingest"
          BODY=$(cat "$OPS_DIR/summary.json")
          SIG=$(printf "%s\nPOST\n%s\n%s" "$TS" "$PATHONLY" "$BODY" \
               | openssl dgst -sha256 -hmac "$BRIDGE_HMAC" -binary | xxd -p -c 256)
          curl -sS -X POST "${BASE}${PATHONLY}" \
            -H "Content-Type: application/json" \
            -H "X-WTP-Key: ${BRIDGE_KEY}" \
            -H "X-WTP-Timestamp: ${TS}" \
            -H "X-WTP-Signature: ${SIG}" \
            --data-binary @"$OPS_DIR/summary.json" || true

      # ===================== TWARDY PRÓG BŁĘDÓW – prosty i stabilny =====================
      - name: Fail on excessive install errors
        run: |
          set -euo pipefail
          F="$OPS_DIR/summary.json"
          if [ ! -f "$F" ]; then
            echo "no summary; skipping guards"
            exit 0
          fi
          ERRORS=$(jq -r ".errors // 0" "$F" 2>/dev/null || echo 0)
          SENT=$(jq -r ".sent // 0" "$F" 2>/dev/null || echo 0)
          SKIP=$(jq -r ".skipped // 0" "$F" 2>/dev/null || echo 0)
          TOTAL=$((SENT + SKIP + ERRORS))
          PCT=0
          if [ "$TOTAL" -gt 0 ]; then
            PCT=$(awk -v e="$ERRORS" -v t="$TOTAL" 'BEGIN{printf("%d",(e*100)/t)}')
          fi
          echo "install errors=$ERRORS (${PCT}%) total=$TOTAL"
          if [ "$ERRORS" -ge 2 ] || [ "$PCT" -gt 20 ]; then
            echo "::error::excessive install errors – failing job"
            exit 1
          fi
