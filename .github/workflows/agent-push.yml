name: Agent Push (Silent Mode)

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'plugins/**'
      - 'plugins/manifest.json'
  schedule:
    - cron: '*/15 * * * *'  # co 15 min, bez Twojego klikania
  workflow_dispatch:

concurrency:
  group: agent-push
  cancel-in-progress: false

permissions:
  contents: write

jobs:
  build-deploy-sync-and-verify:
    runs-on: ubuntu-latest
    env:
      PLUGIN_GLOB: "wtp-*"
      ZIP_OUT_DIR: "plugins"
      MANIFEST_PATH: "plugins/manifest.json"
      RAW_BASE: "https://raw.githubusercontent.com/${{ github.repository }}/main/plugins"
      RUNNER_URL: ${{ secrets.RUNNER_URL }}
      RUNNER_SECRET: ${{ secrets.WTP_AGENT_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure tools (jq)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq

      - name: Prepare output dir
        run: mkdir -p "$ZIP_OUT_DIR"

      - name: Zip plugins
        shell: bash
        run: |
          shopt -s nullglob
          count=0
          for dir in $PLUGIN_GLOB; do
            [ -d "$dir" ] || continue
            zip -r "$ZIP_OUT_DIR/$dir.zip" "$dir" >/dev/null
            count=$((count+1))
          done
          echo "Zipped $count plugin directories."
          ls -l "$ZIP_OUT_DIR" || true

      - name: Build manifest.json (hash-based)
        id: manifest
        shell: bash
        run: |
          echo "[" > "$MANIFEST_PATH"
          first=1
          shopt -s nullglob
          for z in $ZIP_OUT_DIR/*.zip; do
            [ -e "$z" ] || continue
            fname=$(basename "$z")
            name="${fname%.zip}"
            sum=$(sha256sum "$z" | awk '{print $1}')
            url="${RAW_BASE}/${fname}"
            item="{\"name\":\"${name}\",\"url\":\"${url}\",\"version\":\"${sum}\"}"
            if [ $first -eq 1 ]; then
              echo "  $item" >> "$MANIFEST_PATH"; first=0
            else
              echo " ,$item" >> "$MANIFEST_PATH"
            fi
          done
          echo "]" >> "$MANIFEST_PATH"
          echo "MANIFEST_URL=${RAW_BASE}/manifest.json" >> $GITHUB_ENV
          cat "$MANIFEST_PATH"

      - name: Commit ZIPs + manifest (only if changed)
        shell: bash
        run: |
          git config user.name "wtp-agent"
          git config user.email "wtp-agent@users.noreply.github.com"
          git add "$ZIP_OUT_DIR"/*.zip "$MANIFEST_PATH" || true
          if ! git diff --cached --quiet; then
            git commit -m "agent: publish zips & manifest [skip ci]"
            git push
            echo "Pushed new zips/manifest."
          else
            echo "No changes to commit."
          fi

      - name: Derive runner endpoints
        shell: bash
        run: |
          BASE="${RUNNER_URL%/install}"
          echo "RUNNER_BASE=$BASE" >> $GITHUB_ENV
          echo "HEALTH_URL=$BASE/health" >> $GITHUB_ENV
          echo "LOGS_URL=$BASE/logs?secret=$RUNNER_SECRET&n=100" >> $GITHUB_ENV
          echo "SYNC_URL=$BASE/sync" >> $GITHUB_ENV
          echo "INVENTORY_URL=$BASE/inventory" >> $GITHUB_ENV

      - name: Call runner /install (deploy + purge)
        shell: bash
        run: |
          set -e
          echo "Calling: $RUNNER_URL"
          RESP=$(curl -fSs -X POST "$RUNNER_URL" \
            -H "Content-Type: application/json" \
            -d "{\"secret\":\"$RUNNER_SECRET\",\"manifest\":\"$MANIFEST_URL\"}")
          echo "$RESP" | jq . > runner_response.json || echo "$RESP" > runner_response.json
          ERRORS=$(jq -r '.summary.errors // 0' runner_response.json 2>/dev/null || echo 0)
          echo "ERRORS=$ERRORS" >> $GITHUB_ENV

      - name: Runner /inventory snapshot (POST)
        shell: bash
        run: |
          curl -fSs -X POST "$INVENTORY_URL" \
            -H "Content-Type: application/json" \
            -d "{\"secret\":\"$RUNNER_SECRET\"}" | jq . > runner_inventory.json || true

      - name: Runner /sync (WP → GitHub)
        shell: bash
        run: |
          # Wymaga ENV WTP_GH_SYNC_PAT ustawionego NA SERWERZE WP
          SYNC_RESP=$(curl -sS -X POST "$SYNC_URL" \
            -H "Content-Type: application/json" \
            -d "{\"secret\":\"$RUNNER_SECRET\"}")
          echo "$SYNC_RESP" | jq . > runner_sync.json || echo "$SYNC_RESP" > runner_sync.json
          SYNC_OK=$(jq -r '.ok // false' runner_sync.json 2>/dev/null || echo false)
          if [ "$SYNC_OK" != "true" ]; then
            echo "SYNC_WARNING=1" >> $GITHUB_ENV
            echo "Runner sync did not report ok=true. Check runner_sync.json."
          else
            echo "SYNC_WARNING=0" >> $GITHUB_ENV
          fi

      - name: Fetch runner health + logs
        shell: bash
        run: |
          curl -fSs "$HEALTH_URL" | jq . > runner_health.json || curl -fSs "$HEALTH_URL" > runner_health.json
          curl -fSs "$LOGS_URL"   | jq . > runner_logs.json   || curl -fSs "$LOGS_URL"   > runner_logs.json

      - name: Upload artifacts (response, health, logs, inventory, sync, manifest)
        uses: actions/upload-artifact@v4
        with:
          name: wtp-runner-artifacts
          path: |
            runner_response.json
            runner_inventory.json
            runner_sync.json
            runner_health.json
            runner_logs.json
            plugins/manifest.json

      - name: Job summary
        shell: bash
        run: |
          SENT=$(jq -r '.summary.sent // 0' runner_response.json 2>/dev/null || echo 0)
          SKIPPED=$(jq -r '.summary.skipped // 0' runner_response.json 2>/dev/null || echo 0)
          ERRORS="${ERRORS:-0}"
          SYNC_WARNING="${SYNC_WARNING:-0}"
          echo "### WTP Agent summary" >> $GITHUB_STEP_SUMMARY
          echo "- Manifest: $MANIFEST_URL" >> $GITHUB_STEP_SUMMARY
          echo "- Runner: $RUNNER_URL" >> $GITHUB_STEP_SUMMARY
          echo "- Health: $HEALTH_URL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Install:** sent=$SENT, skipped=$SKIPPED, errors=$ERRORS" >> $GITHUB_STEP_SUMMARY
          if [ "$SYNC_WARNING" = "1" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "> ⚠️ Runner /sync nie zgłosił ok=true — sprawdź 'runner_sync.json' i czy ENV 'WTP_GH_SYNC_PAT' jest ustawione na serwerze WP." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail on install errors
        if: ${{ env.ERRORS != '0' }}
        run: |
          echo "Runner reported errors=${ERRORS}. Failing the job."
          exit 1
# autopilot: prepare agent-push enhancements PR
