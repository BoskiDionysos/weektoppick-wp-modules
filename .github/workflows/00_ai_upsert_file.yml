name: 00_ai_upsert_file

on:
  workflow_dispatch:
    inputs:
      path:
        description: 'Ścieżka w repo (np. mu-plugins/00-mu-safe-loader.php lub .github/workflows/ci.yml)'
        required: true
        type: string
      message:
        description: 'Commit message'
        required: true
        type: string
      content_plain:
        description: 'Treść pliku (PLAIN). Zostaw puste, jeśli używasz content_b64'
        required: false
        type: string
      content_b64:
        description: 'Treść pliku (Base64). Zostaw puste, jeśli używasz content_plain'
        required: false
        type: string
      sha256:
        description: 'Opcjonalny SHA-256 zdekodowanej treści (weryfikacja integralności)'
        required: false
        type: string
      branch:
        description: 'Docelowy branch'
        required: false
        default: 'main'
        type: string

  repository_dispatch:
    types: [ai-upsert-file]

permissions:
  contents: write

concurrency:
  group: ai-upsert-file
  cancel-in-progress: true

jobs:
  upsert:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Upsert file (supports dispatch & repository_dispatch)
        uses: actions/github-script@v7
        with:
          # WYMAGANE: PAT ze scope `repo,workflow` w secrecie WTP_GITHUB_PAT
          github-token: ${{ secrets.WTP_GITHUB_PAT }}
          script: |
            const crypto = require('crypto');
            const core   = require('@actions/core');
            const ev     = context.eventName;

            // ---- Wejścia z dwóch trybów ----
            let path = '', message = '', branch = 'main', content_b64 = '', content_plain = '', sha256 = '';

            if (ev === 'workflow_dispatch') {
              const inp = context.payload?.inputs || {};
              path          = (inp.path || '').trim();
              message       = (inp.message || '').trim();
              branch        = (inp.branch || 'main').trim();
              content_b64   = (inp.content_b64 || '').trim();
              content_plain = (inp.content_plain || '').trim();
              sha256        = (inp.sha256 || '').trim().toLowerCase();
            } else if (ev === 'repository_dispatch') {
              const p = context.payload?.client_payload || {};
              path          = (p.path || '').trim();
              message       = (p.message || '').trim();
              branch        = (p.branch || 'main').trim();
              content_b64   = (p.content_b64 || '').trim();
              content_plain = (p.content_plain || '').trim();
              sha256        = (p.sha256 || '').trim().toLowerCase();
            } else {
              core.setFailed(`Unsupported event: ${ev}`); process.exit(1);
            }

            core.info(`event=${ev}`);
            core.info(`path="${path}", branch="${branch}"`);
            core.info(`has_plain=${content_plain !== ''}, has_b64=${content_b64 !== ''}`);

            // ---- Walidacja wejść ----
            if (!path)    core.setFailed('Input "path" is required.');
            if (!message) core.setFailed('Input "message" is required.');
            if (!path || !message) process.exit(1);

            if (path.startsWith('/')) {
              core.setFailed('Path musi być repo-relative (bez wiodącego "/").');
              process.exit(1);
            }

            const both = (content_plain !== '' && content_b64 !== '');
            const none = (content_plain === '' && content_b64 === '');
            if (both || none) {
              core.setFailed('Podaj dokładnie jedno: content_plain ALBO content_b64.');
              process.exit(1);
            }

            // ---- Bufor treści + SHA ----
            let buf;
            if (content_b64) {
              try {
                buf = Buffer.from(content_b64, 'base64');
                if (buf.toString('base64') !== content_b64) throw new Error('base64 re-encode mismatch');
              } catch {
                core.setFailed('content_b64 nie jest prawidłowym Base64.');
                process.exit(1);
              }
            } else {
              buf = Buffer.from(content_plain, 'utf8');
              content_b64 = buf.toString('base64');
            }

            if (sha256) {
              const calc = crypto.createHash('sha256').update(buf).digest('hex');
              core.info(`sha256(user)=${sha256}`);
              core.info(`sha256(calc)=${calc}`);
              if (calc !== sha256) {
                core.setFailed('SHA-256 mismatch treści.');
                process.exit(1);
              }
            }

            const { owner, repo } = context.repo;

            // ---- Odczyt istniejącego SHA (jeśli plik już jest) ----
            let sha;
            try {
              const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
                owner, repo, path, ref: branch,
              });
              sha = data?.sha;
              core.info(`Existing file found, sha=${sha}`);
            } catch (e) {
              if (e.status === 404) {
                core.info('Plik nie istnieje – utworzę nowy.');
              } else {
                core.setFailed(`GET contents failed: ${e.message}`);
                process.exit(1);
              }
            }

            // ---- Commit (PUT contents) ----
            try {
              const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
                owner, repo, path,
                message,
                branch,
                content: content_b64,
                sha, // jeśli brak – GitHub utworzy nowy plik
              });
              const commitSha = res.data?.commit?.sha || '(unknown)';
              await core.summary
                .addHeading('AI Upsert File')
                .addTable([
                  [{data:'Field',header:true},{data:'Value',header:true}],
                  ['path', path],
                  ['branch', branch],
                  ['commit', commitSha],
                  ['verified_sha256', sha256 ? 'yes' : 'no'],
                ])
                .write();
              core.info(`OK, committed ${commitSha}`);
            } catch (e) {
              core.setFailed(`PUT failed: ${e.message}`);
              process.exit(1);
            }
