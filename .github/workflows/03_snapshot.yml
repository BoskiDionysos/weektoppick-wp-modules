name: 03_snapshot (full/lite via SNAP_PROFILE, fixed upload path)

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      SNAP_PROFILE: full   # <— zmień na "lite" jeśli chcesz szybki zrzut

    steps:
      - uses: actions/checkout@v4

      - name: Tools + prepare helper scripts (in repo, not /tmp)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl jq sshpass
          mkdir -p .wtp/_tmp

          # Analyzer (krótki – wystarczy do metryk + list plików)
          cat > .wtp/_tmp/wtp_analyze.php <<'PHPAN'
          <?php
          if ($argc < 4) { fwrite(STDERR,"usage: php analyze <base> <type> <out>\n"); exit(1); }
          $base=rtrim($argv[1],"/"); $type=$argv[2]; $out=$argv[3];
          function files($d){ $r=[]; if(!is_dir($d)) return $r;
            $it=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($d,FilesystemIterator::SKIP_DOTS));
            foreach($it as $f){ if($f->isFile()) $r[]=substr($f->getPathname(),strlen($d)+1); }
            sort($r,SORT_NATURAL); return $r; }
          $res=[];
          if($type==='theme'){ $res=['present'=>is_dir($base),'files'=>files($base)]; }
          if($type==='plugins'){
            if(is_dir($base)){
              $slugs=array_values(array_filter(scandir($base),fn($e)=>$e!=='.'&&$e!=='..'&&is_dir("$base/$e")));
              sort($slugs,SORT_NATURAL);
              foreach($slugs as $s){ $res[$s]=['files'=>files("$base/$s")]; }
            }
          }
          if($type==='mu'){
            if(is_dir($base)){
              $items=array_values(array_filter(scandir($base),fn($e)=>$e!=='.'&&$e!=='..'));
              sort($items,SORT_NATURAL);
              foreach($items as $it){ $p="$base/$it";
                $res[$it]=is_dir($p)?['dir'=>true,'files'=>files($p)]:['dir'=>false,'files'=>[basename($p)]];
              }
            }
          }
          file_put_contents($out,json_encode($res,JSON_UNESCAPED_SLASHES));
          PHPAN

          # Remote snapshot script z dwoma profilami: lite/full
          cat > .wtp/_tmp/wtp_snapshot_raw.sh <<'SNAP'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"
          : "${RUN_ID:?RUN_ID required}"
          PROFILE="${SNAP_PROFILE:-lite}"

          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}/analysis" "${RAWDIR}/themes" "${RAWDIR}/plugins" "${RAWDIR}/mu-plugins" "${RAWDIR}/languages" || true

          cd "${TARGET}" || exit 1
          wp(){ php ./wp "$@" --path="${TARGET}"; }

          # A) Podstawy
          URL="$(wp option get siteurl 2>/dev/null || true)"
          HOME="$(wp option get home 2>/dev/null || true)"
          WPV="$(wp core version 2>/dev/null || true)"
          PHPV="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          echo "url=${URL}"           >  "${RAWDIR}/site_info.env"
          echo "home=${HOME}"         >> "${RAWDIR}/site_info.env"
          echo "wp_version=${WPV}"    >> "${RAWDIR}/site_info.env"
          echo "php_version=${PHPV}"  >> "${RAWDIR}/site_info.env"

          # B) WP-CLI listy
          wp theme list --format=json > "${RAWDIR}/themes.json" 2>/dev/null || echo "[]" > "${RAWDIR}/themes.json"
          wp plugin list --format=json > "${RAWDIR}/plugins.json" 2>/dev/null || echo "[]" > "${RAWDIR}/plugins.json"
          wp plugin list --status=active --field=name --format=json > "${RAWDIR}/plugins_active.json" 2>/dev/null || echo "[]" > "${RAWDIR}/plugins_active.json"
          ACTIVE_THEME="$(wp theme list --status=active --field=name 2>/dev/null | head -n1 || true)"
          printf "%s\n" "${ACTIVE_THEME}" > "${RAWDIR}/theme_active_slug.txt" || true

          # C) Analiza plików (krótka)
          php /tmp/wtp_analyze.php "${TARGET}/wp-content/mu-plugins" "mu"      "${RAWDIR}/analysis/mu.json"      2>/dev/null || echo "{}" > "${RAWDIR}/analysis/mu.json"
          php /tmp/wtp_analyze.php "${TARGET}/wp-content/plugins"    "plugins" "${RAWDIR}/analysis/plugins.json" 2>/dev/null || echo "{}" > "${RAWDIR}/analysis/plugins.json"
          if [ -n "${ACTIVE_THEME}" ] && [ -d "${TARGET}/wp-content/themes/${ACTIVE_THEME}" ]; then
            php /tmp/wtp_analyze.php "${TARGET}/wp-content/themes/${ACTIVE_THEME}" "theme" "${RAWDIR}/analysis/theme.json" 2>/dev/null || echo "{}" > "${RAWDIR}/analysis/theme.json"
          else
            echo "{}" > "${RAWDIR}/analysis/theme.json"
          fi

          if [ "${PROFILE}" = "full" ]; then
            # D) Drzewa + hashe: themes
            TDIR="${TARGET}/wp-content/themes"
            if [ -d "${TDIR}" ]; then
              find "${TDIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/themes_slugs.txt" || true
              while read -r t; do
                [ -z "$t" ] && continue
                tdir="${TDIR}/${t}"; tout="${RAWDIR}/themes/${t}"; mkdir -p "$tout"
                (cd "$tdir" && find . -type f -printf '%P\n' | sort) > "$tout/tree.txt" 2>/dev/null || true
                (cd "$tdir" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$tout/hashes.sha1" 2>/dev/null || true
              done < "${RAWDIR}/themes_slugs.txt"
            fi

            # E) Drzewa + hashe: plugins
            PDIR="${TARGET}/wp-content/plugins"
            if [ -d "${PDIR}" ]; then
              find "${PDIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/plugins_dirs.txt" || true
              while read -r p; do
                [ -z "$p" ] && continue
                pdir="${PDIR}/${p}"; pout="${RAWDIR}/plugins/${p}"; mkdir -p "$pout"
                (cd "$pdir" && find . -type f -printf '%P\n' | sort) > "$pout/tree.txt" 2>/dev/null || true
                (cd "$pdir" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$pout/hashes.sha1" 2>/dev/null || true
              done < "${RAWDIR}/plugins_dirs.txt"
            fi

            # F) MU-plugins (pliki/katalogi + hashe)
            MUDIR="${TARGET}/wp-content/mu-plugins"
            if [ -d "${MUDIR}" ]; then
              find "${MUDIR}" -maxdepth 1 -type f -printf '%f\n' | sort > "${RAWDIR}/mu_files.txt" 2>/dev/null || true
              find "${MUDIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/mu_dirs.txt" 2>/dev/null || true
              while read -r it; do
                [ -z "$it" ] && continue
                path="${MUDIR}/${it}"; mout="${RAWDIR}/mu-plugins/${it}"; mkdir -p "$mout"
                if [ -d "$path" ]; then
                  (cd "$path" && find . -type f -printf '%P\n' | sort) > "$mout/tree.txt" 2>/dev/null || true
                  (cd "$path" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$mout/hashes.sha1" 2>/dev/null || true
                else
                  echo "$it" > "$mout/tree.txt"
                  sha1sum "$path" > "$mout/hashes.sha1" 2>/dev/null || true
                fi
              done < <(cat "${RAWDIR}/mu_dirs.txt" "${RAWDIR}/mu_files.txt" 2>/dev/null || true)
            fi

            # G) Języki
            LDIR="${TARGET}/wp-content/languages"
            if [ -d "${LDIR}" ]; then
              (cd "${LDIR}" && find . -type f -printf '%P\n' | sort) > "${RAWDIR}/languages/tree.txt" 2>/dev/null || true
              (cd "${LDIR}" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "${RAWDIR}/languages/hashes.sha1" 2>/dev/null || true
            fi

            # H) Admini, theme_mods, kategorie, SSOT
            wp user list --role=administrator --field=user_login --format=json > "${RAWDIR}/admins.json" 2>/dev/null || echo "[]" > "${RAWDIR}/admins.json"
            if [ -n "${ACTIVE_THEME}" ]; then
              wp option get "theme_mods_${ACTIVE_THEME}" --format=json > "${RAWDIR}/theme_mods.json" 2>/dev/null || echo "{}" > "${RAWDIR}/theme_mods.json"
            else
              echo "{}" > "${RAWDIR}/theme_mods.json"
            fi
            wp term list category --fields=term_id,slug,name,parent,count,term_taxonomy_id --format=json > "${RAWDIR}/taxonomy_category.json" 2>/dev/null || echo "[]" > "${RAWDIR}/taxonomy_category.json"
            [ -f "${TARGET}/.wtp/ssot.yml" ] && cp "${TARGET}/.wtp/ssot.yml" "${RAWDIR}/ssot.yml" || true
          fi

          # I) Zbuduj snapshot.json (w zależności od profilu)
          if [ "${PROFILE}" = "full" ]; then
            jq -n \
              --arg run_id "${RUN_ID}" \
              --arg url "${URL}" --arg home "${HOME}" \
              --arg wp "${WPV}" --arg php "${PHPV}" \
              --arg themes "$(cat "${RAWDIR}/themes.json")" \
              --arg plugins "$(cat "${RAWDIR}/plugins.json")" \
              --arg active_plugins "$(cat "${RAWDIR}/plugins_active.json")" \
              --arg active_theme "$(cat "${RAWDIR}/theme_active_slug.txt" 2>/dev/null || echo "")" \
              --arg mu_a "$(cat "${RAWDIR}/analysis/mu.json")" \
              --arg pl_a "$(cat "${RAWDIR}/analysis/plugins.json")" \
              --arg th_a "$(cat "${RAWDIR}/analysis/theme.json")" \
              --arg admins "$(cat "${RAWDIR}/admins.json" 2>/dev/null || echo "[]")" \
              --arg theme_mods "$(cat "${RAWDIR}/theme_mods.json" 2>/dev/null || echo "{}")" \
              --arg tax_cat "$(cat "${RAWDIR}/taxonomy_category.json" 2>/dev/null || echo "[]")" \
              '{
                run_id: ($run_id|tonumber),
                site: { url:$url, home:$home, wp:$wp, php:$php },
                theme: { active:$active_theme, analysis: ($th_a|fromjson) },
                plugins: { all: ($plugins|fromjson), active: ($active_plugins|fromjson), analysis: ($pl_a|fromjson) },
                mu: ($mu_a|fromjson),
                admins: ($admins|fromjson),
                theme_mods: ($theme_mods|fromjson),
                content: { taxonomy: { category: ($tax_cat|fromjson) } }
              }' > "${RAWDIR}/snapshot.json"
          else
            jq -n \
              --arg run_id "${RUN_ID}" \
              --arg url "${URL}" --arg home "${HOME}" \
              --arg wp "${WPV}" --arg php "${PHPV}" \
              --arg themes "$(cat "${RAWDIR}/themes.json")" \
              --arg plugins "$(cat "${RAWDIR}/plugins.json")" \
              --arg active_plugins "$(cat "${RAWDIR}/plugins_active.json")" \
              --arg active_theme "$(cat "${RAWDIR}/theme_active_slug.txt" 2>/dev/null || echo "")" \
              --arg mu_a "$(cat "${RAWDIR}/analysis/mu.json")" \
              --arg pl_a "$(cat "${RAWDIR}/analysis/plugins.json")" \
              --arg th_a "$(cat "${RAWDIR}/analysis/theme.json")" \
              '{
                run_id: ($run_id|tonumber),
                site: { url:$url, home:$home, wp:$wp, php:$php },
                theme: { active:$active_theme, analysis: ($th_a|fromjson) },
                plugins: { all: ($plugins|fromjson), active: ($active_plugins|fromjson), analysis: ($pl_a|fromjson) },
                mu: ($mu_a|fromjson)
              }' > "${RAWDIR}/snapshot.json"
          fi

          echo "[OK] snapshot.json -> ${RAWDIR}/snapshot.json"
          SNAP
          chmod +x .wtp/_tmp/wtp_snapshot_raw.sh

      - name: SSH sanity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          script: |
            set -euo pipefail
            echo "[INFO] Connected as $(whoami) on $(hostname)"
            test -d "${TARGET}" && echo "TARGET ok: ${TARGET}" || { echo "NO TARGET"; exit 2; }

      - name: Upload helper scripts (workspace → /tmp on server)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          source:   ".wtp/_tmp/wtp_*"
          target:   "/tmp/"
          overwrite: true

      - name: Run remote snapshot
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          script: |
            set -euo pipefail
            RUN_ID='${{ github.run_id }}'
            TARGET='${{ env.TARGET }}'
            SNAP_PROFILE='${{ env.SNAP_PROFILE }}'
            bash /tmp/wtp_snapshot_raw.sh

      - name: Pull RAW back to artifacts
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=no -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: Publish RO to repo
        run: |
          set -euo pipefail
          SRC="_ci_logs/${{ github.run_id }}/snapshot"
          DEST_RO=".wtp/state/ro/public/${{ github.run_id }}"
          LATEST=".wtp/state/ro/public/latest"
          mkdir -p "${DEST_RO}"
          cp -a "${SRC}/." "${DEST_RO}/"
          rm -rf "${LATEST}" && mkdir -p "$(dirname "${LATEST}")" && cp -a "${DEST_RO}" "${LATEST}"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${DEST_RO}" "${LATEST}"
          if git diff --staged --quiet; then
            echo "Nothing to commit."
          else
            git commit -m "snapshot(${ { env.SNAP_PROFILE }}): run ${{ github.run_id }} (RO mirror)"
            git push
          fi

      - name: Done
        run: echo "::notice::Snapshot (${ { env.SNAP_PROFILE }}) finished → .wtp/state/ro/public/latest/snapshot.json"
