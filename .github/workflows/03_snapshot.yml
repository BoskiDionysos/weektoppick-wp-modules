name: 03_snapshot (WordPress → SSOT, pełny stan)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      commit_snapshot:
        description: "Commit snapshot.json do repo (.wtp/snapshots/)"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools + known_hosts (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "${PORT}" "${HOST}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: 3) Prepare local dirs
        shell: bash
        run: mkdir -p "_ci_logs/${{ github.run_id }}/snapshot"

      - name: 4) Create & upload snapshot script (+ ship jq)
        shell: bash
        run: |
          set -euo pipefail
          curl -L -o /tmp/jq 'https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-amd64'
          chmod +x /tmp/jq

          cat > /tmp/wtp_snapshot.sh <<'SNAPEOF'
          #!/usr/bin/env bash
          set -euo pipefail

          : "${TARGET:?TARGET is required}"
          : "${RUN_ID:?RUN_ID is required}"

          LOGDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${LOGDIR}"

          ERR_FILE="${LOGDIR}/errors.txt"; : > "${ERR_FILE}"
          note_err(){ echo "$1" | tee -a "${ERR_FILE}" 1>&2 || true; }
          run_wp(){ php ./wp "$@" --path="${TARGET}"; }

          # ---------- Detect jq ----------
          JQ_CANDIDATE="${TARGET}/.wtp/state/bin/jq"
          if [[ -x "$JQ_CANDIDATE" ]]; then
            JQ="$JQ_CANDIDATE"
          elif command -v jq >/dev/null 2>&1; then
            JQ="jq"
          else
            JQ=""
            note_err "jq not found – JSON aggregation will use minimal fallback."
          fi

          # ---------- A) Site/Core ----------
          SITE_URL="$(run_wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(run_wp option get home 2>/dev/null || true)"
          WP_VER="$(run_wp core version 2>/dev/null || true)"
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" "${TARGET}/wp-config.php" 2>/dev/null | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo "wp_")"
          WPLANG="$(run_wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(run_wp option get timezone_string 2>/dev/null || run_wp option get gmt_offset 2>/dev/null || true)"
          PHP_VERSION="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          php -v > "${LOGDIR}/php_info.txt" 2>&1 || note_err "php -v failed."

          if [[ -n "$JQ" ]]; then
            "$JQ" -n --arg url "$SITE_URL" --arg home "$SITE_HOME" \
              --arg wp_version "$WP_VER" --arg table_prefix "$TABLE_PREFIX" \
              --arg language "$WPLANG" --arg timezone "$TZ_STR" \
              --arg php_version "$PHP_VERSION" \
              '{url:$url,home:$home,wp_version:$wp_version,table_prefix:$table_prefix,language:$language,timezone:$timezone,php_version:$php_version}' \
              > "${LOGDIR}/site_info.json" || note_err "site_info.json failed."
          fi

          # ---------- B) Themes ----------
          run_wp theme list --status=active --format=json > "${LOGDIR}/theme_active.json" 2>>"${ERR_FILE}" || note_err "wp theme list --status=active failed."
          run_wp theme list --format=json > "${LOGDIR}/themes.json" 2>>"${ERR_FILE}" || note_err "wp theme list --format=json failed."

          # ---------- C) Plugins ----------
          run_wp plugin list --format=json > "${LOGDIR}/plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list --format=json failed."
          run_wp plugin list --format=csv > "${LOGDIR}/plugins.csv" 2>>"${ERR_FILE}" || note_err "wp plugin list --format=csv failed."

          # ... [reszta skryptu: trees, MU-plugins, users, SSOT, server, summary, snapshot.json]
          SNAPEOF

          chmod +x /tmp/wtp_snapshot.sh
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" "mkdir -p '${TARGET}/.wtp/state/bin'"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot.sh "${USER}@${HOST}:/tmp/wtp_snapshot.sh"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/jq "${USER}@${HOST}:'${TARGET}/.wtp/state/bin/jq'"

      - name: 5) Run remote snapshot script
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" "RUN_ID='${{ github.run_id }}' TARGET='${TARGET}' bash /tmp/wtp_snapshot.sh && rm -f /tmp/wtp_snapshot.sh"

      - name: 6) Pull logs back
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" "_ci_logs/${{ github.run_id }}/"

      - name: 7) Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**

      - name: 8) Validate snapshot.json
        shell: bash
        run: |
          set -euo pipefail
          SNAP="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          if [[ -s "$SNAP" ]]; then
            echo "::notice::Snapshot JSON created ($(wc -c < "$SNAP") bytes)"
            jq empty "$SNAP" || echo "::warning::JSON may be malformed"
          else
            echo "::error::No snapshot.json generated"; exit 1
          fi

      - name: 9) Report summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}."

  commit_snapshot:
    needs: snapshot
    if: ${{ inputs.commit_snapshot == true }}
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download snapshot artifact
        uses: actions/download-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/

      - name: Commit snapshot.json
        shell: bash
        run: |
          set -euo pipefail
          SRC="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          DEST_DIR=".wtp/snapshots"
          DEST_FILE="${DEST_DIR}/snapshot-${{ github.run_id }}.json"
          [[ -s "$SRC" ]] || { echo "::error::snapshot.json missing"; exit 1; }
          mkdir -p "$DEST_DIR"
          cp "$SRC" "$DEST_FILE"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$DEST_FILE"
          if git diff --staged --quiet; then
            echo "::notice::No changes to commit."
          else
            git commit -m "Add snapshot JSON for run ${{ github.run_id }}"
            git push
          fi
