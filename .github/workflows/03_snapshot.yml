name: 03_snapshot (WordPress → SSOT, pełny stan)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      commit_snapshot:
        description: "Commit snapshot.json do repo (.wtp/snapshots/)"
        type: boolean
        default: true

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      SITE_KEY: ${{ secrets.WTP_SITE_KEY }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools + known_hosts (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "${PORT}" "${HOST}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: 3) Prepare local dirs
        shell: bash
        run: mkdir -p "_ci_logs/${{ github.run_id }}/snapshot"

      - name: 4) Create & upload remote snapshot script
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/wtp_snapshot.sh <<'SNAPEOF'
          #!/usr/bin/env bash
          set -euo pipefail

          : "${TARGET:?TARGET is required}"
          : "${RUN_ID:?RUN_ID is required}"

          LOGDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${LOGDIR}"
          ERR_FILE="${LOGDIR}/errors.txt"; : > "${ERR_FILE}"

          note_err(){ echo "$1" | tee -a "${ERR_FILE}" 1>&2 || true; }
          run_wp(){ php ./wp "$@" --path="${TARGET}"; }

          # --- A) Site/Core
          SITE_URL="$(run_wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(run_wp option get home 2>/dev/null || true)"
          WP_VER="$(run_wp core version 2>/dev/null || true)"
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" "${TARGET}/wp-config.php" 2>/dev/null | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo "wp_")"
          WPLANG="$(run_wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(run_wp option get timezone_string 2>/dev/null || run_wp option get gmt_offset 2>/dev/null || true)"
          PHP_VERSION="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          php -v > "${LOGDIR}/php_info.txt" 2>&1 || note_err "php -v failed."

          {
            printf '%s\n' '{'
            printf '  "url": "%s",\n' "${SITE_URL}"
            printf '  "home": "%s",\n' "${SITE_HOME}"
            printf '  "wp_version": "%s",\n' "${WP_VER}"
            printf '  "table_prefix": "%s",\n' "${TABLE_PREFIX}"
            printf '  "language": "%s",\n' "${WPLANG}"
            printf '  "timezone": "%s",\n' "${TZ_STR}"
            printf '  "php_version": "%s"\n' "${PHP_VERSION}"
            printf '%s\n' '}'
          } > "${LOGDIR}/site_info.json" || note_err "site_info.json failed."

          # --- B) Themes
          run_wp theme list --status=active --format=json > "${LOGDIR}/theme_active.json" 2>>"${ERR_FILE}" || note_err "wp theme list active failed."
          run_wp theme list --format=json > "${LOGDIR}/themes.json" 2>>"${ERR_FILE}" || note_err "wp theme list failed."

          # --- C) Plugins (standard)
          run_wp plugin list --format=json > "${LOGDIR}/plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list json failed."
          run_wp plugin list --format=csv  > "${LOGDIR}/plugins.csv" 2>>"${ERR_FILE}" || note_err "wp plugin list csv failed."

          # Per-plugin trees + hashes
          PLUG_DIR="${TARGET}/wp-content/plugins"
          if [[ -d "${PLUG_DIR}" ]]; then
            # spróbuj z listy wp-cli, jak brak – z systemu plików
            if [[ -s "${LOGDIR}/plugins.json" ]]; then
              sed -n 's/.*"name"[[:space:]]*:[[:space:]]*"\([^"]*\)".*/\1/p' "${LOGDIR}/plugins.json" | sort -u > "${LOGDIR}/_slugs.txt" || true
            else
              find "${PLUG_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${LOGDIR}/_slugs.txt" || true
            fi
            while IFS= read -r slug; do
              [[ -n "$slug" && -d "${PLUG_DIR}/${slug}" ]] || continue
              OUTDIR="${LOGDIR}/plugins/${slug}"; mkdir -p "${OUTDIR}"
              find "${PLUG_DIR}/${slug}" -type f -print0 | sort -z | tr '\0' '\n' > "${OUTDIR}/tree.txt" 2>>"${ERR_FILE}" || true
              { find "${PLUG_DIR}/${slug}" -type f -print0 | sort -z | xargs -0 sha1sum; } > "${OUTDIR}/hashes.sha1" 2>>"${ERR_FILE}" || true
            done < "${LOGDIR}/_slugs.txt"
          fi

          # --- D) MU-plugins
          MU_DIR="${TARGET}/wp-content/mu-plugins"
          mkdir -p "${LOGDIR}/mu-plugins"
          if [[ -d "${MU_DIR}" ]]; then
            ls -la "${MU_DIR}" > "${LOGDIR}/mu-plugins/_ls.txt" 2>>"${ERR_FILE}" || note_err "ls mu-plugins failed."
            find "${MU_DIR}" -type f -print0 | sort -z | xargs -0 sha1sum > "${LOGDIR}/mu-plugins/_hashes.txt" 2>>"${ERR_FILE}" || true
            find "${MU_DIR}" -maxdepth 1 -type f -name "*.php" -print0 | \
              while IFS= read -r -d '' f; do
                head -n 50 "$f" | grep -E "^\s*\*\s*Plugin Name:" -m1 > "${LOGDIR}/mu-plugins/$(basename "$f").header.txt" 2>>"${ERR_FILE}" || true
              done
          else
            echo "mu-plugins directory not found." > "${LOGDIR}/mu-plugins/_ls.txt"
            : > "${LOGDIR}/mu-plugins/_hashes.txt"
          fi
          run_wp plugin list --status=must-use --format=json > "${LOGDIR}/mu_plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list must-use failed."

          # --- E) Users (admins)
          run_wp user list --role=administrator --field=user_login --format=json > "${LOGDIR}/admins.json" 2>>"${ERR_FILE}" || note_err "wp user list admin failed."

          # --- F) WTP / SSOT
          SSOT_PATH="${TARGET}/.wtp/ssot.yml"; SSOT_SHA1=""; SSOT_B64=""
          if [[ -f "${SSOT_PATH}" ]]; then
            cp "${SSOT_PATH}" "${LOGDIR}/ssot.yml" 2>>"${ERR_FILE}" || note_err "copy ssot.yml failed."
            SSOT_SHA1="$(sha1sum "${SSOT_PATH}" | awk '{print $1}')" || true
            echo "${SSOT_SHA1}" > "${LOGDIR}/ssot.sha1" || true
            SSOT_B64="$(base64 -w0 "${SSOT_PATH}" 2>/dev/null || base64 "${SSOT_PATH}" | tr -d '\n')" || true
          else
            note_err "SSOT file .wtp/ssot.yml not found."
          fi

          # --- G) Server info
          SERVER_USER="$(whoami 2>/dev/null || true)"
          SERVER_UNAME="$(uname -a 2>/dev/null || true)"
          SERVER_DT="$(date -Is 2>/dev/null || true)"
          SERVER_CWD="$(cd "${TARGET}" && pwd 2>/dev/null || true)"
          {
            echo "user: ${SERVER_USER}"
            echo "uname: ${SERVER_UNAME}"
            echo "datetime: ${SERVER_DT}"
            echo "cwd: ${SERVER_CWD}"
          } > "${LOGDIR}/server_info.txt" 2>>"${ERR_FILE}" || note_err "server_info.txt failed."

          # --- H) Active plugins (summary helpers)
          run_wp plugin list --status=active --field=name --format=json > "${LOGDIR}/plugins_active.json" 2>>"${ERR_FILE}" || note_err "wp plugin list active names failed."
          if [[ -s "${LOGDIR}/plugins_active.json" ]]; then
            sed -n 's/[^"[]*"\([^"]\+\)".*/\1/p' "${LOGDIR}/plugins_active.json" > "${LOGDIR}/plugins_active.txt" 2>>"${ERR_FILE}" || true
          else
            : > "${LOGDIR}/plugins_active.txt"
          fi

          # --- I) Build snapshot.json (PHP – bez jq)
          cat > /tmp/wtp_build_snapshot.php <<'PHPBUILDER'
          <?php
          error_reporting(E_ALL);
          $log = getenv('LOGDIR');
          $run = getenv('RUN_ID');
          $ts  = date('c');
          function jr($p,$d){ return ($p && is_readable($p)) ? (json_decode(file_get_contents($p), true) ?? $d) : $d; }
          function fr($p,$d=''){ return ($p && is_readable($p)) ? file_get_contents($p) : $d; }

          $site   = jr("$log/site_info.json", new stdClass());
          $themes = jr("$log/themes.json", []);
          $tact   = jr("$log/theme_active.json", []);
          $themeActive = (is_array($tact) && count($tact)>0) ? $tact[0] : null;

          $pluginsStd = jr("$log/plugins.json", []);
          $pluginsMU  = jr("$log/mu_plugins.json", []);
          $admins     = jr("$log/admins.json", []);
          $pluginsActive = jr("$log/plugins_active.json", []);

          // trees
          $trees = [];
          $dir = "$log/plugins";
          if (is_dir($dir)) {
            foreach (scandir($dir) as $slug) {
              if ($slug==='.'||$slug==='..') continue;
              $p = "$dir/$slug"; if(!is_dir($p)) continue;
              $tree="$p/tree.txt"; $hashes="$p/hashes.sha1";
              $files = (is_readable($tree)) ? max(0,count(file($tree, FILE_IGNORE_NEW_LINES))) : 0;
              $sha = '';
              if (is_readable($hashes)) {
                $all=preg_replace('/\s+.*/','',file_get_contents($hashes));
                $all=preg_replace('/\s+/','',$all);
                $sha=substr(sha1($all),0,40);
              }
              $trees[$slug]=['files'=>$files,'sha1'=>$sha];
            }
          }

          // counts (standard != MU)
          $stdOnly = array_values(array_filter($pluginsStd, fn($p)=>is_array($p) && (($p['status']??'')!=='must-use')));
          $counts = [
            'themes_total'   => is_array($themes)?count($themes):0,
            'plugins_total'  => count($stdOnly),
            'plugins_active' => is_array($pluginsActive)?count($pluginsActive):0,
            'plugins_mu'     => is_array($pluginsMU)?count($pluginsMU):0,
            'admins'         => is_array($admins)?count($admins):0
          ];

          // errors
          $errors = [];
          $e="$log/errors.txt";
          if (is_readable($e)) { $errors = array_values(array_filter(array_map('trim', file($e)))); }

          // server
          $srv=['user'=>'','uname'=>'','datetime'=>'','cwd'=>''];
          $si=fr("$log/server_info.txt");
          if($si){
            foreach(explode("\n",$si) as $ln){
              if(preg_match('/^([a-z]+):\s*(.*)$/i',trim($ln),$m)){ $srv[$m[1]]=$m[2]; }
            }
          }

          // ssot
          $ssot_path='.wtp/ssot.yml';
          $ssot_sha1=trim(fr("$log/ssot.sha1"));
          $ssot_b64= is_readable("$log/ssot.yml") ? base64_encode(file_get_contents("$log/ssot.yml")) : '';

          $out = [
            'run_id'=>(int)$run,
            'timestamp'=>$ts,
            'site'=>$site,
            'server'=>$srv,
            'theme'=>['active'=>$themeActive,'all'=>$themes],
            'plugins'=>['standard'=>$pluginsStd,'must_use'=>$pluginsMU,'trees'=>$trees],
            'admins'=>$admins,
            'summary'=>['plugins_active'=>$pluginsActive,'counts'=>$counts,'errors'=>$errors],
            'wtp'=>['ssot_path'=>$ssot_path,'ssot_sha1'=>$ssot_sha1,'ssot_b64'=>$ssot_b64]
          ];
          file_put_contents("$log/snapshot.json", json_encode($out, JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE));
          PHPBUILDER

          LOGDIR="${LOGDIR}" RUN_ID="${RUN_ID}" php /tmp/wtp_build_snapshot.php 2>>"${ERR_FILE}" || note_err "snapshot.json build failed."
          rm -f /tmp/wtp_build_snapshot.php || true

          # --- J) Publish RO (optional)
          if [[ -n "${SITE_KEY:-}" ]]; then
            PUB_DIR="${TARGET}/wp-content/uploads/wtp-ro/public/${SITE_KEY}"
            mkdir -p "${PUB_DIR}" || note_err "Cannot create ${PUB_DIR}"
            cp -f "${LOGDIR}/snapshot.json" "${PUB_DIR}/snapshot.json" 2>>"${ERR_FILE}" || true
            cp -f "${LOGDIR}/snapshot.json" "${PUB_DIR}/snapshot-${RUN_ID}.json" 2>>"${ERR_FILE}" || true
          fi
          SNAPEOF

          chmod +x /tmp/wtp_snapshot.sh
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot.sh "${USER}@${HOST}:/tmp/wtp_snapshot.sh"

      - name: 4.5) Hotfix push .wtp/ssot.yml to server if exists
        shell: bash
        run: |
          set -euo pipefail
          if [[ -f ".wtp/ssot.yml" ]]; then
            sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
              "${USER}@${HOST}" "mkdir -p '${TARGET}/.wtp'"
            sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes \
              ".wtp/ssot.yml" "${USER}@${HOST}:${TARGET}/.wtp/ssot.yml"
          else
            echo "::warning::.wtp/ssot.yml not found in repo – skipping push."
          fi

      - name: 5) Run remote snapshot script
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" "RUN_ID='${{ github.run_id }}' TARGET='${TARGET}' SITE_KEY='${SITE_KEY:-}' bash /tmp/wtp_snapshot.sh && rm -f /tmp/wtp_snapshot.sh"

      - name: 6) Pull logs back
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" "_ci_logs/${{ github.run_id }}/"

      - name: 7) Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**

      - name: 8) Validate snapshot.json
        shell: bash
        run: |
          set -euo pipefail
          SNAP="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          if [[ -s "$SNAP" ]]; then
            echo "::notice::Snapshot JSON created ($(wc -c < "$SNAP") bytes)"
            jq empty "$SNAP" || echo "::warning::JSON may be malformed"
          else
            echo "::error::No snapshot.json generated"; exit 1
          fi

      - name: 9) Report summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do [[ -n "$line" ]] && echo "::warning::$line"; done < "$ERR"
          fi
          if [[ -n "${SITE_KEY:-}" ]]; then
            echo "::notice::RO latest: /wp-content/uploads/wtp-ro/public/${SITE_KEY}/snapshot.json"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}."

      - name: 10) (Optional) Commit snapshot to repo
        if: ${{ inputs.commit_snapshot }}
        shell: bash
        run: |
          set -euo pipefail
          SRC="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          DEST_DIR=".wtp/snapshots"
          DEST_VER="${DEST_DIR}/snapshot-${{ github.run_id }}.json"
          DEST_LATEST="${DEST_DIR}/snapshot-latest.json"
          [[ -s "$SRC" ]] || { echo "::error::snapshot.json missing"; exit 1; }
          mkdir -p "$DEST_DIR"
          cp "$SRC" "$DEST_VER"
          cp "$SRC" "$DEST_LATEST"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$DEST_VER" "$DEST_LATEST"
          if git diff --staged --quiet; then
            echo "::notice::No changes to commit."
          else
            git commit -m "Add snapshot JSON for run ${{ github.run_id }} (and update snapshot-latest.json)"
            git push
          fi
