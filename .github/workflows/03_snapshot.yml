name: 03_snapshot (WordPress â†’ SSOT, full state)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: 1) Checkout
        uses: actions/checkout@v4

      - name: 2) Setup tools + known_hosts
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts || true
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: 3) SSH sanity (non-fatal)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          echo "::group::SSH sanity"
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "bash -lc '
              echo user: \$(whoami)
              echo host: \$(hostname)
              cd \"$TARGET\" || { echo \"ERR: cannot cd TARGET\"; exit 2; }
              test -f wp-config.php && echo OK:wp-config || { echo ERR:no-wp-config; exit 3; }
              pwd; ls -la | head -n 20
            '"
          echo "::endgroup::"

      - name: 4) Prepare local dirs
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}/snapshot"

      - name: 5) Upload remote raw snapshot script
        shell: bash
        run: |
          set -euo pipefail

          cat > /tmp/wtp_snapshot_raw.sh <<'SNAP'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"
          : "${RUN_ID:?RUN_ID required}"
          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}"
          ERR="${RAWDIR}/errors.txt"
          : > "$ERR"
          note(){ echo "$1" | tee -a "$ERR" 1>&2 || true; }

          cd "$TARGET" || { note "cannot cd TARGET"; exit 1; }
          wp(){ php ./wp "$@" --path="$TARGET"; }

          # site/core
          SITE_URL="$(wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(wp option get home 2>/dev/null || true)"
          WP_VER="$(wp core version 2>/dev/null || true)"
          PHP_VER="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" wp-config.php 2>/dev/null | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo wp_)"
          WPLANG="$(wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(wp option get timezone_string 2>/dev/null || true)"
          if [[ -z "${TZ_STR}" || "${TZ_STR}" == "false" ]]; then TZ_STR="$(wp option get gmt_offset 2>/dev/null || true)"; fi
          {
            echo "url=${SITE_URL}"
            echo "home=${SITE_HOME}"
            echo "wp_version=${WP_VER}"
            echo "table_prefix=${TABLE_PREFIX}"
            echo "language=${WPLANG}"
            echo "timezone=${TZ_STR}"
            echo "php_version=${PHP_VER}"
          } > "${RAWDIR}/site_info.env"

          # themes
          wp theme list --format=json > "${RAWDIR}/themes.json" 2>>"$ERR" || echo "[]" > "${RAWDIR}/themes.json"
          ACTIVE_THEME="$(wp theme list --status=active --field=name 2>/dev/null | head -n1 || true)"
          printf "%s\n" "$ACTIVE_THEME" > "${RAWDIR}/theme_active_slug.txt" || true

          THEMES_DIR="${TARGET}/wp-content/themes"
          mkdir -p "${RAWDIR}/themes"
          : > "${RAWDIR}/themes_trees.tsv"
          if [[ -d "$THEMES_DIR" ]]; then
            find "$THEMES_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/themes_slugs.txt" || true
            while read -r t; do
              [[ -z "$t" ]] && continue
              tdir="$THEMES_DIR/$t"; out="${RAWDIR}/themes/$t"; mkdir -p "$out"
              (cd "$tdir" && find . -type f -printf '%P\n' | sort) > "$out/tree.txt" 2>>"$ERR" || true
              (cd "$tdir" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$out/hashes.sha1" 2>>"$ERR" || true
              cnt=$(wc -l < "$out/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [[ -s "$out/hashes.sha1" ]] && gsha="$(awk '{print $1}' "$out/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "$t" "$cnt" "$gsha" >> "${RAWDIR}/themes_trees.tsv"
            done < "${RAWDIR}/themes_slugs.txt"
          else
            : > "${RAWDIR}/themes_slugs.txt"
          fi

          # plugins (std)
          wp plugin list --format=json > "${RAWDIR}/plugins.json" 2>>"$ERR" || echo "[]" > "${RAWDIR}/plugins.json"
          wp plugin list --format=csv  > "${RAWDIR}/plugins.csv"  2>>"$ERR" || : > "${RAWDIR}/plugins.csv"

          PL_DIR="${TARGET}/wp-content/plugins"; mkdir -p "${RAWDIR}/plugins"
          : > "${RAWDIR}/plugins_trees.tsv"
          if [[ -d "$PL_DIR" ]]; then
            find "$PL_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/plugins_dirs.txt" || true
            while read -r p; do
              [[ -z "$p" ]] && continue
              pdir="$PL_DIR/$p"; out="${RAWDIR}/plugins/$p"; mkdir -p "$out"
              (cd "$pdir" && find . -type f -printf '%P\n' | sort) > "$out/tree.txt" 2>>"$ERR" || true
              (cd "$pdir" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$out/hashes.sha1" 2>>"$ERR" || true
              cnt=$(wc -l < "$out/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [[ -s "$out/hashes.sha1" ]] && gsha="$(awk '{print $1}' "$out/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "$p" "$cnt" "$gsha" >> "${RAWDIR}/plugins_trees.tsv"
            done < "${RAWDIR}/plugins_dirs.txt"
          fi

          # MU (w tym *.off)
          wp plugin list --status=must-use --format=json > "${RAWDIR}/mu_plugins.json" 2>>"$ERR" || echo "[]" > "${RAWDIR}/mu_plugins.json"
          MU_DIR="${TARGET}/wp-content/mu-plugins"; mkdir -p "${RAWDIR}/mu-plugins"
          : > "${RAWDIR}/mu_plugins_trees.tsv"
          if [[ -d "$MU_DIR" ]]; then
            ls -la "$MU_DIR" > "${RAWDIR}/mu_plugins_ls.txt" 2>>"$ERR" || true
            : > "${RAWDIR}/mu_plugins_hashes.txt"
            find "$MU_DIR" -type f -print0 2>/dev/null | while IFS= read -r -d '' f; do sha1sum "$f" >> "${RAWDIR}/mu_plugins_hashes.txt" 2>>"$ERR" || true; done
            : > "${RAWDIR}/mu_plugins_items.txt"
            find "$MU_DIR" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true
            find "$MU_DIR" -maxdepth 1 -type f -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true
            while read -r it; do
              [[ -z "$it" ]] && continue
              out="${RAWDIR}/mu-plugins/$it"; mkdir -p "$out"
              if [[ -d "$MU_DIR/$it" ]]; then
                (cd "$MU_DIR/$it" && find . -type f -printf '%P\n' | sort) > "$out/tree.txt" 2>>"$ERR" || true
                (cd "$MU_DIR/$it" && find . -type f -print0 | sort -z | xargs -0 sha1sum) > "$out/hashes.sha1" 2>>"$ERR" || true
              else
                echo "$it" > "$out/tree.txt"
                sha1sum "$MU_DIR/$it" > "$out/hashes.sha1" 2>>"$ERR" || true
              fi
              cnt=$(wc -l < "$out/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [[ -s "$out/hashes.sha1" ]] && gsha="$(awk '{print $1}' "$out/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "$it" "$cnt" "$gsha" >> "${RAWDIR}/mu_plugins_trees.tsv"
            done < "${RAWDIR}/mu_plugins_items.txt"

            : > "${RAWDIR}/mu_plugins_headers.txt"
            find "$MU_DIR" -maxdepth 1 -type f -name "*.php*" -print0 2>/dev/null | while IFS= read -r -d '' fphp; do
              { echo "=== $(basename "$fphp") ==="; head -n 80 "$fphp" | grep -E "^\s*(\*|//)?\s*(Plugin Name|Description|Version):" || true; echo; } >> "${RAWDIR}/mu_plugins_headers.txt"
            done
          else
            echo "mu-plugins missing" > "${RAWDIR}/mu_plugins_ls.txt"
          fi

          # users/admins
          wp user list --role=administrator --field=user_login --format=json > "${RAWDIR}/admins.json" 2>>"$ERR" || echo "[]" > "${RAWDIR}/admins.json"

          # ssot
          if [[ -f ".wtp/ssot.yml" ]]; then
            cp ".wtp/ssot.yml" "${RAWDIR}/ssot.yml" 2>>"$ERR" || true
            sha1sum ".wtp/ssot.yml" | awk '{print $1}' > "${RAWDIR}/ssot.sha1" || true
            (base64 -w0 ".wtp/ssot.yml" 2>/dev/null || base64 ".wtp/ssot.yml") | tr -d '\n' > "${RAWDIR}/ssot.b64" || true
          else
            : > "${RAWDIR}/ssot.yml"; : > "${RAWDIR}/ssot.sha1"; : > "${RAWDIR}/ssot.b64"
          fi

          # server info
          {
            echo "user: $(whoami 2>/dev/null || true)"
            echo "uname: $(uname -a 2>/dev/null || true)"
            echo "datetime: $(date -Is 2>/dev/null || true)"
            echo "cwd: $(pwd 2>/dev/null || true)"
          } > "${RAWDIR}/server_info.txt" || true

          # active plugins
          wp plugin list --status=active --field=name --format=json > "${RAWDIR}/plugins_active.json" 2>>"$ERR" || echo "[]" > "${RAWDIR}/plugins_active.json"

          exit 0
          SNAP

          chmod +x /tmp/wtp_snapshot_raw.sh
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot_raw.sh "$USER@$HOST:/tmp/wtp_snapshot_raw.sh"

      - name: 6) Run remote raw snapshot
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes "$USER@$HOST" \
            "RUN_ID='${{ github.run_id }}' TARGET='${TARGET}' bash /tmp/wtp_snapshot_raw.sh && rm -f /tmp/wtp_snapshot_raw.sh"

      - name: 7) Pull RAW back
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes -r \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: 8) Assemble snapshot.json (locally)
        shell: bash
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"
          [ -d "$RAW" ] || { echo "::error::RAW dir missing"; exit 1; }

          safe() { [ -f "$1" ] && cat "$1" || echo ""; }
          j() { local f="$1" def="$2"; [ -s "$f" ] && cat "$f" || echo "$def"; }

          declare -A SITE=()
          if [ -f "${RAW}/site_info.env" ]; then
            while IFS='=' read -r k v; do [ -n "${k:-}" ] && SITE["$k"]="$v"; done < "${RAW}/site_info.env"
          fi

          THEMES_ALL="$(j "${RAW}/themes.json" '[]')"
          PLUGINS_STD="$(j "${RAW}/plugins.json" '[]')"
          MU_PLUGINS="$(j "${RAW}/mu_plugins.json" '[]')"
          PLUGINS_ACTIVE="$(j "${RAW}/plugins_active.json" '[]')"
          ADMINS="$(j "${RAW}/admins.json" '[]')"

          PLUG_TSV="$(safe "${RAW}/plugins_trees.tsv")"
          MU_TSV="$(safe "${RAW}/mu_plugins_trees.tsv")"
          ERRS="$(safe "${RAW}/errors.txt")"
          ACTIVE_THEME="$(safe "${RAW}/theme_active_slug.txt")"

          jq -n \
            --arg run_id "${{ github.run_id }}" \
            --arg timestamp "$(date -Is)" \
            --arg url "${SITE[url]:-}" \
            --arg home "${SITE[home]:-}" \
            --arg wp_version "${SITE[wp_version]:-}" \
            --arg table_prefix "${SITE[table_prefix]:-}" \
            --arg language "${SITE[language]:-}" \
            --arg timezone "${SITE[timezone]:-}" \
            --arg php_version "${SITE[php_version]:-}" \
            --arg themes_all "$THEMES_ALL" \
            --arg active_theme "$ACTIVE_THEME" \
            --arg plugins_std "$PLUGINS_STD" \
            --arg mu_plugins "$MU_PLUGINS" \
            --arg plugins_active "$PLUGINS_ACTIVE" \
            --arg admins "$ADMINS" \
            --arg errs "$ERRS" \
            --arg plug_tsv "$PLUG_TSV" \
            --arg mu_tsv "$MU_TSV" \
            '
              def lines(x): (x|split("\n")|map(select(length>0)));
              def tsvmap(s):
                (s|split("\n")|map(select(length>0))|map(split("\t"))|
                 reduce .[] as $r ({}; . + { ($r[0]) : {files: (($r[1]//"0")|tonumber), sha1: ($r[2]//"") } }));

              {
                run_id: ($run_id|tonumber),
                timestamp: $timestamp,
                site: {
                  url:$url, home:$home, wp_version:$wp_version,
                  table_prefix:$table_prefix, language:$language, timezone:$timezone, php_version:$php_version
                },
                theme: {
                  active: (if ($active_theme|length)>0 then {stylesheet:$active_theme} else null end),
                  all: ($themes_all|fromjson)
                },
                plugins: {
                  standard: ($plugins_std|fromjson),
                  must_use: ($mu_plugins|fromjson),
                  trees: (tsvmap($plug_tsv)),
                  mu_trees: (tsvmap($mu_tsv))
                },
                admins: ($admins|fromjson),
                summary: {
                  plugins_active: ($plugins_active|fromjson),
                  counts: {
                    themes_total: (($themes_all|fromjson)|length),
                    plugins_total: (($plugins_std|fromjson)|length),
                    plugins_active: (($plugins_active|fromjson)|length),
                    plugins_mu: (($mu_plugins|fromjson)|length),
                    admins: (($admins|fromjson)|length)
                  },
                  errors: lines($errs)
                }
              }
            ' > "$SNAP"

          echo "::notice::Built snapshot.json ($(wc -c < "$SNAP") bytes)"

      - name: 9) Upload artifact (raw + snapshot)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: 10) Publish snapshot + RO mirror
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP_FILE="${SRC_DIR}/snapshot.json"
          [ -s "$SNAP_FILE" ] || { echo "::error::No snapshot.json"; exit 1; }

          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"

          mkdir -p "$SNAP_DIR" "$RO_DIR"
          cp -a "$SRC_DIR/." "$RO_DIR/"
          cp "$SNAP_FILE" "$SNAP_DIR/snapshot-${{ github.run_id }}.json"
          cp "$SNAP_FILE" "$SNAP_DIR/snapshot-latest.json"

          rm -rf "$RO_LATEST"
          mkdir -p "$(dirname "$RO_LATEST")"
          cp -a "$RO_DIR" "$RO_LATEST"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$SNAP_DIR/snapshot-${{ github.run_id }}.json" "$SNAP_DIR/snapshot-latest.json" "$RO_DIR" "$RO_LATEST"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish snapshot run ${{ github.run_id }} (raw+trees+mu)"
            git push
          fi

      - name: 11) Summary (always)
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed (run ${{ github.run_id }})."
