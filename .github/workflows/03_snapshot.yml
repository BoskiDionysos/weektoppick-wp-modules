name: 03_snapshot (SSH via appleboy, spójne z 01 + smoketest)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 25

    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Prepare tools (jq) + build helper scripts
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq

          # --- PHP analyzer (lokalnie, potem scp na serwer) ---
          cat > /tmp/wtp_analyze.php <<'PHPAN'
          <?php
          // Minimal analyzer: zbiera podstawowe sygnały z kodu
          if ($argc < 4) { fwrite(STDERR, "usage: php analyze <base> <type> <out>\n"); exit(1); }
          $base = rtrim($argv[1], "/"); $type = $argv[2]; $out = $argv[3];

          function files($dir){ $arr=[]; if(!is_dir($dir)) return $arr;
            $it = new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS));
            foreach($it as $f){ if($f->isFile()){ $n=strtolower($f->getFilename());
              $ext=pathinfo($n, PATHINFO_EXTENSION);
              if(in_array($ext, ['php','phtml','phps'])) $arr[]=$f->getPathname();
            }} return $arr;
          }
          function analyze($list){ $r=['files'=>0,'actions'=>0,'filters'=>0,'shortcodes'=>0,'rest'=>0,'cpt'=>0,'tax'=>0,'enqueues'=>0,'defines'=>0];
            foreach($list as $f){ $c=@file_get_contents($f); if($c===false) continue;
              $r['files']++;
              $r['actions']   += preg_match_all('/\badd_action\s*\(/i',$c,$m);
              $r['filters']   += preg_match_all('/\badd_filter\s*\(/i',$c,$m);
              $r['shortcodes']+= preg_match_all('/\badd_shortcode\s*\(/i',$c,$m);
              $r['rest']      += preg_match_all('/\bregister_rest_route\s*\(/i',$c,$m);
              $r['cpt']       += preg_match_all('/\bregister_post_type\s*\(/i',$c,$m);
              $r['tax']       += preg_match_all('/\bregister_taxonomy\s*\(/i',$c,$m);
              $r['enqueues']  += preg_match_all('/\bwp_enqueue_(script|style)\s*\(/i',$c,$m);
              $r['defines']   += preg_match_all('/\bdefine\s*\(\s*[\'"][^\'"]+[\'"]\s*,/i',$c,$m);
            } return $r;
          }

          if($type==='theme' || $type==='plugins' || $type==='mu'){
            $scan = $type==='theme' ? files($base) :
                    ($type==='plugins' ? files($base) : files($base));
            $res = analyze($scan);
            file_put_contents($out, json_encode($res, JSON_UNESCAPED_SLASHES));
          } else { file_put_contents($out, "{}"); }
          PHPAN

          # --- RAW snapshot runner (na zdalnym) ---
          cat > /tmp/wtp_snapshot_raw.sh <<'SNAP'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"
          : "${RUN_ID:?RUN_ID required}"

          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}"
          ERR="${RAWDIR}/errors.txt"; : > "${ERR}"
          note(){ echo "$@" | tee -a "${ERR}" 1>&2 || true; }

          cd "${TARGET}" || { note "cannot cd TARGET"; exit 1; }
          wp(){ php ./wp "$@" --path="${TARGET}"; }

          # A) Site/Core
          {
            echo "url=$(wp option get siteurl 2>/dev/null || true)"
            echo "home=$(wp option get home 2>/dev/null || true)"
            echo "wp_version=$(wp core version 2>/dev/null || true)"
            echo "php_version=$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          } > "${RAWDIR}/site_info.env"

          # B) Themes + active
          wp theme list --format=json > "${RAWDIR}/themes.json" 2>>"${ERR}" || echo "[]" > "${RAWDIR}/themes.json"
          wp theme list --status=active --field=name > "${RAWDIR}/theme_active_slug.txt" 2>>"${ERR}" || true

          # C) Plugins (std + mu + active)
          wp plugin list --format=json > "${RAWDIR}/plugins.json" 2>>"${ERR}" || echo "[]" > "${RAWDIR}/plugins.json"
          wp plugin list --status=active --field=name --format=json > "${RAWDIR}/plugins_active.json" 2>>"${ERR}" || echo "[]" > "${RAWDIR}/plugins_active.json"
          wp plugin list --status=must-use --format=json > "${RAWDIR}/mu_plugins.json" 2>>"${ERR}" || echo "[]" > "${RAWDIR}/mu_plugins.json"

          # D) Basic code hashes (themes/plugins dirs)
          THEMES_DIR="${TARGET}/wp-content/themes"
          PLUG_DIR="${TARGET}/wp-content/plugins"
          mkdir -p "${RAWDIR}/themes" "${RAWDIR}/plugins"

          if [[ -d "${THEMES_DIR}" ]]; then
            find "${THEMES_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/themes_slugs.txt" || true
            : > "${RAWDIR}/themes_trees.tsv"
            while read -r t; do
              [[ -z "$t" ]] && continue
              (cd "${THEMES_DIR}/${t}" && find . -type f -printf '%P\n' | sort) > "${RAWDIR}/themes/${t}.tree" 2>>"${ERR}" || true
              (cd "${THEMES_DIR}/${t}" && find . -type f -print0 | sort -z | xargs -0 sha1sum) | awk '{print $1}' | tr -d '\r' | sort | sha1sum | awk '{print $1"\t'${t}'"}' >> "${RAWDIR}/themes_trees.tsv" || true
            done < "${RAWDIR}/themes_slugs.txt"
          else
            : > "${RAWDIR}/themes_slugs.txt"; : > "${RAWDIR}/themes_trees.tsv"
          fi

          if [[ -d "${PLUG_DIR}" ]]; then
            find "${PLUG_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/plugins_slugs.txt" || true
            : > "${RAWDIR}/plugins_trees.tsv"
            while read -r p; do
              [[ -z "$p" ]] && continue
              (cd "${PLUG_DIR}/${p}" && find . -type f -printf '%P\n' | sort) > "${RAWDIR}/plugins/${p}.tree" 2>>"${ERR}" || true
              (cd "${PLUG_DIR}/${p}" && find . -type f -print0 | sort -z | xargs -0 sha1sum) | awk '{print $1}' | tr -d '\r' | sort | sha1sum | awk '{print $1"\t'${p}'"}' >> "${RAWDIR}/plugins_trees.tsv" || true
            done < "${RAWDIR}/plugins_slugs.txt"
          else
            : > "${RAWDIR}/plugins_slugs.txt"; : > "${RAWDIR}/plugins_trees.tsv"
          fi

          # E) Minimal server info
          {
            echo "user: $(whoami || true)"
            echo "uname: $(uname -a || true)"
            echo "datetime: $(date -Is || true)"
          } > "${RAWDIR}/server_info.txt" || true

          exit 0
          SNAP
          chmod +x /tmp/wtp_snapshot_raw.sh

      - name: Upload helper scripts (scp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT }}
          source:   "/tmp/wtp_snapshot_raw.sh,/tmp/wtp_analyze.php"
          target:   "/tmp"

      - name: SSH sanity (whoami, php -v)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT }}
          script_stop: true
          script: |
            set -euo pipefail
            whoami; php -v | head -n 2 || true
            test -d "${{ secrets.DEPLOY_TARGET }}" || { echo "ERR: no target"; exit 3; }

      - name: Run RAW snapshot remotely
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT }}
          script_stop: true
          envs: RUN_ID,TARGET
          script: |
            set -euo pipefail
            RUN_ID='${{ github.run_id }}'
            TARGET='${{ secrets.DEPLOY_TARGET }}'
            RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
            mkdir -p "${RAWDIR}"
            php -v | head -n1 || true
            RUN_ID="$RUN_ID" TARGET="$TARGET" bash /tmp/wtp_snapshot_raw.sh
            echo "[OK] raw snapshot done into ${RAWDIR}"

            # Prosta analiza aktywnego motywu (jeśli jest)
            ACTIVE="$(wp --path="${TARGET}" theme list --status=active --field=name 2>/dev/null | head -n1 || true)"
            if [ -n "$ACTIVE" ] && [ -d "${TARGET}/wp-content/themes/${ACTIVE}" ]; then
              php /tmp/wtp_analyze.php "${TARGET}/wp-content/themes/${ACTIVE}" "theme" "${RAWDIR}/theme_analysis.json" || echo "{}" > "${RAWDIR}/theme_analysis.json"
            else
              echo "{}" > "${RAWDIR}/theme_analysis.json"
            fi

      - name: Pull RAW folder back (scp)
        uses: appleboy/scp-action@v0.1.7
        with:
          host:     ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key:      ${{ secrets.DEPLOY_SSH_KEY }}
          port:     ${{ secrets.DEPLOY_PORT }}
          source:   "${{ secrets.DEPLOY_TARGET }}/.wtp/state/ci_logs/snapshot/*"
          target:   "_ci_logs/${{ github.run_id }}/snapshot"
          strip_components: 5

      - name: Assemble snapshot.json locally
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"

          safe() { [ -f "$1" ] && cat "$1" || echo ""; }
          readj(){ [ -s "$1" ] && cat "$1" || echo "$2"; }

          THEMES_ALL="$(readj "${RAW}/themes.json" '[]')"
          PLUGINS_STD="$(readj "${RAW}/plugins.json" '[]')"
          MU_PLUGINS="$(readj "${RAW}/mu_plugins.json" '[]')"
          ACTIVE_THEME="$(safe  "${RAW}/theme_active_slug.txt")"
          PLUGINS_ACTIVE="$(readj "${RAW}/plugins_active.json" '[]')"
          THEME_ANALYSIS="$(readj "${RAW}/theme_analysis.json" '{}')"

          SITE_URL="$(grep '^url='        "${RAW}/site_info.env" 2>/dev/null | sed 's/^url=//')"
          SITE_HOME="$(grep '^home='       "${RAW}/site_info.env" 2>/dev/null | sed 's/^home=//')"
          WP_VER="$(grep '^wp_version='    "${RAW}/site_info.env" 2>/dev/null | sed 's/^wp_version=//')"
          PHP_VER="$(grep '^php_version='  "${RAW}/site_info.env" 2>/dev/null | sed 's/^php_version=//')"

          jq -n \
            --arg run_id "${{ github.run_id }}" \
            --arg ts "$(date -Is)" \
            --arg url "$SITE_URL" \
            --arg home "$SITE_HOME" \
            --arg wp "$WP_VER" \
            --arg php "$PHP_VER" \
            --arg themes_all "$THEMES_ALL" \
            --arg active_theme "$ACTIVE_THEME" \
            --arg plugins "$PLUGINS_STD" \
            --arg mu "$MU_PLUGINS" \
            --arg act "$PLUGINS_ACTIVE" \
            --arg theme_an "$THEME_ANALYSIS" \
            '
              {
                run_id: ($run_id|tonumber),
                timestamp: $ts,
                site: { url:$url, home:$home, wp_version:$wp, php_version:$php },
                theme: { active: (if ($active_theme|length)>0 then {stylesheet:$active_theme} else null end),
                         all: ($themes_all|fromjson),
                         analysis: ($theme_an|fromjson) },
                plugins: { standard: ($plugins|fromjson),
                           must_use: ($mu|fromjson),
                           active:   ($act|fromjson) }
              }
            ' > "$SNAP"

          echo "::notice::Built snapshot.json ($(wc -c < "$SNAP") bytes)"
          ls -la "$RAW"

      - name: Upload artifact (snapshot logs)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: Publish snapshot to repo (RO mirror)
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"

          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"

          mkdir -p "$SNAP_DIR" "$RO_DIR"
          cp -a "$RAW/." "$RO_DIR/"
          cp "$SNAP" "$SNAP_DIR/snapshot-${{ github.run_id }}.json"
          cp "$SNAP" "$SNAP_DIR/snapshot-latest.json"

          rm -rf "$RO_LATEST"
          mkdir -p "$(dirname "$RO_LATEST")"
          cp -a "$RO_DIR" "$RO_LATEST"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$SNAP_DIR/snapshot-${{ github.run_id }}.json" "$SNAP_DIR/snapshot-latest.json" "$RO_DIR" "$RO_LATEST"
          git commit -m "Publish snapshot run ${{ github.run_id }} (appleboy SSH pipeline)" || echo "Nothing to commit"
          git push || true

      - name: Done
        run: echo "::notice::03_snapshot completed for run ${{ github.run_id }}."
