name: 03_snapshot (WordPress → SSOT, pełny stan)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch:
    inputs:
      commit_snapshot:
        description: "Commit snapshot.json do repo (.wtp/snapshots/)"
        type: boolean
        default: false

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools + known_hosts (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "${PORT}" "${HOST}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: 3) Prepare local dirs
        shell: bash
        run: mkdir -p "_ci_logs/${{ github.run_id }}/snapshot"

      - name: 4) Create & upload snapshot script (heredoc)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/wtp_snapshot.sh <<'SNAPEOF'
          #!/usr/bin/env bash
          set -euo pipefail

          : "${TARGET:?TARGET is required}"
          : "${RUN_ID:?RUN_ID is required}"

          LOGDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${LOGDIR}"

          ERR_FILE="${LOGDIR}/errors.txt"; : > "${ERR_FILE}"
          note_err(){ echo "$1" | tee -a "${ERR_FILE}" 1>&2 || true; }
          run_wp(){ php ./wp "$@" --path="${TARGET}"; }

          # --- jq availability ---
          JQ_OK=1
          if ! command -v jq >/dev/null 2>&1; then
            JQ_OK=0
            note_err "jq not found – JSON aggregation will use minimal fallback."
          fi

          # ---------- A) Site/Core ----------
          SITE_URL="$(run_wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(run_wp option get home 2>/dev/null || true)"
          WP_VER="$(run_wp core version 2>/dev/null || true)"
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" "${TARGET}/wp-config.php" 2>/dev/null | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo "wp_")"
          WPLANG="$(run_wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(run_wp option get timezone_string 2>/dev/null || run_wp option get gmt_offset 2>/dev/null || true)"
          PHP_VERSION="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          php -v > "${LOGDIR}/php_info.txt" 2>&1 || note_err "php -v failed."

          if [[ "$JQ_OK" -eq 1 ]]; then
            jq -n \
              --arg url "$SITE_URL" --arg home "$SITE_HOME" \
              --arg wp_version "$WP_VER" --arg table_prefix "$TABLE_PREFIX" \
              --arg language "$WPLANG" --arg timezone "$TZ_STR" \
              --arg php_version "$PHP_VERSION" \
              '{url:$url,home:$home,wp_version:$wp_version,table_prefix:$table_prefix,language:$language,timezone:$timezone,php_version:$php_version}' \
              > "${LOGDIR}/site_info.json" || note_err "site_info.json failed."
          fi

          # ---------- B) Themes ----------
          run_wp theme list --status=active --format=json > "${LOGDIR}/theme_active.json" 2>>"${ERR_FILE}" || note_err "wp theme list --status=active failed."
          run_wp theme list --format=json > "${LOGDIR}/themes.json" 2>>"${ERR_FILE}" || note_err "wp theme list --format=json failed."

          # ---------- C) Plugins (standard) + CSV ----------
          run_wp plugin list --format=json > "${LOGDIR}/plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list --format=json failed."
          run_wp plugin list --format=csv > "${LOGDIR}/plugins.csv" 2>>"${ERR_FILE}" || note_err "wp plugin list --format=csv failed."

          # ---------- C2) Per-plugin trees + SHA1 ----------
          PLUG_DIR="${TARGET}/wp-content/plugins"
          TREES_SUMMARY="${LOGDIR}/plugins_trees.json"
          echo '{}' > "${TREES_SUMMARY}"
          if [[ -d "${PLUG_DIR}" && "$JQ_OK" -eq 1 ]]; then
            mapfile -t SLUGS < <(jq -r '.[].name' "${LOGDIR}/plugins.json" 2>/dev/null || true)
            for slug in "${SLUGS[@]}"; do
              [[ -n "$slug" && -d "${PLUG_DIR}/${slug}" ]] || continue
              OUTDIR="${LOGDIR}/plugins/${slug}"
              mkdir -p "${OUTDIR}"
              find "${PLUG_DIR}/${slug}" -type f -print0 | sort -z | xargs -0 -I{} printf "%s\n" "{}" > "${OUTDIR}/tree.txt" 2>>"${ERR_FILE}" || true
              find "${PLUG_DIR}/${slug}" -type f -print0 | sort -z | xargs -0 sha1sum > "${OUTDIR}/hashes.sha1" 2>>"${ERR_FILE}" || { : > "${OUTDIR}/hashes.sha1"; }
              FILES_CNT="$(wc -l < "${OUTDIR}/tree.txt" 2>/dev/null || echo 0)"
              ALL_SHA="$(awk '{print $1}' "${OUTDIR}/hashes.sha1" 2>/dev/null | tr -d '\n' | sha1sum 2>/dev/null | awk '{print $1}' || echo "")"
              TMP="$(mktemp)"
              jq --arg slug "$slug" --argjson files "$FILES_CNT" --arg sha1 "$ALL_SHA" \
                 '. + {($slug): {files:$files, sha1:$sha1}}' "${TREES_SUMMARY}" > "${TMP}" && mv "${TMP}" "${TREES_SUMMARY}"
            done
          fi

          # ---------- D) MU-plugins ----------
          MU_DIR="${TARGET}/wp-content/mu-plugins"
          mkdir -p "${LOGDIR}/mu-plugins"
          if [[ -d "${MU_DIR}" ]]; then
            ls -la "${MU_DIR}" > "${LOGDIR}/mu-plugins/_ls.txt" 2>>"${ERR_FILE}" || note_err "ls mu-plugins failed."
            find "${MU_DIR}" -type f -print0 | sort -z | xargs -0 sha1sum > "${LOGDIR}/mu-plugins/_hashes.txt" 2>>"${ERR_FILE}" || true
            find "${MU_DIR}" -maxdepth 1 -type f -name "*.php" -print0 | while IFS= read -r -d '' f; do
              head -n 50 "$f" | grep -E "^\s*\*\s*Plugin Name:" -m1 > "${LOGDIR}/mu-plugins/$(basename "$f").header.txt" 2>>"${ERR_FILE}" || true
            done
          else
            echo "mu-plugins directory not found." > "${LOGDIR}/mu-plugins/_ls.txt"
            : > "${LOGDIR}/mu-plugins/_hashes.txt"
          fi
          run_wp plugin list --status=must-use --format=json > "${LOGDIR}/mu_plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list --status=must-use failed."

          # ---------- E) Users (admins) ----------
          run_wp user list --role=administrator --field=user_login --format=json > "${LOGDIR}/admins.json" 2>>"${ERR_FILE}" || note_err "wp user list --role=administrator failed."

          # ---------- F) WTP / SSOT ----------
          SSOT_PATH="${TARGET}/.wtp/ssot.yml"; SSOT_SHA1=""; SSOT_B64=""
          if [[ -f "${SSOT_PATH}" ]]; then
            cp "${SSOT_PATH}" "${LOGDIR}/ssot.yml" 2>>"${ERR_FILE}" || note_err "Copy ssot.yml failed."
            SSOT_SHA1="$(sha1sum "${SSOT_PATH}" | awk '{print $1}')" || true
            echo "${SSOT_SHA1}" > "${LOGDIR}/ssot.sha1" || true
            SSOT_B64="$(base64 -w0 "${SSOT_PATH}" 2>/dev/null || base64 "${SSOT_PATH}" | tr -d '\n')" || true
          else
            note_err "SSOT file .wtp/ssot.yml not found."
          fi

          # ---------- G) Server info ----------
          SERVER_USER="$(whoami 2>/dev/null || true)"
          SERVER_UNAME="$(uname -a 2>/dev/null || true)"
          SERVER_DT="$(date -Is 2>/dev/null || true)"
          SERVER_CWD="$(cd "${TARGET}" && pwd 2>/dev/null || true)"
          {
            echo "user: ${SERVER_USER}"
            echo "uname: ${SERVER_UNAME}"
            echo "datetime: ${SERVER_DT}"
            echo "cwd: ${SERVER_CWD}"
          } > "${LOGDIR}/server_info.txt" 2>>"${ERR_FILE}" || note_err "server_info.txt failed."

          # ---------- H) Summary (active, counts, errors) ----------
          run_wp plugin list --status=active --field=name --format=json > "${LOGDIR}/plugins_active.json" 2>>"${ERR_FILE}" || note_err "wp plugin list --status=active --field=name failed."
          if [[ "$JQ_OK" -eq 1 ]]; then
            if [[ -s "${LOGDIR}/plugins_active.json" ]]; then
              jq -r '.[]' "${LOGDIR}/plugins_active.json" > "${LOGDIR}/plugins_active.txt" 2>>"${ERR_FILE}" || :
            else
              : > "${LOGDIR}/plugins_active.txt"
            fi
            THEMES_TOTAL="$(jq 'length' "${LOGDIR}/themes.json" 2>/dev/null || echo 0)"
            PLUGINS_TOTAL="$(jq 'length' "${LOGDIR}/plugins.json" 2>/dev/null || echo 0)"
            PLUGINS_ACTIVE_CNT="$(jq 'length' "${LOGDIR}/plugins_active.json" 2>/dev/null || echo 0)"
            PLUGINS_MU_CNT="$(jq 'length' "${LOGDIR}/mu_plugins.json" 2>/dev/null || echo 0)"
            ADMINS_CNT="$(jq 'length' "${LOGDIR}/admins.json" 2>/dev/null || echo 0)"
            jq -n --argjson themes_total "$THEMES_TOTAL" \
                  --argjson plugins_total "$PLUGINS_TOTAL" \
                  --argjson plugins_active "$PLUGINS_ACTIVE_CNT" \
                  --argjson plugins_mu "$PLUGINS_MU_CNT" \
                  --argjson admins "$ADMINS_CNT" \
                  '{themes_total:$themes_total, plugins_total:$plugins_total, plugins_active:$plugins_active, plugins_mu:$plugins_mu, admins:$admins}' \
                  > "${LOGDIR}/counts.json" 2>>"${ERR_FILE}" || echo '{}' > "${LOGDIR}/counts.json"
            if [[ -s "${ERR_FILE}" ]]; then
              jq -Rs 'split("\n") | map(select(length>0))' "${ERR_FILE}" > "${LOGDIR}/errors.json" 2>/dev/null || echo '[]' > "${LOGDIR}/errors.json"
            else
              echo '[]' > "${LOGDIR}/errors.json"
            fi
          else
            : > "${LOGDIR}/plugins_active.txt"
            echo '{}' > "${LOGDIR}/counts.json"
            echo '[]'  > "${LOGDIR}/errors.json"
          fi

          # ---------- I) snapshot.json ----------
          TS_NOW="$(date -Is)"
          if [[ "$JQ_OK" -eq 1 ]]; then
            [[ -f "${LOGDIR}/site_info.json" ]]      || echo '{}' > "${LOGDIR}/site_info.json"
            [[ -f "${LOGDIR}/themes.json" ]]         || echo '[]' > "${LOGDIR}/themes.json"
            [[ -f "${LOGDIR}/plugins.json" ]]        || echo '[]' > "${LOGDIR}/plugins.json"
            [[ -f "${LOGDIR}/mu_plugins.json" ]]     || echo '[]' > "${LOGDIR}/mu_plugins.json"
            [[ -f "${LOGDIR}/admins.json" ]]         || echo '[]' > "${LOGDIR}/admins.json"
            [[ -f "${TREES_SUMMARY}" ]]              || echo '{}' > "${TREES_SUMMARY}"
            [[ -f "${LOGDIR}/counts.json" ]]         || echo '{}' > "${LOGDIR}/counts.json"
            [[ -f "${LOGDIR}/errors.json" ]]         || echo '[]' > "${LOGDIR}/errors.json"

            THEME_ACTIVE_JSON="$(jq 'if type=="array" and length>0 then .[0] else null end' "${LOGDIR}/theme_active.json" 2>/dev/null || echo 'null')"

            jq -n \
              --argjson run_id "$RUN_ID" \
              --arg timestamp "$TS_NOW" \
              --argfile site "${LOGDIR}/site_info.json" \
              --argfile themes_all "${LOGDIR}/themes.json" \
              --argfile plugins_std "${LOGDIR}/plugins.json" \
              --argfile plugins_mu "${LOGDIR}/mu_plugins.json" \
              --argfile admins "${LOGDIR}/admins.json" \
              --argfile trees "${TREES_SUMMARY}" \
              --argfile counts "${LOGDIR}/counts.json" \
              --argfile errors "${LOGDIR}/errors.json" \
              --arg theme_active "${THEME_ACTIVE_JSON}" \
              --arg server_user "${SERVER_USER}" \
              --arg server_uname "${SERVER_UNAME}" \
              --arg server_datetime "${SERVER_DT}" \
              --arg server_cwd "${SERVER_CWD}" \
              --arg ssot_path ".wtp/ssot.yml" \
              --arg ssot_sha1 "${SSOT_SHA1}" \
              --arg ssot_b64 "${SSOT_B64}" \
              --argfile act "${LOGDIR}/plugins_active.json" \
              '{
                run_id:$run_id,
                timestamp:$timestamp,
                site:$site,
                server:{user:$server_user,uname:$server_uname,datetime:$server_datetime,cwd:$server_cwd},
                theme:{active:(try ($theme_active|fromjson) catch null), all:$themes_all},
                plugins:{standard:$plugins_std, must_use:$plugins_mu, trees:$trees},
                admins:$admins,
                summary:{plugins_active:$act, counts:$counts, errors:$errors},
                wtp:{ssot_path:$ssot_path, ssot_sha1:$ssot_sha1, ssot_b64:$ssot_b64}
              }' > "${LOGDIR}/snapshot.json" 2>>"${ERR_FILE}" || note_err "snapshot.json build failed."
          else
            # Minimal fallback bez jq – BEZ dodatkowego heredoca (żeby YAML nie wariował)
            {
              printf '%s\n' '{'
              printf '  "run_id": "%s",\n' "${RUN_ID}"
              printf '  "timestamp": "%s",\n' "${TS_NOW}"
              printf '%s\n' '  "site": {'
              printf '    "url": "%s",\n' "${SITE_URL}"
              printf '    "home": "%s",\n' "${SITE_HOME}"
              printf '    "wp_version": "%s",\n' "${WP_VER}"
              printf '    "table_prefix": "%s",\n' "${TABLE_PREFIX}"
              printf '    "language": "%s",\n' "${WPLANG}"
              printf '    "timezone": "%s",\n' "${TZ_STR}"
              printf '    "php_version": "%s"\n' "${PHP_VERSION}"
              printf '%s\n' '  },'
              printf '%s\n' '  "server": {'
              printf '    "user": "%s",\n' "${SERVER_USER}"
              printf '    "uname": "%s",\n' "${SERVER_UNAME}"
              printf '    "datetime": "%s",\n' "${SERVER_DT}"
              printf '    "cwd": "%s"\n' "${SERVER_CWD}"
              printf '%s\n' '  },'
              printf '%s\n' '  "theme": { "active": null, "all": [] },'
              printf '%s\n' '  "plugins": { "standard": [], "must_use": [], "trees": {} },'
              printf '%s\n' '  "admins": [],'
              printf '%s\n' '  "summary": {'
              printf '%s\n' '    "plugins_active": [],'
              printf '%s\n' '    "counts": { "themes_total": 0, "plugins_total": 0, "plugins_active": 0, "plugins_mu": 0, "admins": 0 },'
              printf '%s\n' '    "errors": ["jq missing – produced minimal snapshot"]'
              printf '%s\n' '  },'
              printf '%s\n' '  "wtp": {'
              printf '    "ssot_path": ".wtp/ssot.yml", "ssot_sha1": "%s", "ssot_b64": "%s"\n' "${SSOT_SHA1}" "${SSOT_B64}"
              printf '%s\n' '  }'
              printf '%s\n' '}'
            } > "${LOGDIR}/snapshot.json" || note_err "fallback write failed."
          fi
          SNAPEOF

          chmod +x /tmp/wtp_snapshot.sh
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot.sh "${USER}@${HOST}:/tmp/wtp_snapshot.sh"

      - name: 5) Run remote snapshot script
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" "RUN_ID='${{ github.run_id }}' TARGET='${TARGET}' bash /tmp/wtp_snapshot.sh && rm -f /tmp/wtp_snapshot.sh"

      - name: 6) Pull logs back
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" "_ci_logs/${{ github.run_id }}/"

      - name: 7) Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**

      - name: 8) Validate snapshot.json
        shell: bash
        run: |
          set -euo pipefail
          SNAP="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          if [[ -s "$SNAP" ]]; then
            echo "::notice::Snapshot JSON created ($(wc -c < "$SNAP") bytes)"
            jq empty "$SNAP" || echo "::warning::JSON may be malformed"
          else
            echo "::error::No snapshot.json generated"; exit 1
          fi

      - name: 9) Report summary
        if: always()
        shell: bash
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}."

  commit_snapshot:
    needs: snapshot
    if: ${{ inputs.commit_snapshot == true }}
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Download snapshot artifact
        uses: actions/download-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/

      - name: Commit snapshot.json
        shell: bash
        run: |
          set -euo pipefail
          SRC="_ci_logs/${{ github.run_id }}/snapshot/snapshot.json"
          DEST_DIR=".wtp/snapshots"
          DEST_FILE="${DEST_DIR}/snapshot-${{ github.run_id }}.json"
          [[ -s "$SRC" ]] || { echo "::error::snapshot.json missing"; exit 1; }
          mkdir -p "$DEST_DIR"
          cp "$SRC" "$DEST_FILE"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$DEST_FILE"
          if git diff --staged --quiet; then
            echo "::notice::No changes to commit."
          else
            git commit -m "Add snapshot JSON for run ${{ github.run_id }}"
            git push
          fi
