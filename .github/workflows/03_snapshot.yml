name: 03_snapshot (WordPress â†’ SSOT, full state + code analysis, offline assembly)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: 1) Checkout
        uses: actions/checkout@v4

      - name: 2) Tools + known_hosts (STRICT) + net sanity
        run: |
          set -euo pipefail

          # Secrets present?
          for v in HOST PORT USER PASS TARGET; do
            if [ -z "${!v:-}" ]; then
              echo "::error::Missing required secret/env: $v"
              exit 1
            fi
          done

          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq

          mkdir -p ~/.ssh && chmod 700 ~/.ssh

          echo "::group::Network sanity"
          echo "host=$HOST port=$PORT"
          # DNS (non-fatal warn)
          getent hosts "$HOST" || echo "::warning::DNS resolve failed for $HOST"
          # TCP probe (fatal if closed)
          (timeout 5 bash -c "cat < /dev/null > /dev/tcp/$HOST/$PORT") \
            && echo "TCP $HOST:$PORT reachable" \
            || { echo "::error::TCP $HOST:$PORT not reachable"; exit 1; }
          echo "::endgroup::"

          # ssh-keyscan (fatal if unreachable)
          if ! ssh-keyscan -T 10 -p "$PORT" "$HOST" >> ~/.ssh/known_hosts 2>/dev/null; then
            echo "::error::ssh-keyscan failed for $HOST:$PORT (host unreachable or SSH blocked)"
            exit 1
          fi
          chmod 644 ~/.ssh/known_hosts

          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: 2a) SSH sanity (whoami, pwd, wp-config)
        run: |
          set -euo pipefail
          echo "::group::SSH sanity"
          sshpass -p "${PASS}" ssh -p "${PORT}" \
            -o BatchMode=yes \
            -o StrictHostKeyChecking=yes \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${USER}@${HOST}" "bash -lc '
              echo user: \$(whoami)
              echo host: \$(hostname)
              cd \"${TARGET}\" || { echo \"ERR: cannot cd TARGET=${TARGET}\"; exit 3; }
              pwd
              test -f wp-config.php && echo OK:wp-config || { echo ERR:no-wp-config; exit 4; }
              ls -la | head -n 20
            '"
          echo "::endgroup::"

      - name: 3) Create remote helpers (analyzer + raw snapshot)
        run: |
          set -euo pipefail

          # --- PHP analyzer (light static scan)
          cat > /tmp/wtp_analyze.php <<'ANALYZER'
          <?php
          if ($argc < 4) { fwrite(STDERR, "usage: php analyze <base> <type> <out>\n"); exit(1); }
          $base = rtrim($argv[1], "/"); $type = $argv[2]; $out = $argv[3];

          function scan($dir){ $r=[]; if(!is_dir($dir)) return $r;
            $it=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dir, FilesystemIterator::SKIP_DOTS));
            foreach($it as $f){ if($f->isFile()){ $e=strtolower(pathinfo($f->getFilename(), PATHINFO_EXTENSION));
              if(in_array($e,['php','phps','phtml'])) $r[]=$f->getPathname(); }} return $r; }

          function analyze($files){
            $res=['actions'=>[],'filters'=>[],'shortcodes'=>[],'rest'=>[],'cpt'=>[],'tax'=>[],
                  'enqueues'=>[],'options'=>[],'transients'=>[],'crons'=>[],'defines'=>[],'files'=>0];
            $seen=array_map(fn()=>[], $res);
            foreach($files as $f){ $c=@file_get_contents($f); if($c===false) continue;
              if(preg_match_all('/\badd_action\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,\s*([^)]+)\)/i',$c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $k=$mm[1].'|'.trim($mm[2]); if(!isset($seen['actions'][$k])){$res['actions'][]=['hook'=>$mm[1],'cb'=>trim($mm[2])];$seen['actions'][$k]=1;}}
              if(preg_match_all('/\badd_filter\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,\s*([^)]+)\)/i',$c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $k=$mm[1].'|'.trim($mm[2]); if(!isset($seen['filters'][$k])){$res['filters'][]=['hook'=>$mm[1],'cb'=>trim($mm[2])];$seen['filters'][$k]=1;}}
              if(preg_match_all('/\badd_shortcode\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,/i',$c,$m))
                foreach($m[1] as $s){ if(!isset($seen['shortcodes'][$s])){$res['shortcodes'][]=$s;$seen['shortcodes'][$s]=1;}}
              if(preg_match_all('/\bregister_rest_route\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,\s*[\'"]([^\'"]+)[\'"]/i',$c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $k=$mm[1].$mm[2]; if(!isset($seen['rest'][$k])){$res['rest'][]=['namespace'=>$mm[1],'route'=>$mm[2]];$seen['rest'][$k]=1;}}
              if(preg_match_all('/\bregister_post_type\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,/i',$c,$m))
                foreach($m[1] as $pt){ if(!isset($seen['cpt'][$pt])){$res['cpt'][]=$pt;$seen['cpt'][$pt]=1;}}
              if(preg_match_all('/\bregister_taxonomy\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,/i',$c,$m))
                foreach($m[1] as $tx){ if(!isset($seen['tax'][$tx])){$res['tax'][]=$tx;$seen['tax'][$tx]=1;}}
              if(preg_match_all('/\bwp_enqueue_script\s*\(\s*[\'"]([^\'"]+)[\'"]/', $c,$m))
                foreach($m[1] as $h){ $k='script|'.$h; if(!isset($seen['enqueues'][$k])){$res['enqueues'][]=['type'=>'script','handle'=>$h];$seen['enqueues'][$k]=1;}}
              if(preg_match_all('/\bwp_enqueue_style\s*\(\s*[\'"]([^\'"]+)[\'"]/', $c,$m))
                foreach($m[1] as $h){ $k='style|'.$h; if(!isset($seen['enqueues'][$k])){$res['enqueues'][]=['type'=>'style','handle'=>$h];$seen['enqueues'][$k]=1;}}
              if(preg_match_all('/\b(get_option|update_option|add_option|delete_option)\s*\(\s*[\'"]([^\'"]+)[\'"]/', $c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $o=$mm[2]; if(!isset($seen['options'][$o])){$res['options'][]=$o;$seen['options'][$o]=1;}}
              if(preg_match_all('/\b(set_transient|get_transient|delete_transient)\s*\(\s*[\'"]([^\'"]+)[\'"]/', $c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $t=$mm[2]; if(!isset($seen['transients'][$t])){$res['transients'][]=$t;$seen['transients'][$t]=1;}}
              if(preg_match_all('/\bwp_schedule_event\s*\(\s*[^,]+,\s*[\'"]([^\'"]+)[\'"]\s*,\s*[\'"]?([^,\'")]+)/i',$c,$m,PREG_SET_ORDER))
                foreach($m as $mm){ $k=$mm[2].'|'.$mm[1]; if(!isset($seen['crons'][$k])){$res['crons'][]=['event'=>$mm[2],'schedule'=>$mm[1]];$seen['crons'][$k]=1;}}
              if(preg_match_all('/\bdefine\s*\(\s*[\'"]([^\'"]+)[\'"]\s*,/i',$c,$m))
                foreach($m[1] as $d){ if(!isset($seen['defines'][$d])){$res['defines'][]=$d;$seen['defines'][$d]=1;}}
            }
            $res['files']=count($files); return $res;
          }

          function analyzeRoots($base,$type){
            if($type==='mu'){
              $out=[]; if(!is_dir($base)) return $out;
              $items=array_values(array_filter(scandir($base),fn($e)=>$e!=='.'&&$e!=='..')); sort($items,SORT_NATURAL);
              foreach($items as $it){ $p="$base/$it";
                $files=is_dir($p)?scan($p):(preg_match('/\.php(\.|$)/i',$it)?[$p]:[]);
                $res=analyze($files); $res['present']=file_exists($p);
                if(preg_match('/\.off$/i',$it)) $res['off']=true; $out[$it]=$res; }
              return $out;
            }
            if($type==='plugins'){
              $out=[]; if(!is_dir($base)) return $out;
              $slugs=array_values(array_filter(scandir($base),fn($e)=>$e!=='.'&&$e!=='..')); sort($slugs,SORT_NATURAL);
              foreach($slugs as $s){ $p="$base/$s"; if(!is_dir($p)) continue; $res=analyze(scan($p)); $res['present']=true; $out[$s]=$res; }
              return $out;
            }
            if($type==='theme'){
              $out=['present'=>false]; if(!is_dir($base)) return $out; $res=analyze(scan($base)); $res['present']=true;
              $tpls=[]; $it=new RecursiveIteratorIterator(new RecursiveDirectoryIterator($base,FilesystemIterator::SKIP_DOTS));
              foreach($it as $fi){ if($fi->isFile()){ $fn=strtolower($fi->getFilename());
                if(preg_match('/\.(php|phtml)$/',$fn) && preg_match('/(front\-page|home|single|page|archive|category|tag|author|search|404|index)\.php$/',$fn))
                  $tpls[] = str_replace($base.'/','',$fi->getPathname()); }}
              sort($tpls,SORT_NATURAL); $res['templates']=$tpls; return $res;
            }
            return [];
          }

          $data=analyzeRoots($base,$type); file_put_contents($out,json_encode($data,JSON_UNESCAPED_SLASHES));
          ANALYZER

          # --- Remote snapshot script
          cat > /tmp/wtp_snapshot_raw.sh <<'SNAPRAW'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"

          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}"
          ERR_FILE="${RAWDIR}/errors.txt"; : > "${ERR_FILE}"
          note_err(){ echo "$1" | tee -a "${ERR_FILE}" 1>&2 || true; }

          cd "${TARGET}" || { note_err "Cannot cd TARGET"; exit 1; }
          wp(){ php ./wp "$@" --path="${TARGET}"; }

          SITE_URL="$(wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(wp option get home 2>/dev/null || true)"
          WP_VER="$(wp core version 2>/dev/null || true)"
          PHP_VERSION="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          php -v > "${RAWDIR}/php_info.txt" 2>&1 || note_err "php -v failed."
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" "wp-config.php" 2>/dev/null | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo "wp_")"
          WPLANG="$(wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(wp option get timezone_string 2>/dev/null || true)"; [ -z "$TZ_STR" -o "$TZ_STR" = "false" ] && TZ_STR="$(wp option get gmt_offset 2>/dev/null || true)"
          {
            echo "url=${SITE_URL}"
            echo "home=${SITE_HOME}"
            echo "wp_version=${WP_VER}"
            echo "table_prefix=${TABLE_PREFIX}"
            echo "language=${WPLANG}"
            echo "timezone=${TZ_STR}"
            echo "php_version=${PHP_VERSION}"
          } > "${RAWDIR}/site_info.env"

          wp theme list --format=json > "${RAWDIR}/themes.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/themes.json"
          ACTIVE_THEME="$(wp theme list --status=active --field=name 2>/dev/null | head -n1 || true)"
          printf "%s\n" "${ACTIVE_THEME}" > "${RAWDIR}/theme_active_slug.txt" || true

          THEMES_DIR="${TARGET}/wp-content/themes"
          mkdir -p "${RAWDIR}/themes"
          if [[ -d "${THEMES_DIR}" ]]; then
            find "${THEMES_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/themes_slugs.txt" || true
            : > "${RAWDIR}/themes_trees.tsv"
            while read -r tslug; do
              [[ -z "${tslug}" ]] && continue
              tdir="${THEMES_DIR}/${tslug}"; tout="${RAWDIR}/themes/${tslug}"; mkdir -p "${tout}"
              ( cd "${tdir}" && find . -type f -printf '%P\n' | sort ) > "${tout}/tree.txt" 2>>"${ERR_FILE}" || true
              ( cd "${tdir}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${tout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fcnt=$(wc -l < "${tout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [ -s "${tout}/hashes.sha1" ] && gsha="$(awk '{print $1}' "${tout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "${tslug}" "${fcnt}" "${gsha}" >> "${RAWDIR}/themes_trees.tsv"
            done < "${RAWDIR}/themes_slugs.txt"
          else
            : > "${RAWDIR}/themes_slugs.txt"; : > "${RAWDIR}/themes_trees.tsv"
            note_err "themes directory not found"
          fi

          wp plugin list --format=json > "${RAWDIR}/plugins.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/plugins.json"
          wp plugin list --format=csv  > "${RAWDIR}/plugins.csv"  2>>"${ERR_FILE}" || true

          PLUG_DIR="${TARGET}/wp-content/plugins"; mkdir -p "${RAWDIR}/plugins"
          : > "${RAWDIR}/plugins_dirs.txt"
          if [[ -d "${PLUG_DIR}" ]]; then
            find "${PLUG_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/plugins_dirs.txt" || true
            : > "${RAWDIR}/plugins_trees.tsv"
            while read -r pslug; do
              [[ -z "${pslug}" ]] && continue
              pdir="${PLUG_DIR}/${pslug}"; pout="${RAWDIR}/plugins/${pslug}"; mkdir -p "${pout}"
              ( cd "${pdir}" && find . -type f -printf '%P\n' | sort ) > "${pout}/tree.txt" 2>>"${ERR_FILE}" || true
              ( cd "${pdir}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${pout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fcnt=$(wc -l < "${pout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [ -s "${pout}/hashes.sha1" ] && gsha="$(awk '{print $1}' "${pout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "${pslug}" "${fcnt}" "${gsha}" >> "${RAWDIR}/plugins_trees.tsv"
            done < "${RAWDIR}/plugins_dirs.txt"
          else
            : > "${RAWDIR}/plugins_trees.tsv"
            note_err "plugins directory not found"
          fi

          wp plugin list --status=must-use --format=json > "${RAWDIR}/mu_plugins.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/mu_plugins.json"
          MU_DIR="${TARGET}/wp-content/mu-plugins"; mkdir -p "${RAWDIR}/mu-plugins"
          if [[ -d "${MU_DIR}" ]]; then
            ls -la "${MU_DIR}" > "${RAWDIR}/mu_plugins_ls.txt" 2>>"${ERR_FILE}" || true
            : > "${RAWDIR}/mu_plugins_items.txt"
            find "${MU_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true
            find "${MU_DIR}" -maxdepth 1 -type f -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true
            : > "${RAWDIR}/mu_plugins_trees.tsv"
            while read -r item; do
              [[ -z "${item}" ]] && continue
              mout="${RAWDIR}/mu-plugins/${item}"; mkdir -p "${mout}"
              if [[ -d "${MU_DIR}/${item}" ]]; then
                ( cd "${MU_DIR}/${item}" && find . -type f -printf '%P\n' | sort ) > "${mout}/tree.txt" 2>>"${ERR_FILE}" || true
                ( cd "${MU_DIR}/${item}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${mout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              else
                echo "${item}" > "${mout}/tree.txt"; sha1sum "${MU_DIR}/${item}" > "${mout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fi
              fcnt=$(wc -l < "${mout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""; [ -s "${mout}/hashes.sha1" ] && gsha="$(awk '{print $1}' "${mout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              printf "%s\t%s\t%s\n" "${item}" "${fcnt}" "${gsha}" >> "${RAWDIR}/mu_plugins_trees.tsv"
            done < "${RAWDIR}/mu_plugins_items.txt"
          else
            : > "${RAWDIR}/mu_plugins_trees.tsv"
          fi

          wp user list --role=administrator --field=user_login --format=json > "${RAWDIR}/admins.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/admins.json"

          SSOT_PATH="${TARGET}/.wtp/ssot.yml"
          if [[ -f "${SSOT_PATH}" ]]; then
            cp "${SSOT_PATH}" "${RAWDIR}/ssot.yml" 2>>"${ERR_FILE}" || true
            sha1sum "${SSOT_PATH}" | awk '{print $1}' > "${RAWDIR}/ssot.sha1" || true
            (base64 -w0 "${SSOT_PATH}" 2>/dev/null || base64 "${SSOT_PATH}") | tr -d '\n' > "${RAWDIR}/ssot.b64" || true
          else
            echo "" > "${RAWDIR}/ssot.yml"; echo "" > "${RAWDIR}/ssot.sha1"; echo "" > "${RAWDIR}/ssot.b64"
          fi

          wp language core list --format=json > "${RAWDIR}/languages_core.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/languages_core.json"
          LANG_DIR="${TARGET}/wp-content/languages"; mkdir -p "${RAWDIR}/languages"
          if [[ -d "${LANG_DIR}" ]]; then
            ( cd "${LANG_DIR}" && find . -type f -printf '%P\n' | sort ) > "${RAWDIR}/languages/tree.txt" 2>>"${ERR_FILE}" || true
            ( cd "${LANG_DIR}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${RAWDIR}/languages/hashes.sha1" 2>>"${ERR_FILE}" || true
            fcnt=$(wc -l < "${RAWDIR}/languages/tree.txt" 2>/dev/null || echo 0)
            gsha=""; [ -s "${RAWDIR}/languages/hashes.sha1" ] && gsha="$(awk '{print $1}' "${RAWDIR}/languages/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
            printf "%s\t%s\n" "${fcnt}" "${gsha}" > "${RAWDIR}/languages/summary.tsv"
          else
            : > "${RAWDIR}/languages/tree.txt"; : > "${RAWDIR}/languages/hashes.sha1"; printf "0\t\n" > "${RAWDIR}/languages/summary.tsv"
          fi

          wp taxonomy list --format=json > "${RAWDIR}/taxonomies.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/taxonomies.json"
          wp term list category --fields=term_id,slug,name,parent,count,term_taxonomy_id,taxonomy --format=json > "${RAWDIR}/taxonomy_category.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/taxonomy_category.json"

          ACTIVE_THEME="$(cat "${RAWDIR}/theme_active_slug.txt" 2>/dev/null || true)"
          if [[ -n "${ACTIVE_THEME}" ]]; then
            wp option get "theme_mods_${ACTIVE_THEME}" --format=json > "${RAWDIR}/theme_mods.json" 2>>"${ERR_FILE}" || echo "{}" > "${RAWDIR}/theme_mods.json"
          else
            echo "{}" > "${RAWDIR}/theme_mods.json"
          fi

          {
            echo "user: $(whoami 2>/dev/null || true)"
            echo "uname: $(uname -a 2>/dev/null || true)"
            echo "datetime: $(date -Is 2>/dev/null || true)"
            echo "cwd: $(pwd 2>/dev/null || true)"
          } > "${RAWDIR}/server_info.txt" || true

          wp plugin list --status=active --field=name --format=json > "${RAWDIR}/plugins_active.json" 2>>"${ERR_FILE}" || echo "[]" > "${RAWDIR}/plugins_active.json"

          mkdir -p "${RAWDIR}/analysis"
          php /tmp/wtp_analyze.php "${TARGET}/wp-content/mu-plugins" "mu"      "${RAWDIR}/analysis/mu_analysis.json"      2>>"${ERR_FILE}" || echo "{}"  > "${RAWDIR}/analysis/mu_analysis.json"
          php /tmp/wtp_analyze.php "${TARGET}/wp-content/plugins"    "plugins" "${RAWDIR}/analysis/plugins_analysis.json" 2>>"${ERR_FILE}" || echo "{}"  > "${RAWDIR}/analysis/plugins_analysis.json"
          if [[ -n "${ACTIVE_THEME}" && -d "${TARGET}/wp-content/themes/${ACTIVE_THEME}" ]]; then
            php /tmp/wtp_analyze.php "${TARGET}/wp-content/themes/${ACTIVE_THEME}" "theme" "${RAWDIR}/analysis/theme_analysis.json" 2>>"${ERR_FILE}" || echo "{}" > "${RAWDIR}/analysis/theme_analysis.json"
          else
            echo "{}" > "${RAWDIR}/analysis/theme_analysis.json"
          fi
          SNAPRAW

          chmod +x /tmp/wtp_snapshot_raw.sh
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot_raw.sh "${USER}@${HOST}:/tmp/wtp_snapshot_raw.sh"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_analyze.php     "${USER}@${HOST}:/tmp/wtp_analyze.php"

      - name: 4) Run remote snapshot
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" \
            "TARGET='${TARGET}' bash /tmp/wtp_snapshot_raw.sh && rm -f /tmp/wtp_snapshot_raw.sh /tmp/wtp_analyze.php"

      - name: 5) Pull RAW logs
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: 6) Assemble snapshot.json (runner)
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"

          safe_cat() { [ -f "$1" ] && cat "$1" || echo ""; }
          read_json() { local f="$1" def="$2"; if [ -s "$f" ]; then cat "$f"; else echo "$def"; fi; }

          declare -A SITE=()
          [ -f "${RAW}/site_info.env" ] && while IFS='=' read -r k v; do [ -n "${k:-}" ] && SITE["$k"]="$v"; done < "${RAW}/site_info.env"

          THEMES_ALL="$(read_json "${RAW}/themes.json" '[]')"
          PLUGINS_STD="$(read_json "${RAW}/plugins.json" '[]')"
          MU_PLUGINS="$(read_json "${RAW}/mu_plugins.json" '[]')"
          PLUGINS_ACTIVE="$(read_json "${RAW}/plugins_active.json" '[]')"
          ADMINS="$(read_json "${RAW}/admins.json" '[]')"
          LANG_CORE="$(read_json "${RAW}/languages_core.json" '[]')"
          TAX_CAT="$(read_json "${RAW}/taxonomy_category.json" '[]')"
          THEME_MODS="$(read_json "${RAW}/theme_mods.json" '{}')"
          OPTIONS_CHARITY="$(read_json "${RAW}/options_charity.json" '{}')"

          MU_ANALYSIS="$(read_json "${RAW}/analysis/mu_analysis.json" '{}')"
          PLUGINS_ANALYSIS="$(read_json "${RAW}/analysis/plugins_analysis.json" '{}')"
          THEME_ANALYSIS="$(read_json "${RAW}/analysis/theme_analysis.json" '{}')"

          LANG_SUM="$(safe_cat "${RAW}/languages/summary.tsv")"
          LANG_FILES="$(printf '%s' "$LANG_SUM" | awk -F'\t' 'NR==1{print $1}')"
          LANG_SHA="$(printf  '%s' "$LANG_SUM" | awk -F'\t' 'NR==1{print $2}')"

          PLUG_TSV="$(safe_cat "${RAW}/plugins_trees.tsv")"
          MU_TSV="$(safe_cat "${RAW}/mu_plugins_trees.tsv")"
          ERRS_RAW="$(safe_cat "${RAW}/errors.txt")"
          ACTIVE_THEME="$(safe_cat "${RAW}/theme_active_slug.txt")"

          jq -n \
            --arg run_id "${{ github.run_id }}" \
            --arg timestamp "$(date -Is)" \
            --arg url "${SITE[url]:-}" \
            --arg home "${SITE[home]:-}" \
            --arg wp_version "${SITE[wp_version]:-}" \
            --arg table_prefix "${SITE[table_prefix]:-}" \
            --arg language "${SITE[language]:-}" \
            --arg timezone "${SITE[timezone]:-}" \
            --arg php_version "${SITE[php_version]:-}" \
            --arg themes_all_json      "$THEMES_ALL" \
            --arg active_theme         "$ACTIVE_THEME" \
            --arg plugins_std_json     "$PLUGINS_STD" \
            --arg mu_plugins_json      "$MU_PLUGINS" \
            --arg plugins_active_json  "$PLUGINS_ACTIVE" \
            --arg admins_json          "$ADMINS" \
            --arg server_user  "$(grep -E '^user:'     "${RAW}/server_info.txt" 2>/dev/null | sed 's/^user:\s*//')" \
            --arg server_uname "$(grep -E '^uname:'    "${RAW}/server_info.txt" 2>/dev/null | sed 's/^uname:\s*//')" \
            --arg server_dt    "$(grep -E '^datetime:' "${RAW}/server_info.txt" 2>/dev/null | sed 's/^datetime:\s*//')" \
            --arg server_cwd   "$(grep -E '^cwd:'      "${RAW}/server_info.txt" 2>/dev/null | sed 's/^cwd:\s*//')" \
            --arg ssot_path ".wtp/ssot.yml" \
            --arg ssot_sha1 "$(safe_cat "${RAW}/ssot.sha1")" \
            --arg ssot_b64  "$(safe_cat "${RAW}/ssot.b64")" \
            --arg languages_core_json  "$LANG_CORE" \
            --arg lang_files "${LANG_FILES:-0}" \
            --arg lang_sha   "${LANG_SHA:-}" \
            --arg taxonomy_category_json "$TAX_CAT" \
            --arg theme_mods_json      "$THEME_MODS" \
            --arg options_charity_json "$OPTIONS_CHARITY" \
            --arg plug_tsv "$PLUG_TSV" \
            --arg mu_tsv   "$MU_TSV" \
            --arg errs_raw "$ERRS_RAW" \
            --arg mu_analysis_json       "$MU_ANALYSIS" \
            --arg plugins_analysis_json  "$PLUGINS_ANALYSIS" \
            --arg theme_analysis_json    "$THEME_ANALYSIS" \
            '
              def tsv_to_map(tsv):
                ( tsv | split("\n")
                  | map(select(length>0))
                  | map( split("\t") )
                  | reduce .[] as $r ({}; . + { ($r[0]) : {files: ( ($r[1]//"0")|tonumber ), sha1: ($r[2]//"") } } )
                );
              def lines($s): ($s | split("\n") | map(select(length>0)));
              {
                run_id: ($run_id|tonumber),
                timestamp: $timestamp,
                site: {
                  url: $url, home: $home, wp_version: $wp_version,
                  table_prefix: $table_prefix, language: $language,
                  timezone: $timezone, php_version: $php_version
                },
                server: { user: $server_user, uname: $server_uname, datetime: $server_dt, cwd: $server_cwd },
                theme: {
                  active: (if ($active_theme|length)>0 then {stylesheet:$active_theme} else null end),
                  all: ($themes_all_json|fromjson),
                  mods: ($theme_mods_json|fromjson)
                },
                plugins: {
                  standard: ($plugins_std_json|fromjson),
                  must_use: ($mu_plugins_json|fromjson),
                  trees: (tsv_to_map($plug_tsv)),
                  mu_trees: (tsv_to_map($mu_tsv))
                },
                languages: {
                  core: ($languages_core_json|fromjson),
                  wp_content: { files: (($lang_files|tonumber) // 0), sha1: $lang_sha }
                },
                content: { taxonomies: { category: ($taxonomy_category_json|fromjson) } },
                admins: ($admins_json|fromjson),
                summary: {
                  plugins_active: ($plugins_active_json|fromjson),
                  counts: {
                    themes_total: (($themes_all_json|fromjson)|length),
                    plugins_total: (($plugins_std_json|fromjson)|length),
                    plugins_active: (($plugins_active_json|fromjson)|length),
                    plugins_mu: (($mu_plugins_json|fromjson)|length),
                    admins: (($admins_json|fromjson)|length)
                  },
                  errors: (lines($errs_raw))
                },
                options: { charity: ($options_charity_json|fromjson) },
                architecture: {
                  mu_plugins:  ($mu_analysis_json|fromjson),
                  plugins:     ($plugins_analysis_json|fromjson),
                  theme:       ($theme_analysis_json|fromjson)
                },
                wtp: { ssot_path: $ssot_path, ssot_sha1: $ssot_sha1, ssot_b64: $ssot_b64 }
              }
            ' > "${SNAP}"
          echo "::notice::Built snapshot.json ($(wc -c < "${SNAP}") bytes)"

      - name: 7) Generate ARCHITECTURE.md
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          OUT="${RAW}/ARCHITECTURE.md"

          MU_JSON="$(cat "${RAW}/analysis/mu_analysis.json" 2>/dev/null || echo "{}")"
          PL_JSON="$(cat "${RAW}/analysis/plugins_analysis.json" 2>/dev/null || echo "{}")"
          TH_JSON="$(cat "${RAW}/analysis/theme_analysis.json" 2>/dev/null || echo "{}")"

          MU_COUNT="$(jq 'length'        <<< "${MU_JSON}" 2>/dev/null || echo 0)"
          PL_COUNT="$(jq 'length'        <<< "${PL_JSON}" 2>/dev/null || echo 0)"
          TH_FILES="$(jq '.files // 0'   <<< "${TH_JSON}" 2>/dev/null || echo 0)"

          {
            echo "# Architecture overview"
            echo
            echo "## MU-plugins (overview)"; echo "Count: ${MU_COUNT}"; echo
            jq -r '
              to_entries | sort_by(.key) | .[]
              | "### \(.key)\n"
                + "- files: \(.value.files // 0)\n"
                + "- actions: \((.value.actions // [])|length)\n"
                + "- filters: \((.value.filters // [])|length)\n"
                + "- shortcodes: \((.value.shortcodes // [])|length)\n"
                + "- rest: \((.value.rest // [])|length)\n"
                + "- cpt: \((.value.cpt // [])|length)\n"
                + "- tax: \((.value.tax // [])|length)\n"
                + "- enqueues: \((.value.enqueues // [])|length)\n"
                + "- options: \((.value.options // [])|length)\n"
                + "- transients: \((.value.transients // [])|length)\n"
                + "- crons: \((.value.crons // [])|length)\n"
                + "- defines: \((.value.defines // [])|length)\n"
                + "- off: \((.value.off // false)|tostring)\n"
            ' <<< "${MU_JSON}"

            echo; echo "## Plugins (overview)"; echo "Count: ${PL_COUNT}"; echo
            jq -r '
              to_entries | sort_by(.key) | .[]
              | "### \(.key)\n"
                + "- files: \(.value.files // 0)\n"
                + "- actions: \((.value.actions // [])|length)\n"
                + "- filters: \((.value.filters // [])|length)\n"
                + "- shortcodes: \((.value.shortcodes // [])|length)\n"
                + "- rest: \((.value.rest // [])|length)\n"
                + "- cpt: \((.value.cpt // [])|length)\n"
                + "- tax: \((.value.tax // [])|length)\n"
                + "- enqueues: \((.value.enqueues // [])|length)\n"
                + "- options: \((.value.options // [])|length)\n"
                + "- transients: \((.value.transients // [])|length)\n"
                + "- crons: \((.value.crons // [])|length)\n"
                + "- defines: \((.value.defines // [])|length)\n"
            ' <<< "${PL_JSON}"

            echo; echo "## Active Theme (overview)"; echo "- files: ${TH_FILES}"
            jq -r '
              "* actions: \((.actions // [])|length)\n"
              + "* filters: \((.filters // [])|length)\n"
              + "* shortcodes: \((.shortcodes // [])|length)\n"
              + "* rest: \((.rest // [])|length)\n"
              + "* cpt: \((.cpt // [])|length)\n"
              + "* tax: \((.tax // [])|length)\n"
              + "* enqueues: \((.enqueues // [])|length)\n"
              + "* templates: \((.templates // [])|length)\n"
            ' <<< "${TH_JSON}"
          } > "${OUT}"
          echo "::notice::ARCHITECTURE.md generated ($(wc -c < "${OUT}") bytes)"

      - name: 8) Upload artifact (logs + raw + report)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: 9) Publish snapshot + RO mirror
        run: |
          set -euo pipefail
          SRC_DIR="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP_FILE="${SRC_DIR}/snapshot.json"

          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"

          mkdir -p "${SNAP_DIR}" "${RO_DIR}"
          cp -a "${SRC_DIR}/." "${RO_DIR}/"

          cp "${SNAP_FILE}" "${SNAP_DIR}/snapshot-${{ github.run_id }}.json"
          cp "${SNAP_FILE}" "${SNAP_DIR}/snapshot-latest.json"

          rm -rf "${RO_LATEST}"
          mkdir -p "$(dirname "${RO_LATEST}")"
          cp -a "${RO_DIR}" "${RO_LATEST}"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${SNAP_DIR}/snapshot-${{ github.run_id }}.json" "${SNAP_DIR}/snapshot-latest.json" "${RO_DIR}" "${RO_LATEST}"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish snapshot run ${{ github.run_id }} (+RO mirror, analysis)"
            git push
          fi

          echo "::notice::RO latest: /.wtp/state/ro/public/latest/snapshot.json"
          echo "::notice::RO run:   /.wtp/state/ro/public/${{ github.run_id }}/snapshot.json"
          echo "::notice::RO latest ARCH: /.wtp/state/ro/public/latest/ARCHITECTURE.md"

      - name: 10) Report errors (always)
        if: always()
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}."
