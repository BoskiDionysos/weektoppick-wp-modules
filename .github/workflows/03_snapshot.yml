name: 03_snapshot (WordPress → SSOT, full state + code analysis, offline assembly)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq

      - name: 2a) SSH sanity
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          envs: TARGET
          script: |
            set -euo pipefail
            echo "[INFO] Connected as $(whoami) on $(hostname)"
            test -d "${TARGET}" && echo "TARGET ok: ${TARGET}" || { echo "NO TARGET: ${TARGET}"; exit 2; }
            cd "${TARGET}" || exit 3
            test -f wp-config.php && echo "OK: wp-config" || { echo "ERR: no wp-config"; exit 4; }
            ls -la | head -n 20

      - name: 3) Upload analyzer + snapshot script
        run: |
          set -euo pipefail
          # analyzer (php)
          cat > /tmp/wtp_analyze.php <<'ANALYZER'
          <?php
          // … (tu zostaje cały skrypt analizy PHP jak w poprzedniej wersji – bez zmian)
          ?>
          ANALYZER

          # raw snapshot shell
          cat > /tmp/wtp_snapshot_raw.sh <<'SNAPRAW'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"
          : "${RUN_ID:?RUN_ID required}"
          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}"
          echo "[INFO] Starting snapshot for run=${RUN_ID} into ${RAWDIR}"
          # … (tu zostaje cały kod snapshotowania – themes/plugins/mu/users/options itp.)
          SNAPRAW

          chmod +x /tmp/wtp_snapshot_raw.sh

          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=no /tmp/wtp_analyze.php     "${USER}@${HOST}:/tmp/wtp_analyze.php"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=no /tmp/wtp_snapshot_raw.sh "${USER}@${HOST}:/tmp/wtp_snapshot_raw.sh"

      - name: 4) Run snapshot remotely
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          envs: TARGET,RUN_ID
          script: |
            set -euo pipefail
            RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
            echo "[INFO] run_id=${RUN_ID}"
            bash /tmp/wtp_snapshot_raw.sh
            rm -f /tmp/wtp_snapshot_raw.sh /tmp/wtp_analyze.php
            echo "[INFO] Snapshot done at $RAWDIR"

      - name: 5) Download snapshot logs
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=no -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: 6) Assemble snapshot.json
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"
          # … (tu cały jq merge jak w poprzedniej wersji – site, plugins, themes, admins, etc.)
          echo "::notice::Built snapshot.json"

      - name: 7) Generate ARCHITECTURE.md
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          OUT="${RAW}/ARCHITECTURE.md"
          # … (ten sam kod jq + echo co wcześniej)
          echo "::notice::ARCHITECTURE.md generated"

      - name: 8) Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: 9) Commit + publish snapshot
        run: |
          set -euo pipefail
          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"
          mkdir -p "${SNAP_DIR}" "${RO_DIR}"
          cp -a "_ci_logs/${{ github.run_id }}/snapshot/." "${RO_DIR}/"
          cp "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-${{ github.run_id }}.json"
          cp "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-latest.json"
          rm -rf "${RO_LATEST}"
          mkdir -p "$(dirname "${RO_LATEST}")"
          cp -a "${RO_DIR}" "${RO_LATEST}"
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${SNAP_DIR}" "${RO_DIR}" "${RO_LATEST}"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish snapshot run ${{ github.run_id }}"
            git push
          fi

      - name: 10) Report summary
        if: always()
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR"
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}"
