name: 03_snapshot (WordPress -> SSOT, full state + code analysis, offline assembly)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    # jeden wiersz, bez '|' – GitHub nie marudzi
    if: github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools (curl, sshpass, jq)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq

      - name: 3) Remote snapshot (create raw files on server)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host:     ${{ env.HOST }}
          username: ${{ env.USER }}
          password: ${{ env.PASS }}
          port:     ${{ env.PORT }}
          envs: TARGET
          script: |
            set -euo pipefail
            : "${TARGET:?TARGET required}"
            cd "${TARGET}"

            OUTDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
            mkdir -p "${OUTDIR}"

            # sanity
            test -f wp-config.php

            # basics
            php -r 'echo PHP_VERSION;' > "${OUTDIR}/php_version.txt"
            wp  core version > "${OUTDIR}/wp_version.txt" 2>/dev/null || echo unknown > "${OUTDIR}/wp_version.txt"
            wp  option get home    > "${OUTDIR}/home.txt"    2>/dev/null || : > "${OUTDIR}/home.txt"
            wp  option get siteurl > "${OUTDIR}/siteurl.txt" 2>/dev/null || : > "${OUTDIR}/siteurl.txt"
            hostname > "${OUTDIR}/hostname.txt" || echo unknown > "${OUTDIR}/hostname.txt"
            date -u +%FT%TZ > "${OUTDIR}/ts_utc.txt"

            # lists
            wp plugin list --format=json > "${OUTDIR}/plugins.json" || echo "[]" > "${OUTDIR}/plugins.json"
            wp theme  list --format=json > "${OUTDIR}/themes.json"  || echo "[]" > "${OUTDIR}/themes.json"
            wp user   list --role=administrator --format=json > "${OUTDIR}/admins.json" || echo "[]" > "${OUTDIR}/admins.json"

            # MU plugins (scan directory)
            MUDIR="${TARGET}/wp-content/mu-plugins"
            if [ -d "${MUDIR}" ]; then
              php -r '
                $d=getenv("MUDIR");
                $out=[];
                if (is_dir($d)){
                  foreach (scandir($d) as $f){
                    if ($f==="."||$f==="..") continue;
                    $p="$d/$f";
                    if (is_file($p)){
                      $out[]=["file"=>$f,"size"=>filesize($p),"md5"=>md5_file($p)];
                    }
                  }
                }
                echo json_encode($out, JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE);
              ' > "${OUTDIR}/mu_plugins.json"
            else
              echo "[]" > "${OUTDIR}/mu_plugins.json"
            fi

            # active theme (text)
            wp theme list --status=active --field=name 2>/dev/null | head -n1 > "${OUTDIR}/active_theme.txt" || : > "${OUTDIR}/active_theme.txt"

            # error bucket
            : > "${OUTDIR}/errors.txt"

            echo "[INFO] snapshot raw files at ${OUTDIR}"
            ls -la "${OUTDIR}" | sed -n '1,200p'

      - name: 4) Download snapshot logs
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}"
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=no -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: 5) Assemble snapshot.json (offline)
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"

          # defaults if anything missing
          [ -f "${RAW}/plugins.json" ]    || echo '[]' > "${RAW}/plugins.json"
          [ -f "${RAW}/themes.json" ]     || echo '[]' > "${RAW}/themes.json"
          [ -f "${RAW}/mu_plugins.json" ] || echo '[]' > "${RAW}/mu_plugins.json"
          [ -f "${RAW}/admins.json" ]     || echo '[]' > "${RAW}/admins.json"
          [ -f "${RAW}/errors.txt" ]      || : > "${RAW}/errors.txt"

          # build JSON (czyści \n w plikach txt)
          jq -n \
            --arg run_id     "${{ github.run_id }}" \
            --arg run_ts     "$(date -u +%FT%TZ)" \
            --rawfile home      "${RAW}/home.txt" \
            --rawfile siteurl   "${RAW}/siteurl.txt" \
            --rawfile wpv       "${RAW}/wp_version.txt" \
            --rawfile phpv      "${RAW}/php_version.txt" \
            --rawfile host      "${RAW}/hostname.txt" \
            --rawfile ts_utc    "${RAW}/ts_utc.txt" \
            --rawfile active    "${RAW}/active_theme.txt" \
            --slurpfile plugins "${RAW}/plugins.json" \
            --slurpfile themes  "${RAW}/themes.json" \
            --slurpfile mupl    "${RAW}/mu_plugins.json" \
            --slurpfile admins  "${RAW}/admins.json" \
            --rawfile   errs    "${RAW}/errors.txt" '
            def trimnl: sub("[\\r\\n]+$";"");
            {
              run_id: $run_id,
              run_ts: $run_ts,
              site: {
                home:       ($home    | trimnl),
                siteurl:    ($siteurl | trimnl),
                wp_version: ($wpv     | trimnl),
                php_version:($phpv    | trimnl),
                hostname:   ($host    | trimnl),
                timestamp_utc: ($ts_utc | trimnl)
              },
              plugins: ($plugins[0] // []),
              themes:  ($themes[0]  // []),
              mu_plugins: ($mupl[0] // []),
              admins:  ($admins[0]  // []),
              active_theme: { active: ($active | trimnl) },
              errors: ( ($errs | split("\n")) | map(select(length>0)) )
            }' > "${SNAP}"

          echo "::notice::Built snapshot.json"
          jq '.run_id,.site.wp_version,.site.php_version,.active_theme' "${SNAP}" || true

      - name: 6) Generate ARCHITECTURE.md
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"
          OUT="${RAW}/ARCHITECTURE.md"

          SITE_HOME=$(jq -r '.site.home // ""' "${SNAP}")
          SITE_WP=$(jq -r '.site.wp_version // "unknown"' "${SNAP}")
          SITE_PHP=$(jq -r '.site.php_version // "unknown"' "${SNAP}")
          ACTIVE_THEME=$(jq -r '.active_theme.active // ""' "${SNAP}")
          PL_COUNT=$(jq -r '.plugins | length' "${SNAP}")
          MU_COUNT=$(jq -r '.mu_plugins | length' "${SNAP}")
          ADM_COUNT=$(jq -r '.admins | length' "${SNAP}")
          RUN_TS=$(jq -r '.run_ts' "${SNAP}")

          {
            echo "# WeekTopPick – Snapshot Architecture"
            echo
            echo "- **Run ID:** ${{ github.run_id }}"
            echo "- **Run TS (UTC):** ${RUN_TS}"
            echo "- **Home URL:** ${SITE_HOME}"
            echo "- **WordPress:** ${SITE_WP}"
            echo "- **PHP:** ${SITE_PHP}"
            echo "- **Active theme:** ${ACTIVE_THEME}"
            echo "- **Plugins:** ${PL_COUNT} (MU: ${MU_COUNT})"
            echo "- **Admins:** ${ADM_COUNT}"
            echo
            echo "## Plugins"
            jq -r '.plugins[] | "- " + .name + " (" + .status + ") @ " + (.version // "n/a")' "${SNAP}" || true
            echo
            echo "## Themes"
            jq -r '.themes[]  | "- " + .name + " (" + .status + ") @ " + (.version // "n/a")' "${SNAP}" || true
            echo
            echo "## MU-Plugins"
            jq -r '.mu_plugins[] | "- " + .file + " [" + (.size|tostring) + " B]"' "${SNAP}" || true
          } > "${OUT}"

          echo "::notice::ARCHITECTURE.md generated"
          head -n 20 "${OUT}" || true

      - name: 7) Upload artifact (raw snapshot logs)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: 8) Commit + publish snapshot (stable 'latest' copy)
        run: |
          set -euo pipefail
          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"

          mkdir -p "${SNAP_DIR}" "${RO_DIR}"
          cp -a "_ci_logs/${{ github.run_id }}/snapshot/." "${RO_DIR}/"

          # Historia + wskaźnik latest (bez symlinków)
          cp "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-${{ github.run_id }}.json"
          cp "${RO_DIR}/snapshot.json" "${SNAP_DIR}/snapshot-latest.json"

          rm -rf "${RO_LATEST}"
          mkdir -p "$(dirname "${RO_LATEST}")"
          cp -a "${RO_DIR}/." "${RO_LATEST}/"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${SNAP_DIR}" "${RO_DIR}" "${RO_LATEST}"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish snapshot run ${{ github.run_id }}"
            git push
          fi

      - name: 9) Report summary
        if: always()
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR"
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}"
