name: 03_snapshot (WordPress → SSOT, pełny stan, offline assembly)

on:
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'workflow_run' &&
       github.event.workflow_run.conclusion == 'success')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      WTP_CI: "1"
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: 1) Checkout repo
        uses: actions/checkout@v4

      - name: 2) Setup tools + known_hosts (STRICT)
        shell: bash
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "${PORT}" "${HOST}" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"
          mkdir -p "_ci_logs/${{ github.run_id }}/snapshot"

      - name: 3) Create + upload remote RAW snapshot script (no jq on server)
        shell: bash
        run: |
          set -euo pipefail
          cat > /tmp/wtp_snapshot_raw.sh <<'SNAPRAW'
          #!/usr/bin/env bash
          set -euo pipefail
          : "${TARGET:?TARGET required}"
          : "${RUN_ID:?RUN_ID required}"

          RAWDIR="${TARGET}/.wtp/state/ci_logs/snapshot"
          mkdir -p "${RAWDIR}"
          ERR_FILE="${RAWDIR}/errors.txt"
          : > "${ERR_FILE}"
          note_err(){ echo "$1" | tee -a "${ERR_FILE}" 1>&2 || true; }

          cd "${TARGET}" || { note_err "Cannot cd TARGET"; exit 1; }
          wp(){ php ./wp "$@" --path="${TARGET}"; }

          # ---------- A) Site/Core ----------
          SITE_URL="$(wp option get siteurl 2>/dev/null || true)"
          SITE_HOME="$(wp option get home 2>/dev/null || true)"
          WP_VER="$(wp core version 2>/dev/null || true)"
          PHP_VERSION="$(php -r 'echo PHP_VERSION;' 2>/dev/null || true)"
          php -v > "${RAWDIR}/php_info.txt" 2>&1 || note_err "php -v failed."
          TABLE_PREFIX="$(grep -E "^\s*\\\$table_prefix\s*=" "wp-config.php" 2>/dev/null \
            | sed -E "s/.*['\"]([^'\"]+)['\"].*/\1/" | head -n1 || echo "wp_")"
          WPLANG="$(wp option get WPLANG 2>/dev/null || true)"
          TZ_STR="$(wp option get timezone_string 2>/dev/null || true)"
          if [[ -z "${TZ_STR}" || "${TZ_STR}" == "false" ]]; then
            TZ_STR="$(wp option get gmt_offset 2>/dev/null || true)"
          fi
          {
            echo "url=${SITE_URL}"
            echo "home=${SITE_HOME}"
            echo "wp_version=${WP_VER}"
            echo "table_prefix=${TABLE_PREFIX}"
            echo "language=${WPLANG}"
            echo "timezone=${TZ_STR}"
            echo "php_version=${PHP_VERSION}"
          } > "${RAWDIR}/site_info.env"

          # ---------- B) Themes (ALL + active) ----------
          wp theme list --format=json > "${RAWDIR}/themes.json" 2>>"${ERR_FILE}" || note_err "wp theme list failed."
          ACTIVE_THEME="$(wp theme list --status=active --field=name 2>/dev/null | head -n1 || true)"
          printf "%s\n" "${ACTIVE_THEME}" > "${RAWDIR}/theme_active_slug.txt" || true

          # Trees for ALL themes (to capture OFF themes as well)
          THEMES_DIR="${TARGET}/wp-content/themes"
          mkdir -p "${RAWDIR}/themes"
          if [[ -d "${THEMES_DIR}" ]]; then
            find "${THEMES_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/themes_slugs.txt" || true
            : > "${RAWDIR}/themes_trees.tsv"
            while read -r tslug; do
              [[ -z "${tslug}" ]] && continue
              tdir="${THEMES_DIR}/${tslug}"
              tout="${RAWDIR}/themes/${tslug}"
              mkdir -p "${tout}"
              ( cd "${tdir}" && find . -type f -printf '%P\n' | sort ) > "${tout}/tree.txt" 2>>"${ERR_FILE}" || true
              ( cd "${tdir}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${tout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fcnt=$(wc -l < "${tout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""
              if [[ -s "${tout}/hashes.sha1" ]]; then
                gsha="$(awk '{print $1}' "${tout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              fi
              printf "%s\t%s\t%s\n" "${tslug}" "${fcnt}" "${gsha}" >> "${RAWDIR}/themes_trees.tsv"
            done < "${RAWDIR}/themes_slugs.txt"
          else
            note_err "themes directory not found"
            : > "${RAWDIR}/themes_slugs.txt"; : > "${RAWDIR}/themes_trees.tsv"
          fi

          # ---------- C) Plugins (standard) ----------
          wp plugin list --format=json > "${RAWDIR}/plugins.json" 2>>"${ERR_FILE}" || note_err "wp plugin list json failed."
          wp plugin list --format=csv  > "${RAWDIR}/plugins.csv"  2>>"${ERR_FILE}" || note_err "wp plugin list csv failed."

          # Trees for ALL plugin directories (captures OFF too)
          PLUG_DIR="${TARGET}/wp-content/plugins"
          mkdir -p "${RAWDIR}/plugins"
          : > "${RAWDIR}/plugins_dirs.txt"
          if [[ -d "${PLUG_DIR}" ]]; then
            find "${PLUG_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort > "${RAWDIR}/plugins_dirs.txt" || true
            : > "${RAWDIR}/plugins_trees.tsv"
            while read -r pslug; do
              [[ -z "${pslug}" ]] && continue
              pdir="${PLUG_DIR}/${pslug}"
              pout="${RAWDIR}/plugins/${pslug}"
              mkdir -p "${pout}"
              ( cd "${pdir}" && find . -type f -printf '%P\n' | sort ) > "${pout}/tree.txt" 2>>"${ERR_FILE}" || true
              ( cd "${pdir}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${pout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fcnt=$(wc -l < "${pout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""
              if [[ -s "${pout}/hashes.sha1" ]]; then
                gsha="$(awk '{print $1}' "${pout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              fi
              printf "%s\t%s\t%s\n" "${pslug}" "${fcnt}" "${gsha}" >> "${RAWDIR}/plugins_trees.tsv"
            done < "${RAWDIR}/plugins_dirs.txt"
          else
            note_err "plugins directory not found"
            : > "${RAWDIR}/plugins_trees.tsv"
          fi

          # ---------- D) MU-plugins (dirs + lone files, incl. *.off) ----------
          MU_DIR="${TARGET}/wp-content/mu-plugins"
          mkdir -p "${RAWDIR}/mu-plugins"
          if [[ -d "${MU_DIR}" ]]; then
            ls -la "${MU_DIR}" > "${RAWDIR}/mu_plugins_ls.txt" 2>>"${ERR_FILE}" || note_err "mu ls failed."
            : > "${RAWDIR}/mu_plugins_hashes.txt"
            find "${MU_DIR}" -type f -print0 2>/dev/null | while IFS= read -r -d '' f; do
              sha1sum "${f}" >> "${RAWDIR}/mu_plugins_hashes.txt" 2>>"${ERR_FILE}" || true
            done
            # per-item trees:
            : > "${RAWDIR}/mu_plugins_items.txt"
            # subdirs as items
            find "${MU_DIR}" -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true
            # lone files (php, php.off, any) as items -> name by basename
            find "${MU_DIR}" -maxdepth 1 -type f -printf '%f\n' | sort >> "${RAWDIR}/mu_plugins_items.txt" || true

            : > "${RAWDIR}/mu_plugins_trees.tsv"
            while read -r item; do
              [[ -z "${item}" ]] && continue
              is_dir=0
              [[ -d "${MU_DIR}/${item}" ]] && is_dir=1
              mout="${RAWDIR}/mu-plugins/${item}"
              mkdir -p "${mout}"
              if [[ ${is_dir} -eq 1 ]]; then
                ( cd "${MU_DIR}/${item}" && find . -type f -printf '%P\n' | sort ) > "${mout}/tree.txt" 2>>"${ERR_FILE}" || true
                ( cd "${MU_DIR}/${item}" && find . -type f -print0 | sort -z | xargs -0 sha1sum ) > "${mout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              else
                # single file item -> tree = just that file
                echo "${item}" > "${mout}/tree.txt"
                sha1sum "${MU_DIR}/${item}" > "${mout}/hashes.sha1" 2>>"${ERR_FILE}" || true
              fi
              fcnt=$(wc -l < "${mout}/tree.txt" 2>/dev/null || echo 0)
              gsha=""
              if [[ -s "${mout}/hashes.sha1" ]]; then
                gsha="$(awk '{print $1}' "${mout}/hashes.sha1" | tr -d '\r' | sort | sha1sum | awk '{print $1}')"
              fi
              printf "%s\t%s\t%s\n" "${item}" "${fcnt}" "${gsha}" >> "${RAWDIR}/mu_plugins_trees.tsv"
            done < "${RAWDIR}/mu_plugins_items.txt"

            # Headers (root .php; best-effort)
            : > "${RAWDIR}/mu_plugins_headers.txt"
            find "${MU_DIR}" -maxdepth 1 -type f -name "*.php*" -print0 2>/dev/null \
              | while IFS= read -r -d '' fphp; do
                  { echo "=== $(basename "$fphp") ===";
                    head -n 80 "$fphp" | grep -E "^\s*(\*|//)?\s*(Plugin Name|Description|Version):" || true; echo; } \
                    >> "${RAWDIR}/mu_plugins_headers.txt"
                done
          else
            echo "mu-plugins missing" > "${RAWDIR}/mu_plugins_ls.txt"
            : > "${RAWDIR}/mu_plugins_hashes.txt"
            : > "${RAWDIR}/mu_plugins_items.txt"
            : > "${RAWDIR}/mu_plugins_trees.tsv"
            : > "${RAWDIR}/mu_plugins_headers.txt"
          fi

          # ---------- E) Users ----------
          wp user list --role=administrator --field=user_login --format=json > "${RAWDIR}/admins.json" 2>>"${ERR_FILE}" || note_err "wp users admin failed."

          # ---------- F) SSOT ----------
          SSOT_PATH="${TARGET}/.wtp/ssot.yml"
          if [[ -f "${SSOT_PATH}" ]]; then
            cp "${SSOT_PATH}" "${RAWDIR}/ssot.yml" 2>>"${ERR_FILE}" || note_err "copy ssot failed."
            sha1sum "${SSOT_PATH}" | awk '{print $1}' > "${RAWDIR}/ssot.sha1" || true
            (base64 -w0 "${SSOT_PATH}" 2>/dev/null || base64 "${SSOT_PATH}") | tr -d '\n' > "${RAWDIR}/ssot.b64" || true
          else
            echo "" > "${RAWDIR}/ssot.yml"; echo "" > "${RAWDIR}/ssot.sha1"; echo "" > "${RAWDIR}/ssot.b64"
            note_err "SSOT file .wtp/ssot.yml not found."
          fi

          # ---------- G) Server info ----------
          {
            echo "user: $(whoami 2>/dev/null || true)"
            echo "uname: $(uname -a 2>/dev/null || true)"
            echo "datetime: $(date -Is 2>/dev/null || true)"
            echo "cwd: $(pwd 2>/dev/null || true)"
          } > "${RAWDIR}/server_info.txt" || note_err "write server_info failed."

          # ---------- H) Summary ----------
          wp plugin list --status=active --field=name --format=json > "${RAWDIR}/plugins_active.json" 2>>"${ERR_FILE}" || note_err "wp plugins active list failed."

          # done
          exit 0
          SNAPRAW

          chmod +x /tmp/wtp_snapshot_raw.sh
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes /tmp/wtp_snapshot_raw.sh "${USER}@${HOST}:/tmp/wtp_snapshot_raw.sh"

      - name: 4) Run remote RAW snapshot script
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" ssh -p "${PORT}" -o StrictHostKeyChecking=yes \
            "${USER}@${HOST}" \
            "RUN_ID='${{ github.run_id }}' TARGET='${TARGET}' bash /tmp/wtp_snapshot_raw.sh && rm -f /tmp/wtp_snapshot_raw.sh"

      - name: 5) Pull RAW logs back (no glob errors)
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "${PASS}" scp -P "${PORT}" -o StrictHostKeyChecking=yes -r \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/snapshot" \
            "_ci_logs/${{ github.run_id }}/" || true
          ls -la "_ci_logs/${{ github.run_id }}/snapshot" || true

      - name: 6) Assemble snapshot.json LOCALLY (runner, with jq)
        shell: bash
        run: |
          set -euo pipefail
          RAW="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP="${RAW}/snapshot.json"

          # site
          declare -A SITE=()
          while IFS='=' read -r k v; do
            [[ -n "${k:-}" ]] && SITE["$k"]="$v"
          done < "${RAW}/site_info.env"

          # helper: mk JSON safely
          jq -n \
            --arg run_id "${{ github.run_id }}" \
            --arg timestamp "$(date -Is)" \
            --arg url "${SITE[url]:-}" \
            --arg home "${SITE[home]:-}" \
            --arg wp_version "${SITE[wp_version]:-}" \
            --arg table_prefix "${SITE[table_prefix]:-}" \
            --arg language "${SITE[language]:-}" \
            --arg timezone "${SITE[timezone]:-}" \
            --arg php_version "${SITE[php_version]:-}" \
            --argfile themes_all    "${RAW}/themes.json" \
            --arg active_theme "$(cat "${RAW}/theme_active_slug.txt" 2>/dev/null || echo "")" \
            --argfile plugins_std   "${RAW}/plugins.json" \
            --argfile plugins_active "${RAW}/plugins_active.json" \
            --argfile admins        "${RAW}/admins.json" \
            --arg ssot_path ".wtp/ssot.yml" \
            --arg ssot_sha1 "$(cat "${RAW}/ssot.sha1" 2>/dev/null || echo "")" \
            --arg ssot_b64  "$(cat "${RAW}/ssot.b64"  2>/dev/null || echo "")" \
            --arg server_user  "$(grep -E '^user:'     "${RAW}/server_info.txt" 2>/dev/null | sed 's/^user:\s*//')" \
            --arg server_uname "$(grep -E '^uname:'    "${RAW}/server_info.txt" 2>/dev/null | sed 's/^uname:\s*//')" \
            --arg server_dt    "$(grep -E '^datetime:' "${RAW}/server_info.txt" 2>/dev/null | sed 's/^datetime:\s*//')" \
            --arg server_cwd   "$(grep -E '^cwd:'      "${RAW}/server_info.txt" 2>/dev/null | sed 's/^cwd:\s*//')" \
            --argfile mu_list "${RAW}/mu_plugins_trees.tsv" \
            'def tsv2map($p):
               ( $p|tostring | if . == "" then "" else . end ) as $s
               | if $s == "" then {}
                 else
                   ( $s | split("\n")
                     | map(select(length>0))
                     | map( split("\t") )
                     | reduce .[] as $r ({}; . + { ($r[0]) : {files: ( ($r[1]//"0")|tonumber ), sha1: ($r[2]//"") } } )
                   )
                 end;
             def file_or_empty($path; $empty):
               if ( $path|type == "string" ) then $empty else $empty end;

             # plugins trees (TSV -> map)
             ' > /dev/null

          # plugins trees map
          PLUG_TSV="$(cat "${RAW}/plugins_trees.tsv" 2>/dev/null || echo "")"
          MU_TSV="$(cat "${RAW}/mu_plugins_trees.tsv" 2>/dev/null || echo "")"
          PLUG_MAP="$(printf '%s' "${PLUG_TSV}" | awk '1')"
          MU_MAP="$(printf '%s' "${MU_TSV}" | awk '1')"

          # Build JSON (two-step: write small temp files to load via --slurpfile-like)
          printf '%s' "${PLUG_TSV}" > "${RAW}/__plugins_trees.tsv"
          printf '%s' "${MU_TSV}"   > "${RAW}/__mu_plugins_trees.tsv"

          jq -n \
            --argjson run_id ${{ github.run_id }} \
            --arg timestamp "$(date -Is)" \
            --arg url "${SITE[url]:-}" \
            --arg home "${SITE[home]:-}" \
            --arg wp_version "${SITE[wp_version]:-}" \
            --arg table_prefix "${SITE[table_prefix]:-}" \
            --arg language "${SITE[language]:-}" \
            --arg timezone "${SITE[timezone]:-}" \
            --arg php_version "${SITE[php_version]:-}" \
            --argfile themes_all "${RAW}/themes.json" \
            --arg active_theme "$(cat "${RAW}/theme_active_slug.txt" 2>/dev/null || echo "")" \
            --argfile plugins_std "${RAW}/plugins.json" \
            --argfile plugins_active "${RAW}/plugins_active.json" \
            --argfile admins "${RAW}/admins.json" \
            --arg server_user  "$(grep -E '^user:'     "${RAW}/server_info.txt" 2>/dev/null | sed 's/^user:\s*//')" \
            --arg server_uname "$(grep -E '^uname:'    "${RAW}/server_info.txt" 2>/dev/null | sed 's/^uname:\s*//')" \
            --arg server_dt    "$(grep -E '^datetime:' "${RAW}/server_info.txt" 2>/dev/null | sed 's/^datetime:\s*//')" \
            --arg server_cwd   "$(grep -E '^cwd:'      "${RAW}/server_info.txt" 2>/dev/null | sed 's/^cwd:\s*//')" \
            --arg ssot_path ".wtp/ssot.yml" \
            --arg ssot_sha1 "$(cat "${RAW}/ssot.sha1" 2>/dev/null || echo "")" \
            --arg ssot_b64  "$(cat "${RAW}/ssot.b64"  2>/dev/null || echo "")" \
            --rawfile plug_tsv "${RAW}/__plugins_trees.tsv" \
            --rawfile mu_tsv   "${RAW}/__mu_plugins_trees.tsv" \
            --rawfile errs_raw "${RAW}/errors.txt" \
            '
              def tsv_to_map($tsv):
                ( $tsv | split("\n")
                  | map(select(length>0))
                  | map( split("\t") )
                  | reduce .[] as $r ({}; . + { ($r[0]) : {files: ( ($r[1]//"0")|tonumber ), sha1: ($r[2]//"") } } )
                );

              def lines($s): ($s | split("\n") | map(select(length>0)));

              {
                run_id: $run_id,
                timestamp: $timestamp,
                site: {
                  url: $url, home: $home, wp_version: $wp_version,
                  table_prefix: $table_prefix, language: $language,
                  timezone: $timezone, php_version: $php_version
                },
                server: { user: $server_user, uname: $server_uname, datetime: $server_dt, cwd: $server_cwd },
                theme: {
                  active: (if ($active_theme|length)>0 then {stylesheet:$active_theme} else null end),
                  all: $themes_all
                },
                plugins: {
                  standard: $plugins_std,
                  must_use: ( if ($mu_tsv|length)>0
                              then ( ($mu_tsv|split("\n")|map(select(length>0)|split("\t")|.[0])) )
                              else [] end ),
                  trees: (tsv_to_map($plug_tsv)),
                  mu_trees: (tsv_to_map($mu_tsv))
                },
                admins: $admins,
                summary: {
                  plugins_active: $plugins_active,
                  counts: {
                    themes_total: ($themes_all|length),
                    plugins_total: ($plugins_std|length),
                    plugins_active: ($plugins_active|length),
                    plugins_mu: ((tsv_to_map($mu_tsv)|keys)|length),
                    admins: ($admins|length)
                  },
                  errors: (lines($errs_raw))
                },
                wtp: { ssot_path: $ssot_path, ssot_sha1: $ssot_sha1, ssot_b64: $ssot_b64 }
              }
            ' > "${SNAP}"

          echo "::notice::Built snapshot.json ($(wc -c < "${SNAP}") bytes)"

      - name: 7) Upload artifact (snapshot logs + raw)
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/snapshot/**
          retention-days: 14

      - name: 8) Publish snapshot + RO mirror to repo (raw-readable)
        shell: bash
        run: |
          set -euo pipefail
          SRC_DIR="_ci_logs/${{ github.run_id }}/snapshot"
          SNAP_FILE="${SRC_DIR}/snapshot.json"

          SNAP_DIR=".wtp/snapshots"
          RO_DIR=".wtp/state/ro/public/${{ github.run_id }}"
          RO_LATEST=".wtp/state/ro/public/latest"

          mkdir -p "${SNAP_DIR}" "${RO_DIR}"
          cp -a "${SRC_DIR}/." "${RO_DIR}/"

          cp "${SNAP_FILE}" "${SNAP_DIR}/snapshot-${{ github.run_id }}.json"
          cp "${SNAP_FILE}" "${SNAP_DIR}/snapshot-latest.json"

          rm -rf "${RO_LATEST}"
          mkdir -p "$(dirname "${RO_LATEST}")"
          cp -a "${RO_DIR}" "${RO_LATEST}"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${SNAP_DIR}/snapshot-${{ github.run_id }}.json" "${SNAP_DIR}/snapshot-latest.json" "${RO_DIR}" "${RO_LATEST}"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish snapshot run ${{ github.run_id }} (+RO mirror, offline assembly)"
            git push
          fi

          echo "::notice::RO latest: /.wtp/state/ro/public/latest/snapshot.json"
          echo "::notice::RO run:   /.wtp/state/ro/public/${{ github.run_id }}/snapshot.json"

      - name: 9) Report summary
        shell: bash
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/snapshot/errors.txt"
          if [[ -s "$ERR" ]]; then
            echo "::group::Snapshot errors"
            cat "$ERR" || true
            echo "::endgroup::"
            while IFS= read -r line; do
              [[ -n "$line" ]] && echo "::warning::$line"
            done < "$ERR"
          fi
          echo "::notice::03_snapshot completed for run ${{ github.run_id }}."
