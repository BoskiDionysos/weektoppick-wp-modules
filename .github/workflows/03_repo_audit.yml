name: 03_repo_audit

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: repo-audit
  cancel-in-progress: true

jobs:
  audit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure input exists
        run: |
          set -euo pipefail
          IN=".wtp/state/ro/public/latest/repo/repo-snapshot.json"
          if [ ! -f "$IN" ]; then
            echo "::error::Missing $IN (run 03_repo_snapshot first)"; exit 1
          fi
          head -n 3 "$IN" || true

      - name: Build REPO_AUDIT.md
        run: |
          set -euo pipefail
          python - << 'PY'
          import json, os
          from pathlib import Path

          RUN_ID = os.environ["RUN_ID"]
          IN  = Path(".wtp/state/ro/public/latest/repo/repo-snapshot.json")
          OUT = Path(f"_ci_logs/{RUN_ID}/repo_audit/REPO_AUDIT.md")
          OUT.parent.mkdir(parents=True, exist_ok=True)

          data  = json.load(IN.open(encoding="utf-8"))
          files = data.get("files", [])
          counts= data.get("counts", {})
          bycat = counts.get("by_category", {})

          def human(n):
              n = float(n or 0)
              for u in ["B","KB","MB","GB","TB"]:
                  if n < 1024: return f"{n:.1f} {u}"
                  n /= 1024
              return f"{n:.1f} PB"

          wfA = [f for f in files if f.get("category") == "workflow-active"]
          wfQ = [f for f in files if f.get("category") == "workflow-quarantine"]
          mu  = [f for f in files if f.get("path","").startswith("wp-content/mu-plugins/")]
          plug= [f for f in files if f.get("path","").startswith("wp-content/plugins/")]
          them= [f for f in files if f.get("path","").startswith("wp-content/themes/")]
          wtp = [f for f in files if f.get("path","").startswith(".wtp/")]
          large = sorted([f for f in files if (f.get("size") or 0) > 10*1024*1024],
                         key=lambda x: x.get("size") or 0, reverse=True)[:50]

          L=[]
          L.append("# REPO AUDIT")
          L.append(f"- Run ID: {data.get('run_id')}")
          L.append(f"- Run TS (UTC): {data.get('run_ts')}")
          L.append("")
          L.append("## Summary")
          L.append(f"- Files: {counts.get('files')}")
          for k in sorted(bycat.keys()):
              v = bycat[k]
              L.append(f"- {k}: {v['count']} • {human(v['size'])}")
          L.append("")
          L.append(f"**Workflows active:** {len(wfA)}  |  **quarantine:** {len(wfQ)}")
          L.append(f"MU files: {len(mu)} • Plugins files: {len(plug)} • Themes files: {len(them)} • .wtp files: {len(wtp)}")
          L.append("")
          L.append("## Biggest files (>10MB)")
          if large:
              L.append("| File | Size | Category |")
              L.append("|---|---:|---|")
              for f in large:
                  L.append(f"| {f['path']} | {human(f['size'] or 0)} | {f.get('category')} |")
          else:
              L.append("_none_")
          L.append("")
          L.append("## Recommendations")
          L.append("- Keep active only 6 workflows (deploy/wpcli/snapshot + ai-upsert/apply-inbox-patch + gsc).")
          L.append("- Leave others in `.github/workflows._quarantine/`; restore one-by-one after core is stable.")
          L.append("- Remove big archives from Git (use artifacts).")
          L.append("- In `.wtp/` keep `latest/` + few recent runs; prune old runs periodically.")

          OUT.write_text("\n".join(L) + "\n", encoding="utf-8")
          print(f"[OK] wrote {OUT}")
          PY

      - name: Publish REPO_AUDIT.md
        run: |
          set -euo pipefail
          SRC="_ci_logs/${RUN_ID}/repo_audit/REPO_AUDIT.md"
          RO_RUN=".wtp/state/ro/public/${RUN_ID}/repo"
          RO_LATEST=".wtp/state/ro/public/latest/repo"
          mkdir -p "${RO_RUN}" "${RO_LATEST}"
          cp -f "$SRC" "${RO_RUN}/REPO_AUDIT.md"
          cp -f "$SRC" "${RO_LATEST}/REPO_AUDIT.md"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "${RO_RUN}/REPO_AUDIT.md" "${RO_LATEST}/REPO_AUDIT.md"
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "Publish REPO_AUDIT.md ${RUN_ID}"
            git push
          fi
