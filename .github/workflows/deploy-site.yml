name: Deploy Site (MU, plugins, themes, wp-config)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/**'
      - 'wtp/**'
      - '.wtp/**'
      - '.github/workflows/deploy-site.yml'

concurrency:
  group: deploy-site
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass jq

      - name: Verify secrets
        run: |
          set -euo pipefail
          test -n "${HOST:-}" && test -n "${PORT:-}" && test -n "${USER:-}" && test -n "${PASS:-}" && test -n "${TARGET:-}" \
            || { echo "::error::Missing deploy secrets"; exit 1; }

      # Zbuduj listę "protect" z pliku .wtp/protected-plugins.txt lub wtp/protected-plugins.txt
      - name: Pick protect list (plugins)
        id: protect
        shell: bash
        run: |
          set -euo pipefail
          LIST=""
          if   [ -f ".wtp/protected-plugins.txt" ]; then LIST=".wtp/protected-plugins.txt"
          elif [ -f "wtp/protected-plugins.txt"  ]; then LIST="wtp/protected-plugins.txt"
          fi
          FILTERS="$(mktemp)"
          if [ -n "$LIST" ]; then
            echo "Using protect list: $LIST"
            # normalizacja linii (bez BOM/CR), wytnij komentarze i puste
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' | while IFS= read -r name; do
              name="${name%%#*}"; name="$(echo "$name" | xargs)"
              [ -z "$name" ] && continue
              echo "P ${name}/**" >> "$FILTERS"
            done
          fi
          echo "filters=$FILTERS" >> "$GITHUB_OUTPUT"
          echo "list=${LIST}"     >> "$GITHUB_OUTPUT"
          echo "---- PROTECT FILTERS ----"
          if [ -s "$FILTERS" ]; then cat "$FILTERS"; else echo "(empty)"; fi
          echo "-------------------------"

      - name: Remote plugins BEFORE
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "ls -1 '$TARGET/wp-content/plugins' || true"

      # MU-plugins: wykryj źródło (mu-plugins/ albo wp-content/mu-plugins/)
      - name: Detect mu-plugins directory in repo
        id: mu
        shell: bash
        run: |
          set -euo pipefail
          if   [ -d "mu-plugins" ]; then echo "src=mu-plugins" >> "$GITHUB_OUTPUT"
          elif [ -d "wp-content/mu-plugins" ]; then echo "src=wp-content/mu-plugins" >> "$GITHUB_OUTPUT"
          else echo "src=" >> "$GITHUB_OUTPUT"
          fi

      - name: Sync MU plugins (if present)
        if: ${{ steps.mu.outputs.src != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.mu.outputs.src }}"
          echo "Sync: $SRC -> $TARGET/wp-content/mu-plugins/"
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$SRC/" "$USER@$HOST:$TARGET/wp-content/mu-plugins/"

      # Plugins: wykryj źródło (plugins/ albo wp-content/plugins/)
      - name: Detect plugins directory in repo
        id: plg
        shell: bash
        run: |
          set -euo pipefail
          if   [ -d "plugins" ]; then echo "src=plugins" >> "$GITHUB_OUTPUT"
          elif [ -d "wp-content/plugins" ]; then echo "src=wp-content/plugins" >> "$GITHUB_OUTPUT"
          else echo "src=" >> "$GITHUB_OUTPUT"
          fi

      - name: Sync plugins (with protect if available)
        if: ${{ steps.plg.outputs.src != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.plg.outputs.src }}"

          # opcja filtra TYLKO jeśli plik istnieje i nie jest pusty
          declare -a MERGE_OPT=()
          if [ -s "${{ steps.protect.outputs.filters }}" ]; then
            echo "Apply protect filters:"
            cat "${{ steps.protect.outputs.filters }}"
            MERGE_OPT=( --filter="merge ${{ steps.protect.outputs.filters }}" )
          else
            echo "No protect filters – full manage with --delete."
          fi

          echo "Sync: $SRC -> $TARGET/wp-content/plugins/"
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            "${MERGE_OPT[@]}" \
            -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$SRC/" "$USER@$HOST:$TARGET/wp-content/plugins/"

      # Themes: wykryj źródło (themes/ albo wp-content/themes/)
      - name: Detect themes directory in repo
        id: thm
        shell: bash
        run: |
          set -euo pipefail
          if   [ -d "themes" ]; then echo "src=themes" >> "$GITHUB_OUTPUT"
          elif [ -d "wp-content/themes" ]; then echo "src=wp-content/themes" >> "$GITHUB_OUTPUT"
          else echo "src=" >> "$GITHUB_OUTPUT"
          fi

      - name: Sync themes (if present)
        if: ${{ steps.thm.outputs.src != '' }}
        shell: bash
        run: |
          set -euo pipefail
          SRC="${{ steps.thm.outputs.src }}"
          echo "Sync: $SRC -> $TARGET/wp-content/themes/"
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$SRC/" "$USER@$HOST:$TARGET/wp-content/themes/"

      - name: Remote plugins AFTER
        run: |
          set -euo pipefail
          echo "---- REMOTE PLUGINS AFTER ----"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "ls -1 '$TARGET/wp-content/plugins' || true"
          echo "--------------------------------"

      - name: Done
        run: echo "Deploy finished."
