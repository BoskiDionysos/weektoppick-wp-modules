name: WP Deploy (code + diagnostics)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/themes/**'
      - 'wtp/**'
      - '.wtp/**'
      - '.github/workflows/deploy-site.yml'

permissions:
  contents: read

concurrency:
  group: deploy-site
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass jq

      - name: Verify secrets
        run: |
          set -eo pipefail
          : "${HOST:?Missing DEPLOY_HOST}"
          : "${PORT:?Missing DEPLOY_PORT}"
          : "${USER:?Missing DEPLOY_USER}"
          : "${PASS:?Missing DEPLOY_PASS}"
          : "${TARGET:?Missing DEPLOY_TARGET}"
          echo "Secrets OK -> ${USER}@${HOST}:${TARGET}"

      - name: Remote sanity (environment check)
        run: |
          set -euo pipefail
          echo "TARGET=${TARGET}"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" /bin/bash <<'RMT'
            set -euo pipefail
            echo "=== whoami / uname / pwd ==="
            whoami || true
            uname -a || true
            pwd || true

            echo "=== try cd to TARGET and ls ==="
            cd "$TARGET" || { echo "::error::Cannot cd to TARGET ($TARGET)"; exit 1; }
            pwd
            ls -la | head -n 100

            echo "=== check wp-config.php presence ==="
            if [ -f wp-config.php ]; then
              echo "wp-config.php present"
            else
              echo "::error::wp-config.php NOT found in TARGET ($TARGET)"
              exit 1
            fi

            echo "=== php & curl availability ==="
            php -v || { echo "::error::php CLI not available"; exit 1; }
            curl -Is https://api.wordpress.org/ | head -n1 || true
          RMT

      - name: Remote plugins BEFORE
        run: |
          set -eo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "ls -1 '${TARGET}/wp-content/plugins' || true"

      - name: Sync MU plugins (if present)
        run: |
          set -eo pipefail
          if [ -d "mu-plugins" ]; then
            echo "Sync: mu-plugins -> ${TARGET}/wp-content/mu-plugins/"
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "mu-plugins/" "${USER}@${HOST}:${TARGET}/wp-content/mu-plugins/"
          else
            echo "Skip: mu-plugins not present."
          fi

      - name: Build rsync exclude from protected-plugins.txt
        id: excl
        run: |
          set -euo pipefail
          mkdir -p .wtp
          EXCLUDE_FILE=".wtp/rsync-exclude.txt"
          : > "$EXCLUDE_FILE"

          # prefer .wtp/, fallback to wtp/
          SRC=""
          if   [ -f ".wtp/protected-plugins.txt" ]; then SRC=".wtp/protected-plugins.txt"
          elif [ -f "wtp/protected-plugins.txt"  ]; then SRC="wtp/protected-plugins.txt"
          fi

          if [ -n "$SRC" ]; then
            echo "Using protect list: $SRC"
            sed -e 's/\r$//' "$SRC" | sed 's/^\xEF\xBB\xBF//' \
              | sed 's/#.*$//' | awk 'NF{print "wp-content/plugins/" $0 "/***"}' \
              >> "$EXCLUDE_FILE"
          else
            echo "No protected list found; rsync will fully manage plugins (with --delete)."
          fi

          echo "---- RSYNC EXCLUDES ----"
          if [ -s "$EXCLUDE_FILE" ]; then cat "$EXCLUDE_FILE"; else echo "(empty)"; fi
          echo "------------------------"
          echo "file=$EXCLUDE_FILE" >> "$GITHUB_OUTPUT"

      - name: Sync plugins (rsync with excludes)
        run: |
          set -eo pipefail
          if [ -d "plugins" ]; then
            echo "Sync: plugins -> ${TARGET}/wp-content/plugins/"
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              --exclude-from="${{ steps.excl.outputs.file }}" \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "plugins/" "${USER}@${HOST}:${TARGET}/wp-content/plugins/"
          else
            echo "Skip: repo does not contain 'plugins/'"
          fi

      - name: Detect themes directory in repo
        id: thm
        run: |
          set -eo pipefail
          if   [ -d "themes" ]; then echo "src=themes" >> "$GITHUB_OUTPUT"
          elif [ -d "wp-content/themes" ]; then echo "src=wp-content/themes" >> "$GITHUB_OUTPUT"
          else echo "src=" >> "$GITHUB_OUTPUT"
          fi

      - name: Sync themes (if present)
        if: ${{ steps.thm.outputs.src != '' }}
        run: |
          set -eo pipefail
          SRC="${{ steps.thm.outputs.src }}"
          echo "Sync: $SRC -> ${TARGET}/wp-content/themes/"
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            "$SRC/" "${USER}@${HOST}:${TARGET}/wp-content/themes/"

      - name: Remote plugins AFTER
        run: |
          set -eo pipefail
          echo "---- REMOTE PLUGINS AFTER ----"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "ls -1 '${TARGET}/wp-content/plugins' || true"
          echo "--------------------------------"

      - name: Done
        run: echo "Deploy finished."
