name: Deploy Site (MU, plugins, themes)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/themes/**'
      - 'wtp/**'
      - '.wtp/**'
      - '.github/workflows/deploy-site.yml'

permissions:
  contents: read

concurrency:
  group: deploy-site
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass jq
          mkdir -p ops-deploy

      - name: Build rsync filter (protected plugins)
        id: filt
        shell: bash
        run: |
          set -euo pipefail
          FILTER="ops-deploy/protected-plugins.filter"
          : > "$FILTER"

          SRC=""
          [ -f ".wtp/protected-plugins.txt" ] && SRC=".wtp/protected-plugins.txt"
          [ -z "$SRC" ] && [ -f "wtp/protected-plugins.txt" ] && SRC="wtp/protected-plugins.txt"

          if [ -n "$SRC" ]; then
            echo "# using $SRC" >&2
            while IFS= read -r line; do
              l="${line%%#*}"            # utnij komentarz po #
              l="$(echo "$l" | xargs)"   # trim
              [ -z "$l" ] && continue
              echo "P plugins/${l}/" >> "$FILTER"
            done < "$SRC"
          fi

          # bezpieczne domyślne (jeśli nie podano)
          grep -q 'plugins/wordfence/' "$FILTER" 2>/dev/null || echo "P plugins/wordfence/" >> "$FILTER"
          grep -q 'plugins/litespeed-cache/' "$FILTER" 2>/dev/null || echo "P plugins/litespeed-cache/" >> "$FILTER"

          echo "filter_path=$FILTER" >> "$GITHUB_OUTPUT"
          echo "---- filter ----"; cat "$FILTER" || true; echo "--------------"

      - name: Deploy MU plugins
        if: ${{ env.HOST != '' && env.USER != '' && env.PASS != '' && env.TARGET != '' }}
        run: |
          set -euo pipefail
          SRC="mu-plugins/"
          DEST="$TARGET/wp-content/mu-plugins/"
          sshpass -p "$PASS" rsync -e "ssh -p $PORT -o StrictHostKeyChecking=no" -avz --delete "$SRC" "$USER@$HOST:$DEST"

      - name: Deploy plugins (respect protected filter)
        if: ${{ env.HOST != '' && env.USER != '' && env.PASS != '' && env.TARGET != '' }}
        run: |
          set -euo pipefail
          SRC="plugins/"
          DEST="$TARGET/wp-content/plugins/"
          FILTER="${{ steps.filt.outputs.filter_path }}"
          if [ -f "$FILTER" ]; then
            sshpass -p "$PASS" rsync -e "ssh -p $PORT -o StrictHostKeyChecking=no" -avz --delete --filter="merge $FILTER" "$SRC" "$USER@$HOST:$DEST"
          else
            sshpass -p "$PASS" rsync -e "ssh -p $PORT -o StrictHostKeyChecking=no" -avz --delete "$SRC" "$USER@$HOST:$DEST"
          fi

      - name: Deploy themes
        if: ${{ env.HOST != '' && env.USER != '' && env.PASS != '' && env.TARGET != '' }}
        run: |
          set -euo pipefail
          SRC="wp-content/themes/"
          DEST="$TARGET/wp-content/themes/"
          sshpass -p "$PASS" rsync -e "ssh -p $PORT -o StrictHostKeyChecking=no" -avz --delete "$SRC" "$USER@$HOST:$DEST"

      - name: Summary
        run: |
          echo "✅ Deploy finished." >> "$GITHUB_STEP_SUMMARY"
