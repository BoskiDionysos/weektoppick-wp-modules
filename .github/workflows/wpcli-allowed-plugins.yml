name: WP-CLI install update allowed plugins

on:
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y sshpass jq

      - name: Verify inputs + allowlist
        run: |
          set -euo pipefail
          : "${HOST:?Missing DEPLOY_HOST}"
          : "${PORT:?Missing DEPLOY_PORT}"
          : "${USER:?Missing DEPLOY_USER}"
          : "${PASS:?Missing DEPLOY_PASS}"
          : "${TARGET:?Missing DEPLOY_TARGET}"
          test -f ".wtp/allowed-plugins.txt" || { echo "::error::.wtp/allowed-plugins.txt not found in repo"; exit 1; }

      - name: Upload allowlist to remote
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: Remote sanity (docroot, php, network)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' /bin/bash -s" <<'RMT'
            set -euo pipefail
            cd "$TARGET" || { echo "::error::Cannot cd to TARGET ($TARGET)"; exit 1; }
            echo "PWD: $(pwd)"
            if [ -f wp-config.php ]; then echo "wp-config.php present"; else echo "::error::wp-config.php NOT found"; exit 1; fi
            php -v || { echo "::error::php CLI not available"; exit 1; }
            echo "Network test to downloads.wordpress.org:"
            curl -Is https://downloads.wordpress.org/plugin/ | head -n1 || true
          RMT

      - name: Install/Update allowed plugins via WP-CLI (skip MU/LOCKS)
        env:
          WP_ALLOW_ROOT: "1"
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' /bin/bash -s" <<'RMT'
            set -euo pipefail
            cd "$TARGET"

            mkdir -p .wtp/state/ci_logs .wtp-vendor

            # Bootstrap local wp-cli if missing
            if ! [ -x ./wp ]; then
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null
              chmod +x wp.phar && mv wp.phar wp
            fi

            export WP_ALLOW_ROOT=1
            WP="php ./wp --skip-plugins"

            LIST=".wtp-allowed-plugins.txt"
            [ -f "$LIST" ] || { echo "::error::Allowlist not found on remote"; exit 1; }

            # Normalize + strip comments/blank
            TMP=".wtp-allowed-plugins.norm"
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' \
              | sed 's/#.*$//' | sed 's/^[[:space:]]*//; s/[[:space:]]*$//' \
              | awk 'NF>0' > "$TMP"

            # Logs
            INST=".wtp/state/ci_logs/plugins_installed.txt"
            UPD=".wtp/state/ci_logs/plugins_updated.txt"
            EXI=".wtp/state/ci_logs/plugins_existing.txt"
            SUM=".wtp/state/ci_logs/wpcli_summary.txt"
            : > "$INST"; : > "$UPD"; : > "$EXI"; : > "$SUM"

            echo "=== BEGIN INSTALL LOOP ===" | tee -a "$SUM"
            while IFS= read -r line; do
              # zip:… for premium/local
              if [[ "$line" =~ ^zip:(.+)$ ]]; then
                src="${BASH_REMATCH[1]}"
                [ -f "$src" ] || src=".wtp-vendor/$(basename "$src")"
                if [ ! -f "$src" ]; then
                  echo "::warning::ZIP not found: $src" | tee -a "$SUM"
                  continue
                fi
                echo ">> install ZIP: $(basename "$src")" | tee -a "$SUM"
                $WP plugin install "$src" --force --activate && echo "$src" >> "$INST"
                continue
              fi

              slug="${line%@*}"
              ver="${line#*@}"; [ "$slug" = "$ver" ] && ver=""

              if $WP plugin is-installed "$slug" >/dev/null 2>&1; then
                if [ -n "$ver" ]; then
                  echo ">> update $slug@$ver" | tee -a "$SUM"
                  $WP plugin update "$slug" --version="$ver" --activate && echo "$slug@$ver" >> "$UPD"
                else
                  echo ">> update $slug (latest)" | tee -a "$SUM"
                  $WP plugin update "$slug" --activate && echo "$slug" >> "$UPD"
                fi
              else
                if [ -n "$ver" ]; then
                  echo ">> install $slug@$ver" | tee -a "$SUM"
                  $WP plugin install "$slug" --version="$ver" --activate && echo "$slug@$ver" >> "$INST"
                else
                  echo ">> install $slug" | tee -a "$SUM"
                  $WP plugin install "$slug" --activate && echo "$slug" >> "$INST"
                fi
              fi

              $WP plugin is-installed "$slug" && echo "$slug" >> "$EXI"
            done < "$TMP"

            echo "=== ACTIVE PLUGINS (after) ===" | tee -a "$SUM"
            $WP plugin list --status=active | tee -a "$SUM" || true

            # Fallback theme
            if ! $WP theme is-installed wtp-core-theme >/dev/null 2>&1; then
              echo "Fallback theme activate: twentytwentyfive" | tee -a "$SUM"
              $WP theme install twentytwentyfive --activate || true
            fi
          RMT

      - name: Pull back logs as artifact
        run: |
          set -euo pipefail
          mkdir -p _ci_logs
          sshpass -p "$PASS" rsync -az -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/" "_ci_logs/"
        continue-on-error: true

      - name: Upload logs
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs
          path: _ci_logs/
        continue-on-error: true

              - name: Dump active plugins (WP-CLI)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" '
            set -e
            cd "$TARGET"
            WP="php ./wp --skip-plugins"
            echo "=== wp plugin list --status=active ==="
            $WP plugin list --status=active || true
          '

      - name: Show CI logs from server (+ assert)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" '
            set -e
            cd "$TARGET"
            LOGDIR=".wtp/state/ci_logs"
            echo "=== CI logs directory: $LOGDIR ==="
            ls -la "$LOGDIR" || true
            for f in plugins_installed.txt plugins_updated.txt plugins_existing.txt; do
              echo "--- $f ---"
              test -f "$LOGDIR/$f" && sed -n "1,120p" "$LOGDIR/$f" || echo "(missing)"
            done
            # Twarde sprawdzenie: musi być przynajmniej 1 aktywna wtyczka po akcji
            WP="php ./wp --skip-plugins"
            ACTIVE=$($WP plugin list --status=active --field=name | wc -l | tr -d " ")
            echo "Active plugins count: $ACTIVE"
            test "$ACTIVE" -ge 1 || { echo "::error::No active plugins after run"; exit 2; }
          '
