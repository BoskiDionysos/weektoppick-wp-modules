name: "WP-CLI allowed plugins install/update"

on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sshpass
        run: |
          sudo apt-get update -y
          sudo apt-get install -y sshpass

      - name: Upload allowlist
        run: |
          set -euo pipefail
          test -f ".wtp/allowed-plugins.txt" || { echo "::error::.wtp/allowed-plugins.txt not found"; exit 1; }
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: Install/Update allowed plugins via WP-CLI (remote, with --skip-plugins)
        run: |
          set -euo pipefail
          # PRZEKAZUJEMY TARGET do zdalnego środowiska -> dzięki temu cd "$TARGET" zadziała
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='$TARGET' bash -s" <<'EOF'
          set -euo pipefail
          cd "$TARGET"

          mkdir -p .wtp/state/ci_logs

          # WP-CLI: zainstaluj lokalnie, jeśli brak
          if ! [ -x ./wp ]; then
            curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
            php wp.phar --info >/dev/null
            chmod +x wp.phar
            mv wp.phar wp
          fi

          export WP_ALLOW_ROOT=1
          WP="php ./wp --skip-plugins"

          LIST=".wtp-allowed-plugins.txt"
          [ -f "$LIST" ] || { echo "::error::allowlist not found: $LIST"; exit 1; }

          # normalizacja (CRLF/BOM) + obcięcie komentarzy
          TMP=".wtp-allowed-plugins.norm"
          sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' > "$TMP"

          > .wtp/state/ci_logs/plugins_installed.txt
          > .wtp/state/ci_logs/plugins_updated.txt
          > .wtp/state/ci_logs/plugins_existing.txt

          while IFS= read -r raw; do
            line="$(echo "$raw" | sed 's/#.*$//' | xargs)"
            [ -z "$line" ] && continue

            if [[ "$line" =~ ^zip:(.+)$ ]]; then
              src="${BASH_REMATCH[1]}"
              [ -f "$src" ] || src=".wtp-vendor/$(basename "$src")"
              if [ ! -f "$src" ]; then
                echo "::warning::ZIP not found: $src"
                continue
              fi
              echo ">> install from ZIP: $src"
              $WP plugin install "$src" --force --activate && echo "$src" >> .wtp/state/ci_logs/plugins_installed.txt
              continue
            fi

            slug="${line%@*}"
            ver="${line#*@}"
            [ "$slug" = "$ver" ] && ver=""

            if $WP plugin is-installed "$slug" >/dev/null 2>&1; then
              if [ -n "$ver" ]; then
                $WP plugin update "$slug" --version="$ver" --activate && echo "$slug@$ver" >> .wtp/state/ci_logs/plugins_updated.txt
              else
                $WP plugin update "$slug" --activate && echo "$slug" >> .wtp/state/ci_logs/plugins_updated.txt
              fi
            else
              if [ -n "$ver" ]; then
                $WP plugin install "$slug" --version="$ver" --activate && echo "$slug@$ver" >> .wtp/state/ci_logs/plugins_installed.txt
              else
                $WP plugin install "$slug" --activate && echo "$slug" >> .wtp/state/ci_logs/plugins_installed.txt
              fi
            fi

            $WP plugin is-installed "$slug" && echo "$slug" >> .wtp/state/ci_logs/plugins_existing.txt
          done < "$TMP"

          echo "=== Active plugins:"
          $WP plugin list --status=active --field=name || true

          # Fallback theme (gdy brak naszego)
          if ! $WP theme is-installed wtp-core-theme >/dev/null 2>&1; then
            $WP theme install twentytwentyfive --activate || true
          fi
          EOF
