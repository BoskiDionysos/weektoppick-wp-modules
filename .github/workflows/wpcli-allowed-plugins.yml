name: "WP-CLI allowed plugins install/update"
on:
  workflow_dispatch:

permissions:
  contents: read

jobs:
  wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Upload allowlist
        run: sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
              ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: Run remote plugin install/update via WP-CLI
        env:
          WP_ALLOW_ROOT: true
        run: |
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" /bin/bash <<'EOF'
            set -euo pipefail
            cd "$TARGET"

            export WP_ALLOW_ROOT=1
            WP="php ./wp --skip-plugins"

            LIST=".wtp-allowed-plugins.txt"
            [ -f "$LIST" ] || { echo "::error::Plugin allowlist not found: $LIST"; exit 1; }

            # CRLF, BOM, trimming
            TMP=".wtp-allowed-plugins.norm"
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' > "$TMP"

            # ready log files
            PLUGINS_INSTALLED=".wtp/state/ci_logs/plugins_installed.txt"
            PLUGINS_UPDATED=".wtp/state/ci_logs/plugins_updated.txt"
            PLUGINS_EXISTING=".wtp/state/ci_logs/plugins_existing.txt"
            > "$PLUGINS_INSTALLED"
            > "$PLUGINS_UPDATED"
            > "$PLUGINS_EXISTING"

            while IFS= read -r raw; do
              # Remove comments, whitespace
              line=$(echo "$raw" | sed 's/#.*$//' | xargs)
              [ -z "$line" ] && continue

              # zip: logic
              if [[ "$line" =~ ^zip:(.+)$ ]]; then
                src="${BASH_REMATCH[1]}"
                [ -f "$src" ] || src=".wtp-vendor/$(basename "$src")"
                if [ ! -f "$src" ]; then
                  echo "::warning::ZIP not found: $src"
                  continue
                fi
                echo ">> plugin install $src"
                $WP plugin install "$src" --force --activate && echo "$src" >> "$PLUGINS_INSTALLED"
                continue
              fi

              # slug[@version] parsing
              slug="${line%@*}"
              ver="${line#*@}"
              [ "$slug" = "$ver" ] && ver=""

              if $WP plugin is-installed "$slug" >/dev/null 2>&1; then
                if [ -n "$ver" ]; then
                  $WP plugin update "$slug" --version="$ver" --activate && echo "$slug@$ver (updated)" >> "$PLUGINS_UPDATED"
                else
                  $WP plugin update "$slug" --activate && echo "$slug (updated)" >> "$PLUGINS_UPDATED"
                fi
              else
                if [ -n "$ver" ]; then
                  $WP plugin install "$slug" --version="$ver" --activate && echo "$slug@$ver (installed)" >> "$PLUGINS_INSTALLED"
                else
                  $WP plugin install "$slug" --activate && echo "$slug (installed)" >> "$PLUGINS_INSTALLED"
                fi
              fi

              # Log existing plugins
              $WP plugin is-installed "$slug" && echo "$slug" >> "$PLUGINS_EXISTING"
            done < "$TMP"

            # Sanity check on plugins
            echo "=== Plugins is-installed ==="
            $WP plugin list --field=name --status=active

            # Fallback theme activation
            if ! $WP theme is-installed wtp-core-theme; then
              $WP theme install twentytwentyfive --activate || true
            fi
          EOF
