name: WP-CLI: install/update allowed plugins
on: {workflow_dispatch: {}}
permissions: {contents: read}

jobs:
  wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Verify inputs
        shell: bash
        run: |
          set -euo pipefail
          test -n "${HOST:-}" && test -n "${PORT:-}" && test -n "${USER:-}" && test -n "${PASS:-}" && test -n "${TARGET:-}" \
            || { echo "::error::Missing deploy secrets"; exit 1; }
          test -f ".wtp/allowed-plugins.txt" || { echo "::error::.wtp/allowed-plugins.txt not found"; exit 1; }

      - name: Install WP-CLI on remote (phar fallback)
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" '
            set -e
            cd "$TARGET"
            if ! command -v wp >/dev/null 2>&1; then
              echo "Installing local wp-cli phar..."
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null || { echo "::error::php not available on server"; exit 1; }
              chmod +x wp.phar
              mv wp.phar wp
            fi
            mkdir -p .wtp-vendor
          '

      - name: Upload allowlist + vendor ZIPs (if any)
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"
          if [ -d ".wtp/vendor-plugins" ]; then
            sshpass -p "$PASS" rsync -az -v -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
              ".wtp/vendor-plugins/" "$USER@$HOST:$TARGET/.wtp-vendor/"
          fi

      - name: Install or update allowed plugins via WP-CLI
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" '
            set -e
            cd "$TARGET"
            WP="./wp"; test -x "$WP" || { echo "::error::wp-cli not executable"; exit 1; }
            while IFS= read -r raw; do
              clean=$(printf "%s" "$raw" | sed -e "s/\r$//" -e "s/#.*$//" | xargs)
              [ -z "$clean" ] && continue
              case "$clean" in
                zip:*) z=${clean#zip:}
                       if [ -f "$z" ]; then SRC="$z"
                       elif [ -f ".wtp-vendor/$(basename "$z")" ]; then SRC=".wtp-vendor/$(basename "$z")"
                       else echo "::warning::ZIP not found: $z"; continue
                       fi
                       echo ">> install from zip: $SRC"
                       php "$WP" plugin install "$SRC" --force --activate
                       continue;;
              esac
              slug=$(printf "%s" "$clean" | cut -d"@" -f1)
              ver=$(printf "%s" "$clean" | awk -F"@" "NF>1{print \$2}")
              if [ -n "$ver" ]; then
                echo ">> wp plugin install $slug --version=$ver --force --activate"
                php "$WP" plugin install "$slug" --version="$ver" --force --activate
              else
                echo ">> wp plugin install/update $slug (latest) --activate"
                if php "$WP" plugin is-installed "$slug"; then
                  php "$WP" plugin update "$slug" --activate
                else
                  php "$WP" plugin install "$slug" --activate
                fi
              fi
            done < ".wtp-allowed-plugins.txt"
          '

      - name: Post-deploy health (non-fatal)
        shell: bash
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" \
            "curl -fsS 'http://127.0.0.1/wp-json/wtp-ro-open/v1/health' && echo 'Health OK' || echo '::warning::health endpoint missing'"
