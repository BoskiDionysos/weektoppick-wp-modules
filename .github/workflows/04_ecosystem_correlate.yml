name: 04_server_snapshot (read-only, SSH, WP-CLI)

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: server-snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tools & known_hosts (STRICT)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: Create remote snapshot script
        run: |
          set -euo pipefail
          cat > /tmp/remote_snapshot.sh <<'SCRIPT'
          set -euo pipefail
          TARGET="${TARGET:?missing TARGET}"
          cd "$TARGET"

          mkdir -p .wtp/state/ci_logs .wtp/state/tmp

          # Ensure WP-CLI present (local copy in docroot)
          if [ ! -x ./wp ]; then
            curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
            php wp.phar --info >/dev/null 2>&1
            chmod +x wp.phar && mv wp.phar wp
          fi

          export WP_ALLOW_ROOT=1
          export WTP_CI=1

          # Raw probes (for debugging)
          uname -a      > .wtp/state/ci_logs/uname.txt  || true
          which php     > .wtp/state/ci_logs/php_which.txt || true
          php -v        > .wtp/state/ci_logs/php_version.txt || true
          pwd           > .wtp/state/ci_logs/pwd.txt || true

          # Core / themes / plugins / options
          # NOTE: 'wp core version --extra' nie wspiera --format=json → pakujemy do JSON ręcznie
          CORE_TXT="$(php ./wp core version --extra --path="$TARGET" 2>/dev/null || true)"
          printf '%s\n' "$CORE_TXT" > .wtp/state/ci_logs/wp_core.txt

          php ./wp theme list   --format=json --path="$TARGET" > .wtp/state/ci_logs/themes.json  || echo "[]" > .wtp/state/ci_logs/themes.json
          php ./wp plugin list  --format=json --path="$TARGET" > .wtp/state/ci_logs/plugins.json || echo "[]" > .wtp/state/ci_logs/plugins.json

          # Wyciągamy podstawowe opcje (home/siteurl/active theme)
          HOME_URL=$(php ./wp option get home --path="$TARGET" 2>/dev/null || true)
          SITE_URL=$(php ./wp option get siteurl --path="$TARGET" 2>/dev/null || true)
          TEMPLATE=$(php ./wp option get template --path="$TARGET" 2>/dev/null || true)
          STYLESHEET=$(php ./wp option get stylesheet --path="$TARGET" 2>/dev/null || true)

          # Pakowanie do JSON
          # core_extra (tekst) parsujemy do prostych linii klucz:wartość, potem do JSON
          CORE_JSON=$(printf '%s\n' "$CORE_TXT" | awk -F': ' 'NF>=2 {gsub(/\r/,""); k=$1; $1=""; sub(/^: /,""); v=$0; gsub(/^[ \t]+|[ \t]+$/,"",k); gsub(/^[ \t]+|[ \t]+$/,"",v); printf "\"%s\":\"%s\",\n", k, v }' | sed 's/\\n/ /g' | sed '$s/,$//')
          CORE_JSON="{${CORE_JSON}}"

          THEMES_JSON="$(cat .wtp/state/ci_logs/themes.json)"
          PLUGINS_JSON="$(cat .wtp/state/ci_logs/plugins.json)"

          # Walidacja minimalna: aktywny theme + lista pluginów
          # Jeśli brak aktywnego motywu albo pusta lista pluginów → błąd (fail fast)
          ACTIVE_THEME="$STYLESHEET"
          if [ -z "$ACTIVE_THEME" ]; then
            echo "::error::No active theme detected (stylesheet empty)"
            exit 2
          fi

          # Sprawdź czy JSON listy pluginów ma jakiekolwiek rekordy
          HAS_PLUGINS=$(php -r 'echo (json_decode(file_get_contents(".wtp/state/ci_logs/plugins.json"), true) ?: []) ? 1 : 0;')
          if [ "$HAS_PLUGINS" != "1" ]; then
            echo "::error::Plugin list is empty (wp plugin list returned no entries)"
            exit 3
          fi

          # Zbuduj snapshot.json
          SNAP_JSON=$(cat <<JSON
          {
            "timestamp": "$(date -Is)",
            "pwd": "$(pwd)",
            "core_extra": $CORE_JSON,
            "urls": {
              "home": "$HOME_URL",
              "siteurl": "$SITE_URL"
            },
            "theme": {
              "template": "$TEMPLATE",
              "stylesheet": "$STYLESHEET"
            },
            "themes": $THEMES_JSON,
            "plugins": $PLUGINS_JSON
          }
          JSON
          )
          printf '%s\n' "$SNAP_JSON" > .wtp/state/ci_logs/snapshot.json
          SCRIPT

      - name: Run remote snapshot
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "/tmp/remote_snapshot.sh" "$USER@$HOST:$TARGET/.wtp_remote_snapshot.sh"

          # uruchomienie skryptu na serwerze
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "TARGET='$TARGET' bash '$TARGET/.wtp_remote_snapshot.sh' && rm -f '$TARGET/.wtp_remote_snapshot.sh'"

      - name: Pull snapshot artifacts
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${RUN_ID}/server"
          sshpass -p "$PASS" scp -P "$PORT" -r \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/*" "_ci_logs/${RUN_ID}/server/"

      - name: Publish to repo (RUN_ID + latest)
        run: |
          set -euo pipefail
          RUN_DIR=".wtp/state/ro/public/${RUN_ID}/server"
          LATEST=".wtp/state/ro/public/latest/server"
          mkdir -p "$RUN_DIR" "$LATEST"

          # Kopiujemy snapshot.json + krótkie MD
          cp -f "_ci_logs/${RUN_ID}/server/snapshot.json" "$RUN_DIR/snapshot.json"

          {
            echo "# SERVER SNAPSHOT"
            echo ""
            echo "- Run ID: ${RUN_ID}"
            echo "- Generated: $(date -Is) (runner UTC)"
            echo ""
            echo "## Quick facts"
            echo ""
            echo "\`\`\`"
            sed -n '1,40p' "_ci_logs/${RUN_ID}/server/wp_core.txt" 2>/dev/null || true
            echo "\`\`\`"
            echo ""
            echo "Artifacts (raw):"
            echo "- php_which.txt, php_version.txt, uname.txt, pwd.txt"
            echo "- wp_core.txt, themes.json, plugins.json"
          } > "$RUN_DIR/SERVER_SNAPSHOT.md"

          # Mirror do latest/
          cp -f "$RUN_DIR/snapshot.json" "$LATEST/snapshot.json"
          cp -f "$RUN_DIR/SERVER_SNAPSHOT.md" "$LATEST/SERVER_SNAPSHOT.md"

          # Commit push
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "server snapshot ${RUN_ID}"
            BRANCH="${GITHUB_REF_NAME:-main}"
            git branch --show-current >/dev/null 2>&1 || git checkout -B "$BRANCH"
            for i in 1 2 3; do
              git fetch origin "$BRANCH"
              git pull --rebase origin "$BRANCH" || { git rebase --continue || true; }
              if git push origin "HEAD:$BRANCH"; then
                echo "::notice::Pushed (attempt $i)"
                exit 0
              fi
              sleep 2
            done
            echo "::error::Push failed after 3 attempts"
            exit 1
          fi

      - name: Upload artifact (raw server snapshot)
        uses: actions/upload-artifact@v4
        with:
          name: server-snapshot-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/server/**
          retention-days: 7
