name: 04_ecosystem_correlate (repoâ†”server correlation)

on:
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: ecosystem-corr
  cancel-in-progress: true

jobs:
  correlate:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    env:
      RUN_ID: ${{ github.run_id }}
      OUT: .wtp/state/ro/public/${{ github.run_id }}/ecosystem
      LATEST: .wtp/state/ro/public/latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Ensure inputs exist
        run: |
          set -euo pipefail
          test -f "${LATEST}/repo/plugin_meta.json" || { echo "::error::missing repo/plugin_meta.json (run 03)"; exit 1; }
          test -f "${LATEST}/repo/mu_meta.json" || { echo "::error::missing repo/mu_meta.json (run 03)"; exit 1; }
          test -f "${LATEST}/server/snapshot.json" || { echo "::error::missing server/snapshot.json (run 04)"; exit 1; }
          mkdir -p "${OUT}" "${LATEST}/ecosystem"

      - name: Correlate & publish
        run: |
          set -euo pipefail
          python - << 'PY'
          import json, os, pathlib
          OUT = pathlib.Path(os.environ["OUT"])
          L = pathlib.Path(os.environ["LATEST"])
          repo_plugins = json.load(open(L/"repo/plugin_meta.json",encoding="utf-8"))
          repo_mu      = json.load(open(L/"repo/mu_meta.json",encoding="utf-8"))
          snap         = json.load(open(L/"server/snapshot.json",encoding="utf-8"))

          active = set([p.get("name") or p.get("plugin") or p.get("title") for p in snap.get("plugins",[]) if str(p.get("status","")).lower()=="active"])
          installed = set([p.get("name") or p.get("plugin") or p.get("title") for p in snap.get("plugins",[])])

          repo_names = set([ (p.get("name") or p.get("path")) for p in repo_plugins ])
          mu_names   = set([ (p.get("name") or p.get("path")) for p in repo_mu ])

          missing_in_repo = sorted(list(active - repo_names))
          mu_present = sorted(list(mu_names))
          active_count = len(active)

          agg = {
            "server_active_plugins": active_count,
            "server_installed_plugins": len(installed),
            "repo_plugins": len(repo_names),
            "repo_mu": len(mu_names),
            "missing_active_in_repo": missing_in_repo,
          }
          (OUT/"ecosystem-audit.json").write_text(json.dumps(agg,ensure_ascii=False,indent=2),encoding="utf-8")

          md=[]
          md += ["# ECOSYSTEM AUDIT",
                 f"- Active on server: **{active_count}**",
                 f"- Repo plugins: **{len(repo_names)}**, MU: **{len(mu_names)}**",
                 "",
                 "## Missing active plugins in repo (by name)",
                 *(["- "+x for x in missing_in_repo] or ["_none_"]),
                 "",
                 "## MU present in repo",
                 *(["- "+x for x in mu_present] or ["_none_"])]
          (OUT/"ECOSYSTEM_AUDIT.md").write_text("\n".join(md)+"\n",encoding="utf-8")

          # mirror to latest
          (L/"ecosystem").mkdir(parents=True, exist_ok=True)
          for n in ["ecosystem-audit.json","ECOSYSTEM_AUDIT.md"]:
              (L/"ecosystem"/n).write_text((OUT/n).read_text(encoding="utf-8"),encoding="utf-8")
          PY

      - name: Commit & push (rebase-safe)
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git diff --staged --quiet || git commit -m "ecosystem correlate ${RUN_ID}"
          git push || true
