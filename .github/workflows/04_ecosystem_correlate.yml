name: 04_server_snapshot (read-only, strict JSON, validated, wp-options)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: server-snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    env:
      RUN_ID: ${{ github.run_id }}
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Sanity (secrets & tools)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y sshpass curl
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: Stage remote collector
        run: |
          set -euo pipefail
          cat > /tmp/wtp_server_snapshot.sh <<'RS'
          set -euo pipefail
          : "${TARGET:?TARGET not set}"

          cd "$TARGET"
          export WP_ALLOW_ROOT=1
          export WTP_CI=1

          # WP-CLI
          if [ ! -x ./wp ]; then
            curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
            php wp.phar --info >/dev/null 2>&1
            chmod +x wp.phar && mv wp.phar wp
          fi

          mkdir -p .wtp/state/ci_logs/server_snapshot
          OUTDIR=".wtp/state/ci_logs/server_snapshot"
          RUN_ID="${RUN_ID:-local}"

          # Raw probes
          (which php || true)            >  /tmp/php_which.txt || true
          (php -v    || true)            >  /tmp/php_version.txt || true
          (uname -a  || true)            >  /tmp/uname.txt || true
          (pwd       || true)            >  /tmp/pwd.txt || true

          # WP core/version – bez --format=json (WP-CLI core version nie zwraca JSON)
          php ./wp --path="$TARGET" core version --extra > /tmp/wp_core.txt

          # Site/Home + kluczowe opcje (JSON)
          php ./wp --path="$TARGET" option get siteurl > /tmp/siteurl.txt || true
          php ./wp --path="$TARGET" option get home    > /tmp/home.txt || true
          php ./wp --path="$TARGET" option list --format=json \
            --search='blogname|blogdescription|timezone_string|WPLANG|permalink_structure|users_can_register|default_role' \
            > /tmp/wp_options.json || echo "[]" > /tmp/wp_options.json

          # Themes / Plugins – JSON
          php ./wp --path="$TARGET" theme  list   --format=json > /tmp/themes.json
          php ./wp --path="$TARGET" plugin list   --format=json > /tmp/plugins.json

          # Build snapshot.json (PHP łączy wszystko)
          php -d detect_unicode=0 -r '
            function txt($p){return @is_file($p)?trim(@file_get_contents($p)):"";}
            function parse_pairs($txt){
              $out=[];
              foreach(preg_split("/\\r?\\n/",$txt) as $ln){
                if(strpos($ln,":")!==false){
                  list($k,$v)=array_map("trim",explode(":",$ln,2));
                  $k=strtolower(str_replace(" ","_",$k));
                  $out[$k]=$v;
                }
              }
              return $out;
            }
            $core=parse_pairs(txt("/tmp/wp_core.txt"));
            $themes=json_decode(@file_get_contents("/tmp/themes.json"),true) ?: [];
            $plugins=json_decode(@file_get_contents("/tmp/plugins.json"),true) ?: [];
            $opts=json_decode(@file_get_contents("/tmp/wp_options.json"),true) ?: [];
            // zamień listę opcji (tablicę rekordów) na słownik option_name=>option_value
            $opts_map=[];
            foreach($opts as $row){
              if(isset($row["option_name"])){
                $opts_map[$row["option_name"]] = $row["option_value"] ?? null;
              }
            }
            $active_theme="";
            foreach($themes as $t){
              if(isset($t["status"]) && strtolower($t["status"])==="active"){
                $active_theme=$t["name"] ?? "";
                break;
              }
            }
            $snap=[
              "ts_utc" => gmdate("c"),
              "paths"  => ["target"=>getenv("TARGET")?:null],
              "server" => [
                "uname" => txt("/tmp/uname.txt"),
                "php"   => [
                  "which"=> txt("/tmp/php_which.txt"),
                  "version_string"=> txt("/tmp/php_version.txt")
                ],
              ],
              "wordpress" => [
                "core" => $core,
                "siteurl" => txt("/tmp/siteurl.txt"),
                "home"    => txt("/tmp/home.txt"),
                "options" => $opts_map,
                "active_theme" => $active_theme,
                "themes"  => $themes,
                "plugins" => $plugins
              ],
            ];
            if(!is_dir("/tmp/wtp_ss")){mkdir("/tmp/wtp_ss",0777,true);}
            file_put_contents("/tmp/wtp_ss/snapshot.json", json_encode($snap, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE));
          '

          # Walidacja
          SNAP="/tmp/wtp_ss/snapshot.json"
          test -s "$SNAP" || { echo "::error::snapshot.json not created"; exit 2; }
          ACTIVE=$(php -r '$j=json_decode(file_get_contents("/tmp/wtp_ss/snapshot.json"),true); echo $j["wordpress"]["active_theme"]??"";')
          PLUGS=$(php -r '$j=json_decode(file_get_contents("/tmp/wtp_ss/snapshot.json"),true); echo is_array($j["wordpress"]["plugins"])?count($j["wordpress"]["plugins"]):0;')
          if [ -z "$ACTIVE" ]; then
            echo "::error::No active theme detected by WP-CLI."
            exit 3
          fi
          if [ "$PLUGS" -eq 0 ]; then
            echo "::error::Plugins list is empty."
            exit 4
          fi

          # Zapis surowych wyników + snapshot
          mkdir -p "$OUTDIR/$RUN_ID"
          cp -f /tmp/php_which.txt       "$OUTDIR/$RUN_ID/php_which.txt"     || true
          cp -f /tmp/php_version.txt     "$OUTDIR/$RUN_ID/php_version.txt"   || true
          cp -f /tmp/uname.txt           "$OUTDIR/$RUN_ID/uname.txt"         || true
          cp -f /tmp/pwd.txt             "$OUTDIR/$RUN_ID/pwd.txt"           || true
          cp -f /tmp/wp_core.txt         "$OUTDIR/$RUN_ID/wp_core.txt"       || true
          cp -f /tmp/themes.json         "$OUTDIR/$RUN_ID/themes.json"       || true
          cp -f /tmp/plugins.json        "$OUTDIR/$RUN_ID/plugins.json"      || true
          cp -f /tmp/wp_options.json     "$OUTDIR/$RUN_ID/wp_options.json"   || true
          cp -f /tmp/wtp_ss/snapshot.json "$OUTDIR/$RUN_ID/snapshot.json"
          RS
          chmod +x /tmp/wtp_server_snapshot.sh

      - name: Run remote collector
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            /tmp/wtp_server_snapshot.sh "$USER@$HOST:$TARGET/.wtp_ss.sh"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "export RUN_ID='${RUN_ID}' TARGET='${TARGET}' WTP_CI=1; bash '$TARGET/.wtp_ss.sh'"; rc=$?
          if [ "$rc" -ne 0 ]; then
            echo "::error::Remote snapshot script failed with code $rc"
            exit "$rc"
          fi

      - name: Pull snapshot & raw probes
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${RUN_ID}/server"
          sshpass -p "$PASS" scp -P "$PORT" -r -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/server_snapshot/${RUN_ID}/." "_ci_logs/${RUN_ID}/server/"

      - name: Publish to repo (RO mirror + latest)
        run: |
          set -euo pipefail
          SRC="_ci_logs/${RUN_ID}/server/snapshot.json"
          test -s "$SRC" || { echo "::error::local snapshot.json not found"; exit 1; }
          RO_RUN=".wtp/state/ro/public/${RUN_ID}/server"
          RO_LATEST=".wtp/state/ro/public/latest/server"
          mkdir -p "${RO_RUN}" "${RO_LATEST}"
          cp -f "$SRC" "${RO_RUN}/snapshot.json"
          cp -f "$SRC" "${RO_LATEST}/snapshot.json"

          # krótkie podsumowanie MD
          python - << 'PY'
          import json, os, pathlib
          rid=os.environ["RUN_ID"]
          p=pathlib.Path(f"_ci_logs/{rid}/server/snapshot.json")
          s=json.load(p.open(encoding="utf-8"))
          wp=s.get("wordpress",{})
          core=wp.get("core",{})
          active=wp.get("active_theme","")
          plugs=wp.get("plugins",[])
          opts =wp.get("options",{})
          md=[]
          md.append("# SERVER_SNAPSHOT")
          md.append(f"- Run ID: {rid}")
          md.append(f"- WP version: {core.get('version') or core.get('wp_version') or '?'}")
          md.append(f"- Active theme: {active or '?'}")
          md.append(f"- Plugins (total): {len(plugs)}")
          md.append("")
          if opts:
            md.append("## Options (key ones)")
            for k in ["blogname","blogdescription","timezone_string","WPLANG","permalink_structure","users_can_register","default_role"]:
              if k in opts:
                md.append(f"- {k}: `{opts[k]}`")
            md.append("")
          md.append("## Sample plugins (first 20)")
          for x in plugs[:20]:
            name=x.get("name") or x.get("plugin")
            status=x.get("status")
            ver=x.get("version")
            md.append(f"- {name} [{status}] v{ver}")
          out=pathlib.Path(f".wtp/state/ro/public/{rid}/server/SERVER_SNAPSHOT.md")
          out.parent.mkdir(parents=True, exist_ok=True)
          out.write_text("\n".join(md)+"\n", encoding="utf-8")
          PY

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "server snapshot ${RUN_ID}"
            BR="${GITHUB_REF_NAME:-main}"
            git branch --show-current >/dev/null 2>&1 || git checkout -B "$BR"
            for i in 1 2 3; do
              git fetch origin "$BR"
              git pull --rebase origin "$BR" || { git rebase --continue || true; }
              if git push origin "HEAD:$BR"; then
                echo "::notice::Pushed (attempt $i)"; break
              fi
              sleep 2
            done
          fi

      - name: Upload artifact (server snapshot)
        uses: actions/upload-artifact@v4
        with:
          name: server-snapshot-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/server/**
          retention-days: 14

      - name: Print quick summary
        run: |
          set -euo pipefail
          echo "::group::snapshot.json (head)"
          head -n 80 "_ci_logs/${RUN_ID}/server/snapshot.json" || true
          echo "::endgroup::"
