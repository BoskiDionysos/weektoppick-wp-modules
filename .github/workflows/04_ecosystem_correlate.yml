name: 04_server_snapshot (read-only, WP-CLI JSON, strict SSH, validated)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["01_deploy (single-run, password auth, strict host key, rsync, sanity)", "02_wpcli (install/update/activate from SSOT, secure SSH)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: server-snapshot
  cancel-in-progress: true

jobs:
  snapshot:
    # odpalamy ręcznie lub po sukcesie 01/02
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      RUN_ID: ${{ github.run_id }}
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Setup tools + strict known_hosts
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing secret $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y sshpass curl
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: Stage remote script (builds snapshot.json on server)
        run: |
          set -euo pipefail
          cat > /tmp/_server_snapshot.sh <<'REMOTE'
          set -euo pipefail

          TARGET="${TARGET:?missing TARGET}"
          export WP_ALLOW_ROOT=1
          export WTP_CI=1

          cd "$TARGET"

          # --- sanity logs ---
          mkdir -p .wtp/state/ci_logs/server
          LOG=".wtp/state/ci_logs/server/snapshot_sanity.txt"
          {
            echo "date:    $(date -Is)"
            echo "whoami:  $(whoami)"
            echo "uname:   $(uname -a)"
            echo "pwd:     $(pwd)"
            command -v php >/dev/null 2>&1 && { echo "which php: $(command -v php)"; php -v | head -n 2; } || echo "php: NOT FOUND"
            ls -la wp-config.php 2>/dev/null || true
          } > "$LOG"

          # --- WP-CLI ensure ---
          if [ ! -x ./wp ]; then
            curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
            php wp.phar --info >/dev/null 2>&1
            chmod +x wp.phar && mv wp.phar wp
          fi

          # --- raw json dumps ---
          php ./wp --path="$TARGET" core version --extra --format=json   > /tmp/wp_core.json
          php ./wp --path="$TARGET" theme list --format=json             > /tmp/wp_themes.json
          php ./wp --path="$TARGET" plugin list --format=json            > /tmp/wp_plugins.json

          # --- assemble unified JSON via PHP ---
          php -d detect_unicode=0 -r '
            $core   = @json_decode(@file_get_contents("/tmp/wp_core.json"),   true); if(!is_array($core))   $core=[];
            $themes = @json_decode(@file_get_contents("/tmp/wp_themes.json"), true); if(!is_array($themes)) $themes=[];
            $plugins= @json_decode(@file_get_contents("/tmp/wp_plugins.json"),true); if(!is_array($plugins))$plugins=[];
            $active_theme = null;
            foreach($themes as $t){ if(isset($t["status"]) && $t["status"]==="active"){ $active_theme = $t["name"] ?? $t["theme"]; break; } }
            $snapshot = [
              "generated_at" => gmdate("c"),
              "php" => [
                "version" => PHP_VERSION,
                "sapi"    => PHP_SAPI,
              ],
              "wp" => [
                "core"   => $core,
                "themes" => $themes,
                "plugins"=> $plugins,
                "active_theme" => $active_theme
              ],
              "env" => [
                "cwd" => getcwd(),
              ],
            ];
            @mkdir(".wtp/state/ci_logs/server", 0777, true);
            file_put_contents(".wtp/state/ci_logs/server/snapshot.json", json_encode($snapshot, JSON_PRETTY_PRINT|JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE));
          '

          echo "Server snapshot built at .wtp/state/ci_logs/server/snapshot.json"
          REMOTE

      - name: Execute remote script
        run: |
          set -euo pipefail
          # upload
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            /tmp/_server_snapshot.sh "$USER@$HOST:$TARGET/_server_snapshot.sh"
          # run
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "cd '$TARGET' && TARGET='$TARGET' bash _server_snapshot.sh && rm -f _server_snapshot.sh"

      - name: Pull snapshot + logs to runner
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${RUN_ID}/server"
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/server/snapshot.json" "_ci_logs/${RUN_ID}/server/snapshot.json"
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/server/snapshot_sanity.txt" "_ci_logs/${RUN_ID}/server/snapshot_sanity.txt"
          jq --version >/dev/null 2>&1 || sudo apt-get install -y jq

      - name: Validate snapshot.json (plugins not empty & active_theme present)
        run: |
          set -euo pipefail
          SNAP="_ci_logs/${RUN_ID}/server/snapshot.json"
          test -s "$SNAP" || { echo "::error::snapshot.json missing"; exit 1; }
          PLUGS=$(jq '.wp.plugins | length' "$SNAP" || echo 0)
          THEME=$(jq -r '.wp.active_theme // ""' "$SNAP" || echo "")
          echo "plugins count: $PLUGS"
          echo "active_theme:  $THEME"
          if [ "${PLUGS:-0}" -le 0 ]; then
            echo "::error::Empty plugins list in snapshot.json"
            exit 1
          fi
          if [ -z "$THEME" ] || [ "$THEME" = "null" ]; then
            echo "::error::No active_theme in snapshot.json"
            exit 1
          fi

      - name: Publish snapshot into repo (RUN + latest)
        run: |
          set -euo pipefail
          RUN_DIR=".wtp/state/ro/public/${RUN_ID}/server"
          LATEST=".wtp/state/ro/public/latest/server"
          mkdir -p "$RUN_DIR" "$LATEST"
          cp -f "_ci_logs/${RUN_ID}/server/snapshot.json" "$RUN_DIR/snapshot.json"
          cp -f "_ci_logs/${RUN_ID}/server/snapshot.json" "$LATEST/snapshot.json"
          # krótkie MD z nagłówkiem (ułatwia szybki podgląd)
          {
            echo "# SERVER_SNAPSHOT"
            echo "- Run ID: ${RUN_ID}"
            echo "- Generated: $(date -Is --utc) (UTC)"
          } > ".wtp/state/ro/public/${RUN_ID}/server/SERVER_SNAPSHOT.md"

          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --staged --quiet; then
            echo "::notice::Nothing to commit."
          else
            git commit -m "server snapshot ${RUN_ID}"
            BRANCH="${GITHUB_REF_NAME:-main}"
            git branch --show-current >/dev/null 2>&1 || git checkout -B "$BRANCH"
            for i in 1 2 3; do
              git fetch origin "$BRANCH"
              git pull --rebase origin "$BRANCH" || { git rebase --continue || true; }
              if git push origin "HEAD:$BRANCH"; then
                echo "::notice::Pushed (attempt $i)"
                break
              fi
              sleep 2
            done
          fi

      - name: Upload artifact (server snapshot logs)
        uses: actions/upload-artifact@v4
        with:
          name: server-snapshot-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/server/**
          retention-days: 14
