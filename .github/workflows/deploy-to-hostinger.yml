name: Deploy to Hostinger (Atomic GH→WP, dry-run, health)

on:
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/**'
      - '!snapshots/**'
      - '!server-sync/**'
      - '!ops/**'
      - '!.wtp/**'
      - 'docs/locks/**'
  workflow_dispatch: {}

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed files
        id: diff
        run: |
          set -euo pipefail
          BASE_SHA=$(git rev-parse HEAD~1 || echo "")
          if [ -z "$BASE_SHA" ]; then
            git ls-files > changed.txt
          else
            git diff --name-only "$BASE_SHA"...HEAD > changed.txt
          fi
          # tylko ścieżki deployowalne
          awk '/^(mu-plugins|plugins|themes|wp-content)\// {print}' changed.txt > deploy.txt || true
          if [ ! -s deploy.txt ]; then
            echo "nothing=true" >> "$GITHUB_OUTPUT"
          else
            echo "nothing=false" >> "$GITHUB_OUTPUT"
          fi
          echo "Changed (filtered):"; cat deploy.txt || true

      - name: Stop when nothing to deploy
        if: ${{ steps.diff.outputs.nothing == 'true' }}
        run: echo "No deployable changes."

      - name: Install rsync + sshpass
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        run: |
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass

      - name: Prepare release bundle (only needed dirs)
        id: prep
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        run: |
          set -euo pipefail
          REL="release_${GITHUB_SHA::7}"
          mkdir -p "$REL"
          rsync -a \
            --include='mu-plugins/**' \
            --include='plugins/**' \
            --include='themes/**' \
            --include='wp-content/**' \
            --exclude='*' ./ "$REL"/
          tar -czf "${REL}.tar.gz" "$REL"
          echo "REL=${REL}" >> "$GITHUB_OUTPUT"
          ls -lah "${REL}.tar.gz"

      - name: Dry-run sanity (preview bundle)
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        run: |
          set -euo pipefail
          REL="${{ steps.prep.outputs.REL }}"
          echo "=== Bundle tree (first 200) ==="
          tar -tzf "${REL}.tar.gz" | head -n 200 || true
          echo "=== Verify expected dirs ==="
          tar -tzf "${REL}.tar.gz" | grep -E '^'"${REL}"'/(plugins|themes|mu-plugins)/' >/dev/null \
            && echo "OK: plugins/themes/mu-plugins present" \
            || { echo "::error::Bundle missing expected dirs"; exit 2; }
          echo "=== File count ==="
          tar -tzf "${REL}.tar.gz" | wc -l

      - name: Upload bundle to server
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        env:
          HOST:   ${{ secrets.DEPLOY_HOST }}
          USER:   ${{ secrets.DEPLOY_USER }}
          PASS:   ${{ secrets.DEPLOY_PASS }}
          PORT:   ${{ secrets.DEPLOY_PORT }}
          TARGET: ${{ secrets.DEPLOY_TARGET }}
        run: |
          set -euo pipefail
          REL="${{ steps.prep.outputs.REL }}"
          sshpass -p "$PASS" scp -P "${PORT:-22}" -o StrictHostKeyChecking=no "${REL}.tar.gz" "${USER}@${HOST}:${TARGET%/}/"

      - name: Atomic switch (extract + rsync with protect)
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        env:
          HOST:   ${{ secrets.DEPLOY_HOST }}
          USER:   ${{ secrets.DEPLOY_USER }}
          PASS:   ${{ secrets.DEPLOY_PASS }}
          PORT:   ${{ secrets.DEPLOY_PORT }}
          TARGET: ${{ secrets.DEPLOY_TARGET }}
        run: |
          set -euo pipefail
          # przekazujemy TARGET do sesji zdalnej i wykonujemy deploy atomowy
          sshpass -p "$PASS" ssh -p "${PORT:-22}" -o StrictHostKeyChecking=no "${USER}@${HOST}" "export TARGET='${TARGET%/}'; bash -s" <<'EOS'
            set -euo pipefail
            cd "$TARGET"

            # ostatnia paczka release_*.tar.gz
            REL_TGZ=$(ls -1 release_*.tar.gz | tail -n1)
            test -n "$REL_TGZ" || { echo "No release_*.tar.gz found"; exit 3; }
            REL_DIR="${REL_TGZ%.tar.gz}"

            # rozpakuj do wersjonowanego katalogu
            mkdir -p "releases/${REL_DIR}"
            tar -xzf "$REL_TGZ" -C "releases/${REL_DIR}" --strip-components=1

            # ensure target dirs exist
            mkdir -p wp-content/plugins wp-content/themes wp-content/mu-plugins

            # protect filters (nie tykamy systemowych)
            cat > /tmp/wtp-protect.filter <<'EOF'
P wp-content/plugins/litespeed-cache/**
P wp-content/plugins/wordfence/**
P wp-content/plugins/translatepress-multilingual/**
P wp-content/plugins/cookie-law-info/**
EOF

            # rsync (atomic to target dirs)
            if [ -d "releases/${REL_DIR}/plugins" ]; then
              rsync -a --delete --filter="merge /tmp/wtp-protect.filter" "releases/${REL_DIR}/plugins/"    "wp-content/plugins/"    || true
            fi
            if [ -d "releases/${REL_DIR}/themes" ]; then
              rsync -a --delete "releases/${REL_DIR}/themes/"     "wp-content/themes/"     || true
            fi
            if [ -d "releases/${REL_DIR}/mu-plugins" ]; then
              rsync -a --delete "releases/${REL_DIR}/mu-plugins/" "wp-content/mu-plugins/" || true
            fi

            date > "wp-content/.wtp_last_deploy"
EOS

      - name: Post-deploy health (server-side, mandatory)
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        env:
          HOST:   ${{ secrets.DEPLOY_HOST }}
          USER:   ${{ secrets.DEPLOY_USER }}
          PASS:   ${{ secrets.DEPLOY_PASS }}
          PORT:   ${{ secrets.DEPLOY_PORT }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "${PORT:-22}" -o StrictHostKeyChecking=no "${USER}@${HOST}" \
            'curl -fsS "http://127.0.0.1/wp-json/wtp-ro-open/v1/health" && echo "Health OK"'

      - name: Purge LiteSpeed cache (server-side, mandatory)
        if: ${{ steps.diff.outputs.nothing != 'true' }}
        env:
          HOST:   ${{ secrets.DEPLOY_HOST }}
          USER:   ${{ secrets.DEPLOY_USER }}
          PASS:   ${{ secrets.DEPLOY_PASS }}
          PORT:   ${{ secrets.DEPLOY_PORT }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "${PORT:-22}" -o StrictHostKeyChecking=no "${USER}@${HOST}" \
            'curl -sS "http://127.0.0.1/?LSCWP_CTRL=purge" >/dev/null || true'
