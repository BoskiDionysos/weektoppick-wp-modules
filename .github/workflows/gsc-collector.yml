name: SEO / GSC Collector

on:
  # Odpala się automatycznie po udanym "Agent Push (Silent Mode)"
  workflow_run:
    workflows: ["Agent Push (Silent Mode)"]
    types: [completed]

permissions:
  contents: read

jobs:
  gsc:
    # tylko gdy poprzedni workflow był zielony i mamy secret z kluczem GSC
    if: ${{ github.event.workflow_run.conclusion == 'success' && secrets.WTP_GSC_KEY != '' }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Collect GSC data (performance)
        env:
          WTP_GSC_KEY: ${{ secrets.WTP_GSC_KEY }}
          WTP_GSC_PROPERTY: ${{ secrets.WTP_GSC_PROPERTY }}
        run: |
          set -euo pipefail
          python -m pip install --quiet --upgrade google-api-python-client google-auth

          python - <<'PY'
          import os, json, gzip, datetime, pathlib, sys
          from google.oauth2.service_account import Credentials
          from googleapiclient.discovery import build

          key = os.environ["WTP_GSC_KEY"]
          info = json.loads(key)
          creds = Credentials.from_service_account_info(
              info, scopes=["https://www.googleapis.com/auth/webmasters.readonly"]
          )
          svc = build("webmasters", "v3", credentials=creds, cache_discovery=False)

          # wykrycie właściwości GSC
          prop = (os.environ.get("WTP_GSC_PROPERTY") or "").strip()
          candidates = [p for p in [prop, "sc-domain:weektoppick.com", "https://weektoppick.com/", "http://weektoppick.com/"] if p]

          try:
              sites = svc.sites().list().execute().get("siteEntry", [])
              owned = {s["siteUrl"] for s in sites if s.get("permissionLevel")}
          except Exception as e:
              print(f"::error::GSC sites.list failed: {e}")
              sys.exit(0)

          site = next((c for c in candidates if c in owned), candidates[0] if candidates else None)

          # zakres: wczoraj → dziś
          today = datetime.date.today()
          start = (today - datetime.timedelta(days=1)).isoformat()
          end   = today.isoformat()

          outdir = pathlib.Path("ops/seo/gsc"); outdir.mkdir(parents=True, exist_ok=True)
          date_tag = today.isoformat()

          summary = {"siteUrl": site, "date": date_tag, "ok": True, "performance_rows": 0, "note": ""}

          rows = []
          try:
              body = {"startDate": start, "endDate": end, "dimensions": ["page"], "rowLimit": 5000}
              resp = svc.searchanalytics().query(siteUrl=site, body=body).execute()
              for r in resp.get("rows", []):
                  url = r.get("keys", [""])[0]
                  rows.append({
                      "url": url,
                      "clicks": r.get("clicks", 0),
                      "impressions": r.get("impressions", 0),
                      "ctr": r.get("ctr", 0.0),
                      "position": r.get("position", 0.0),
                  })
              summary["performance_rows"] = len(rows)
          except Exception as e:
              summary["ok"] = False
              summary["note"] += f" perf_err={e}"

          # zapis surowych danych (jsonl.gz)
          raw = outdir / f"gsc-performance-{date_tag}.jsonl.gz"
          with gzip.open(raw, "wt", encoding="utf-8") as f:
              for r in rows:
                  f.write(json.dumps(r, ensure_ascii=False) + "\n")

          # zapis podsumowania (json)
          (outdir / f"gsc-summary-{date_tag}.json").write_text(
              json.dumps(summary, ensure_ascii=False, indent=2), encoding="utf-8"
          )

          status = "ok" if summary["ok"] else "warning"
          print(f"::notice title=GSC Collector::{status}; site={summary['siteUrl']}; rows={summary['performance_rows']}")
          PY

      - name: Upload GSC artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gsc-${{ github.run_id }}
          path: |
            ops/seo/gsc/gsc-summary-*.json
            ops/seo/gsc/gsc-performance-*.jsonl.gz

      # Opcjonalnie: wyślij podsumowanie do WP Dashboard (jeśli masz te secrety)
      - name: Send GSC summary to WP (optional)
        if: ${{ secrets.WTP_BRIDGE_KEY != '' && secrets.WTP_BRIDGE_HMAC != '' }}
        env:
          BRIDGE_KEY: ${{ secrets.WTP_BRIDGE_KEY }}
          BRIDGE_HMAC: ${{ secrets.WTP_BRIDGE_HMAC }}
        run: |
          set -euo pipefail
          LATEST=$(ls -1t ops/seo/gsc/gsc-summary-*.json | head -n1 || true)
          if [ -z "${LATEST}" ]; then echo "No summary file to send"; exit 0; fi
          TS=$(date +%s)
          PATHONLY="/wp-json/wtp/v1/seo/ingest"
          BODY=$(cat "$LATEST")
          # podpis HMAC: ts \n POST \n path \n body
          SIG=$(printf "%s\n%s\n%s\n%s" "$TS" "POST" "$PATHONLY" "$BODY" | openssl dgst -sha256 -hmac "$BRIDGE_HMAC" -binary | xxd -p -c 256)
          curl -sS -X POST "https://weektoppick.com${PATHONLY}" \
            -H "Content-Type: application/json" \
            -H "X-WTP-Key: ${BRIDGE_KEY}" \
            -H "X-WTP-Timestamp: ${TS}" \
            -H "X-WTP-Signature: ${SIG}" \
            --data-binary @"$LATEST" || true
