name: 02_wpcli (install/update/activate from SSOT, secure SSH)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["01_deploy (single-run, password auth, strict host key, rsync, sanity)"]
    types: [completed]

permissions:
  contents: read

concurrency:
  group: wpcli
  cancel-in-progress: true

jobs:
  wpcli:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"   # bypass LOCKS w MU-pluginie

    steps:
      - uses: actions/checkout@v4

      - name: Setup tools + known_hosts (STRICT)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          # dodaj odcisk klucza hosta – wymagamy jego weryfikacji
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Parse SSOT → plugins.install
        run: |
          set -euo pipefail
          # pobierz najnowsze yq bez twardej wersji
          curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/yq
          test -f ".wtp/ssot.yml" || { echo "::error::.wtp/ssot.yml not found"; exit 1; }
          # walidacja podstawowej struktury
          yq -e '.plugins.install // []' .wtp/ssot.yml >/dev/null || { echo "::error::Invalid SSOT structure"; exit 1; }
          # wyciągnij listę (może być pusta)
          yq -r '.plugins.install[]? // empty' .wtp/ssot.yml > .wtp/plugins.install.list || true
          echo "---- plugins.install ----"
          cat .wtp/plugins.install.list || true

      - name: Prepare logs dir
        run: |
          set -euo pipefail
          mkdir -p _ci_logs/${{ github.run_id }}/wpcli

      # —————————————— KROK 1: SANITY I WP-CLI ——————————————
      - name: Remote sanity (cd TARGET + PHP) & install local WP-CLI
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" 'bash -lc "
              set -euo pipefail
              cd '\''$TARGET'\'' || { echo '\''::error::Cannot cd to TARGET'\''; exit 1; }
              php -v >/dev/null 2>&1 || { echo '\''::error::php CLI not available'\''; exit 1; }
              if [ ! -x ./wp ]; then
                curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                php wp.phar --info >/dev/null 2>&1
                chmod +x wp.phar && mv wp.phar wp
              fi
              mkdir -p .wtp/state/ci_logs
              {
                echo whoami: $(whoami)
                echo uname: $(uname -a)
                echo date:  $(date -Is)
                echo pwd:   $(pwd)
              } > .wtp/state/ci_logs/server_info.txt
            "'

      # —————————————— KROK 2: PRZEŚLIJ LISTĘ (o ile jest) ——————————————
      - name: Upload plugins list to server (if any)
        if: ${{ hashFiles('.wtp/plugins.install.list') != '' }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ".wtp/plugins.install.list" "$USER@$HOST:$TARGET/.wtp.plugins.install.list"

      # —————————————— KROK 3: OBRÓBKA WTYCZEK ——————————————
      - name: Process plugins (install/update/activate; WTP_CI=1)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" 'bash -lc "
              set -euo pipefail
              cd '\''$TARGET'\''
              export WP_ALLOW_ROOT=1
              export WTP_CI=1
              WP='\''php ./wp --skip-plugins --path="'\''$TARGET'\''"'\''

              LOG_BASE=.wtp/state/ci_logs
              : > '\''$LOG_BASE/plugins_installed.txt'\''
              : > '\''$LOG_BASE/plugins_updated.txt'\''
              : > '\''$LOG_BASE/plugins_existing.txt'\''
              : > '\''$LOG_BASE/errors.txt'\''

              if [ ! -s .wtp.plugins.install.list ]; then
                # pusta lista – tylko zrzut aktywnych
                $WP plugin list --format=csv > '\''$LOG_BASE/active_plugins.csv'\'' || true
                exit 0
              fi

              while IFS= read -r raw; do
                line=$(echo \"$raw\" | sed '\''s/#.*$//'\'' | xargs)
                [ -z \"$line\" ] && continue
                slug=\"$line\"; ver=\"\"
                if printf \"%s\" \"$line\" | grep -q \"@\"; then
                  slug=\"${line%@*}\"; ver=\"${line##*@}\"
                fi

                if php ./wp plugin is-installed \"$slug\" --path=\"'\''$TARGET'\''\" --skip-plugins; then
                  echo \"$slug\" >> '\''$LOG_BASE/plugins_existing.txt'\''
                  if [ -n \"$ver\" ]; then
                    php ./wp plugin update \"$slug\" --version=\"$ver\" --path=\"'\''$TARGET'\''\" --skip-plugins \
                      || echo \"update-fail:$slug@$ver\" >> '\''$LOG_BASE/errors.txt'\''
                  else
                    php ./wp plugin update \"$slug\" --path=\"'\''$TARGET'\''\" --skip-plugins \
                      || echo \"update-fail:$slug\" >> '\''$LOG_BASE/errors.txt'\''
                  fi
                else
                  if [ -n \"$ver\" ]; then
                    php ./wp plugin install \"$slug\" --version=\"$ver\" --path=\"'\''$TARGET'\''\" --skip-plugins \
                      || echo \"install-fail:$slug@$ver\" >> '\''$LOG_BASE/errors.txt'\''
                  else
                    php ./wp plugin install \"$slug\" --path=\"'\''$TARGET'\''\" --skip-plugins \
                      || echo \"install-fail:$slug\" >> '\''$LOG_BASE/errors.txt'\''
                  fi
                fi

                php ./wp plugin activate \"$slug\" --path=\"'\''$TARGET'\''\" --skip-plugins \
                  || echo \"activate-fail:$slug\" >> '\''$LOG_BASE/errors.txt'\''
              done < .wtp.plugins.install.list

              php ./wp plugin list --format=csv > '\''$LOG_BASE/active_plugins.csv'\'' || true
            "'

      # —————————————— KROK 4: ZBIERZ LOGI ——————————————
      - name: Pull logs back
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/"* "_ci_logs/${{ github.run_id }}/wpcli/" || true
          ls -la _ci_logs/${{ github.run_id }}/wpcli || true

      - name: Upload artifact (wpcli logs)
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/wpcli/**
          retention-days: 14

      # —————————————— KROK 5: RAPORT ——————————————
      - name: Report errors if any
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/wpcli/errors.txt"
          if [ -f "$ERR" ] && [ -s "$ERR" ]; then
            echo "::warning::Some plugins failed. See errors.txt below:"
            tail -n +1 "$ERR" || true
          else
            echo "::notice::WP-CLI operations completed successfully"
          fi
