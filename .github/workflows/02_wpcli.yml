name: 02_wpcli (install/update/activate from SSOT, secure SSH)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["01_deploy (single-run, password auth, strict host key, rsync, sanity)"]
    types: [completed]

permissions:
  contents: read

concurrency:
  group: wpcli
  cancel-in-progress: true

jobs:
  wpcli:
    # Run only when 01_deploy succeeded, or when triggered manually
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"   # bypass LOCKS via MU-plugin

    steps:
      - uses: actions/checkout@v4

      - name: Setup tools and known_hosts (STRICT)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass
          # yq (latest)
          curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/yq
          # known_hosts
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts

      - name: Parse SSOT -> plugins.install
        run: |
          set -euo pipefail
          test -f ".wtp/ssot.yml" || { echo "::error::.wtp/ssot.yml not found"; exit 1; }
          # validate structure
          yq -e '.plugins.install // []' .wtp/ssot.yml >/dev/null || { echo "::error::Invalid SSOT structure"; exit 1; }
          # extract list (may be empty)
          yq -r '.plugins.install[]? // empty' .wtp/ssot.yml > .wtp/plugins.install.list || true
          echo "---- plugins.install ----"
          cat .wtp/plugins.install.list || true

      - name: Prepare local logs dir
        run: |
          set -euo pipefail
          mkdir -p _ci_logs/${{ github.run_id }}/wpcli

      - name: Remote sanity (cd TARGET + PHP) and install local WP-CLI
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "TARGET='${TARGET}' bash -s" <<'EOF'
          set -euo pipefail
          cd "$TARGET" || { echo "::error::Cannot cd to TARGET"; exit 1; }
          php -v >/dev/null 2>&1 || { echo "::error::php CLI not available"; exit 1; }
          # WP-CLI (latest release)
          if [ ! -x ./wp ]; then
            curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
            php wp.phar --info >/dev/null 2>&1
            chmod +x wp.phar && mv wp.phar wp
          fi
          mkdir -p .wtp/state/ci_logs
          {
            echo "whoami: $(whoami)"
            echo "uname: $(uname -a)"
            echo "date:  $(date -Is)"
            echo "pwd:   $(pwd)"
          } > .wtp/state/ci_logs/server_info.txt
  EOF

      - name: Upload plugins list to server (if any)
        if: ${{ hashFiles('.wtp/plugins.install.list') != '' }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ".wtp/plugins.install.list" "$USER@$HOST:$TARGET/.wtp.plugins.install.list"

      - name: Process plugins (install/update/activate; WTP_CI=1)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "TARGET='${TARGET}' bash -s" <<'EOF'
          set -euo pipefail
          cd "$TARGET"
          export WP_ALLOW_ROOT=1
          export WTP_CI=1
          WP='php ./wp --skip-plugins --path="$TARGET"'

          # logs directory + empty files (hard-coded paths)
          mkdir -p .wtp/state/ci_logs
          : > .wtp/state/ci_logs/plugins_installed.txt
          : > .wtp/state/ci_logs/plugins_updated.txt
          : > .wtp/state/ci_logs/plugins_existing.txt
          : > .wtp/state/ci_logs/errors.txt

          # if list is empty -> only dump active list
          if [ ! -s .wtp.plugins.install.list ]; then
            $WP plugin list --format=csv > .wtp/state/ci_logs/active_plugins.csv || true
            exit 0
          fi

          while IFS= read -r raw; do
            line="$(echo "$raw" | sed 's/#.*$//' | xargs)"
            [ -z "$line" ] && continue
            slug="$line"; ver=""
            if printf "%s" "$line" | grep -q "@"; then
              slug="${line%@*}"; ver="${line##*@}"
            fi

            if php ./wp plugin is-installed "$slug" --path="$TARGET" --skip-plugins; then
              echo "$slug" >> .wtp/state/ci_logs/plugins_existing.txt
              if [ -n "$ver" ]; then
                php ./wp plugin update "$slug" --version="$ver" --path="$TARGET" --skip-plugins \
                  || echo "update-fail:$slug@$ver" >> .wtp/state/ci_logs/errors.txt
              else
                php ./wp plugin update "$slug" --path="$TARGET" --skip-plugins \
                  || echo "update-fail:$slug" >> .wtp/state/ci_logs/errors.txt
              fi
            else
              if [ -n "$ver" ]; then
                php ./wp plugin install "$slug" --version="$ver" --path="$TARGET" --skip-plugins \
                  || echo "install-fail:$slug@$ver" >> .wtp/state/ci_logs/errors.txt
              else
                php ./wp plugin install "$slug" --path="$TARGET" --skip-plugins \
                  || echo "install-fail:$slug" >> .wtp/state/ci_logs/errors.txt
              fi
            fi

            php ./wp plugin activate "$slug" --path="$TARGET" --skip-plugins \
              || echo "activate-fail:$slug" >> .wtp/state/ci_logs/errors.txt
          done < .wtp.plugins.install.list

          php ./wp plugin list --format=csv > .wtp/state/ci_logs/active_plugins.csv || true
  EOF

      - name: Pull logs back
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/"* "_ci_logs/${{ github.run_id }}/wpcli/" || true
          ls -la _ci_logs/${{ github.run_id }}/wpcli || true

      - name: Upload artifact (wpcli logs)
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/wpcli/**
          retention-days: 14

      - name: Report errors if any (notice/warn)
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/wpcli/errors.txt"
          if [ -f "$ERR" ] && [ -s "$ERR" ]; then
            echo "::warning::Some plugins failed. See errors.txt below:"
            tail -n +1 "$ERR" || true
          else
            echo "::notice::WP-CLI operations completed successfully"
          fi

      - name: Failure context (grouped)
        if: failure()
        run: |
          echo "::group::server_info.txt"
          cat "_ci_logs/${{ github.run_id }}/wpcli/server_info.txt" || true
          echo "::endgroup::"
          echo "::group::errors.txt"
          cat "_ci_logs/${{ github.run_id }}/wpcli/errors.txt" || true
          echo "::endgroup::"
