name: 02_wpcli (install/update/activate from SSOT, strict SSH, safe publish)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["01_deploy (single-run, password auth, strict host key, rsync, sanity)"]
    types: [completed]

permissions:
  contents: write

concurrency:
  group: wpcli
  cancel-in-progress: true

jobs:
  wpcli:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Setup tools & known_hosts (STRICT)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          curl -sSL https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -o yq
          chmod +x yq && sudo mv yq /usr/local/bin/yq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"; echo "::add-mask::$USER"; echo "::add-mask::$PASS"

      - name: Parse SSOT -> plugins.install
        run: |
          set -euo pipefail
          test -f ".wtp/ssot.yml" || { echo "::error::.wtp/ssot.yml not found"; exit 1; }
          yq -e '.plugins.install // []' .wtp/ssot.yml >/dev/null || { echo "::error::Invalid SSOT structure"; exit 1; }
          yq -r '.plugins.install // [] | .[]' .wtp/ssot.yml > .wtp/plugins.install.list || true
          mkdir -p "_ci_logs/${{ github.run_id }}/wpcli"

      - name: Remote bootstrap (PHP+WP-CLI)
        run: |
          set -euo pipefail
          cat > /tmp/bootstrap.sh <<'SCRIPT'
          set -euo pipefail
          cd "$TARGET"
          php -v >/dev/null 2>&1 || { echo "::error::php CLI not available"; exit 1; }
          if [ ! -x ./wp ]; then
            curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
            php wp.phar --info >/dev/null 2>&1
            chmod +x wp.phar && mv wp.phar wp
          fi
          mkdir -p .wtp/state/ci_logs
          : > .wtp/state/ci_logs/wpcli_summary.txt
          echo "=== SERVER INFO ===" | tee -a .wtp/state/ci_logs/wpcli_summary.txt
          { echo "whoami: $(whoami)"; echo "date: $(date -Is)"; echo "pwd: $(pwd)"; } | tee -a .wtp/state/ci_logs/wpcli_summary.txt
          SCRIPT
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes /tmp/bootstrap.sh "$USER@$HOST:$TARGET/.wtp_bootstrap.sh"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes "$USER@$HOST" "TARGET='$TARGET' bash '$TARGET/.wtp_bootstrap.sh' && rm -f '$TARGET/.wtp_bootstrap.sh'"

      - name: Upload plugins list (if any)
        if: ${{ hashFiles('.wtp/plugins.install.list') != '' }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes ".wtp/plugins.install.list" "$USER@$HOST:$TARGET/.wtp.plugins.install.list"

      - name: Remote WP-CLI process (install/update/activate)
        run: |
          set -euo pipefail
          cat > /tmp/plugins.sh <<'SCRIPT'
          set -euo pipefail
          cd "$TARGET"
          export WP_ALLOW_ROOT=1
          export WTP_CI=1
          mkdir -p .wtp/state/ci_logs
          : > .wtp/state/ci_logs/errors.txt
          : > .wtp/state/ci_logs/wpcli_raw.log
          : > .wtp/state/ci_logs/plugins_active.csv

          echo "=== ACTIVE BEFORE ===" | tee -a .wtp/state/ci_logs/wpcli_summary.txt
          php ./wp plugin list --format=csv --path="$TARGET" | tee .wtp/state/ci_logs/plugins_active.csv | tee -a .wtp/state/ci_logs/wpcli_summary.txt >/dev/null || true

          if [ -s .wtp.plugins.install.list ]; then
            while IFS= read -r raw; do
              line="$(echo "$raw" | sed 's/#.*$//' | xargs)"; [ -z "$line" ] && continue
              slug="$line"; ver=""
              if printf "%s" "$line" | grep -q "@"; then slug="${line%@*}"; ver="${line##*@}"; fi

              if php ./wp plugin is-installed "$slug" --path="$TARGET"; then
                if [ -n "$ver" ]; then
                  php ./wp --debug plugin update "$slug" --version="$ver" --path="$TARGET" 2>&1 | tee -a .wtp/state/ci_logs/wpcli_raw.log || echo "update-fail:$slug@$ver" >> .wtp/state/ci_logs/errors.txt
                else
                  php ./wp --debug plugin update "$slug" --path="$TARGET" 2>&1 | tee -a .wtp/state/ci_logs/wpcli_raw.log || echo "update-fail:$slug" >> .wtp/state/ci_logs/errors.txt
                fi
              else
                if [ -n "$ver" ]; then
                  php ./wp --debug plugin install "$slug" --version="$ver" --activate --path="$TARGET" 2>&1 | tee -a .wtp/state/ci_logs/wpcli_raw.log || echo "install-fail:$slug@$ver" >> .wtp/state/ci_logs/errors.txt
                else
                  php ./wp --debug plugin install "$slug" --activate --path="$TARGET" 2>&1 | tee -a .wtp/state/ci_logs/wpcli_raw.log || echo "install-fail:$slug" >> .wtp/state/ci_logs/errors.txt
                fi
              fi

              php ./wp --debug plugin activate "$slug" --path="$TARGET" 2>&1 | tee -a .wtp/state/ci_logs/wpcli_raw.log || echo "activate-fail:$slug" >> .wtp/state/ci_logs/errors.txt
            done < .wtp.plugins.install.list
          fi

          echo "=== ACTIVE AFTER ===" | tee -a .wtp/state/ci_logs/wpcli_summary.txt
          php ./wp plugin list --format=csv --path="$TARGET" | tee -a .wtp/state/ci_logs/wpcli_summary.txt >/dev/null || true
          SCRIPT

          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes /tmp/plugins.sh "$USER@$HOST:$TARGET/.wtp_plugins.sh"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes "$USER@$HOST" "TARGET='$TARGET' bash '$TARGET/.wtp_plugins.sh' && rm -f '$TARGET/.wtp_plugins.sh'"

      - name: Pull back SAFE logs (allowlist)
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}/wpcli"
          sshpass -p "$PASS" scp -P "$PORT" -r -o StrictHostKeyChecking=yes \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/wpcli_summary.txt" "_ci_logs/${{ github.run_id }}/wpcli/" || true
          sshpass -p "$PASS" scp -P "$PORT" -r -o StrictHostKeyChecking=yes \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/plugins_active.csv" "_ci_logs/${{ github.run_id }}/wpcli/" || true
          sshpass -p "$PASS" scp -P "$PORT" -r -o StrictHostKeyChecking=yes \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/errors.txt" "_ci_logs/${{ github.run_id }}/wpcli/" || true

      - name: Sanitize artifact filenames
        shell: bash
        run: |
          set -euo pipefail
          ROOT="_ci_logs/${{ github.run_id }}/wpcli"
          [ -d "$ROOT" ] || exit 0
          while IFS= read -r -d '' p; do
            new="$p"
            new="${new//:/-}"; new="${new//\"/-}"; new="${new//</-}"; new="${new//>/-}"
            new="${new//|/-}"; new="${new//\*/-}"; new="${new//\?/-}"
            if [ "$new" != "$p" ]; then mkdir -p "$(dirname "$new")"; mv "$p" "$new"; fi
          done < <(find "$ROOT" -depth \( -name '*:*' -o -name '*"*' -o -name '*<*' -o -name '*>*' -o -name '*|*' -o -name '*\**' -o -name '*\?*' \) -print0)

      - name: Upload artifact (wpcli logs)
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/wpcli/**
          retention-days: 14

      - name: Publish small summary to repo (allowlist only)
        run: |
          set -euo pipefail
          RUN_ID=${{ github.run_id }}
          RO_RUN=".wtp/state/ro/public/${RUN_ID}/wpcli"
          RO_LATEST=".wtp/state/ro/public/latest/wpcli"
          mkdir -p "$RO_RUN" "$RO_LATEST"
          for f in wpcli_summary.txt plugins_active.csv errors.txt; do
            [ -f "_ci_logs/${RUN_ID}/wpcli/$f" ] && cp -f "_ci_logs/${RUN_ID}/wpcli/$f" "$RO_RUN/$f"
            [ -f "_ci_logs/${RUN_ID}/wpcli/$f" ] && cp -f "_ci_logs/${RUN_ID}/wpcli/$f" "$RO_LATEST/$f"
          done
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add "$RO_RUN" "$RO_LATEST"
          git diff --staged --quiet || git commit -m "wpcli summary ${RUN_ID}"
          git push || true

      - name: Report errors if any
        run: |
          set -euo pipefail
          ERR="_ci_logs/${{ github.run_id }}/wpcli/errors.txt"
          if [ -s "$ERR" ]; then
            echo "::group::WP-CLI errors"; cat "$ERR" || true; echo "::endgroup::"
            echo "::warning::Some operations failed, see errors above."
          else
            echo "::notice::WP-CLI OK"
          fi
