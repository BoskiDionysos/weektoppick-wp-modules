name: 02_wpcli (install/update/activate from SSOT, secure SSH)

on:
  workflow_dispatch: {}
  workflow_run:
    workflows: ["01_deploy (single-run, password auth, strict host key, rsync, sanity)"]
    types: [completed]

permissions:
  contents: read

concurrency:
  group: wpcli
  cancel-in-progress: true

jobs:
  wpcli:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}
      WTP_CI: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Setup tools + known_hosts (STRICT)
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            [ -n "${!v:-}" ] || { echo "::error::Missing $v"; exit 1; }
          done
          sudo apt-get update -y
          sudo apt-get install -y curl sshpass jq
          mkdir -p ~/.ssh && chmod 700 ~/.ssh
          ssh-keyscan -p "$PORT" "$HOST" >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          echo "::add-mask::$HOST"
          echo "::add-mask::$USER"

      - name: Prepare SSOT plugin list (graceful if missing/empty)
        run: |
          set -euo pipefail
          mkdir -p .wtp
          if [ -f ".wtp/ssot.yml" ]; then
            # wyciągnij listę jeśli jest sekcja plugins.install
            python3 - "$(<.wtp/ssot.yml)" <<'PY'
import sys, yaml, pathlib
data = yaml.safe_load(sys.stdin.read()) or {}
lst  = (((data.get('plugins') or {}).get('install')) or [])
out = pathlib.Path('.wtp/plugins.install.list')
out.parent.mkdir(parents=True, exist_ok=True)
with out.open('w', encoding='utf-8') as f:
    for item in lst:
        if isinstance(item, str) and item.strip():
            f.write(item.strip()+'\n')
PY
          else
            : > .wtp/plugins.install.list
          fi
          echo "---- plugins.install (local) ----"
          cat .wtp/plugins.install.list || true

      - name: Create remote bootstrap + folders
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts "$USER@$HOST" "
            set -euo pipefail
            cd '$TARGET'
            mkdir -p .wtp/state/ci_logs .wtp/state/ro/public/latest/wpcli
            # lokalny wp-cli jeśli brak
            if [ ! -x ./wp ]; then
              curl -sS -L -o wp.phar https://github.com/wp-cli/wp-cli/releases/latest/download/wp-cli.phar
              php wp.phar --info >/dev/null 2>&1
              chmod +x wp.phar && mv wp.phar wp
            fi
          "

      - name: Upload plugin list (if any)
        run: |
          set -euo pipefail
          if [ -s ".wtp/plugins.install.list" ]; then
            sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
              ".wtp/plugins.install.list" "$USER@$HOST:$TARGET/.wtp.plugins.install.list"
          else
            echo "(empty) .wtp/plugins.install.list — wykonam graceful skip na serwerze"
          fi

      - name: Upload and run plugin script (graceful on empty)
        run: |
          set -euo pipefail
          cat > /tmp/wpcli_plugins.sh <<'SCRIPT'
          set -euo pipefail
          cd "$TARGET"
          export WP_ALLOW_ROOT=1
          export WTP_CI=1

          LOGDIR=".wtp/state/ci_logs"
          PUBDIR=".wtp/state/ro/public/latest/wpcli"
          mkdir -p "$LOGDIR" "$PUBDIR"

          : > "$LOGDIR/wpcli_summary.txt"
          : > "$LOGDIR/errors.txt"
          : > "$LOGDIR/active_plugins.csv"

          {
            echo "=== PLUGINS INPUT LIST ==="
            if [ -s ".wtp.plugins.install.list" ]; then
              cat ".wtp.plugins.install.list"
            else
              echo "(empty)"
            fi
            echo
          } | tee -a "$LOGDIR/wpcli_summary.txt"

          echo "=== ACTIVE PLUGINS (before) ===" | tee -a "$LOGDIR/wpcli_summary.txt"
          php ./wp plugin list --format=csv --path="$TARGET" --skip-plugins | tee "$LOGDIR/active_plugins.csv" | tee -a "$LOGDIR/wpcli_summary.txt" >/dev/null || echo "active-dump-fail:before" >> "$LOGDIR/errors.txt"

          # jeśli lista pusta -> kończymy z sukcesem (graceful)
          if [ ! -s ".wtp.plugins.install.list" ]; then
            echo "No plugins to process. Graceful skip." | tee -a "$LOGDIR/wpcli_summary.txt"
            cp -f "$LOGDIR/wpcli_summary.txt" "$PUBDIR/wpcli_summary.txt" || true
            cp -f "$LOGDIR/errors.txt" "$PUBDIR/errors.txt" || true
            cp -f "$LOGDIR/active_plugins.csv" "$PUBDIR/active_plugins.csv" || true
            exit 0
          fi

          install_or_update () {
            local slug="$1" ver="$2"
            if php ./wp plugin is-installed "$slug" --path="$TARGET" --skip-plugins; then
              if [ -n "$ver" ]; then
                php ./wp plugin update "$slug" --version="$ver" --path="$TARGET" --skip-plugins || echo "update-fail:$slug@$ver" >> "$LOGDIR/errors.txt"
              else
                php ./wp plugin update "$slug" --path="$TARGET" --skip-plugins || echo "update-fail:$slug" >> "$LOGDIR/errors.txt"
              fi
            else
              if [ -n "$ver" ]; then
                php ./wp plugin install "$slug" --version="$ver" --force --path="$TARGET" --skip-plugins || echo "install-fail:$slug@$ver" >> "$LOGDIR/errors.txt"
              else
                php ./wp plugin install "$slug" --force --path="$TARGET" --skip-plugins || echo "install-fail:$slug" >> "$LOGDIR/errors.txt"
              fi
            fi
            php ./wp plugin activate "$slug" --path="$TARGET" --skip-plugins || echo "activate-fail:$slug" >> "$LOGDIR/errors.txt"
          }

          while IFS= read -r raw; do
            line="$(echo "$raw" | sed 's/#.*$//' | xargs)"; [ -z "$line" ] && continue
            slug="$line"; ver=""
            if printf "%s" "$line" | grep -q "@"; then slug="${line%@*}"; ver="${line##*@}"; fi
            echo "-> $slug${ver:+@$ver}" | tee -a "$LOGDIR/wpcli_summary.txt"
            install_or_update "$slug" "$ver"
          done < ".wtp.plugins.install.list"

          echo "=== ACTIVE PLUGINS (after) ===" | tee -a "$LOGDIR/wpcli_summary.txt"
          php ./wp plugin list --format=csv --path="$TARGET" --skip-plugins | tee "$LOGDIR/active_plugins.csv" | tee -a "$LOGDIR/wpcli_summary.txt" >/dev/null || echo "active-dump-fail:after" >> "$LOGDIR/errors.txt"

          # publikacja do latest/wpcli
          cp -f "$LOGDIR/wpcli_summary.txt" "$PUBDIR/wpcli_summary.txt" || true
          cp -f "$LOGDIR/errors.txt" "$PUBDIR/errors.txt" || true
          cp -f "$LOGDIR/active_plugins.csv" "$PUBDIR/active_plugins.csv" || true
          SCRIPT

          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "/tmp/wpcli_plugins.sh" "$USER@$HOST:$TARGET/.wtp_wpcli_plugins.sh"

          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            "$USER@$HOST" "cd '$TARGET' && TARGET='$TARGET' bash .wtp_wpcli_plugins.sh && rm .wtp_wpcli_plugins.sh"

      - name: Pull logs (for artifact)
        run: |
          set -euo pipefail
          mkdir -p "_ci_logs/${{ github.run_id }}/wpcli"
          sshpass -p "$PASS" scp -P "$PORT" -r \
            -o StrictHostKeyChecking=yes -o UserKnownHostsFile=~/.ssh/known_hosts \
            ${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/* "_ci_logs/${{ github.run_id }}/wpcli/" || true
          ls -la "_ci_logs/${{ github.run_id }}/wpcli" || true

      - name: Upload artifact (wpcli logs)
        uses: actions/upload-artifact@v4
        with:
          name: wpcli-logs-${{ github.run_id }}
          path: _ci_logs/${{ github.run_id }}/wpcli/**
          retention-days: 14
