name: WTP Exporter Watch

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

concurrency:
  group: wtp-exporter-watch
  cancel-in-progress: true

env:
  BASE: https://weektoppick.com
  NS_OPEN: wtp-ro-open/v1
  NS_SNAP: wtp-ro/v1
  SITE_KEY: 5Depft8Y9LU0t6Sv
  OPS: ops-exporter-watch
  UA: WTP-ExporterWatch/1.0 (+https://weektoppick.com)

jobs:
  watch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Prepare dirs
        run: mkdir -p "$OPS/headers" "$OPS/bodies"

      - name: Probe endpoints
        id: probe
        shell: bash
        run: |
          set -euo pipefail

          probe () {
            local label="$1" url="$2" base="$3"
            local h="${OPS}/headers/${label}.hdr"
            local b="${OPS}/bodies/${label}.out"

            echo "GET $url"
            if curl -A "$UA" -sS --show-error \
                 --retry 2 --retry-delay 2 --retry-connrefused \
                 --connect-timeout 10 --max-time 30 \
                 -D "$h" "$url" -o "$b"; then
              :
            else
              echo "::warning::curl error for ${label}"
            fi

            # status + content-type
            local code ct
            code=$(awk 'NR==1{print $2}' "$h" 2>/dev/null || echo "")
            ct=$(awk -F': ' 'BEGIN{IGNORECASE=1} tolower($1)=="content-type"{print tolower($2)}' "$h" 2>/dev/null | tr -d '\r')
            [ -z "$code" ] && code="curl-fail"

            # try parse JSON if ends with .json OR content-type is json
            local valid="n"
            if [[ "$label" == *.json ]] || grep -qi "application/json" <<<"$ct"; then
              if jq -e type "$b" >/dev/null 2>&1; then valid="y"; fi
            fi

            echo "${label}|${code}|${valid}|${ct}" >> "${OPS}/summary.tsv"
          }

          : > "${OPS}/summary.tsv"

          probe "open_ls.json"   "${BASE}/wp-json/${NS_OPEN}/ls?site_key=${SITE_KEY}" "$OPS"
          probe "open_index.json" "${BASE}/wp-json/${NS_OPEN}/get?site_key=${SITE_KEY}&file=index.json" "$OPS"
          probe "snap_manifest.json" "${BASE}/wp-json/${NS_SNAP}/snap?file=manifest.json" "$OPS"
          probe "snap_gh-digest.json" "${BASE}/wp-json/${NS_SNAP}/snap?file=gh-digest.json" "$OPS"

          echo "---- summary ----"
          cat "${OPS}/summary.tsv" || true

          ok_any="false"
          if awk -F'|' '$2=="200" && $3=="y"' "${OPS}/summary.tsv" >/dev/null 2>&1; then
            ok_any="true"
          fi

          echo "ok_any=${ok_any}" >> "$GITHUB_OUTPUT"

      - name: Upload diagnostics
        uses: actions/upload-artifact@v4
        with:
            name: exporter-watch-diagnostics-${{ github.run_id }}
            path: ops-exporter-watch/**
            retention-days: 7

      - name: Create Issue if all probes failed
        if: ${{ steps.probe.outputs.ok_any != 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            let body = `Exporter watch: **ALL PROBES FAILED**\n\nRun: ${runUrl}\n\n`;

            try {
              const summary = fs.readFileSync('ops-exporter-watch/summary.tsv','utf8');
              body += 'Summary (label|code|valid|content-type):\n\n```\n' + summary + '\n```\n\n';
            } catch(e){}

            const labels = ['open_ls.json','open_index.json','snap_manifest.json','snap_gh-digest.json'];
            for (const lbl of labels) {
              try {
                const h = fs.readFileSync(`ops-exporter-watch/headers/${lbl}.hdr`, 'utf8');
                const b = fs.readFileSync(`ops-exporter-watch/bodies/${lbl}.out`, 'utf8');
                body += `### ${lbl}\n**Headers (first 600)**\n\n\`\`\`\n${h.slice(0,600)}\n\`\`\`\n`;
                body += `**Body (first 1000)**\n\n\`\`\`\n${b.slice(0,1000)}\n\`\`\`\n\n`;
              } catch(e){}
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Exporter watch: ALL PROBES FAILED (${context.runNumber})`,
              body
            });

      - name: Final gate
        run: |
          if [ "${{ steps.probe.outputs.ok_any }}" != "true" ]; then
            echo "::error::All probes failed (open+snap)."
            exit 1
          fi
          echo "At least one probe OK."
