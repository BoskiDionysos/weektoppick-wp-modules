name: WTP Pipeline (deploy → wp-cli → inventory → snapshot logs)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/themes/**'
      - '.wtp/**'
      - '.github/workflows/pipeline-deploy-wpcli.yml'

permissions:
  contents: write

concurrency:
  group: wtp-pipeline
  cancel-in-progress: true

jobs:
  pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      HOST:   ${{ secrets.DEPLOY_HOST }}
      PORT:   ${{ secrets.DEPLOY_PORT }}
      USER:   ${{ secrets.DEPLOY_USER }}
      PASS:   ${{ secrets.DEPLOY_PASS }}
      TARGET: ${{ secrets.DEPLOY_TARGET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass curl jq

      - name: Verify secrets & lists
        run: |
          set -euo pipefail
          for v in HOST PORT USER PASS TARGET; do
            test -n "${!v:-}" || { echo "::error::Missing secret: $v"; exit 1; }
          done
          test -f ".wtp/allowed-plugins.txt"   || { echo "::error::.wtp/allowed-plugins.txt not found in repo"; exit 1; }
          # protected opcjonalny – jak jest, użyjemy
          if [ ! -f ".wtp/protected-plugins.txt" ] && [ -f "wtp/protected-plugins.txt" ]; then
            cp -f "wtp/protected-plugins.txt" ".wtp/protected-plugins.txt"
          fi

      # === DEPLOY (rsync z exclude z protected-plugins.txt) ===
      - name: Remote sanity (docroot)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' bash -s" <<'RMT'
            set -euo pipefail
            : "${TARGET:?TARGET missing}"
            echo "TARGET=$TARGET"
            cd "$TARGET" || { echo "::error::Cannot cd to $TARGET"; exit 1; }
            if [ ! -f wp-config.php ]; then
              echo "::error::wp-config.php NOT found in $TARGET"; exit 1;
            fi
            php -v >/dev/null || { echo "::error::PHP CLI not available"; exit 1; }
          RMT

      - name: Build rsync exclude from protected-plugins.txt
        id: excl
        run: |
          set -euo pipefail
          mkdir -p .wtp
          EXC=".wtp/rsync-exclude.txt"
          : > "$EXC"
          if [ -f ".wtp/protected-plugins.txt" ]; then
            # usuń BOM/CRLF/komentarze → wzorzec rsync
            sed -e 's/\r$//' ".wtp/protected-plugins.txt" | sed 's/^\xEF\xBB\xBF//' \
              | sed 's/#.*$//' | awk 'NF{print "wp-content/plugins/" $0 "/***"}' > "$EXC"
          fi
          echo "---- RSYNC EXCLUDES ----"
          if [ -s "$EXC" ]; then cat "$EXC"; else echo "(empty)"; fi
          echo "file=$EXC" >> "$GITHUB_OUTPUT"

      - name: Rsync MU plugins (if present)
        run: |
          set -euo pipefail
          if [ -d "mu-plugins" ]; then
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "mu-plugins/" "${USER}@${HOST}:${TARGET}/wp-content/mu-plugins/"
          else
            echo "Skip: mu-plugins not present."
          fi

      - name: Rsync plugins with excludes
        run: |
          set -euo pipefail
          if [ -d "plugins" ]; then
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              --exclude-from="${{ steps.excl.outputs.file }}" \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "plugins/" "${USER}@${HOST}:${TARGET}/wp-content/plugins/"
          else
            echo "Skip: plugins not present."
          fi

      - name: Detect & rsync themes
        run: |
          set -euo pipefail
          SRC=""
          if   [ -d "themes" ]; then SRC="themes"
          elif [ -d "wp-content/themes" ]; then SRC="wp-content/themes"
          fi
          if [ -n "$SRC" ]; then
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "$SRC/" "${USER}@${HOST}:${TARGET}/wp-content/themes/"
          else
            echo "Skip: no themes dir."
          fi

      # === WP-CLI (allowed list install/update + activate) ===
      - name: Upload allowlist to remote
        run: |
          set -euo pipefail
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp/allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: WP-CLI run (install/update/activate + logs)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no \
            "$USER@$HOST" "TARGET='${TARGET}' bash -s" <<'RMT'
            set -euo pipefail
            : "${TARGET:?TARGET missing}"
            cd "$TARGET"

            mkdir -p "$TARGET/.wtp/state/ci_logs" "$TARGET/.wtp-vendor"
            SLOG="$TARGET/.wtp/state/ci_logs/server_info.txt"
            {
              echo "=== whoami / uname / date ==="; whoami; uname -a; date
              echo; echo "=== TARGET ==="; echo "$TARGET"
              echo; echo "=== pwd ==="; pwd
              echo; echo "=== top ls ==="; ls -la
            } > "$SLOG" 2>&1

            # WP-CLI bootstrap
            if [ ! -x "./wp" ]; then
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null
              chmod +x wp.phar && mv wp.phar wp
            fi
            export WP_ALLOW_ROOT=1
            WP='php ./wp --skip-plugins --path="$TARGET"'

            LIST="$TARGET/.wtp-allowed-plugins.txt"
            [ -f "$LIST" ] || { echo "::error::Allowlist not found: $LIST" | tee -a "$SLOG"; exit 1; }

            TMP="$TARGET/.wtp-allowed-plugins.norm"
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' > "$TMP"

            INST="$TARGET/.wtp/state/ci_logs/plugins_installed.txt"
            UPD="$TARGET/.wtp/state/ci_logs/plugins_updated.txt"
            EXIST="$TARGET/.wtp/state/ci_logs/plugins_existing.txt"
            ACTV="$TARGET/.wtp/state/ci_logs/active_plugins.txt"
            : >"$INST"; : >"$UPD"; : >"$EXIST"; : >"$ACTV"

            while IFS= read -r raw; do
              line=$(echo "$raw" | sed 's/#.*$//' | xargs)
              [ -z "$line" ] && continue

              if [[ "$line" =~ ^zip:(.+)$ ]]; then
                src="${BASH_REMATCH[1]}"
                [ -f "$src" ] || src="$TARGET/.wtp-vendor/$(basename "$src")"
                if [ ! -f "$src" ]; then
                  echo "::warning::ZIP not found: $src" | tee -a "$SLOG"
                  continue
                fi
                eval $WP plugin install "$src" --force --activate \
                  && echo "$src" >> "$INST"
                continue
              fi

              slug="${line%@*}"; ver="${line#*@}"; [ "$slug" = "$ver" ] && ver=""
              if eval $WP plugin is-installed "$slug" >/dev/null 2>&1; then
                if [ -n "$ver" ]; then
                  eval $WP plugin update "$slug" --version="$ver" --activate \
                    && echo "$slug@$ver" >> "$UPD"
                else
                  eval $WP plugin update "$slug" --activate \
                    && echo "$slug" >> "$UPD"
                fi
              else
                if [ -n "$ver" ]; then
                  eval $WP plugin install "$slug" --version="$ver" --activate \
                    && echo "$slug@$ver" >> "$INST"
                else
                  eval $WP plugin install "$slug" --activate \
                    && echo "$slug" >> "$INST"
                fi
              fi

              eval $WP plugin is-installed "$slug" && echo "$slug" >> "$EXIST" || true
            done < "$TMP"

            echo "=== active plugins ===" > "$ACTV"
            eval $WP plugin list --status=active --field=name >> "$ACTV" || true

            # fallback theme, jeżeli nasz nie istnieje
            if ! eval $WP theme is-installed wtp-core-theme >/dev/null 2>&1; then
              eval $WP theme install twentytwentyfive --activate || true
            fi
          RMT

      # === Inventory + snapshot logs (repo + artifact) ===
      - name: Pull CI logs from remote
        continue-on-error: true
        run: |
          set -euo pipefail
          rm -rf _ci_logs || true
          mkdir -p _ci_logs
          sshpass -p "$PASS" rsync -az \
            -e "ssh -p $PORT -o StrictHostKeyChecking=no" \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/" "_ci_logs/" || true
          ls -la _ci_logs || true

      - name: Sync logs into repo tree
        run: |
          set -euo pipefail
          mkdir -p .wtp/state/ci_logs
          rsync -a _ci_logs/ .wtp/state/ci_logs/ || true

      - name: Upload logs as artifact (safe name)
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs-pipeline-${{ github.run_id }}
          path: _ci_logs
          if-no-files-found: warn
          retention-days: 7

      - name: Commit CI logs into repo (for snapshots)
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci-logs(pipeline #${{ github.run_number }})"
          file_pattern: .wtp/state/ci_logs/**
