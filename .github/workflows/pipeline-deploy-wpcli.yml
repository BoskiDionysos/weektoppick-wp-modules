name: Deploy â†’ WP-CLI (from SSOT)

on:
  workflow_dispatch: {}
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/**'
      - 'plugins/**'
      - 'themes/**'
      - 'wp-content/themes/**'
      - 'ssot/SSOT_PACK.yml'
      - '.github/workflows/pipeline-deploy-wpcli.yml'

permissions:
  contents: write

jobs:
  pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      SSOT_FILE: ssot/SSOT_PACK.yml

    steps:
      - uses: actions/checkout@v4
        with: { lfs: true, fetch-depth: 0 }

      - name: Tools
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y rsync sshpass curl jq
          sudo wget -qO /usr/local/bin/yq \
            https://github.com/mikefarah/yq/releases/download/v4.44.3/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Read SSOT
        id: ssot
        run: |
          set -euo pipefail
          test -f "$SSOT_FILE" || { echo "::error::Missing $SSOT_FILE"; exit 1; }
          host_s=$(yq -r '.environments.production.host_secret'   "$SSOT_FILE")
          port_s=$(yq -r '.environments.production.port_secret'   "$SSOT_FILE")
          user_s=$(yq -r '.environments.production.user_secret'   "$SSOT_FILE")
          pass_s=$(yq -r '.environments.production.pass_secret'   "$SSOT_FILE")
          targ_s=$(yq -r '.environments.production.target_secret' "$SSOT_FILE")
          echo "HOST=${!host_s}"   >> "$GITHUB_OUTPUT"
          echo "PORT=${!port_s}"   >> "$GITHUB_OUTPUT"
          echo "USER=${!user_s}"   >> "$GITHUB_OUTPUT"
          echo "PASS=${!pass_s}"   >> "$GITHUB_OUTPUT"
          echo "TARGET=${!targ_s}" >> "$GITHUB_OUTPUT"
          echo "FS_METHOD=$(yq -r '.environments.production.fs_method' $SSOT_FILE)" >> "$GITHUB_OUTPUT"
          yq -r '.registry.allowed_plugins[]'   "$SSOT_FILE" > .wtp.allowed.txt
          yq -r '.registry.protected_plugins[]' "$SSOT_FILE" > .wtp.protected.txt
          awk 'NF{print "wp-content/plugins/" $0 "/***"}' .wtp.protected.txt > .wtp.rsync-exclude.txt

      - name: Remote sanity
        env:
          HOST:   ${{ steps.ssot.outputs.HOST }}
          PORT:   ${{ steps.ssot.outputs.PORT }}
          USER:   ${{ steps.ssot.outputs.USER }}
          PASS:   ${{ steps.ssot.outputs.PASS }}
          TARGET: ${{ steps.ssot.outputs.TARGET }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no \
            "$USER@$HOST" "cd '$TARGET' && test -f wp-config.php || exit 12"

      - name: Rsync MU-plugins
        if: ${{ hashFiles('mu-plugins/**') != '' }}
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            "mu-plugins/" "${USER}@${HOST}:${TARGET}/wp-content/mu-plugins/"

      - name: Rsync plugins (respect protected)
        if: ${{ hashFiles('plugins/**') != '' }}
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
            --exclude-from=".wtp.rsync-exclude.txt" \
            -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            "plugins/" "${USER}@${HOST}:${TARGET}/wp-content/plugins/"

      - name: Detect & rsync themes
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          SRC=""
          if   [ -d "themes" ]; then SRC="themes"
          elif [ -d "wp-content/themes" ]; then SRC="wp-content/themes"
          fi
          if [ -n "$SRC" ]; then
            sshpass -p "$PASS" rsync -az --delete -v --itemize-changes \
              -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
              "$SRC/" "${USER}@${HOST}:${TARGET}/wp-content/themes/"
          else
            echo "No themes dir."
          fi

      - name: Prepare FS (perms + FS_METHOD)
        env:
          HOST:   ${{ steps.ssot.outputs.HOST }}
          PORT:   ${{ steps.ssot.outputs.PORT }}
          USER:   ${{ steps.ssot.outputs.USER }}
          PASS:   ${{ steps.ssot.outputs.PASS }}
          TARGET: ${{ steps.ssot.outputs.TARGET }}
          FS_METHOD: ${{ steps.ssot.outputs.FS_METHOD }}
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' FS_METHOD='${FS_METHOD}' bash -s" <<'RMT'
            set -euo pipefail
            cd "$TARGET"
            mkdir -p wp-content/plugins wp-content/upgrade
            find wp-content/plugins -type d -exec chmod 775 {} \; || true
            find wp-content/plugins -type f -exec chmod 664 {} \; || true
            chmod 775 wp-content/upgrade || true
            grep -q "FS_METHOD" wp-config.php || echo "define('FS_METHOD','${FS_METHOD}');" >> wp-config.php
          RMT

      - name: Upload allowlist to remote
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          cp .wtp.allowed.txt .wtp-allowed-plugins.txt
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            ".wtp-allowed-plugins.txt" "$USER@$HOST:$TARGET/.wtp-allowed-plugins.txt"

      - name: WP-CLI install/update (MU disabled temporarily)
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "TARGET='${TARGET}' bash -s" <<'RMT'
            set -euo pipefail
            cd "$TARGET"

            MU_DIR="$TARGET/wp-content/mu-plugins"
            MU_BAK="$TARGET/wp-content/mu-plugins._disabled_$$"
            if [ -e "$MU_DIR" ]; then mv "$MU_DIR" "$MU_BAK"; fi
            restore_mu(){ [ -e "$MU_BAK" ] && mv "$MU_BAK" "$MU_DIR"; }
            trap restore_mu EXIT

            if [ ! -x "./wp" ]; then
              curl -sS -o wp.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
              php wp.phar --info >/dev/null
              chmod +x wp.phar && mv wp.phar wp
            fi
            export WP_ALLOW_ROOT=1
            WP='php ./wp --skip-plugins --path="$TARGET"'

            LIST="$TARGET/.wtp-allowed-plugins.txt"
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' | sed 's/#.*$//' | awk 'NF>0' > "$TARGET/.wtp-allowed.norm"

            INST="$TARGET/.wtp/state/ci_logs/plugins_installed.txt"
            UPD="$TARGET/.wtp/state/ci_logs/plugins_updated.txt"
            ACT="$TARGET/.wtp/state/ci_logs/active_plugins.txt"
            mkdir -p "$TARGET/.wtp/state/ci_logs"; :> "$INST"; :> "$UPD"; :> "$ACT"

            while IFS= read -r line; do
              slug="${line%@*}"; ver="${line#*@}"; [ "$slug" = "$ver" ] && ver=""
              if eval $WP plugin is-installed "$slug" >/dev/null 2>&1; then
                if [ -n "$ver" ]; then eval $WP plugin update "$slug" --version="$ver" --activate; echo "$slug@$ver" >> "$UPD"
                else eval $WP plugin update "$slug" --activate; echo "$slug" >> "$UPD"; fi
              else
                if [ -n "$ver" ]; then eval $WP plugin install "$slug" --version="$ver" --activate; echo "$slug@$ver" >> "$INST"
                else eval $WP plugin install "$slug" --activate; echo "$slug" >> "$INST"; fi
              fi
            done < "$TARGET/.wtp-allowed.norm"

            echo "=== active plugins ===" > "$ACT"
            eval $WP plugin list --status=active --field=name >> "$ACT" || true
          RMT

      - name: Pull CI logs (artifact)
        continue-on-error: true
        env: { HOST: ${{ steps.ssot.outputs.HOST }}, PORT: ${{ steps.ssot.outputs.PORT }}, USER: ${{ steps.ssot.outputs.USER }}, PASS: ${{ steps.ssot.outputs.PASS }}, TARGET: ${{ steps.ssot.outputs.TARGET }} }
        run: |
          set -euo pipefail
          rm -rf _ci_logs; mkdir -p _ci_logs
          sshpass -p "$PASS" rsync -az -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            "$USER@$HOST:$TARGET/.wtp/state/ci_logs/" "_ci_logs/" || true
          ls -la _ci_logs || true

      - uses: actions/upload-artifact@v4
        with:
          name: ci-logs-${{ github.run_id }}
          path: _ci_logs
          retention-days: 7
