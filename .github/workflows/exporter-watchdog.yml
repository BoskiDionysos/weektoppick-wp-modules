name: Exporter Watchdog

on:
  push:
    branches: [ main ]
    paths:
      - 'mu-plugins/wtp-ro-exporter.php'
      - '.github/workflows/exporter-watchdog.yml'
  schedule:
    - cron: '*/15 * * * *'   # co 15 min (UTC)
  workflow_dispatch: {}

permissions:
  contents: read
  issues: write

concurrency:
  group: exporter-watchdog
  cancel-in-progress: true

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      BASE: https://weektoppick.com
      NS: wtp-ro-open/v1
      SITE_KEY: 5Depft8Y9LU0t6Sv
      OPS: ops-watchdog
    steps:
      - name: Prepare tools & dirs
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl
          mkdir -p "$OPS"

      - name: Health check
        id: health
        run: |
          set -euo pipefail
          URL="${BASE}/wp-json/${NS}/health?site_key=${SITE_KEY}"
          echo "GET $URL"
          code=0
          body="$(curl -sS -w '\n%{http_code}\n' "$URL" || true)"
          http="$(echo "$body" | tail -n1)"
          payload="$(echo "$body" | head -n-1)"
          printf '%s\n' "$payload" > "$OPS/health.json" || true
          echo "status=$http" >> "$GITHUB_OUTPUT"
          echo "payload=$(echo "$payload" | tr -d '\n' | cut -c1-500)" >> "$GITHUB_OUTPUT"

      - name: List files
        id: ls
        run: |
          set -euo pipefail
          URL="${BASE}/wp-json/${NS}/ls?site_key=${SITE_KEY}"
          echo "GET $URL"
          body="$(curl -sS -w '\n%{http_code}\n' "$URL" || true)"
          http="$(echo "$body" | tail -n1)"
          payload="$(echo "$body" | head -n-1)"
          printf '%s\n' "$payload" > "$OPS/ls.json" || true
          echo "status=$http" >> "$GITHUB_OUTPUT"
          # bezpieczna walidacja struktury (nie przerywamy joba)
          if [ "$http" = "200" ] && jq -e '.files and (.files|type=="array")' "$OPS/ls.json" >/dev/null 2>&1; then
            echo "ok=true" >> "$GITHUB_OUTPUT"
            # zapisz pierwszy plik do testu /get
            first="$(jq -r '.files[0] // empty' "$OPS/ls.json")"
            echo "first_file=$first" >> "$GITHUB_OUTPUT"
          else
            echo "ok=false" >> "$GITHUB_OUTPUT"
            echo "first_file=" >> "$GITHUB_OUTPUT"
          fi

      - name: Get sample file (index.json preferred)
        id: get
        run: |
          set -euo pipefail
          pick="index.json"
          if [ -n "${{ steps.ls.outputs.first_file }}" ]; then
            pick="${{ steps.ls.outputs.first_file }}"
          fi
          URL="${BASE}/wp-json/${NS}/get?site_key=${SITE_KEY}&file=${pick}"
          echo "GET $URL"
          body="$(curl -sS -w '\n%{http_code}\n' "$URL" || true)"
          http="$(echo "$body" | tail -n1)"
          content="$(echo "$body" | head -n-1)"
          # zapisz surową odpowiedź (może być JSON lub text/plain)
          printf '%s\n' "$content" > "$OPS/get.sample"
          echo "status=$http" >> "$GITHUB_OUTPUT"
          echo "file=$pick" >> "$GITHUB_OUTPUT"

      - name: Decide result and summarize
        id: decide
        run: |
          set -euo pipefail
          HSTAT="${{ steps.health.outputs.status || '0' }}"
          LSTAT="${{ steps.ls.outputs.status || '0' }}"
          LOK="${{ steps.ls.outputs.ok || 'false' }}"
          GSTAT="${{ steps.get.outputs.status || '0' }}"
          FILE="${{ steps.get.outputs.file || '' }}"

          echo "health=$HSTAT, ls=$LSTAT (ok=$LOK), get=$GSTAT ($FILE)"

          status="ok"
          reason="healthy"
          if [ "$HSTAT" != "200" ]; then
            status="fail"; reason="health_http_$HSTAT"
          elif [ "$LSTAT" != "200" ] || [ "$LOK" != "true" ]; then
            status="fail"; reason="ls_bad_or_schema"
          elif [ "$GSTAT" != "200" ]; then
            status="fail"; reason="get_http_$GSTAT"
          fi

          jq -n --arg status "$status" --arg reason "$reason" \
                --argfile health "$OPS/health.json" \
                --argfile ls "$OPS/ls.json" \
                --arg sample_file "$FILE" \
                '{status:$status, reason:$reason, sample_file:$sample_file, health:$health, ls:$ls}' \
                > "$OPS/summary.json"

          cat "$OPS/summary.json"

          if [ "$status" != "ok" ]; then
            echo "fail=true" >> "$GITHUB_OUTPUT"
            exit 0
          else
            echo "fail=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload watchdog artifacts
        uses: actions/upload-artifact@v4
        with:
          name: exporter-watchdog
          path: ops-watchdog/**
          if-no-files-found: warn
          retention-days: 7

      - name: Create Issue on failure
        if: ${{ steps.decide.outputs.fail == 'true' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'ops-watchdog/summary.json';
            let summary = {};
            try {
              summary = JSON.parse(fs.readFileSync(path, 'utf8'));
            } catch(e) {
              summary = {status:'fail', reason:'summary_read_error'};
            }
            const title = ❌ Exporter Watchdog: ${summary.reason || 'unknown'};
            let body = 'Exporter watchdog detected a problem.\n\n';
            body += '### Summary\n';
            body += 'json\n' + JSON.stringify(summary, null, 2).slice(0, 4000) + '\n\n';
            body += \nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId};
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });

      - name: Fail job if watchdog failed
        if: ${{ steps.decide.outputs.fail == 'true' }}
        run: |
          echo "::error::Exporter watchdog failed (see artifacts and issue)."
          exit 1
