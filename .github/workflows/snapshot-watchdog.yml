name: Snapshot Watchdog

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

env:
  BASE: https://weektoppick.com
  NS: wtp-ro/v1
  OPS: ops-snapshot-watchdog
  FILES: |
    manifest.json
    bundle.json
    index.json
    files_000.json
    gh-digest.json

concurrency:
  group: snapshot-watchdog
  cancel-in-progress: true

jobs:
  watchdog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Prepare folders
        run: mkdir -p "$OPS"

      - name: Fetch & validate JSONs
        id: check
        run: |
          set -euo pipefail
          STATUS=ok; REASON=""
          while read -r f; do
            [ -z "$f" ] && continue
            URL="${BASE}/wp-json/${NS}/snap?file=${f}"
            OUT="${OPS}/${f}.out"
            echo "GET $URL"
            if ! curl -sS -m 25 "$URL" -o "$OUT"; then
              STATUS=bad; REASON="fetch failed for $f"; break
            fi
            if ! jq -e type "$OUT" >/dev/null 2>&1; then
              STATUS=bad; REASON="invalid JSON for $f"; break
            fi
          done <<< "$FILES"
          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "reason=$REASON" >> "$GITHUB_OUTPUT"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-watchdog-${{ github.run_id }}
          path: ops-snapshot-watchdog/**
          retention-days: 7

      - name: Create Issue on failure
        if: ${{ steps.check.outputs.status != 'ok' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const status = '${{ steps.check.outputs.status }}';
            const reason = `${{ toJson(steps.check.outputs.reason) }}`;
            const urlRun = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            let body = `Watchdog status: **${status}**\nReason: ${reason}\n\nRun: ${urlRun}\n\n`;
            for (const f of ['manifest.json','bundle.json','index.json','files_000.json','gh-digest.json']) {
              try {
                const p = `ops-snapshot-watchdog/${f}.out`;
                const txt = fs.readFileSync(p, 'utf8');
                body += `**${f}** (first 1KB):\n\n\`\`\`json\n${txt.slice(0,1000)}\n\`\`\`\n\n`;
              } catch(e){}
            }
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Snapshot watchdog: ${status.toUpperCase()} (${context.runNumber})`,
              body
            });

      - name: Final gate
        run: |
          set -euo pipefail
          STATUS="${{ steps.check.outputs.status }}"
          if [ "$STATUS" != "ok" ]; then
            echo "::error::Snapshot watchdog failed (endpoint/content problem)."
            exit 1
          fi
          echo "Watchdog OK."
