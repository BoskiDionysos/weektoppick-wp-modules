name: Snapshot Watchdog

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch:

permissions:
  contents: write
  issues: write

concurrency:
  group: snapshot-watchdog
  cancel-in-progress: true

env:
  BASE: https://weektoppick.com
  NS: wtp-ro/v1
  OPS: ops-snapshot-watchdog
  UA: WTP-Watchdog/1.1 (+https://weektoppick.com)

  # Pliki do sprawdzenia (Kolejność: ważne -> mniej ważne)
  PROBES: |
    manifest.json
    files_000.json
    gh-digest.json
    index.json
    bundle.json

  # Zachowanie bramki:
  # - WATCHDOG_STRICT=false (domyślnie): zalicz, jeśli >=1 plik OK
  # - WATCHDOG_STRICT=true : zalicz, jeśli >=2 pliki OK
  WATCHDOG_STRICT: ${{ secrets.WATCHDOG_STRICT }}

jobs:
  watchdog:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl

      - name: Prepare folders
        run: |
          mkdir -p "$OPS/headers" "$OPS/bodies"

      - name: Probe SNAP endpoints
        id: probe
        shell: bash
        run: |
          set -euo pipefail
          : > "${OPS}/summary.tsv"
          OK=0
          TOTAL=0

          fetch_one () {
            local f="$1"
            local url="${BASE}/wp-json/${NS}/snap?file=${f}"
            local h="${OPS}/headers/${f}.hdr"
            local b="${OPS}/bodies/${f}.out"

            TOTAL=$((TOTAL+1))
            echo "GET $url"

            if curl -A "$UA" -sS --show-error \
                 --retry 2 --retry-delay 2 --retry-connrefused \
                 --connect-timeout 10 --max-time 30 \
                 -D "$h" "$url" -o "$b"; then
              :
            else
              echo "::warning::curl error for ${f}"
            fi

            local code ct valid="n"
            code=$(awk 'NR==1{print $2}' "$h" 2>/dev/null || echo "")
            ct=$(awk -F': ' 'BEGIN{IGNORECASE=1} tolower($1)=="content-type"{print tolower($2)}' "$h" 2>/dev/null | tr -d '\r')

            # uznaj za OK tylko: HTTP 200 + parsowalny JSON
            if [ "$code" = "200" ] && jq -e type "$b" >/dev/null 2>&1; then
              valid="y"
              OK=$((OK+1))
            fi

            printf "%s|%s|%s|%s\n" "$f" "${code:-curl-fail}" "$valid" "${ct:-}" >> "${OPS}/summary.tsv"
          }

          while read -r f; do
            [ -z "$f" ] && continue
            fetch_one "$f"
          done <<< "$PROBES"

          echo "ok=$OK" >> "$GITHUB_OUTPUT"

          # zbuduj próg wg trybu strict
          STRICT="${WATCHDOG_STRICT:-false}"
          if [ "$STRICT" = "true" ]; then
            THRESH=2
          else
            THRESH=1
          fi
          echo "threshold=$THRESH" >> "$GITHUB_OUTPUT"

          if [ "$OK" -ge "$THRESH" ]; then
            echo "status=ok" >> "$GITHUB_OUTPUT"
            echo "reason=at least $OK OK (threshold=$THRESH)" >> "$GITHUB_OUTPUT"
          else
            echo "status=bad" >> "$GITHUB_OUTPUT"
            echo "reason=only $OK OK (threshold=$THRESH)" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload diagnostics
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-watchdog-${{ github.run_id }}
          path: ops-snapshot-watchdog/**
          retention-days: 7

      - name: Create Issue on failure
        if: ${{ steps.probe.outputs.status != 'ok' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const runUrl = ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId};
            const status = ${{ steps.probe.outputs.status }}
            const reason = ${{ steps.probe.outputs.reason }}
            let body = Watchdog **${status.toUpperCase()}**\n\nReason: ${reason}\n\nRun: ${runUrl}\n\n;

            try {
              const summary = fs.readFileSync('ops-snapshot-watchdog/summary.tsv','utf8');
              body += 'Summary (file|code|valid|content-type):\n\n\n' + summary + '\n\n\n';
            } catch(e){}

            const files = (process.env.PROBES || '').trim().split('\n').map(s => s.trim()).filter(Boolean);
            for (const f of files) {
              try {
                const h = fs.readFileSync(ops-snapshot-watchdog/headers/${f}.hdr, 'utf8');
                const b = fs.readFileSync(ops-snapshot-watchdog/bodies/${f}.out, 'utf8');
                body += ### ${f}\n**Headers (first 600)**\n\n\\\\n${h.slice(0,600)}\n\\\\n;
                body += **Body (first 1000)**\n\n\\\\n${b.slice(0,1000)}\n\\\\n\n;
              } catch(e){}
            }

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: Snapshot watchdog: ${status.toUpperCase()} (${context.runNumber}),
              body
            });

      - name: Final gate
        run: |
          set -euo pipefail
          echo "OK count: ${{ steps.probe.outputs.ok }} / threshold ${{ steps.probe.outputs.threshold }}"
          if [ "${{ steps.probe.outputs.status }}" != "ok" ]; then
            echo "::error::Snapshot watchdog failed (endpoint/content problem)."
            exit 1
          fi
          echo "Watchdog OK."
