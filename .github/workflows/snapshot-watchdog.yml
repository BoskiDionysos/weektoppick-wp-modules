name: Snapshot Watchdog

on:
  schedule:
    - cron: "*/30 * * * *"
  workflow_dispatch: {}

permissions:
  contents: write
  issues: write

concurrency:
  group: snapshot-watchdog
  cancel-in-progress: true

env:
  BASE: https://weektoppick.com
  SITE_KEY: 5Depft8Y9LU0t6Sv
  OPS: ops-snapshot-watchdog
  UA: WTP-Watchdog/1.0 (+https://weektoppick.com)
  REQUIRED: |
    manifest.json
    files_000.json
    gh-digest.json
  OPTIONAL: |
    index.json
    bundle.json

jobs:
  watchdog:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq curl sshpass
          mkdir -p "$OPS/headers" "$OPS/bodies"

      - name: Fetch & validate (required)
        id: req
        shell: bash
        run: |
          set -euo pipefail
          STATUS=ok
          REASON=""
          OK_COUNT=0
          FAIL_COUNT=0

          fetch_one () {
            local f="$1"
            local url="${BASE}/wp-json/wtp-ro-open/v1/get?site_key=${SITE_KEY}&file=${f}"
            local h="${OPS}/headers/${f}.hdr"
            local b="${OPS}/bodies/${f}.json"
            echo "GET $url"
            if ! curl -A "$UA" -fsS --show-error --retry 2 --retry-delay 2 --retry-connrefused \
                 --connect-timeout 10 --max-time 30 -D "$h" "$url" -o "$b"; then
              echo "::error::curl failed for $f"
              return 1
            fi
            local code
            code=$(awk 'NR==1{print $2}' "$h")
            if [ "${code:-}" != "200" ]; then
              echo "::error::HTTP ${code:-?} for $f"
              return 1
            fi
            if ! jq -e type "$b" >/dev/null 2>&1; then
              echo "::error::invalid JSON for $f"
              return 1
            fi
            return 0
          }

          while read -r f; do
            [ -z "$f" ] && continue
            if fetch_one "$f"; then
              OK_COUNT=$((OK_COUNT+1))
            else
              FAIL_COUNT=$((FAIL_COUNT+1))
            fi
          done <<< "$REQUIRED"

          if [ "$OK_COUNT" -ge 2 ]; then
            echo "required_ok=true" >> "$GITHUB_OUTPUT"
          else
            echo "required_ok=false" >> "$GITHUB_OUTPUT"
            STATUS=bad
            REASON="required set insufficient (ok=$OK_COUNT, fail=$FAIL_COUNT)"
          fi

          echo "status=$STATUS" >> "$GITHUB_OUTPUT"
          echo "reason=$REASON" >> "$GITHUB_OUTPUT"

      - name: Fetch & validate (optional)
        if: ${{ steps.req.outputs.required_ok == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          fetch_opt () {
            local f="$1"
            local url="${BASE}/wp-json/wtp-ro-open/v1/get?site_key=${SITE_KEY}&file=${f}"
            local h="${OPS}/headers/${f}.hdr"
            local b="${OPS}/bodies/${f}.json"
            echo "GET $url"
            if curl -A "$UA" -fsS --show-error --retry 2 --retry-delay 2 --retry-connrefused \
                 --connect-timeout 10 --max-time 30 -D "$h" "$url" -o "$b"; then
              jq -e type "$b" >/dev/null 2>&1 || echo "::warning::optional invalid JSON for $f"
            else
              echo "::warning::optional fetch failed for $f"
            fi
          }
          while read -r f; do
            [ -z "$f" ] && continue
            fetch_opt "$f"
          done <<< "$OPTIONAL"

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapshot-watchdog-${{ github.run_id }}
          path: ops-snapshot-watchdog/**
          retention-days: 7

      # Publikujemy "watchdog-last.json" ZAWSZE do katalogu opartego o env.SITE_KEY
      - name: Publish public diag (always)
        if: always()
        env:
          HOST:     ${{ secrets.DEPLOY_HOST }}
          PORT:     ${{ secrets.DEPLOY_PORT }}
          USER:     ${{ secrets.DEPLOY_USER }}
          PASS:     ${{ secrets.DEPLOY_PASS }}
          TARGET:   ${{ secrets.DEPLOY_TARGET }}
          SITE_KEY: ${{ env.SITE_KEY }}
        run: |
          set -euo pipefail
          STATUS="${{ steps.req.outputs.status || 'unknown' }}"
          REASON="${{ steps.req.outputs.reason || '' }}"
          NOW="$(date -u +%FT%TZ)"
          RUN="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          jq -n --arg workflow "snapshot-watchdog" --arg status "$STATUS" --arg reason "$REASON" --arg run_url "$RUN" --arg time "$NOW" \
            '{workflow:$workflow,status:$status,reason:$reason,run_url:$run_url,time:$time}' > watchdog-last.json
          REMOTE_DIR="$TARGET/wp-content/uploads/wtp-ro/public/${SITE_KEY}"
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "mkdir -p '$REMOTE_DIR'"
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no watchdog-last.json "$USER@$HOST:$REMOTE_DIR/watchdog-last.json"

      - name: Final gate
        run: |
          set -euo pipefail
          if [ "${{ steps.req.outputs.status }}" != "ok" ]; then
            echo "::error::Snapshot watchdog failed (endpoint/content problem)."
            exit 1
          fi
          echo "Watchdog OK."
