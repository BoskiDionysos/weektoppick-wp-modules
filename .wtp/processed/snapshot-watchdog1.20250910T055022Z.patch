patch
diff --git a/.github/workflows/snapshot-watchdog.yml b/.github/workflows/snapshot-watchdog.yml
--- a/.github/workflows/snapshot-watchdog.yml
+++ b/.github/workflows/snapshot-watchdog.yml
@@
-name: Snapshot Watchdog
-on:
-  schedule:
-    - cron: "*/30 * * * *"
-  workflow_dispatch:
-permissions:
-  contents: write
-  issues: write
-concurrency:
-  group: snapshot-watchdog
-  cancel-in-progress: true
-env:
-  BASE: https://weektoppick.com
-  NS: wtp-ro/v1
-  OPS: ops-snapshot-watchdog
-  UA: WTP-Watchdog/1.0 (+https://weektoppick.com)
-  REQUIRED: |
-    manifest.json
-    files_000.json
-    gh-digest.json
-  OPTIONAL: |
-    index.json
-    bundle.json
-jobs:
-  watchdog:
-    runs-on: ubuntu-latest
-    steps:
-      - name: Checkout
-        uses: actions/checkout@v4
-      - name: Ensure tools
-        run: |
-          sudo apt-get update -y
-          sudo apt-get install -y jq curl
-      - name: Prepare folders
-        run: |
-          mkdir -p "$OPS/headers" "$OPS/bodies"
-      - name: Fetch & validate (required)
-        id: req
-        shell: bash
-        run: |
-          set -euo pipefail
-          STATUS=ok; REASON=""; OK_COUNT=0; FAIL_COUNT=0
-          fetch_one () {
-            local f="$1"
-            local url="${BASE}/wp-json/${NS}/snap?file=${f}"
-            local h="${OPS}/headers/${f}.hdr"
-            local b="${OPS}/bodies/${f}.json"
-            echo "GET $url"
-            if ! curl -A "$UA" -fsS --retry 2 --retry-delay 2 --retry-connrefused --connect-timeout 10 --max-time 30 -D "$h" "$url" -o "$b"; then
-              echo "::error::curl failed for $f"; return 1
-            fi
-            local code ct
-            code=$(awk 'NR==1{print $2}' "$h")
-            ct=$(awk -F': ' 'BEGIN{IGNORECASE=1} tolower($1)=="content-type"{print tolower($2)}' "$h" | tr -d '\r')
-            if [ "${code:-}" != "200" ]; then echo "::error::HTTP ${code:-?} for $f"; return 1; fi
-            if ! jq -e type "$b" >/dev/null 2>&1; then echo "::error::invalid JSON for $f"; return 1; fi
-            return 0
-          }
-          while read -r f; do [ -z "$f" ] && continue; if fetch_one "$f"; then OK_COUNT=$((OK_COUNT+1)); else FAIL_COUNT=$((FAIL_COUNT+1)); fi; done <<< "$REQUIRED"
-          if [ "$OK_COUNT -ge 2" ]; then echo "required_ok=true" >> "$GITHUB_OUTPUT"; else echo "required_ok=false" >> "$GITHUB_OUTPUT"; STATUS=bad; REASON="required set insufficient (ok=$OK_COUNT, fail=$FAIL_COUNT)"; fi
-          echo "status=$STATUS" >> "$GITHUB_OUTPUT"; echo "reason=$REASON" >> "$GITHUB_OUTPUT"
-      - name: Fetch & validate (optional, non-blocking)
-        if: ${{ steps.req.outputs.required_ok == 'true' }}
-        shell: bash
-        run: |
-          set -euo pipefail
-          fetch_opt () {
-            local f="$1"; local url="${BASE}/wp-json/${NS}/snap?file=${f}"; local h="${OPS}/headers/${f}.hdr"; local b="${OPS}/bodies/${f}.json"
-            echo "GET $url"
-            if curl -A "$UA" -fsS --retry 2 --retry-delay 2 --retry-connrefused --connect-timeout 10 --max-time 30 -D "$h" "$url" -o "$b"; then
-              jq -e type "$b" >/dev/null 2>&1 || echo "::warning::optional invalid JSON for $f"
-            else
-              echo "::warning::optional fetch failed for $f"
-            fi
-          }
-          while read -r f; do [ -z "$f" ] && continue; fetch_opt "$f"; done <<< "$OPTIONAL"
-      - name: Upload artifacts
-        uses: actions/upload-artifact@v4
-        with:
-          name: snapshot-watchdog-${{ github.run_id }}
-          path: ops-snapshot-watchdog/**
-          retention-days: 7
-      - name: Create Issue on failure
-        if: ${{ steps.req.outputs.status != 'ok' }}
-        uses: actions/github-script@v7
-        with:
-          script: |
-            const fs = require('fs');
-            const status = '${{ steps.req.outputs.status }}';
-            const reason = `${{ toJson(steps.req.outputs.reason) }}`;
-            const urlRun = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
-            const files = ['manifest.json','files_000.json','gh-digest.json','index.json','bundle.json'];
-            let body = `Watchdog **${status.toUpperCase()}**\n\nReason: ${reason}\n\nRun: ${urlRun}\n\n`;
-            for (const f of files) {
-              try {
-                const h = fs.readFileSync(`ops-snapshot-watchdog/headers/${f}.hdr`, 'utf8');
-                const b = fs.readFileSync(`ops-snapshot-watchdog/bodies/${f}.json`, 'utf8');
-                body += `### ${f}\n`;
-                body += `**Headers (first 600 chars)**\n\n\`\`\`\n${h.slice(0,600)}\n\`\`\`\n`;
-                body += `**Body (first 1000 chars)**\n\n\`\`\`json\n${b.slice(0,1000)}\n\`\`\`\n\n`;
-              } catch (e) {}
-            }
-            await github.rest.issues.create({
-              owner: context.repo.owner,
-              repo: context.repo.repo,
-              title: `Snapshot watchdog: ${status.toUpperCase()} (${context.runNumber})`,
-              body
-            });
-      - name: Final gate
-        run: |
-          set -euo pipefail
-          if [ "${{ steps.req.outputs.status }}" != "ok" ]; then
-            echo "::error::Snapshot watchdog failed (endpoint/content problem)."
-            exit 1
-          fi
-          echo "Watchdog OK."
+name: Snapshot Watchdog
+on:
+  schedule:
+    - cron: "*/30 * * * *"
+  workflow_dispatch: {}
+permissions:
+  contents: read
+  issues: write
+concurrency:
+  group: snapshot-watchdog
+  cancel-in-progress: true
+env:
+  BASE: https://weektoppick.com
+  OPS: ops-snapshot-watchdog
+  UA: WTP-Watchdog/1.0 (+https://weektoppick.com)
+  REQUIRED: |
+    manifest.json
+    files_000.json
+    gh-digest.json
+  OPTIONAL: |
+    index.json
+    bundle.json
+jobs:
+  watchdog:
+    runs-on: ubuntu-latest
+    timeout-minutes: 15
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+      - name: Tools
+        run: |
+          sudo apt-get update -y
+          sudo apt-get install -y jq curl
+      - name: Prepare
+        run: mkdir -p "$OPS/headers" "$OPS/bodies"
+      - name: Fetch & validate (prefer /open, fallback)
+        id: req
+        shell: bash
+        run: |
+          set -euo pipefail
+          STATUS=ok; REASON=""; OK=0; FAIL=0
+          get_url () { local f="$1"; echo "${BASE}/wp-json/wtp-ro-open/v1/get?file=${f}&site_key=5Depft8Y9LU0t6Sv"; }
+          fetch_one () {
+            local f="$1"; local url; url="$(get_url "$f")"
+            local h="${OPS}/headers/${f}.hdr"; local b="${OPS}/bodies/${f}.json"
+            echo "GET $url"
+            if ! curl -A "$UA" -fsS --retry 2 --retry-delay 2 --retry-connrefused --connect-timeout 10 --max-time 30 -D "$h" "$url" -o "$b"; then
+              echo "::error::curl failed for $f"; return 1; fi
+            local code; code=$(awk 'NR==1{print $2}' "$h")
+            if [ "${code:-}" != "200" ]; then echo "::error::HTTP ${code:-?} for $f"; return 1; fi
+            if ! jq -e type "$b" >/dev/null 2>&1; then echo "::error::invalid JSON for $f"; return 1; fi
+            return 0
+          }
+          while read -r f; do [ -z "$f" ] && continue; if fetch_one "$f"; then OK=$((OK+1)); else FAIL=$((FAIL+1)); fi; done <<< "$REQUIRED"
+          if [ "$OK" -lt 2 ]; then STATUS=bad; REASON="required set insufficient (ok=$OK, fail=$FAIL)"; fi
+          echo "status=$STATUS" >> "$GITHUB_OUTPUT"; echo "reason=$REASON" >> "$GITHUB_OUTPUT"
+      - name: Optional files (soft)
+        if: ${{ steps.req.outputs.status == 'ok' }}
+        shell: bash
+        run: |
+          set -euo pipefail
+          get_url () { local f="$1"; echo "${BASE}/wp-json/wtp-ro-open/v1/get?file=${f}&site_key=5Depft8Y9LU0t6Sv"; }
+          while read -r f; do [ -z "$f" ] && continue; url="$(get_url "$f")"; h="${OPS}/headers/${f}.hdr"; b="${OPS}/bodies/${f}.json"; curl -A "$UA" -fsS -D "$h" "$url" -o "$b" || true; done <<< "$OPTIONAL"
+      - name: Upload artifacts
+        uses: actions/upload-artifact@v4
+        with:
+          name: snapshot-watchdog-${{ github.run_id }}
+          path: ops-snapshot-watchdog/**
+          retention-days: 7
+      - name: Create Issue on failure
+        if: ${{ steps.req.outputs.status != 'ok' }}
+        uses: actions/github-script@v7
+        with:
+          script: |
+            const fs = require('fs');
+            const status = '${{ steps.req.outputs.status }}';
+            const reason = `${{ toJson(steps.req.outputs.reason) }}`;
+            const urlRun = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
+            const files = ['manifest.json','files_000.json','gh-digest.json','index.json','bundle.json'];
+            let body = `Watchdog **${status.toUpperCase()}**\n\nReason: ${reason}\n\nRun: ${urlRun}\n\n`;
+            for (const f of files) {
+              try {
+                const h = fs.readFileSync(`ops-snapshot-watchdog/headers/${f}.hdr`, 'utf8');
+                const b = fs.readFileSync(`ops-snapshot-watchdog/bodies/${f}.json`, 'utf8');
+                body += `### ${f}\n**Headers (first 600 chars)**\n\n\`\`\`\n${h.slice(0,600)}\n\`\`\`\n**Body (first 1000 chars)**\n\n\`\`\`json\n${b.slice(0,1000)}\n\`\`\`\n\n`;
+              } catch (e) {}
+            }
+            await github.rest.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: `Snapshot watchdog: ${status.toUpperCase()} (${context.runNumber})`, body });
+      - name: Final gate
+        run: |
+          set -euo pipefail
+          if [ "${{ steps.req.outputs.status }}" != "ok" ]; then
+            echo "::error::Snapshot watchdog failed (endpoint/content problem)."; exit 1
+          fi
+          echo "Watchdog OK."
