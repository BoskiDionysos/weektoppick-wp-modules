name: "Pipeline deploy + wpcli"

on:
  workflow_dispatch:

permissions:
  contents: write   # commit logów do repo + odczyt kodu

env:
  HOST:   ${{ secrets.DEPLOY_HOST }}
  PORT:   ${{ secrets.DEPLOY_PORT }}
  USER:   ${{ secrets.DEPLOY_USER }}
  PASS:   ${{ secrets.DEPLOY_PASS }}
  TARGET: ${{ secrets.DEPLOY_TARGET }}

jobs:
  pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y sshpass rsync jq

      - name: Sanity of env (masked)
        run: |
          set -euo pipefail
          echo "HOST set: $([ -n "${HOST:-}" ] && echo yes || echo no)"
          echo "PORT set: $([ -n "${PORT:-}" ] && echo yes || echo no)"
          echo "USER set: $([ -n "${USER:-}" ] && echo yes || echo no)"
          echo "TARGET set: $([ -n "${TARGET:-}" ] && echo yes || echo no)"

      - name: Build rsync exclude from protected-plugins.txt
        run: |
          set -euo pipefail
          mkdir -p .wtp
          : > .wtp/rsync-exclude.txt
          if [ -f .wtp/protected-plugins.txt ]; then
            # czyść komentarze i puste linie, generuj reguły rsync
            sed -e 's/\r$//' .wtp/protected-plugins.txt \
            | sed 's/#.*$//' \
            | xargs -I{} echo "wp-content/plugins/{}/***" \
            >> .wtp/rsync-exclude.txt
          fi
          echo ".git/***" >> .wtp/rsync-exclude.txt

      - name: Rsync deploy
        run: |
          set -euo pipefail
          test -n "${TARGET:-}" || { echo "::error::DEPLOY_TARGET not set"; exit 1; }
          sshpass -p "$PASS" rsync -az --delete \
            --exclude-from=".wtp/rsync-exclude.txt" \
            -e "ssh -p ${PORT} -o StrictHostKeyChecking=no" \
            ./ "${USER}@${HOST}:${TARGET}/"

      - name: WP-CLI allowed plugins install update (remote)
        run: |
          set -euo pipefail
          sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "${USER}@${HOST}" bash -se <<'BASH'
            set -euo pipefail
            cd "$TARGET"

            # katalog na logi
            mkdir -p .wtp/state/ci_logs
            INST=".wtp/state/ci_logs/plugins_installed.txt"
            UPD=".wtp/state/ci_logs/plugins_updated.txt"
            EXIST=".wtp/state/ci_logs/plugins_existing.txt"
            : > "$INST"; : > "$UPD"; : > "$EXIST"

            # tymczasowo „rozbrojenie” blokad (jeśli istnieją w mu-plugins)
            LOCKS_TMP="/tmp/wtp_locks_backup_$$"
            mkdir -p "$LOCKS_TMP"
            if [ -d wp-content/mu-plugins ]; then
              # przenieś wszystko co wygląda na „locks”
              find wp-content/mu-plugins -maxdepth 1 -type f -iname "*lock*" -print0 | while IFS= read -r -d '' f; do
                mv "$f" "$LOCKS_TMP"/
              done
            fi

            cleanup() {
              # przywróć pliki locks
              if [ -d "$LOCKS_TMP" ]; then
                find "$LOCKS_TMP" -maxdepth 1 -type f -print0 | while IFS= read -r -d '' f; do
                  mv "$f" wp-content/mu-plugins/
                done
              fi
            }
            trap cleanup EXIT

            export WP_ALLOW_ROOT=1
            WP="php ./wp --skip-plugins --skip-themes --path=$(pwd)"

            LIST=".wtp/allowed-plugins.txt"
            if [ ! -f "$LIST" ]; then
              echo "::warning::$LIST not found, nothing to install"
              exit 0
            fi

            # normalizacja CRLF/BOM i usunięcie komentarzy
            TMP=".wtp/allowed-plugins.norm"
            sed -e 's/\r$//' "$LIST" | sed 's/^\xEF\xBB\xBF//' \
              | sed 's/#.*$//' | sed '/^[[:space:]]*$/d' > "$TMP"

            while IFS= read -r line; do
              slug="${line%@*}"
              ver="${line#*@}"
              [ "$slug" = "$ver" ] && ver=""

              if $WP plugin is-installed "$slug" >/dev/null 2>&1; then
                if [ -n "$ver" ]; then
                  $WP plugin update "$slug" --version="$ver" --activate && echo "$slug@$ver" >> "$UPD"
                else
                  $WP plugin update "$slug" --activate && echo "$slug" >> "$UPD"
                fi
              else
                if [ -n "$ver" ]; then
                  $WP plugin install "$slug" --version="$ver" --activate && echo "$slug@$ver" >> "$INST"
                else
                  $WP plugin install "$slug" --activate && echo "$slug" >> "$INST"
                fi
              fi

              $WP plugin is-installed "$slug" && echo "$slug" >> "$EXIST" || true
            done < "$TMP"

            echo "=== Active plugins ==="
            $WP plugin list --status=active || true
          BASH

      - name: Pull remote CI logs to runner
        run: |
          set -euo pipefail
          mkdir -p _ci_logs
          sshpass -p "$PASS" scp -P "$PORT" -o StrictHostKeyChecking=no \
            -r "${USER}@${HOST}:${TARGET}/.wtp/state/ci_logs/." _ci_logs/ || true
          ls -la _ci_logs || true

      - name: Upload logs as artifact
        uses: actions/upload-artifact@v4
        with:
          name: ci_logs-${{ github.run_id }}
          path: _ci_logs

      - name: Commit logs into repo
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "ci-logs(run ${{ github.run_id }})"
          file_pattern: "_ci_logs/**"

      - name: Done
        run: echo "Pipeline finished."
