name: Manifest (build & commit)

on:
  workflow_dispatch:
  push:
    paths:
      - 'plugins/**'
      - '.github/workflows/manifest.yml'
  schedule:
    - cron: '7 5 * * *'   # codziennie 05:07 UTC

permissions:
  contents: write
  issues: write

env:
  RAW_BASE: https://raw.githubusercontent.com/${{ github.repository }}/main
  DIST_DIR: dist
  MANIFEST_FILE: manifest.json

jobs:
  build-manifest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout (no GITHUB_TOKEN creds)
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Require WTP_GITHUB_PAT and set remote
        env:
          WTP_PAT: ${{ secrets.WTP_GITHUB_PAT }}
        run: |
          set -euo pipefail
          if [ -z "${WTP_PAT:-}" ]; then
            echo "::error::Missing secret WTP_GITHUB_PAT"; exit 1
          fi
          git config user.name  "wtp-bot"
          git config user.email "wtp-bot@weektoppick.com"
          git remote set-url origin "https://x-access-token:${WTP_PAT}@github.com/${{ github.repository }}"

      - name: Ensure tools
        run: |
          sudo apt-get update -y
          sudo apt-get install -y jq zip

      - name: Build dist zips
        run: |
          set -euo pipefail
          rm -rf "$DIST_DIR"
          mkdir -p "$DIST_DIR"
          if [ -d plugins ]; then
            for d in plugins/*; do
              [ -d "$d" ] || continue
              slug="$(basename "$d")"
              zip -rq "$DIST_DIR/${slug}.zip" "$d"
            done
          fi

      - name: Build manifest.json (hash-based)
        run: |
          set -euo pipefail
          plugins_json="[]"
          if compgen -G "$DIST_DIR/*.zip" > /dev/null; then
            arr="["
            first=1
            for z in $DIST_DIR/*.zip; do
              slug=$(basename "$z" .zip)
              sha=$(sha256sum "$z" | awk '{print $1}')
              url="${RAW_BASE}/$DIST_DIR/${slug}.zip"
              item=$(jq -n --arg name "$slug" --arg url "$url" --arg ver "${sha:0:7}" \
                    '{name:$name, url:$url, version:$ver}')
              if [ $first -eq 1 ]; then arr="$arr$item"; first=0; else arr="$arr,$item"; fi
            done
            arr="$arr]"
            plugins_json="$arr"
          fi
          jq -n --argjson p "$plugins_json" '{plugins:$p}' > "$MANIFEST_FILE"
          jq . "$MANIFEST_FILE" | sed -n '1,120p'

      - name: Commit & push (only if changed)
        run: |
          set -e
          git add -A
          if ! git diff --cached --quiet; then
            git commit -m "auto: build dist & manifest"
            git push origin HEAD:main
          else
            echo "No changes to commit."
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: manifest-dist
          path: |
            dist/**
            manifest.json
          retention-days: 7

      - name: Create Issue on failure (summary)
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const body = `Manifest job failed.\nRun: ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Manifest failed (run #${context.runNumber})`,
              body
            });

      - name: Auto-close previous failure issues
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const titlePrefix = "❌ Manifest failed";
            const issues = await github.paginate(
              github.rest.issues.listForRepo,
              { owner, repo, state: "open" }
            );
            const failures = issues.filter(i => i.title.startsWith(titlePrefix));
            for (const i of failures) {
              await github.rest.issues.createComment({
                owner, repo, issue_number: i.number,
                body: `✅ Fixed by successful run #${context.runNumber}: ${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`
              });
              await github.rest.issues.update({
                owner, repo, issue_number: i.number, state: "closed"
              });
            }
