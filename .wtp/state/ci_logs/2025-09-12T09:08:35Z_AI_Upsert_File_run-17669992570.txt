Workflow: AI Upsert File
Run ID:   17669992570
Event:    workflow_dispatch
Status:   failure
Commit:   60b67cd2ca74424a1b93f95760c4f6236e70aefb
----- CONCATENATED JOB LOGS -----

==== .wtp/state/ci_logs/2025-09-12T09:08:35Z_AI_Upsert_File_run-17669992570/0_upsert.txt ====
﻿2025-09-12T09:08:31.3242850Z Current runner version: '2.328.0'
2025-09-12T09:08:31.3265594Z ##[group]Runner Image Provisioner
2025-09-12T09:08:31.3266422Z Hosted Compute Agent
2025-09-12T09:08:31.3267064Z Version: 20250829.383
2025-09-12T09:08:31.3267679Z Commit: 27cb235aab5b0e52e153a26cd86b4742e89dac5d
2025-09-12T09:08:31.3268338Z Build Date: 2025-08-29T13:48:48Z
2025-09-12T09:08:31.3269000Z ##[endgroup]
2025-09-12T09:08:31.3269571Z ##[group]Operating System
2025-09-12T09:08:31.3270136Z Ubuntu
2025-09-12T09:08:31.3270664Z 24.04.3
2025-09-12T09:08:31.3271096Z LTS
2025-09-12T09:08:31.3271577Z ##[endgroup]
2025-09-12T09:08:31.3272113Z ##[group]Runner Image
2025-09-12T09:08:31.3272711Z Image: ubuntu-24.04
2025-09-12T09:08:31.3273542Z Version: 20250907.24.1
2025-09-12T09:08:31.3274681Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250907.24/images/ubuntu/Ubuntu2404-Readme.md
2025-09-12T09:08:31.3276193Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250907.24
2025-09-12T09:08:31.3277200Z ##[endgroup]
2025-09-12T09:08:31.3278222Z ##[group]GITHUB_TOKEN Permissions
2025-09-12T09:08:31.3280310Z Contents: write
2025-09-12T09:08:31.3280892Z Metadata: read
2025-09-12T09:08:31.3281370Z ##[endgroup]
2025-09-12T09:08:31.3283660Z Secret source: Actions
2025-09-12T09:08:31.3284406Z Prepare workflow directory
2025-09-12T09:08:31.3607464Z Prepare all required actions
2025-09-12T09:08:31.3645969Z Getting action download info
2025-09-12T09:08:31.7289155Z Download action repository 'actions/github-script@v7' (SHA:f28e40c7f34bde8b3046d885e986cb6290c5673b)
2025-09-12T09:08:32.5057741Z Complete job name: upsert
2025-09-12T09:08:32.5800677Z ##[group]Run actions/github-script@v7
2025-09-12T09:08:32.5801538Z with:
2025-09-12T09:08:32.5802159Z   github-token: ***
2025-09-12T09:08:32.5815896Z   script: const crypto = require('crypto');
const ev = context.eventName;

let path = '', message = '', branch = 'main', content_b64 = '', content_plain = '', sha256 = '';

if (ev === 'workflow_dispatch') {
  const inp = context.payload?.inputs || {};
  path          = (inp.path || '').trim();
  message       = (inp.message || '').trim();
  branch        = (inp.branch || 'main').trim();
  content_b64   = (inp.content_b64 || '').trim();
  content_plain = (inp.content_plain || '').trim();
  sha256        = (inp.sha256 || '').trim().toLowerCase();
} else if (ev === 'repository_dispatch') {
  const p = context.payload?.client_payload || {};
  path          = (p.path || '').trim();
  message       = (p.message || '').trim();
  branch        = (p.branch || 'main').trim();
  content_b64   = (p.content_b64 || '').trim();
  content_plain = (p.content_plain || '').trim();
  sha256        = (p.sha256 || '').trim().toLowerCase();
} else {
  core.setFailed(`Unsupported event: ${ev}`); return;
}

core.info(`event=${ev}`);
core.info(`path="${path}", branch="${branch}"`);
core.info(`has_plain=${content_plain !== ''}, has_b64=${content_b64 !== ''}`);

if (!path)    return core.setFailed('Input "path" is required.');
if (!message) return core.setFailed('Input "message" is required.');
if (path.startsWith('/')) return core.setFailed('Path musi być repo-relative (bez wiodącego "/").');

const both = (content_plain !== '' && content_b64 !== '');
const none = (content_plain === '' && content_b64 === '');
if (both || none) return core.setFailed('Podaj dokładnie jedno: content_plain ALBO content_b64.');

let buf;
if (content_b64) {
  try { buf = Buffer.from(content_b64, 'base64'); if (buf.toString('base64') !== content_b64) throw 0; }
  catch { return core.setFailed('content_b64 nie jest prawidłowym Base64.'); }
} else {
  buf = Buffer.from(content_plain, 'utf8');
  content_b64 = buf.toString('base64');
}

if (sha256) {
  const calc = crypto.createHash('sha256').update(buf).digest('hex');
  core.info(`sha256(user)=${sha256}`);
  core.info(`sha256(calc)=${calc}`);
  if (calc !== sha256) return core.setFailed('SHA-256 mismatch treści.');
}

const { owner, repo } = context.repo;

// read existing sha if any
let sha;
try {
  const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, ref: branch,
  });
  sha = data?.sha || undefined;
  core.info(`Existing sha=${sha || '(new file)'}`);
} catch (e) {
  if (e.status !== 404) return core.setFailed(`getContent failed: ${e.message}`);
  core.info('File does not exist (creating).');
}

try {
  const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, message, branch, content: content_b64, sha
  });
  const commitSha = res.data.commit?.sha || '';
  await core.summary
    .addHeading('AI Upsert File')
    .addTable([
      [{data:'Field',header:true},{data:'Value',header:true}],
      ['path', path],
      ['branch', branch],
      ['commit', commitSha],
      ['verified_sha256', sha256 ? 'yes' : 'no']
    ])
    .write();
  core.info(`OK: commit ${commitSha}`);
} catch (e) {
  core.setFailed(`PUT failed: ${e.message}`);
}

2025-09-12T09:08:32.5829770Z   debug: false
2025-09-12T09:08:32.5830182Z   user-agent: actions/github-script
2025-09-12T09:08:32.5830671Z   result-encoding: json
2025-09-12T09:08:32.5831068Z   retries: 0
2025-09-12T09:08:32.5831492Z   retry-exempt-status-codes: 400,401,403,404,422
2025-09-12T09:08:32.5832373Z ##[endgroup]
2025-09-12T09:08:32.6756258Z event=workflow_dispatch
2025-09-12T09:08:32.6757335Z path=".github/workflows/deploy-site.yml", branch="main"
2025-09-12T09:08:32.6758034Z has_plain=false, has_b64=true
2025-09-12T09:08:32.6788749Z ##[error]content_b64 nie jest prawidłowym Base64.
2025-09-12T09:08:32.6909332Z Cleaning up orphan processes

==== .wtp/state/ci_logs/2025-09-12T09:08:35Z_AI_Upsert_File_run-17669992570/upsert/1_Set up job.txt ====
﻿2025-09-12T09:08:31.3242028Z Current runner version: '2.328.0'
2025-09-12T09:08:31.3265569Z ##[group]Runner Image Provisioner
2025-09-12T09:08:31.3266417Z Hosted Compute Agent
2025-09-12T09:08:31.3267060Z Version: 20250829.383
2025-09-12T09:08:31.3267676Z Commit: 27cb235aab5b0e52e153a26cd86b4742e89dac5d
2025-09-12T09:08:31.3268335Z Build Date: 2025-08-29T13:48:48Z
2025-09-12T09:08:31.3268997Z ##[endgroup]
2025-09-12T09:08:31.3269568Z ##[group]Operating System
2025-09-12T09:08:31.3270133Z Ubuntu
2025-09-12T09:08:31.3270661Z 24.04.3
2025-09-12T09:08:31.3271093Z LTS
2025-09-12T09:08:31.3271573Z ##[endgroup]
2025-09-12T09:08:31.3272109Z ##[group]Runner Image
2025-09-12T09:08:31.3272707Z Image: ubuntu-24.04
2025-09-12T09:08:31.3273531Z Version: 20250907.24.1
2025-09-12T09:08:31.3274625Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250907.24/images/ubuntu/Ubuntu2404-Readme.md
2025-09-12T09:08:31.3276014Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250907.24
2025-09-12T09:08:31.3277197Z ##[endgroup]
2025-09-12T09:08:31.3278218Z ##[group]GITHUB_TOKEN Permissions
2025-09-12T09:08:31.3280290Z Contents: write
2025-09-12T09:08:31.3280888Z Metadata: read
2025-09-12T09:08:31.3281367Z ##[endgroup]
2025-09-12T09:08:31.3283639Z Secret source: Actions
2025-09-12T09:08:31.3284402Z Prepare workflow directory
2025-09-12T09:08:31.3607438Z Prepare all required actions
2025-09-12T09:08:31.3645944Z Getting action download info
2025-09-12T09:08:31.7289120Z Download action repository 'actions/github-script@v7' (SHA:f28e40c7f34bde8b3046d885e986cb6290c5673b)
2025-09-12T09:08:32.5057710Z Complete job name: upsert

==== .wtp/state/ci_logs/2025-09-12T09:08:35Z_AI_Upsert_File_run-17669992570/upsert/2_Upsert file (UI or repository_dispatch).txt ====
﻿2025-09-12T09:08:32.5800652Z ##[group]Run actions/github-script@v7
2025-09-12T09:08:32.5801531Z with:
2025-09-12T09:08:32.5802156Z   github-token: ***
2025-09-12T09:08:32.5815544Z   script: const crypto = require('crypto');
const ev = context.eventName;

let path = '', message = '', branch = 'main', content_b64 = '', content_plain = '', sha256 = '';

if (ev === 'workflow_dispatch') {
  const inp = context.payload?.inputs || {};
  path          = (inp.path || '').trim();
  message       = (inp.message || '').trim();
  branch        = (inp.branch || 'main').trim();
  content_b64   = (inp.content_b64 || '').trim();
  content_plain = (inp.content_plain || '').trim();
  sha256        = (inp.sha256 || '').trim().toLowerCase();
} else if (ev === 'repository_dispatch') {
  const p = context.payload?.client_payload || {};
  path          = (p.path || '').trim();
  message       = (p.message || '').trim();
  branch        = (p.branch || 'main').trim();
  content_b64   = (p.content_b64 || '').trim();
  content_plain = (p.content_plain || '').trim();
  sha256        = (p.sha256 || '').trim().toLowerCase();
} else {
  core.setFailed(`Unsupported event: ${ev}`); return;
}

core.info(`event=${ev}`);
core.info(`path="${path}", branch="${branch}"`);
core.info(`has_plain=${content_plain !== ''}, has_b64=${content_b64 !== ''}`);

if (!path)    return core.setFailed('Input "path" is required.');
if (!message) return core.setFailed('Input "message" is required.');
if (path.startsWith('/')) return core.setFailed('Path musi być repo-relative (bez wiodącego "/").');

const both = (content_plain !== '' && content_b64 !== '');
const none = (content_plain === '' && content_b64 === '');
if (both || none) return core.setFailed('Podaj dokładnie jedno: content_plain ALBO content_b64.');

let buf;
if (content_b64) {
  try { buf = Buffer.from(content_b64, 'base64'); if (buf.toString('base64') !== content_b64) throw 0; }
  catch { return core.setFailed('content_b64 nie jest prawidłowym Base64.'); }
} else {
  buf = Buffer.from(content_plain, 'utf8');
  content_b64 = buf.toString('base64');
}

if (sha256) {
  const calc = crypto.createHash('sha256').update(buf).digest('hex');
  core.info(`sha256(user)=${sha256}`);
  core.info(`sha256(calc)=${calc}`);
  if (calc !== sha256) return core.setFailed('SHA-256 mismatch treści.');
}

const { owner, repo } = context.repo;

// read existing sha if any
let sha;
try {
  const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, ref: branch,
  });
  sha = data?.sha || undefined;
  core.info(`Existing sha=${sha || '(new file)'}`);
} catch (e) {
  if (e.status !== 404) return core.setFailed(`getContent failed: ${e.message}`);
  core.info('File does not exist (creating).');
}

try {
  const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, message, branch, content: content_b64, sha
  });
  const commitSha = res.data.commit?.sha || '';
  await core.summary
    .addHeading('AI Upsert File')
    .addTable([
      [{data:'Field',header:true},{data:'Value',header:true}],
      ['path', path],
      ['branch', branch],
      ['commit', commitSha],
      ['verified_sha256', sha256 ? 'yes' : 'no']
    ])
    .write();
  core.info(`OK: commit ${commitSha}`);
} catch (e) {
  core.setFailed(`PUT failed: ${e.message}`);
}

2025-09-12T09:08:32.5829762Z   debug: false
2025-09-12T09:08:32.5830179Z   user-agent: actions/github-script
2025-09-12T09:08:32.5830668Z   result-encoding: json
2025-09-12T09:08:32.5831065Z   retries: 0
2025-09-12T09:08:32.5831489Z   retry-exempt-status-codes: 400,401,403,404,422
2025-09-12T09:08:32.5832358Z ##[endgroup]
2025-09-12T09:08:32.6756202Z event=workflow_dispatch
2025-09-12T09:08:32.6757316Z path=".github/workflows/deploy-site.yml", branch="main"
2025-09-12T09:08:32.6758030Z has_plain=false, has_b64=true
2025-09-12T09:08:32.6788724Z ##[error]content_b64 nie jest prawidłowym Base64.

==== .wtp/state/ci_logs/2025-09-12T09:08:35Z_AI_Upsert_File_run-17669992570/upsert/3_Complete job.txt ====
﻿2025-09-12T09:08:32.6909317Z Cleaning up orphan processes

==== .wtp/state/ci_logs/2025-09-12T09:08:35Z_AI_Upsert_File_run-17669992570/upsert/system.txt ====
2025-09-12T09:08:27.1550000Z Requested labels: ubuntu-latest
2025-09-12T09:08:27.1550000Z Job defined at: BoskiDionysos/weektoppick-wp-modules/.github/workflows/ai-upsert-file.yml@refs/heads/main
2025-09-12T09:08:27.1550000Z Waiting for a runner to pick up this job...
2025-09-12T09:08:27.6560000Z Job is waiting for a hosted runner to come online.
2025-09-12T09:08:27.6560000Z Job is about to start running on the hosted runner: GitHub Actions 1000002026