Workflow: AI Upsert File
Run ID:   17669522469
Event:    workflow_dispatch
Status:   failure
Commit:   47b0d9e32266c5dc6a9e138e622dae7594f95352
----- CONCATENATED JOB LOGS -----

==== .wtp/state/ci_logs/2025-09-12T08:48:21Z_AI_Upsert_File_run-17669522469/0_upsert.txt ====
﻿2025-09-12T08:48:18.4536839Z Current runner version: '2.328.0'
2025-09-12T08:48:18.4574604Z ##[group]Runner Image Provisioner
2025-09-12T08:48:18.4576191Z Hosted Compute Agent
2025-09-12T08:48:18.4577197Z Version: 20250829.383
2025-09-12T08:48:18.4578212Z Commit: 27cb235aab5b0e52e153a26cd86b4742e89dac5d
2025-09-12T08:48:18.4579466Z Build Date: 2025-08-29T13:48:48Z
2025-09-12T08:48:18.4580434Z ##[endgroup]
2025-09-12T08:48:18.4581531Z ##[group]Operating System
2025-09-12T08:48:18.4582641Z Ubuntu
2025-09-12T08:48:18.4583387Z 24.04.3
2025-09-12T08:48:18.4584159Z LTS
2025-09-12T08:48:18.4585028Z ##[endgroup]
2025-09-12T08:48:18.4585761Z ##[group]Runner Image
2025-09-12T08:48:18.4586669Z Image: ubuntu-24.04
2025-09-12T08:48:18.4587629Z Version: 20250907.24.1
2025-09-12T08:48:18.4589286Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250907.24/images/ubuntu/Ubuntu2404-Readme.md
2025-09-12T08:48:18.4592350Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250907.24
2025-09-12T08:48:18.4594029Z ##[endgroup]
2025-09-12T08:48:18.4595806Z ##[group]GITHUB_TOKEN Permissions
2025-09-12T08:48:18.4598769Z Contents: write
2025-09-12T08:48:18.4599717Z Metadata: read
2025-09-12T08:48:18.4600542Z ##[endgroup]
2025-09-12T08:48:18.4603996Z Secret source: Actions
2025-09-12T08:48:18.4605224Z Prepare workflow directory
2025-09-12T08:48:18.5100377Z Prepare all required actions
2025-09-12T08:48:18.5159970Z Getting action download info
2025-09-12T08:48:18.7744774Z Download action repository 'actions/github-script@v7' (SHA:f28e40c7f34bde8b3046d885e986cb6290c5673b)
2025-09-12T08:48:19.2864942Z Complete job name: upsert
2025-09-12T08:48:19.3669788Z ##[group]Run actions/github-script@v7
2025-09-12T08:48:19.3670706Z with:
2025-09-12T08:48:19.3671593Z   github-token: ***
2025-09-12T08:48:19.3685029Z   script: const crypto = require('crypto');
const ev = context.eventName;

let path = '', message = '', branch = 'main', content_b64 = '', content_plain = '', sha256 = '';

if (ev === 'workflow_dispatch') {
  const inp = context.payload?.inputs || {};
  path          = (inp.path || '').trim();
  message       = (inp.message || '').trim();
  branch        = (inp.branch || 'main').trim();
  content_b64   = (inp.content_b64 || '').trim();
  content_plain = (inp.content_plain || '').trim();
  sha256        = (inp.sha256 || '').trim().toLowerCase();
} else if (ev === 'repository_dispatch') {
  const p = context.payload?.client_payload || {};
  path          = (p.path || '').trim();
  message       = (p.message || '').trim();
  branch        = (p.branch || 'main').trim();
  content_b64   = (p.content_b64 || '').trim();
  content_plain = (p.content_plain || '').trim();
  sha256        = (p.sha256 || '').trim().toLowerCase();
} else {
  core.setFailed(`Unsupported event: ${ev}`); return;
}

core.info(`event=${ev}`);
core.info(`path="${path}", branch="${branch}"`);
core.info(`has_plain=${content_plain !== ''}, has_b64=${content_b64 !== ''}`);

if (!path)    return core.setFailed('Input "path" is required.');
if (!message) return core.setFailed('Input "message" is required.');
if (path.startsWith('/')) return core.setFailed('Path musi być repo-relative (bez wiodącego "/").');

const both = (content_plain !== '' && content_b64 !== '');
const none = (content_plain === '' && content_b64 === '');
if (both || none) return core.setFailed('Podaj dokładnie jedno: content_plain ALBO content_b64.');

let buf;
if (content_b64) {
  try { buf = Buffer.from(content_b64, 'base64'); if (buf.toString('base64') !== content_b64) throw 0; }
  catch { return core.setFailed('content_b64 nie jest prawidłowym Base64.'); }
} else {
  buf = Buffer.from(content_plain, 'utf8');
  content_b64 = buf.toString('base64');
}

if (sha256) {
  const calc = crypto.createHash('sha256').update(buf).digest('hex');
  core.info(`sha256(user)=${sha256}`);
  core.info(`sha256(calc)=${calc}`);
  if (calc !== sha256) return core.setFailed('SHA-256 mismatch treści.');
}

const { owner, repo } = context.repo;

// read existing sha if any
let sha;
try {
  const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, ref: branch,
  });
  sha = data?.sha || undefined;
  core.info(`Existing sha=${sha || '(new file)'}`);
} catch (e) {
  if (e.status !== 404) return core.setFailed(`getContent failed: ${e.message}`);
  core.info('File does not exist (creating).');
}

try {
  const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, message, branch, content: content_b64, sha
  });
  const commitSha = res.data.commit?.sha || '';
  await core.summary
    .addHeading('AI Upsert File')
    .addTable([
      [{data:'Field',header:true},{data:'Value',header:true}],
      ['path', path],
      ['branch', branch],
      ['commit', commitSha],
      ['verified_sha256', sha256 ? 'yes' : 'no']
    ])
    .write();
  core.info(`OK: commit ${commitSha}`);
} catch (e) {
  core.setFailed(`PUT failed: ${e.message}`);
}

2025-09-12T08:48:19.3698944Z   debug: false
2025-09-12T08:48:19.3699383Z   user-agent: actions/github-script
2025-09-12T08:48:19.3699907Z   result-encoding: json
2025-09-12T08:48:19.3700327Z   retries: 0
2025-09-12T08:48:19.3700772Z   retry-exempt-status-codes: 400,401,403,404,422
2025-09-12T08:48:19.3701906Z ##[endgroup]
2025-09-12T08:48:19.4824085Z event=workflow_dispatch
2025-09-12T08:48:19.4825237Z path=".wtp/vendor-plugins/.gitkeep", branch="main"
2025-09-12T08:48:19.4826295Z has_plain=false, has_b64=false
2025-09-12T08:48:19.4868900Z ##[error]Podaj dokładnie jedno: content_plain ALBO content_b64.
2025-09-12T08:48:19.5035070Z Cleaning up orphan processes

==== .wtp/state/ci_logs/2025-09-12T08:48:21Z_AI_Upsert_File_run-17669522469/upsert/1_Set up job.txt ====
﻿2025-09-12T08:48:18.4536053Z Current runner version: '2.328.0'
2025-09-12T08:48:18.4574549Z ##[group]Runner Image Provisioner
2025-09-12T08:48:18.4576168Z Hosted Compute Agent
2025-09-12T08:48:18.4577176Z Version: 20250829.383
2025-09-12T08:48:18.4578192Z Commit: 27cb235aab5b0e52e153a26cd86b4742e89dac5d
2025-09-12T08:48:18.4579447Z Build Date: 2025-08-29T13:48:48Z
2025-09-12T08:48:18.4580420Z ##[endgroup]
2025-09-12T08:48:18.4581514Z ##[group]Operating System
2025-09-12T08:48:18.4582625Z Ubuntu
2025-09-12T08:48:18.4583375Z 24.04.3
2025-09-12T08:48:18.4584150Z LTS
2025-09-12T08:48:18.4585016Z ##[endgroup]
2025-09-12T08:48:18.4585755Z ##[group]Runner Image
2025-09-12T08:48:18.4586662Z Image: ubuntu-24.04
2025-09-12T08:48:18.4587619Z Version: 20250907.24.1
2025-09-12T08:48:18.4589276Z Included Software: https://github.com/actions/runner-images/blob/ubuntu24/20250907.24/images/ubuntu/Ubuntu2404-Readme.md
2025-09-12T08:48:18.4591942Z Image Release: https://github.com/actions/runner-images/releases/tag/ubuntu24%2F20250907.24
2025-09-12T08:48:18.4594019Z ##[endgroup]
2025-09-12T08:48:18.4595789Z ##[group]GITHUB_TOKEN Permissions
2025-09-12T08:48:18.4598743Z Contents: write
2025-09-12T08:48:18.4599706Z Metadata: read
2025-09-12T08:48:18.4600534Z ##[endgroup]
2025-09-12T08:48:18.4603972Z Secret source: Actions
2025-09-12T08:48:18.4605207Z Prepare workflow directory
2025-09-12T08:48:18.5100324Z Prepare all required actions
2025-09-12T08:48:18.5159906Z Getting action download info
2025-09-12T08:48:18.7744734Z Download action repository 'actions/github-script@v7' (SHA:f28e40c7f34bde8b3046d885e986cb6290c5673b)
2025-09-12T08:48:19.2864886Z Complete job name: upsert

==== .wtp/state/ci_logs/2025-09-12T08:48:21Z_AI_Upsert_File_run-17669522469/upsert/2_Upsert file (UI or repository_dispatch).txt ====
﻿2025-09-12T08:48:19.3669756Z ##[group]Run actions/github-script@v7
2025-09-12T08:48:19.3670699Z with:
2025-09-12T08:48:19.3671587Z   github-token: ***
2025-09-12T08:48:19.3684775Z   script: const crypto = require('crypto');
const ev = context.eventName;

let path = '', message = '', branch = 'main', content_b64 = '', content_plain = '', sha256 = '';

if (ev === 'workflow_dispatch') {
  const inp = context.payload?.inputs || {};
  path          = (inp.path || '').trim();
  message       = (inp.message || '').trim();
  branch        = (inp.branch || 'main').trim();
  content_b64   = (inp.content_b64 || '').trim();
  content_plain = (inp.content_plain || '').trim();
  sha256        = (inp.sha256 || '').trim().toLowerCase();
} else if (ev === 'repository_dispatch') {
  const p = context.payload?.client_payload || {};
  path          = (p.path || '').trim();
  message       = (p.message || '').trim();
  branch        = (p.branch || 'main').trim();
  content_b64   = (p.content_b64 || '').trim();
  content_plain = (p.content_plain || '').trim();
  sha256        = (p.sha256 || '').trim().toLowerCase();
} else {
  core.setFailed(`Unsupported event: ${ev}`); return;
}

core.info(`event=${ev}`);
core.info(`path="${path}", branch="${branch}"`);
core.info(`has_plain=${content_plain !== ''}, has_b64=${content_b64 !== ''}`);

if (!path)    return core.setFailed('Input "path" is required.');
if (!message) return core.setFailed('Input "message" is required.');
if (path.startsWith('/')) return core.setFailed('Path musi być repo-relative (bez wiodącego "/").');

const both = (content_plain !== '' && content_b64 !== '');
const none = (content_plain === '' && content_b64 === '');
if (both || none) return core.setFailed('Podaj dokładnie jedno: content_plain ALBO content_b64.');

let buf;
if (content_b64) {
  try { buf = Buffer.from(content_b64, 'base64'); if (buf.toString('base64') !== content_b64) throw 0; }
  catch { return core.setFailed('content_b64 nie jest prawidłowym Base64.'); }
} else {
  buf = Buffer.from(content_plain, 'utf8');
  content_b64 = buf.toString('base64');
}

if (sha256) {
  const calc = crypto.createHash('sha256').update(buf).digest('hex');
  core.info(`sha256(user)=${sha256}`);
  core.info(`sha256(calc)=${calc}`);
  if (calc !== sha256) return core.setFailed('SHA-256 mismatch treści.');
}

const { owner, repo } = context.repo;

// read existing sha if any
let sha;
try {
  const { data } = await github.request('GET /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, ref: branch,
  });
  sha = data?.sha || undefined;
  core.info(`Existing sha=${sha || '(new file)'}`);
} catch (e) {
  if (e.status !== 404) return core.setFailed(`getContent failed: ${e.message}`);
  core.info('File does not exist (creating).');
}

try {
  const res = await github.request('PUT /repos/{owner}/{repo}/contents/{path}', {
    owner, repo, path, message, branch, content: content_b64, sha
  });
  const commitSha = res.data.commit?.sha || '';
  await core.summary
    .addHeading('AI Upsert File')
    .addTable([
      [{data:'Field',header:true},{data:'Value',header:true}],
      ['path', path],
      ['branch', branch],
      ['commit', commitSha],
      ['verified_sha256', sha256 ? 'yes' : 'no']
    ])
    .write();
  core.info(`OK: commit ${commitSha}`);
} catch (e) {
  core.setFailed(`PUT failed: ${e.message}`);
}

2025-09-12T08:48:19.3698938Z   debug: false
2025-09-12T08:48:19.3699380Z   user-agent: actions/github-script
2025-09-12T08:48:19.3699904Z   result-encoding: json
2025-09-12T08:48:19.3700323Z   retries: 0
2025-09-12T08:48:19.3700769Z   retry-exempt-status-codes: 400,401,403,404,422
2025-09-12T08:48:19.3701890Z ##[endgroup]
2025-09-12T08:48:19.4823998Z event=workflow_dispatch
2025-09-12T08:48:19.4825219Z path=".wtp/vendor-plugins/.gitkeep", branch="main"
2025-09-12T08:48:19.4826285Z has_plain=false, has_b64=false
2025-09-12T08:48:19.4868833Z ##[error]Podaj dokładnie jedno: content_plain ALBO content_b64.

==== .wtp/state/ci_logs/2025-09-12T08:48:21Z_AI_Upsert_File_run-17669522469/upsert/3_Complete job.txt ====
﻿2025-09-12T08:48:19.5035033Z Cleaning up orphan processes

==== .wtp/state/ci_logs/2025-09-12T08:48:21Z_AI_Upsert_File_run-17669522469/upsert/system.txt ====
2025-09-12T08:48:15.6980000Z Requested labels: ubuntu-latest
2025-09-12T08:48:15.6980000Z Job defined at: BoskiDionysos/weektoppick-wp-modules/.github/workflows/ai-upsert-file.yml@refs/heads/main
2025-09-12T08:48:15.6980000Z Waiting for a runner to pick up this job...
2025-09-12T08:48:16.2040000Z Job is waiting for a hosted runner to come online.
2025-09-12T08:48:16.2040000Z Job is about to start running on the hosted runner: GitHub Actions 1000002023