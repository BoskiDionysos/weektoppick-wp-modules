diff --git a/.github/workflows/wtp-snapshot-sync.yml b/.github/workflows/wtp-snapshot-sync.yml
new file mode 100644
index 0000000..abcd123
--- /dev/null
+++ b/.github/workflows/wtp-snapshot-sync.yml
@@ -0,0 +1,180 @@
+name: WTP Snapshot Sync (rsync only)
+
+on:
+  workflow_dispatch:
+    inputs:
+      site_key:
+        description: "WTP site_key (uploads/wtp-ro/public/{site_key})"
+        required: false
+        default: "5Depft8Y9LU0t6Sv"
+  schedule:
+    - cron: "*/30 * * * *"
+
+concurrency:
+  group: wtp-snapshot-sync
+  cancel-in-progress: true
+
+jobs:
+  sync:
+    runs-on: ubuntu-latest
+    permissions:
+      contents: write
+    env:
+      HOST:   ${{ secrets.DEPLOY_HOST }}
+      PORT:   ${{ secrets.DEPLOY_PORT }}
+      USER:   ${{ secrets.DEPLOY_USER }}
+      PASS:   ${{ secrets.DEPLOY_PASS }}
+      TARGET: ${{ secrets.DEPLOY_TARGET }}
+
+    steps:
+      - name: Checkout
+        uses: actions/checkout@v4
+        with:
+          fetch-depth: 0
+
+      - name: Derive SITE_KEY and paths
+        id: vars
+        shell: bash
+        run: |
+          SITE_KEY="${{ github.event.inputs.site_key }}"
+          [ -z "$SITE_KEY" ] && SITE_KEY="5Depft8Y9LU0t6Sv"
+          OUT_DIR="snapshots/$SITE_KEY"
+          echo "SITE_KEY=$SITE_KEY"   >> "$GITHUB_OUTPUT"
+          echo "OUT_DIR=$OUT_DIR"     >> "$GITHUB_OUTPUT"
+
+      - name: Install tools
+        run: |
+          sudo apt-get update -y
+          sudo apt-get install -y rsync sshpass jq
+
+      - name: Ensure local folders
+        shell: bash
+        run: |
+          mkdir -p "${{ steps.vars.outputs.OUT_DIR }}"
+          mkdir -p runner
+
+      - name: Rsync snapshot from server (uploads/wtp-ro/public/{site_key})
+        shell: bash
+        run: |
+          set -euo pipefail
+          REMOTE_DIR="$TARGET/wp-content/uploads/wtp-ro/public/${{ steps.vars.outputs.SITE_KEY }}/"
+          # jeśli folder nie istnieje po stronie serwera, rsync zwróci błąd — zamieniamy go na czytelną informację
+          if ! sshpass -p "$PASS" ssh -p "$PORT" -o StrictHostKeyChecking=no "$USER@$HOST" "[ -d \"$REMOTE_DIR\" ]"; then
+            echo "::warning::Remote directory not found: $REMOTE_DIR"
+            echo '{}' > "${{ steps.vars.outputs.OUT_DIR }}/index.json" || true
+            exit 0
+          fi
+          # rsync pobiera WSZYSTKO z katalogu site_key
+          rsync -avz --delete \
+            -e "sshpass -p '$PASS' ssh -p $PORT -o StrictHostKeyChecking=no" \
+            "$USER@$HOST:$REMOTE_DIR" "${{ steps.vars.outputs.OUT_DIR }}/"
+
+      - name: Stamp runner metadata
+        shell: bash
+        run: |
+          set -e
+          NOW=$(date -u +%Y-%m-%dT%H:%M:%SZ)
+          printf '{"status":"ok","ts":"%s","commit_sha":"%s","summary":"Rsync snapshot for %s"}\n' \
+            "$NOW" "$GITHUB_SHA" "${{ steps.vars.outputs.SITE_KEY }}" \
+            > runner/runner_response.json
+          printf '{"logs":[{"ts":"%s","level":"info","step":"rsync","msg":"Synced %s"}]}\n' \
+            "$NOW" "${{ steps.vars.outputs.SITE_KEY }}" \
+            > runner/runner_logs.json
+          if [ -f runner/runner_health.json ]; then
+            jq --arg now "$NOW" '.last_snapshot_at=$now' runner/runner_health.json > runner/_tmp.json || cp runner/runner_health.json runner/_tmp.json
+            mv runner/_tmp.json runner/runner_health.json
+          else
+            printf '{"last_snapshot_at":"%s"}\n' "$NOW" > runner/runner_health.json
+          fi
+
+      - name: Commit & push (if changes)
+        shell: bash
+        run: |
+          set -e
+          git config user.name  "wtp-snapshot-bot"
+          git config user.email "wtp-snapshot-bot@users.noreply.github.com"
+          git add "snapshots/${{ steps.vars.outputs.SITE_KEY }}" runner/*.json
+          if git diff --cached --quiet; then
+            echo "No changes to commit."
+            exit 0
+          fi
+          git commit -m "snapshot: rsync sync ${{ steps.vars.outputs.SITE_KEY }}"
+          git push
+
+      - name: Summary
+        shell: bash
+        run: |
+          set -e
+          echo "Snapshot synced for site_key ${{ steps.vars.outputs.SITE_KEY }}"
