patch
diff --git a/.github/workflows/ai-upsert-file-v2.yml b/.github/workflows/ai-upsert-file-v2.yml
new file mode 100644
index 0000000..1111111
--- /dev/null
+++ b/.github/workflows/ai-upsert-file-v2.yml
@@
+name: AI Upsert File (v2)
+
+on:
+  repository_dispatch:
+    types: [ai-upsert-file]
+  workflow_dispatch:
+    inputs:
+      path:
+        description: 'Target repo path (e.g. mu-plugins/00-mu-safe-loader.php)'
+        required: true
+        default: ''
+      content_b64:
+        description: 'File content (base64)'
+        required: true
+        default: ''
+      message:
+        description: 'Commit message'
+        required: true
+        default: 'upsert via AI'
+      branch:
+        description: 'Target branch'
+        required: false
+        default: 'main'
+      sha256:
+        description: 'Optional SHA-256 (of decoded content) for verification'
+        required: false
+        default: ''
+
+permissions:
+  contents: write
+
+concurrency:
+  group: ai-upsert-file-v2
+  cancel-in-progress: true
+
+jobs:
+  upsert:
+    runs-on: ubuntu-latest
+    timeout-minutes: 10
+    env:
+      REPO: ${{ github.repository }}
+      GH_TOKEN: ${{ secrets.WTP_GITHUB_PAT || github.token }}
+    steps:
+      - name: Ensure tools
+        shell: bash
+        run: |
+          set -euo pipefail
+          sudo apt-get update -y
+          sudo apt-get install -y jq coreutils
+
+      - name: Read inputs/payload
+        id: inp
+        shell: bash
+        run: |
+          set -euo pipefail
+          EV="${GITHUB_EVENT_NAME}"
+          if [[ "$EV" == "repository_dispatch" ]]; then
+            PATH_IN=$(jq -r '.client_payload.path // empty' "$GITHUB_EVENT_PATH")
+            CONTENT_B64=$(jq -r '.client_payload.content_b64 // empty' "$GITHUB_EVENT_PATH")
+            MESSAGE=$(jq -r '.client_payload.message // "upsert via AI"' "$GITHUB_EVENT_PATH")
+            BRANCH=$(jq -r '.client_payload.branch // "main"' "$GITHUB_EVENT_PATH")
+            SHA256=$(jq -r '.client_payload.sha256 // empty' "$GITHUB_EVENT_PATH")
+          else
+            PATH_IN="${{ inputs.path }}"
+            CONTENT_B64="${{ inputs.content_b64 }}"
+            MESSAGE="${{ inputs.message }}"
+            BRANCH="${{ inputs.branch }}"
+            SHA256="${{ inputs.sha256 }}"
+          fi
+          if [[ -z "$PATH_IN" || -z "$CONTENT_B64" ]]; then
+            echo "::error::Missing required path/content_b64."
+            exit 1
+          fi
+          echo "path=${PATH_IN}"            >> "$GITHUB_OUTPUT"
+          echo "branch=${BRANCH}"           >> "$GITHUB_OUTPUT"
+          echo "message=${MESSAGE}"         >> "$GITHUB_OUTPUT"
+          echo "content_b64=${CONTENT_B64}" >> "$GITHUB_OUTPUT"
+          echo "sha256=${SHA256}"           >> "$GITHUB_OUTPUT"
+
+      - name: Verify SHA-256 (optional)
+        if: ${{ steps.inp.outputs.sha256 != '' }}
+        shell: bash
+        run: |
+          set -euo pipefail
+          WANT='${{ steps.inp.outputs.sha256 }}'
+          GOT=$(printf '%s' '${{ steps.inp.outputs.content_b64 }}' | base64 -d | sha256sum | awk '{print $1}')
+          echo "expected=$WANT"
+          echo "calculated=$GOT"
+          if [[ "$WANT" != "$GOT" ]]; then
+            echo "::error::SHA-256 mismatch."
+            exit 1
+          fi
+
+      - name: Determine current file SHA (if any)
+        id: cur
+        shell: bash
+        run: |
+          set -euo pipefail
+          enc() { jq -nr --arg x "$1" '$x|@uri'; }
+          URL="https://api.github.com/repos/${REPO}/contents/$(enc '${{ steps.inp.outputs.path }}')?ref=$(enc '${{ steps.inp.outputs.branch }}')"
+          echo "GET $URL"
+          set +e
+          RESP=$(curl -fsS -H "Authorization: Bearer ${GH_TOKEN}" -H "Accept: application/vnd.github+json" "$URL" 2>/dev/null)
+          CODE=$?
+          set -e
+          if [[ $CODE -eq 0 ]]; then
+            SHA=$(jq -r '.sha // empty' <<<"$RESP")
+            echo "sha=$SHA" >> "$GITHUB_OUTPUT"
+          else
+            echo "sha=" >> "$GITHUB_OUTPUT"
+          fi
+
+      - name: PUT (create/update)
+        id: put
+        shell: bash
+        run: |
+          set -euo pipefail
+          enc() { jq -nr --arg x "$1" '$x|@uri'; }
+          URL="https://api.github.com/repos/${REPO}/contents/$(enc '${{ steps.inp.outputs.path }}')"
+          BODY=$(jq -n \
+            --arg message "${{ steps.inp.outputs.message }}" \
+            --arg content "${{ steps.inp.outputs.content_b64 }}" \
+            --arg branch  "${{ steps.inp.outputs.branch }}" \
+            --arg sha     "${{ steps.cur.outputs.sha }}" \
+            '($sha|length>0) as $has
+             | {message:$message, content:$content, branch:$branch}
+             + ( $has ? {sha:$sha} : {} )')
+          echo "PUT $URL"
+          RESP=$(curl -fsS -X PUT \
+            -H "Authorization: Bearer ${GH_TOKEN}" \
+            -H "Accept: application/vnd.github+json" \
+            -d "$BODY" \
+            "$URL")
+          echo "$RESP" | jq -e '.content.path // .commit.sha | length>0' >/dev/null
+          echo "$RESP" | jq -r '.content.path? // empty' | sed 's/^/::notice::content: /'
+          echo "$RESP" | jq -r '.commit.sha?  // empty' | sed 's/^/::notice::commit:  /'
+
+      - name: Summary
+        run: |
+          echo "Upserted: ${{ steps.inp.outputs.path }} on branch ${{ steps.inp.outputs.branch }}"
