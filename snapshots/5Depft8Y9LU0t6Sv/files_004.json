[{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/class-banner.php","ext":"php","size":13824,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Banner file.\n *\n * @link       https://www.cookieyes.com/\n * @since      3.0.0\n * @package    CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes;\n\nuse CookieYes\\Lite\\Includes\\Store;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Banner\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Banner extends Store {\n\n\t/**\n\t * Banner controller class.\n\t *\n\t * @var object\n\t */\n\tprivate $controller;\n\n\t/**\n\t * Data array, with defaults.\n\t *\n\t * @var array\n\t */\n\tprotected $data = array(\n\t\t'name'          => '',\n\t\t'slug'          => '',\n\t\t'status'        => false,\n\t\t'settings'      => '',\n\t\t'default'       => false,\n\t\t'contents'      => array(),\n\t\t'date_created'  => '',\n\t\t'date_modified' => '',\n\t);\n\n\t/**\n\t * Constructor\n\t *\n\t * @param mixed $data ID or slug of the cookie.\n\t */\n\tpublic function __construct( $data = '' ) {\n\t\t$this->controller = Controller::get_instance();\n\t\tparent::__construct( $data );\n\t\tif ( is_int( $data ) && 0 !== $data ) {\n\t\t\t$this->set_id( $data );\n\t\t}\n\t\tif ( isset( $data->banner_id ) ) {\n\t\t\t$this->set_id( $data->banner_id );\n\t\t\t$this->read_direct( $data );\n\t\t} else {\n\t\t\t$this->get_data_from_db();\n\t\t}\n\t}\n\t/**\n\t * Read data directly from DB\n\t *\n\t * @return void\n\t */\n\tpublic function get_data_from_db() {\n\t\tif ( $this->get_id() > 0 ) {\n\t\t\t$this->read( $this );\n\t\t} else {\n\t\t\t$this->set_settings( $this->controller->get_default_configs() );\n\t\t\t$this->set_contents( self::get_default_contents() );\n\t\t}\n\t}\n\t/**\n\t * Read directly from the data object given.\n\t * Used for assigning data to object if it is already fetched from API or DB.\n\t *\n\t * @param array|object $data Banner data.\n\t * @return void\n\t */\n\tpublic function read_direct( $data ) {\n\t\t$this->set_data( $data );\n\t}\n\n\t/**\n\t * Assign data to objects\n\t *\n\t * @param array|object $data Array of data.\n\t * @return void\n\t */\n\tpublic function set_data( $data ) {\n\t\tif ( isset( $data->banner_id ) ) {\n\t\t\t$this->set_multi_item_data(\n\t\t\t\tarray(\n\t\t\t\t\t'name'     => $data->name,\n\t\t\t\t\t'slug'     => $data->slug,\n\t\t\t\t\t'status'   => $data->status,\n\t\t\t\t\t'settings' => $data->settings,\n\t\t\t\t\t'contents' => $data->contents,\n\t\t\t\t\t'default'  => $data->banner_default,\n\t\t\t\t)\n\t\t\t);\n\t\t\t$this->set_loaded( true );\n\t\t}\n\t}\n\t/**\n\t * Read cookie data from database\n\t *\n\t * @param object $banner Instance of Banner.\n\t * @return void\n\t */\n\tpublic function read( $banner ) {\n\t\t$banner->set_defaults();\n\t\t$data = $this->controller->get_item( $banner->get_id() );\n\t\t$this->set_data( $data );\n\t}\n\n\t/**\n\t * Insert a new banner on the database.\n\t *\n\t * @param object $banner Consent banner object.\n\t * @return void\n\t */\n\tpublic function create( $banner ) {\n\t\t$this->controller->create_item( $banner );\n\t}\n\t/**\n\t * Update banner data\n\t *\n\t * @param object $banner Instance of Banner.\n\t * @return void\n\t */\n\tpublic function update( $banner ) {\n\t\t$this->controller->update_item( $banner );\n\t}\n\t/**\n\t * Set banner settings\n\t *\n\t * @since 3.0.0\n\t * @param array $data Settings data.\n\t * @return void\n\t */\n\tpublic function set_settings( $data ) {\n\t\t$key = 'settings';\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$data               = $this->sanitize_settings( array( $this, 'sanitize_option' ), $data, $this->controller->get_default_configs() );\n\t\t\t$this->data[ $key ] = $data;\n\t\t}\n\t}\n\t/**\n\t * Set contents for a banner\n\t *\n\t * @since 3.0.0\n\t * @param array $data Banner contents of all selected languages.\n\t * @return void\n\t */\n\tpublic function set_contents( $data ) {\n\t\t$key = 'contents';\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$contents  = array();\n\t\t\t$languages = cky_selected_languages();\n\t\t\tforeach ( $languages as $lang ) {\n\t\t\t\t$contents[ $lang ] = isset( $data[ $lang ] ) ? $this->sanitize_contents( $data[ $lang ], $this->get_translations( $lang ) ) : array();\n\t\t\t}\n\t\t\t$this->data[ $key ] = $contents;\n\t\t}\n\t}\n\t/**\n\t * Set banner default status\n\t *\n\t * @since 3.0.0\n\t * @param boolean $default Default status to be set.\n\t * @return void\n\t */\n\tpublic function set_default( $default = false ) {\n\t\t$key = 'default';\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$this->data[ $key ] = (bool) $default;\n\t\t}\n\t}\n\t/**\n\t * Set banner status\n\t *\n\t * @since 3.0.0\n\t * @param boolean $status Default status to be set.\n\t * @return void\n\t */\n\tpublic function set_status( $status = false ) {\n\t\t$key = 'status';\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$this->data[ $key ] = (bool) $status;\n\t\t}\n\t}\n\t/**\n\t * Get banner settings\n\t *\n\t * @since 3.0.0\n\t * @return array\n\t */\n\tpublic function get_settings() {\n\t\t$settings = array();\n\t\t$key      = 'settings';\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$settings = ( is_string( $this->data[ $key ] ) ) ? json_decode( $this->data[ $key ], true ) : $this->data[ $key ];\n\t\t\tif ( is_array( $settings ) ) {\n\t\t\t\t$settings = $this->sanitize_settings( array( $this, 'sanitize_option' ), $settings, $this->controller->get_default_configs() );\n\t\t\t}\n\t\t}\n\t\treturn $settings;\n\t}\n\n\t/**\n\t * Excludes items from sanitizing multiple times.\n\t *\n\t * @return array\n\t */\n\tpublic static function get_excludes() {\n\t\treturn array(\n\t\t\t'selected',\n\t\t\t'headers',\n\t\t\t'locations',\n\t\t\t'regions',\n\t\t\t'country',\n\t\t);\n\t}\n\t/**\n\t * Return type of the banner\n\t *\n\t * @return string\n\t */\n\tpublic function get_type() {\n\t\t$config = $this->get_settings();\n\t\treturn isset( $config['settings']['type'] ) ? $config['settings']['type'] : 'box';\n\t}\n\n\t/**\n\t * Get the type of law used in the current banner.\n\t *\n\t * @return string\n\t */\n\tpublic function get_law() {\n\t\t$config = $this->get_settings();\n\t\treturn isset( $config['settings']['applicableLaw'] ) ? $config['settings']['applicableLaw'] : 'gdpr';\n\t}\n\t/**\n\t * Get the default state of a banner.\n\t *\n\t * @return string\n\t */\n\tpublic function get_default() {\n\t\treturn (bool) $this->get_object_data( 'default' );\n\t}\n\t/**\n\t * Get the default state of a banner.\n\t *\n\t * @return string\n\t */\n\tpublic function get_status() {\n\t\treturn (bool) $this->get_object_data( 'status' );\n\t}\n\n\t/**\n\t * Get current language of the banner\n\t *\n\t * @return string|boolean\n\t */\n\tpublic function get_language() {\n\t\tif ( '' === $this->language ) {\n\t\t\treturn cky_default_language();\n\t\t}\n\t\treturn is_string( $this->language ) ? sanitize_text_field( $this->language ) : false;\n\t}\n\t/**\n\t * Get banner contents\n\t *\n\t * @param string $language Get language based content of each banner.\n\t * @return array\n\t */\n\tpublic function get_contents( $language = '' ) {\n\t\t$contents  = array();\n\t\t$key       = 'contents';\n\t\t$current   = $this->get_language();\n\t\t$languages = cky_selected_languages( $current );\n\t\tif ( array_key_exists( $key, $this->data ) ) {\n\t\t\t$data = $this->data[ $key ];\n\t\t\tforeach ( $languages as $lang ) {\n\t\t\t\t$content           = isset( $data[ $lang ] ) ? $data[ $lang ] : array();\n\t\t\t\t$content           = empty( self::array_empty_assoc( $content ) ) ? $this->get_translations( $lang ) : $content;\n\t\t\t\t$content           = is_string( $content ) ? json_decode( $content, true ) : $content;\n\t\t\t\t$contents[ $lang ] = $this->sanitize_contents( $content );\n\t\t\t}\n\t\t}\n\t\tif ( '' !== $language ) {\n\t\t\treturn isset( $contents[ $language ] ) ? $contents[ $language ] : array();\n\t\t}\n\t\treturn $contents;\n\t}\n\t/**\n\t * Sanitize all the banner before insert or retrieval\n\t *\n\t * @since 3.0.0\n\t * @param string $function Callback function.\n\t * @param array  $settings input array.\n\t * @param array  $defaults Default settings of the banner.\n\t * @return array\n\t */\n\tpublic static function sanitize_settings( $function, $settings, $defaults ) {\n\t\t$result  = array();\n\t\t$excludes = self::get_excludes();\n\t\tforeach ( $defaults as $key => $data ) {\n\t\t\t$value    = isset( $settings[ $key ] ) ? $settings[ $key ] : $data;\n\t\t\t$defaults = $data;\n\t\t\tif ( in_array( $key, $excludes, true ) ) {\n\t\t\t\t$result[ $key ] = $function( $key, $value );\n\t\t\t\treturn $result;\n\t\t\t}\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$result[ $key ] = self::sanitize_settings( $function, $value, $defaults );\n\t\t\t} else {\n\t\t\t\tif ( is_string( $key ) ) {\n\t\t\t\t\t$result[ $key ] = $function( $key, $value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Sanitize all the banner before insert or retrieval\n\t *\n\t * @param array $contents input array.\n\t * @param array $defaults Default settings.\n\t * @return array\n\t */\n\tpublic function sanitize_contents( $contents, $defaults = false ) {\n\t\t$result   = array();\n\t\t$defaults = false === $defaults ? $this->get_default_contents() : $defaults;\n\t\tforeach ( $defaults as $key => $data ) {\n\t\t\t$value    = isset( $contents[ $key ] ) ? $contents[ $key ] : $data;\n\t\t\t$defaults = $data;\n\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$result[ $key ] = $this->sanitize_contents( $value, $defaults );\n\t\t\t} else {\n\t\t\t\tif ( is_string( $key ) ) {\n\t\t\t\t\t$result[ $key ] = $this->sanitize_content( $key, $value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Check if an array is associative or indexed\n\t *\n\t * @param array $array Input array.\n\t * @return Boolean\n\t */\n\tpublic static function array_has_key( $array ) {\n\t\tif ( count( array_filter( array_keys( $array ), 'is_string' ) ) === 0 ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Generate the template HTML for a banner\n\t *\n\t * @since 3.0.0\n\t * @return string\n\t */\n\tpublic function get_template() {\n\t\t$object = $this->controller->get_template( $this );\n\t\t$data   = array(\n\t\t\t'html'   => '',\n\t\t\t'styles' => '',\n\t\t);\n\t\tif ( ! $object ) {\n\t\t\treturn $data;\n\t\t}\n\t\t$data['html']   = $object->get_html();\n\t\t$data['styles'] = $object->get_styles();\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Sanitize the option values\n\t *\n\t * @param string $option The name of the option.\n\t * @param string $value  The unsanitised value.\n\t * @return string Sanitized value.\n\t */\n\tpublic static function sanitize_option( $option, $value ) {\n\t\tswitch ( $option ) {\n\t\t\tcase 'enableBanner':\n\t\t\tcase 'enableConsentLog':\n\t\t\tcase 'title':\n\t\t\tcase 'enable':\n\t\t\tcase 'isLink':\n\t\t\tcase 'noFollow':\n\t\t\tcase 'newTab':\n\t\t\tcase 'minimizeOnClick':\n\t\t\tcase 'categoryInNotice':\n\t\t\tcase 'brandLogo':\n\t\t\tcase 'cookieyesLogo':\n\t\t\tcase 'text':\n\t\t\tcase 'activeText':\n\t\t\tcase 'inActiveText':\n\t\t\tcase 'alwaysEnabledText':\n\t\t\tcase 'poweredByLogo':\n\t\t\tcase 'noticeToggler':\n\t\t\tcase 'reloadOnAccept':\n\t\t\tcase 'enableCallbacks':\n\t\t\tcase 'status':\n\t\t\t\t$value = cky_sanitize_bool( $value );\n\t\t\t\tbreak;\n\t\t\tcase 'background-color':\n\t\t\t\t$value = cky_sanitize_color( $value );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$value = cky_sanitize_text( $value );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Sanitize the contents\n\t *\n\t * @param string $option The name of the option.\n\t * @param string $value  The unsanitised value.\n\t * @return string Sanitized value.\n\t */\n\tpublic function sanitize_content( $option, $value ) {\n\t\tswitch ( $option ) {\n\t\t\tcase 'description':\n\t\t\t\t$value = cky_sanitize_content( $value );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$value = cky_sanitize_text( $value );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Returns default contents to be loaded while creating the banner.\n\t *\n\t * @return array\n\t */\n\tpublic static function get_default_contents() {\n\t\t$contents = wp_cache_get( 'cky_contents_default', 'cky_banner_contents' );\n\t\tif ( ! $contents ) {\n\t\t\t$contents = cky_read_json_file( dirname( __FILE__ ) . '/contents/default.json' );\n\t\t\twp_cache_set( 'cky_contents_default', $contents, 'cky_banner_contents', 12 * HOUR_IN_SECONDS );\n\t\t}\n\t\treturn $contents;\n\t}\n\n\t/**\n\t * Get contents by language.\n\t *\n\t * @param string $lang Language code.\n\t * @param string $key Specific key if any.\n\t * @return array\n\t */\n\tpublic function get_translations( $lang = '', $key = '' ) {\n\t\t$contents = wp_cache_get( 'cky_contents_' . $lang, 'cky_banner_contents' );\n\t\t$law      = $this->get_law();\n\t\t$translated     = \\CookieYes\\Lite\\Admin\\Modules\\Languages\\Includes\\Controller::get_instance()->is_cky_translated($lang);\n\t\t$upload_dir    = wp_upload_dir();\n\t\tif ( ! $contents ) {\n\t\t\tif($translated) {\n\t\t\t\t$translation = cky_read_json_file( $upload_dir['basedir'] . '/cookieyes/languages/banners/' . esc_html( $lang ) . '.json' );\n\t\t\t\tif($translation) {\n\t\t\t\t\t$contents = $translation['banner_data'];\n\t\t\t\t}\n\t\t\t\tif(!$contents) {\n\t\t\t\t\t$contents = cky_read_json_file( dirname( __FILE__ ) . '/contents/' . esc_html( $lang ) . '.json' );\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( empty( $contents ) ) {\n\t\t\t\t$contents = cky_read_json_file( dirname( __FILE__ ) . '/contents/en.json' );\n\t\t\t}\n\t\t\twp_cache_set( 'cky_contents_' . $lang, $contents, 'cky_banner_contents', 12 * HOUR_IN_SECONDS );\n\t\t}\n\t\treturn isset( $contents[ $law ] ) && is_array( $contents[ $law ] ) ? $contents[ $law ] : array();\n\t}\n\t/**\n\t * Get selected languages for the banner.\n\t *\n\t * @return array\n\t */\n\tpublic function get_selected_languages() {\n\t\t$settings = $this->get_settings();\n\t\treturn isset( $settings['settings']['languages']['selected'] ) ? $settings['settings']['languages']['selected'] : array();\n\t}\n\n\t/**\n\t * Check if an associative array is empty.\n\t *\n\t * @param array $array Array to be checked.\n\t * @return array\n\t */\n\tpublic function array_empty_assoc( $array = array() ) {\n\t\treturn array_filter( self::compare( $array ) );\n\t}\n\n\t/**\n\t * Compare two deeply neseted array.\n\t *\n\t * @param array   $contents Array of contents.\n\t * @param boolean $defaults Default items in an array.\n\t * @param array   $result Final result.\n\t * @return array\n\t */\n\tpublic static function compare( $contents = array(), $defaults = false, $result = array() ) {\n\t\t$defaults = false === $defaults ? self::get_default_contents() : $defaults;\n\t\tforeach ( $defaults as $key => $data ) {\n\t\t\t$value    = isset( $contents[ $key ] ) ? $contents[ $key ] : $data;\n\t\t\t$defaults = $data;\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$result = self::compare( $value, $defaults, $result );\n\t\t\t} else {\n\t\t\t\t$result[] = $value;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/configs/gdpr.json","ext":"json","size":17732,"mtime":1757312769,"type":"text","content":"{\n    \"settings\": {\n        \"id\": \"banner-1\",\n        \"type\": \"box\",\n        \"preferenceCenterType\": \"popup\",\n        \"position\": \"bottom-left\",\n        \"versionID\": \"6.0.0\",\n        \"applicableLaw\": \"gdpr\",\n        \"languages\": {\n            \"default\": \"en\",\n            \"selected\": [\n                \"en\"\n            ]\n        },\n        \"templateGroup\": \"default\",\n        \"customHtml\": {\n            \"status\": false\n        },\n        \"theme\": \"light\",\n        \"consentExpiry\": {\n            \"status\": true,\n            \"value\": 365\n        },\n        \"ruleSet\": [\n            {\n                \"code\": \"ALL\",\n                \"regions\": []\n            }\n        ]\n    },\n    \"behaviours\": {\n        \"reloadBannerOnAccept\": {\n            \"status\": false\n        },\n        \"loadAnalyticsByDefault\": {\n            \"status\": false\n        },\n        \"animations\": {\n            \"onLoad\": \"animate\",\n            \"onHide\": \"sticky\"\n        },\n        \"legacyFunctions\": {\n            \"accept\": {\n                \"action\": \"acceptClose\",\n                \"newTab\": false\n            },\n            \"reject\": {\n                \"action\": \"rejectClose\",\n                \"newTab\": false\n            },\n            \"idle\": {\n                \"action\": \"acceptClose\",\n                \"delay\": 1000\n            },\n            \"navigation\": {\n                \"action\": \"acceptClose\"\n            },\n            \"pageScroll\": {\n                \"action\": \"acceptClose\"\n            }\n        },\n        \"respectGPC\": {\n            \"status\": false\n        }\n    },\n    \"config\": {\n        \"notice\": {\n            \"status\": true,\n            \"tag\": \"notice\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"brandLogo\": {\n                    \"status\": false,\n                    \"tag\": \"brand-logo\",\n                    \"meta\": {\n                        \"url\": \"#\"\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"notice-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"accept\": {\n                            \"status\": true,\n                            \"tag\": \"accept-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#FFFFFF\",\n                                \"background-color\": \"#1863DC\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"reject\": {\n                            \"status\": true,\n                            \"tag\": \"reject-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"settings\": {\n                            \"status\": true,\n                            \"tag\": \"settings-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"readMore\": {\n                            \"status\": false,\n                            \"tag\": \"readmore-button\",\n                            \"type\": \"link\",\n                            \"meta\": {\n                                \"noFollow\": true,\n                                \"newTab\": true\n                            },\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"transparent\"\n                            }\n                        },\n                        \"donotSell\": {\n                            \"status\": false,\n                            \"tag\": \"donotsell-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"transparent\"\n                            }\n                        }\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": false,\n                    \"tag\": \"close-button\"\n                }\n            }\n        },\n        \"categoryPreview\": {\n            \"status\": false,\n            \"type\": \"container\",\n            \"tag\": \"detail-category-preview\",\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-category-preview-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"toggle\": {\n                    \"status\": true,\n                    \"tag\": \"detail-category-preview-toggle\",\n                    \"type\": \"toggle\",\n                    \"states\": {\n                        \"active\": {\n                            \"styles\": {\n                                \"background-color\": \"#1863DC\"\n                            }\n                        },\n                        \"inactive\": {\n                            \"styles\": {\n                                \"background-color\": \"#D0D5D2\"\n                            }\n                        }\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"detail-category-preview-buttons\",\n                    \"elements\": {\n                        \"save\": {\n                            \"status\": true,\n                            \"tag\": \"detail-category-preview-save-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"status\": true,\n            \"tag\": \"detail\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": true,\n                    \"type\": \"button\",\n                    \"tag\": \"detail-close\"\n                },\n                \"categories\": {\n                    \"status\": true,\n                    \"tag\": \"detail-categories\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"title\": {\n                            \"type\": \"text\",\n                            \"tag\": \"detail-category-title\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        },\n                        \"description\": {\n                            \"type\": \"text\",\n                            \"tag\": \"detail-category-description\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        },\n                        \"toggle\": {\n                            \"status\": true,\n                            \"tag\": \"detail-category-toggle\",\n                            \"type\": \"toggle\",\n                            \"states\": {\n                                \"active\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#1863DC\"\n                                    }\n                                },\n                                \"inactive\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#D0D5D2\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"detail-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"accept\": {\n                            \"status\": true,\n                            \"tag\": \"detail-accept-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#FFFFFF\",\n                                \"background-color\": \"#1863DC\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"reject\": {\n                            \"status\": true,\n                            \"tag\": \"detail-reject-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"save\": {\n                            \"status\": true,\n                            \"tag\": \"detail-save-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        }\n                    }\n                },\n                \"poweredBy\": {\n                    \"status\": true,\n                    \"tag\": \"detail-powered-by\",\n                    \"styles\": {\n                        \"background-color\": \"#EDEDED\",\n                        \"color\": \"#293C5B\"\n                    }\n                }\n            }\n        },\n        \"optoutPopup\": {\n            \"status\": false,\n            \"tag\": \"optout-popup\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"optout-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"optout-description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"optOption\": {\n                    \"status\": true,\n                    \"tag\": \"optout-option\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"toggle\": {\n                            \"status\": true,\n                            \"tag\": \"optout-option-toggle\",\n                            \"type\": \"toggle\",\n                            \"states\": {\n                                \"active\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#1863dc\"\n                                    }\n                                },\n                                \"inactive\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#FFFFFF\"\n                                    }\n                                }\n                            }\n                        },\n                        \"title\": {\n                            \"type\": \"text\",\n                            \"tag\": \"optout-option-title\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        }\n                    }\n                },\n                \"gpcOption\": {\n                    \"type\": \"container\",\n                    \"tag\": \"optout-gpc-option\",\n                    \"status\": false,\n                    \"elements\": {\n                        \"description\": {\n                            \"type\": \"text\",\n                            \"tag\": \"optout-gpc-option-description\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        }\n                    }\n                },\n                \"poweredBy\": {\n                    \"status\": true,\n                    \"tag\": \"optout-powered-by\",\n                    \"styles\": {\n                        \"background-color\": \"#EDEDED\",\n                        \"color\": \"#293C5B\"\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"optout-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"confirm\": {\n                            \"status\": true,\n                            \"tag\": \"optout-confirm-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#f4f4f4\",\n                                \"background-color\": \"#1863dc\",\n                                \"border-color\": \"#1863dc\"\n                            }\n                        },\n                        \"cancel\": {\n                            \"status\": true,\n                            \"tag\": \"optout-cancel-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#858585\",\n                                \"background-color\": \"#FFFFFF\",\n                                \"border-color\": \"#dedfe0\"\n                            }\n                        }\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": true,\n                    \"tag\": \"optout-close\",\n                    \"type\": \"button\"\n                }\n            }\n        },\n        \"auditTable\": {\n            \"status\": true,\n            \"tag\": \"audit-table\",\n            \"type\": \"table\",\n            \"meta\": {\n                \"headers\": [\n                    \"id\",\n                    \"duration\",\n                    \"description\"\n                ]\n            },\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#f4f4f4\",\n                \"border-color\": \"#ebebeb\"\n            }\n        },\n        \"revisitConsent\": {\n            \"status\": true,\n            \"tag\": \"revisit-consent\",\n            \"position\": \"bottom-left\",\n            \"meta\": {\n                \"url\": \"#\"\n            },\n            \"styles\": {\n                \"background-color\": \"#0056A7\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"revisit-consent-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#0056a7\"\n                    }\n                }\n            }\n        },\n        \"videoPlaceholder\": {\n            \"status\": true,\n            \"tag\": \"video-placeholder\",\n            \"styles\": {\n                \"background-color\": \"#000000\",\n                \"border-color\": \"#000000\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"placeholder-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#ffffff\"\n                    }\n                }\n            }\n        }\n    },\n    \"meta\": {\n        \"customCSS\": \"\",\n        \"customHTML\": \"\"\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/configs/ccpa.json","ext":"json","size":17708,"mtime":1757312769,"type":"text","content":"{\n    \"settings\": {\n        \"type\": \"box\",\n        \"preferenceCenterType\": \"popup\",\n        \"position\": \"bottom-left\",\n        \"versionID\": \"6.0.0\",\n        \"applicableLaw\": \"ccpa\",\n        \"templateGroup\": \"default\",\n        \"languages\": {\n            \"default\": \"en\",\n            \"selected\": [\n                \"en\"\n            ]\n        },\n        \"theme\": \"light\",\n        \"customHtml\": {\n            \"status\": false\n        },\n        \"consentExpiry\": {\n            \"status\": true,\n            \"value\": 365\n        },\n        \"ruleSet\": [\n            {\n                \"code\": \"ALL\",\n                \"regions\": []\n            }\n        ]\n    },\n    \"behaviours\": {\n        \"reloadBannerOnAccept\": {\n            \"status\": false\n        },\n        \"loadAnalyticsByDefault\": {\n            \"status\": false\n        },\n        \"animations\": {\n            \"onLoad\": \"animate\",\n            \"onHide\": \"sticky\"\n        },\n        \"legacyFunctions\": {\n            \"accept\": {\n                \"action\": \"acceptClose\",\n                \"newTab\": false\n            },\n            \"reject\": {\n                \"action\": \"rejectClose\",\n                \"newTab\": false\n            },\n            \"idle\": {\n                \"action\": \"acceptClose\",\n                \"delay\": 1000\n            },\n            \"navigation\": {\n                \"action\": \"acceptClose\"\n            },\n            \"pageScroll\": {\n                \"action\": \"acceptClose\"\n            }\n        },\n        \"respectGPC\": {\n            \"status\": false\n        }\n    },\n    \"config\": {\n        \"notice\": {\n            \"status\": true,\n            \"tag\": \"notice\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"brandLogo\": {\n                    \"status\": false,\n                    \"tag\": \"brand-logo\",\n                    \"meta\": {\n                        \"url\": \"#\"\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"notice-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"accept\": {\n                            \"status\": false,\n                            \"tag\": \"accept-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#FFFFFF\",\n                                \"background-color\": \"#1863DC\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"reject\": {\n                            \"status\": false,\n                            \"tag\": \"reject-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"settings\": {\n                            \"status\": false,\n                            \"tag\": \"settings-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"readMore\": {\n                            \"status\": false,\n                            \"tag\": \"readmore-button\",\n                            \"type\": \"link\",\n                            \"meta\": {\n                                \"noFollow\": true,\n                                \"newTab\": true\n                            },\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"transparent\"\n                            }\n                        },\n                        \"donotSell\": {\n                            \"status\": true,\n                            \"tag\": \"donotsell-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"transparent\"\n                            }\n                        }\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": true,\n                    \"tag\": \"close-button\"\n                }\n            }\n        },\n        \"categoryPreview\": {\n            \"status\": false,\n            \"type\": \"container\",\n            \"tag\": \"detail-category-preview\",\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-category-preview-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"toggle\": {\n                    \"status\": true,\n                    \"tag\": \"detail-category-preview-toggle\",\n                    \"type\": \"toggle\",\n                    \"states\": {\n                        \"active\": {\n                            \"styles\": {\n                                \"background-color\": \"#1863DC\"\n                            }\n                        },\n                        \"inactive\": {\n                            \"styles\": {\n                                \"background-color\": \"#D0D5D2\"\n                            }\n                        }\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"detail-category-preview-buttons\",\n                    \"elements\": {\n                        \"save\": {\n                            \"status\": true,\n                            \"tag\": \"detail-category-preview-save-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"status\": false,\n            \"tag\": \"detail\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"detail-description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": true,\n                    \"type\": \"button\",\n                    \"tag\": \"detail-close\"\n                },\n                \"categories\": {\n                    \"status\": true,\n                    \"tag\": \"detail-categories\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"title\": {\n                            \"type\": \"text\",\n                            \"tag\": \"detail-category-title\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        },\n                        \"description\": {\n                            \"type\": \"text\",\n                            \"tag\": \"detail-category-description\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        },\n                        \"toggle\": {\n                            \"status\": true,\n                            \"tag\": \"detail-category-toggle\",\n                            \"type\": \"toggle\",\n                            \"states\": {\n                                \"active\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#1863DC\"\n                                    }\n                                },\n                                \"inactive\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#D0D5D2\"\n                                    }\n                                }\n                            }\n                        }\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"detail-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"accept\": {\n                            \"status\": true,\n                            \"tag\": \"detail-accept-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#FFFFFF\",\n                                \"background-color\": \"#1863DC\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"reject\": {\n                            \"status\": true,\n                            \"tag\": \"detail-reject-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        },\n                        \"save\": {\n                            \"status\": true,\n                            \"tag\": \"detail-save-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#1863DC\",\n                                \"background-color\": \"transparent\",\n                                \"border-color\": \"#1863DC\"\n                            }\n                        }\n                    }\n                },\n                \"poweredBy\": {\n                    \"status\": true,\n                    \"tag\": \"detail-powered-by\",\n                    \"styles\": {\n                        \"background-color\": \"#EDEDED\",\n                        \"color\": \"#293C5B\"\n                    }\n                }\n            }\n        },\n        \"optoutPopup\": {\n            \"status\": true,\n            \"tag\": \"optout-popup\",\n            \"type\": \"container\",\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#FFFFFF\",\n                \"border-color\": \"#F4F4F4\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"optout-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"description\": {\n                    \"type\": \"text\",\n                    \"tag\": \"optout-description\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#212121\"\n                    }\n                },\n                \"optOption\": {\n                    \"status\": true,\n                    \"tag\": \"optout-option\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"toggle\": {\n                            \"status\": true,\n                            \"tag\": \"optout-option-toggle\",\n                            \"type\": \"toggle\",\n                            \"states\": {\n                                \"active\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#1863dc\"\n                                    }\n                                },\n                                \"inactive\": {\n                                    \"styles\": {\n                                        \"background-color\": \"#FFFFFF\"\n                                    }\n                                }\n                            }\n                        },\n                        \"title\": {\n                            \"type\": \"text\",\n                            \"tag\": \"optout-option-title\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        }\n                    }\n                },\n                \"gpcOption\": {\n                    \"type\": \"container\",\n                    \"tag\": \"optout-gpc-option\",\n                    \"status\": false,\n                    \"elements\": {\n                        \"description\": {\n                            \"type\": \"text\",\n                            \"tag\": \"optout-gpc-option-description\",\n                            \"status\": true,\n                            \"styles\": {\n                                \"color\": \"#212121\"\n                            }\n                        }\n                    }\n                },\n                \"poweredBy\": {\n                    \"status\": true,\n                    \"tag\": \"optout-powered-by\",\n                    \"styles\": {\n                        \"background-color\": \"#EDEDED\",\n                        \"color\": \"#293C5B\"\n                    }\n                },\n                \"buttons\": {\n                    \"status\": true,\n                    \"tag\": \"optout-buttons\",\n                    \"type\": \"container\",\n                    \"elements\": {\n                        \"confirm\": {\n                            \"status\": true,\n                            \"tag\": \"optout-confirm-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#f4f4f4\",\n                                \"background-color\": \"#1863dc\",\n                                \"border-color\": \"#1863dc\"\n                            }\n                        },\n                        \"cancel\": {\n                            \"status\": true,\n                            \"tag\": \"optout-cancel-button\",\n                            \"type\": \"button\",\n                            \"styles\": {\n                                \"color\": \"#858585\",\n                                \"background-color\": \"#FFFFFF\",\n                                \"border-color\": \"#dedfe0\"\n                            }\n                        }\n                    }\n                },\n                \"closeButton\": {\n                    \"status\": true,\n                    \"tag\": \"optout-close\",\n                    \"type\": \"button\"\n                }\n            }\n        },\n        \"auditTable\": {\n            \"status\": false,\n            \"tag\": \"audit-table\",\n            \"type\": \"table\",\n            \"meta\": {\n                \"headers\": [\n                    \"id\",\n                    \"duration\",\n                    \"description\"\n                ]\n            },\n            \"styles\": {\n                \"color\": \"#212121\",\n                \"background-color\": \"#f4f4f4\",\n                \"border-color\": \"#ebebeb\"\n            }\n        },\n        \"revisitConsent\": {\n            \"status\": true,\n            \"tag\": \"revisit-consent\",\n            \"position\": \"bottom-left\",\n            \"meta\": {\n                \"url\": \"#\"\n            },\n            \"styles\": {\n                \"background-color\": \"#0056A7\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"revisit-consent-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#0056a7\"\n                    }\n                }\n            }\n        },\n        \"videoPlaceholder\": {\n            \"status\": true,\n            \"tag\": \"video-placeholder\",\n            \"styles\": {\n                \"background-color\": \"#000000\",\n                \"border-color\": \"#000000\"\n            },\n            \"elements\": {\n                \"title\": {\n                    \"type\": \"text\",\n                    \"tag\": \"placeholder-title\",\n                    \"status\": true,\n                    \"styles\": {\n                        \"color\": \"#ffffff\"\n                    }\n                }\n            }\n        }\n    },\n    \"meta\": {\n        \"customCSS\": \"\",\n        \"customHTML\": \"\"\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/pt.json","ext":"json","size":10378,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valorizamos a sua privacidade\",\n                \"description\": \"<p>Utilizamos cookies para melhorar a sua experiência de navegação, apresentar anúncios ou conteúdos personalizados e analisar o nosso tráfego. Ao clicar em \\\"Aceitar Todos\\\", concorda com a utilização de cookies.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceite tudo\",\n                        \"reject\": \"Rejeitar\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de Cookies\",\n                        \"donotSell\": \"Não Vendam ou Partilhem a Minha Informação Pessoal\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salvar minhas preferências\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar as Preferências de Consentimento\",\n                \"description\": \"<p>Utilizamos cookies para ajudá-lo a navegar com eficácia e executar certas funções. Encontrará informações detalhadas sobre todos os cookies em cada categoria de consentimento abaixo.</p><p>Os cookies categorizados como \\\"Necessários\\\" são armazenados no seu navegador, pois são essenciais para ativar as funcionalidades básicas do site.</p><p>Também utilizamos cookies de terceiros que nos ajudam a analisar a forma como utiliza este site, armazenam as suas preferências e fornecem o conteúdo e os anúncios que são relevantes para si. Estes cookies apenas serão armazenados no seu navegador com o seu consentimento prévio.</p><p>Pode escolher ativar ou desativar alguns ou todos estes cookies, mas desativar alguns deles pode afetar a sua experiência de navegação.</p>\",\n                \"showMore\": \"Mostrar mais\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre Ativo\",\n                        \"enable\": \"Ativar\",\n                        \"disable\": \"Desativar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceite tudo\",\n                        \"save\": \"Salvar minhas preferências\",\n                        \"reject\": \"Rejeitar\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferências de autoexclusão\",\n                \"description\": \"<p>Utilizamos cookies de terceiros que nos ajudam a analisar a forma como utiliza este site web, a armazenar as suas preferências e a fornecer conteúdo e anúncios que são relevantes para si. No entanto, pode optar por não aceitar estes cookies, assinalando a opção \\\"Não Vendam ou Partilhem a Minha Informação Pessoal\\\" e clicando no botão \\\"Salvar minhas preferências\\\". Se optar por se excluir, pode sempre aderir novamente a qualquer altura, desmarcando a opção \\\"Não Vendam ou Partilhem a Minha Informação Pessoal\\\" e clicando no botão \\\"Salvar minhas preferências\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Não Vendam ou Partilhem a Minha Informação Pessoal\",\n                        \"enable\": \"Ativar\",\n                        \"disable\": \"Desativar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>As suas definições de autoexclusão para este site web foram respeitadas, uma vez que detetámos um sinal global de controlo de privacidade do seu navegador e, por conseguinte, não é possível alterar esta definição.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar menos\",\n                \"showMore\": \"Mostrar mais\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Salvar minhas preferências\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferências de Consentimento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duração\",\n                        \"description\": \"Descrição\"\n                    }\n                },\n                \"message\": \"Bem cookies para exibir.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor, aceite o consentimento do cookie\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valorizamos a sua privacidade\",\n                \"description\": \"<p>Este website ou as suas ferramentas de terceiros processam dados pessoais. Pode optar pela venda das suas informações pessoais clicando no link \\\"Não Vendam ou Partilhem a Minha Informação Pessoal\\\".</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceite tudo\",\n                        \"reject\": \"Rejeitar\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de Cookies\",\n                        \"donotSell\": \"Não Vendam ou Partilhem a Minha Informação Pessoal\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salvar minhas preferências\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar as Preferências de Consentimento\",\n                \"description\": \"<p>Utilizamos cookies para ajudá-lo a navegar com eficácia e executar certas funções. Encontrará informações detalhadas sobre todos os cookies em cada categoria de consentimento abaixo.</p><p>Os cookies categorizados como \\\"Necessários\\\" são armazenados no seu navegador, pois são essenciais para ativar as funcionalidades básicas do site.</p><p>Também utilizamos cookies de terceiros que nos ajudam a analisar a forma como utiliza este site, armazenam as suas preferências e fornecem o conteúdo e os anúncios que são relevantes para si. Estes cookies apenas serão armazenados no seu navegador com o seu consentimento prévio.</p><p>Pode escolher ativar ou desativar alguns ou todos estes cookies, mas desativar alguns deles pode afetar a sua experiência de navegação.</p>\",\n                \"showMore\": \"Mostrar mais\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre Ativo\",\n                        \"enable\": \"Ativar\",\n                        \"disable\": \"Desativar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceite tudo\",\n                        \"save\": \"Salvar minhas preferências\",\n                        \"reject\": \"Rejeitar\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferências de autoexclusão\",\n                \"description\": \"<p>Utilizamos cookies de terceiros que nos ajudam a analisar a forma como utiliza este site web, a armazenar as suas preferências e a fornecer conteúdo e anúncios que são relevantes para si. No entanto, pode optar por não aceitar estes cookies, assinalando a opção \\\"Não Vendam ou Partilhem a Minha Informação Pessoal\\\" e clicando no botão \\\"Salvar minhas preferências\\\". Se optar por se excluir, pode sempre aderir novamente a qualquer altura, desmarcando a opção \\\"Não Vendam ou Partilhem a Minha Informação Pessoal\\\" e clicando no botão \\\"Salvar minhas preferências\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Não Vendam ou Partilhem a Minha Informação Pessoal\",\n                        \"enable\": \"Ativar\",\n                        \"disable\": \"Desativar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>As suas definições de autoexclusão para este site web foram respeitadas, uma vez que detetámos um sinal global de controlo de privacidade do seu navegador e, por conseguinte, não é possível alterar esta definição.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar menos\",\n                \"showMore\": \"Mostrar mais\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Salvar minhas preferências\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferências de Consentimento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duração\",\n                        \"description\": \"Descrição\"\n                    }\n                },\n                \"message\": \"Bem cookies para exibir.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor, aceite o consentimento do cookie\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/pl.json","ext":"json","size":10854,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Cenimy prywatność użytkowników\",\n                \"description\": \"<p>Używamy plików cookie, aby poprawić jakość przeglądania, wyświetlać reklamy lub treści dostosowane do indywidualnych potrzeb użytkowników oraz analizować ruch na stronie. Kliknięcie przycisku „Akceptuj wszystkie” oznacza zgodę na wykorzystywanie przez nas plików cookie.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Akceptuj wszystko\",\n                        \"reject\": \"Odrzucać\",\n                        \"settings\": \"Dostosuj\",\n                        \"readMore\": \"Polityka Cookie\",\n                        \"donotSell\": \"Nie sprzedawaj i nie udostępniaj moich danych osobowych\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Zapisz moje preferencje\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Dostosuj preferencje dotyczące zgody\",\n                \"description\": \"<p>Używamy plików cookie, aby pomóc użytkownikom w sprawnej nawigacji i wykonywaniu określonych funkcji. Szczegółowe informacje na temat wszystkich plików cookie odpowiadających poszczególnym kategoriom zgody znajdują się poniżej.</p><p>Pliki cookie sklasyfikowane jako „niezbędne” są przechowywane w przeglądarce użytkownika, ponieważ są niezbędne do włączenia podstawowych funkcji witryny.</p><p>Korzystamy również z plików cookie innych firm, które pomagają nam analizować sposób korzystania ze strony przez użytkowników, a także przechowywać preferencje użytkownika oraz dostarczać mu istotnych dla niego treści i reklam. Tego typu pliki cookie będą przechowywane w przeglądarce tylko za uprzednią zgodą użytkownika.</p><p>Można włączyć lub wyłączyć niektóre lub wszystkie te pliki cookie, ale wyłączenie niektórych z nich może wpłynąć na jakość przeglądania.</p>\",\n                \"showMore\": \"Pokaż więcej\",\n                \"showLess\": \"Pokaż mniej\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Zawsze aktywne\",\n                        \"enable\": \"Włączyć\",\n                        \"disable\": \"Wyłączyć\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Akceptuj wszystko\",\n                        \"save\": \"Zapisz moje preferencje\",\n                        \"reject\": \"Odrzucać\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferencje rezygnacji\",\n                \"description\": \"<p>Korzystamy z plików typu „cookie” osób trzecich. Pomagają nam one w korzystaniu z tej witryny internetowej, przechowywaniu preferencji użytkownika i dostarczaniu mu odpowiednich treści oraz reklam. Z plików tych można jednak zrezygnować, zaznaczając opcję „Nie sprzedawaj i nie udostępniaj moich danych osobowych” oraz naciskając przycisk „Zapisz moje preferencje”. Po rezygnacji można ponownie włączyć pliki typu „cookie”, odznaczając opcję „Nie sprzedawaj i nie udostępniaj moich danych osobowych” oraz naciskając przycisk „Zapisz moje preferencje”.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Nie sprzedawaj i nie udostępniaj moich danych osobowych\",\n                        \"enable\": \"Włączyć\",\n                        \"disable\": \"Wyłączyć\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Ustawienia rezygnacji użytkownika dla niniejszej witryny internetowej zostały zastosowane, ponieważ wykryliśmy sygnał globalnej kontroli prywatności z przeglądarki użytkownika. Z tego powodu użytkownik nie może zmienić przedmiotowego ustawienia.</p>\"\n                    }\n                },\n                \"showLess\": \"Pokaż mniej\",\n                \"showMore\": \"Pokaż więcej\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Anuluj\",\n                        \"confirm\": \"Zapisz moje preferencje\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferencje co do zgód\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Plik cookie\",\n                        \"duration\": \"Czas trwania\",\n                        \"description\": \"Opis\"\n                    }\n                },\n                \"message\": \"Brak plików cookie do wyświetlenia.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Prosimy o zaakceptowanie zgody na pliki cookie\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Cenimy prywatność użytkowników\",\n                \"description\": \"<p>Ta strona internetowa lub jej narzędzia stron trzecich przetwarzają dane osobowe. Możesz zrezygnować ze sprzedaży swoich danych osobowych, klikając łącze „Nie sprzedawaj i nie udostępniaj moich danych osobowych”.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Akceptuj wszystko\",\n                        \"reject\": \"Odrzucać\",\n                        \"settings\": \"Dostosuj\",\n                        \"readMore\": \"Polityka Cookie\",\n                        \"donotSell\": \"Nie sprzedawaj i nie udostępniaj moich danych osobowych\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Zapisz moje preferencje\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Dostosuj preferencje dotyczące zgody\",\n                \"description\": \"<p>Używamy plików cookie, aby pomóc użytkownikom w sprawnej nawigacji i wykonywaniu określonych funkcji. Szczegółowe informacje na temat wszystkich plików cookie odpowiadających poszczególnym kategoriom zgody znajdują się poniżej.</p><p>Pliki cookie sklasyfikowane jako „niezbędne” są przechowywane w przeglądarce użytkownika, ponieważ są niezbędne do włączenia podstawowych funkcji witryny.</p><p>Korzystamy również z plików cookie innych firm, które pomagają nam analizować sposób korzystania ze strony przez użytkowników, a także przechowywać preferencje użytkownika oraz dostarczać mu istotnych dla niego treści i reklam. Tego typu pliki cookie będą przechowywane w przeglądarce tylko za uprzednią zgodą użytkownika.</p><p>Można włączyć lub wyłączyć niektóre lub wszystkie te pliki cookie, ale wyłączenie niektórych z nich może wpłynąć na jakość przeglądania.</p>\",\n                \"showMore\": \"Pokaż więcej\",\n                \"showLess\": \"Pokaż mniej\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Zawsze aktywne\",\n                        \"enable\": \"Włączyć\",\n                        \"disable\": \"Wyłączyć\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Akceptuj wszystko\",\n                        \"save\": \"Zapisz moje preferencje\",\n                        \"reject\": \"Odrzucać\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferencje rezygnacji\",\n                \"description\": \"<p>Korzystamy z plików typu „cookie” osób trzecich. Pomagają nam one w korzystaniu z tej witryny internetowej, przechowywaniu preferencji użytkownika i dostarczaniu mu odpowiednich treści oraz reklam. Z plików tych można jednak zrezygnować, zaznaczając opcję „Nie sprzedawaj i nie udostępniaj moich danych osobowych” oraz naciskając przycisk „Zapisz moje preferencje”. Po rezygnacji można ponownie włączyć pliki typu „cookie”, odznaczając opcję „Nie sprzedawaj i nie udostępniaj moich danych osobowych” oraz naciskając przycisk „Zapisz moje preferencje”.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Nie sprzedawaj i nie udostępniaj moich danych osobowych\",\n                        \"enable\": \"Włączyć\",\n                        \"disable\": \"Wyłączyć\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Ustawienia rezygnacji użytkownika dla niniejszej witryny internetowej zostały zastosowane, ponieważ wykryliśmy sygnał globalnej kontroli prywatności z przeglądarki użytkownika. Z tego powodu użytkownik nie może zmienić przedmiotowego ustawienia.</p>\"\n                    }\n                },\n                \"showLess\": \"Pokaż mniej\",\n                \"showMore\": \"Pokaż więcej\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Anuluj\",\n                        \"confirm\": \"Zapisz moje preferencje\"\n                    }\n                },\n                \"closeButton\": \"Blisko\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferencje co do zgód\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Plik cookie\",\n                        \"duration\": \"Czas trwania\",\n                        \"description\": \"Opis\"\n                    }\n                },\n                \"message\": \"Brak plików cookie do wyświetlenia.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Prosimy o zaakceptowanie zgody na pliki cookie\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/fr.json","ext":"json","size":10953,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Nous respectons votre vie privée.\",\n                \"description\": \"<p>Nous utilisons des cookies pour améliorer votre expérience de navigation, diffuser des publicités ou des contenus personnalisés et analyser notre trafic. En cliquant sur « Tout accepter », vous consentez à notre utilisation des cookies.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accepter tout\",\n                        \"reject\": \"Tout rejeter\",\n                        \"settings\": \"Personnaliser\",\n                        \"readMore\": \"Politique relative aux cookies\",\n                        \"donotSell\": \"Ne pas vendre ou partager mes informations personnelles\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Enregistrer mes préférences\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personnaliser les préférences en matière de consentement\",\n                \"description\": \"<p>Nous utilisons des cookies pour vous aider à naviguer efficacement et à exécuter certaines fonctionnalités. Vous trouverez des informations détaillées sur tous les cookies sous chaque catégorie de consentement ci-dessous.</p><p>Les cookies qui sont catégorisés comme « nécessaires » sont stockés sur votre navigateur car ils sont essentiels pour permettre les fonctionnalités de base du site. </p><p>Nous utilisons également des cookies tiers qui nous aident à analyser la façon dont vous utilisez ce site web, à enregistrer vos préférences et à vous fournir le contenu et les publicités qui vous sont pertinents. Ces cookies ne seront stockés dans votre navigateur qu'avec votre consentement préalable.</p><p>Vous pouvez choisir d'activer ou de désactiver tout ou partie de ces cookies, mais la désactivation de certains d'entre eux peut affecter votre expérience de navigation.</p>\",\n                \"showMore\": \"Afficher plus\",\n                \"showLess\": \"Afficher moins\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Toujours actif\",\n                        \"enable\": \"Activer\",\n                        \"disable\": \"Désactiver\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accepter tout\",\n                        \"save\": \"Enregistrer mes préférences\",\n                        \"reject\": \"Tout rejeter\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Préférences de désinscription\",\n                \"description\": \"<p>Nous utilisons des cookies tiers qui nous aident à analyser la façon dont vous utilisez ce site Web, à enregistrer vos préférences et à vous fournir le contenu et les publicités qui vous sont utiles. Toutefois, vous pouvez refuser ces cookies en cochant la case « Ne pas vendre ou partager mes informations personnelles » et en cliquant sur le bouton « Enregistrer mes préférences ». Une fois que vous avez choisi de vous désinscrire, vous pouvez le faire à nouveau à tout moment en décochant la case « Ne pas vendre ou partager mes informations personnelles » et en cliquant sur le bouton « Enregistrer mes préférences ».</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Ne pas vendre ou partager mes informations personnelles\",\n                        \"enable\": \"Activer\",\n                        \"disable\": \"Désactiver\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Vos paramètres de désinscription ont été pris en compte pour ce site Web. En effet, nous avons détecté un signal de contrôle global de la confidentialité provenant de votre navigateur et, par conséquent, vous ne pouvez pas modifier ce paramètre.</p>\"\n                    }\n                },\n                \"showLess\": \"Afficher moins\",\n                \"showMore\": \"Afficher plus\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Annuler\",\n                        \"confirm\": \"Enregistrer mes préférences\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Choix de consentement\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"durée\",\n                        \"description\": \"la description\"\n                    }\n                },\n                \"message\": \"Aucun cookie à afficher.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Veuillez accepter le consentement des cookies\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Nous respectons votre vie privée.\",\n                \"description\": \"<p>Ce site Web ou ses outils tiers traitent des données personnelles. Vous pouvez refuser la vente de vos informations personnelles en cliquant sur le lien «Ne pas vendre ou partager mes informations personnelles».</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accepter tout\",\n                        \"reject\": \"Tout rejeter\",\n                        \"settings\": \"Personnaliser\",\n                        \"readMore\": \"Politique relative aux cookies\",\n                        \"donotSell\": \"Ne pas vendre ou partager mes informations personnelles\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Enregistrer mes préférences\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personnaliser les préférences en matière de consentement\",\n                \"description\": \"<p>Nous utilisons des cookies pour vous aider à naviguer efficacement et à exécuter certaines fonctionnalités. Vous trouverez des informations détaillées sur tous les cookies sous chaque catégorie de consentement ci-dessous.</p><p>Les cookies qui sont catégorisés comme « nécessaires » sont stockés sur votre navigateur car ils sont essentiels pour permettre les fonctionnalités de base du site. </p><p>Nous utilisons également des cookies tiers qui nous aident à analyser la façon dont vous utilisez ce site web, à enregistrer vos préférences et à vous fournir le contenu et les publicités qui vous sont pertinents. Ces cookies ne seront stockés dans votre navigateur qu'avec votre consentement préalable.</p><p>Vous pouvez choisir d'activer ou de désactiver tout ou partie de ces cookies, mais la désactivation de certains d'entre eux peut affecter votre expérience de navigation.</p>\",\n                \"showMore\": \"Afficher plus\",\n                \"showLess\": \"Afficher moins\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Toujours actif\",\n                        \"enable\": \"Activer\",\n                        \"disable\": \"Désactiver\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accepter tout\",\n                        \"save\": \"Enregistrer mes préférences\",\n                        \"reject\": \"Tout rejeter\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Préférences de désinscription\",\n                \"description\": \"<p>Nous utilisons des cookies tiers qui nous aident à analyser la façon dont vous utilisez ce site Web, à enregistrer vos préférences et à vous fournir le contenu et les publicités qui vous sont utiles. Toutefois, vous pouvez refuser ces cookies en cochant la case « Ne pas vendre ou partager mes informations personnelles » et en cliquant sur le bouton « Enregistrer mes préférences ». Une fois que vous avez choisi de vous désinscrire, vous pouvez le faire à nouveau à tout moment en décochant la case « Ne pas vendre ou partager mes informations personnelles » et en cliquant sur le bouton « Enregistrer mes préférences ».</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Ne pas vendre ou partager mes informations personnelles\",\n                        \"enable\": \"Activer\",\n                        \"disable\": \"Désactiver\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Vos paramètres de désinscription ont été pris en compte pour ce site Web. En effet, nous avons détecté un signal de contrôle global de la confidentialité provenant de votre navigateur et, par conséquent, vous ne pouvez pas modifier ce paramètre.</p>\"\n                    }\n                },\n                \"showLess\": \"Afficher moins\",\n                \"showMore\": \"Afficher plus\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Annuler\",\n                        \"confirm\": \"Enregistrer mes préférences\"\n                    }\n                },\n                \"closeButton\": \"Fermer\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Choix de consentement\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"durée\",\n                        \"description\": \"la description\"\n                    }\n                },\n                \"message\": \"Aucun cookie à afficher.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Veuillez accepter le consentement des cookies\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/fi.json","ext":"json","size":10332,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Arvostamme yksityisyyttäsi\",\n                \"description\": \"<p>Käytämme evästeitä selauskokemuksesi parantamiseksi, personoitujen mainosten ja sisällön tarjoamiseksi ja liikenteemme analysoimiseksi. Hyväksyt evästeidemme käytön klikkaamalla ”Hyväksy kaikki”.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Hyväksy kaikki\",\n                        \"reject\": \"Hylätä\",\n                        \"settings\": \"Mukauta\",\n                        \"readMore\": \"Evästekäytäntö\",\n                        \"donotSell\": \"Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Tallenna asetukset\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Mukauta suostumuksen asetuksia\",\n                \"description\": \"<p>Käytämme eväseitä auttamaan sinua navigoimaan tehokkaasti ja suorittaaksemme tiettyjä toimintoja. Löydät tarkempaa tietoa kaikista evästeistä alla olevien kategorioiden alta. ”Välttämättömiksi” kategorioituja evästeitä säilytetään selaimessasi, sillä ne ovat välttämättömiä sivuston perustoimintojen käyttämiseksi.</p><p>Käytämme myös kolmansien osapuolien evästeitä, jotka auttavat meitä analysoimaan sivustomme käyttöäsi, tallentamaan asetuksesi ja tarjoamaan sinulle relevanttia sisältöä ja mainoksia. Nämä evästeet tallennetaan selaimeesi vain etukäteen antamallasi suostumuksella.</p><p>Voit halutessasi ottaa käyttöön tai poistaa käytöstä joitain evästeitä tai kaikki niistä, mutta osan poisto käytöstä voi vaikuttaa selauskokemukseesi.</p>\",\n                \"showMore\": \"Näytä lisää\",\n                \"showLess\": \"Näytä vähemmän\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Aina aktiivinen\",\n                        \"enable\": \"ota käyttöön\",\n                        \"disable\": \"Poista käytöstä\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Hyväksy kaikki\",\n                        \"save\": \"Tallenna asetukset\",\n                        \"reject\": \"Hylätä\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Pois jättäytymisen asetukset\",\n                \"description\": \"<p>Käytämme kolmansien osapuolien evästeitä, joita käytetään analysoimaan verkkosivun käyttöä, asetuksiesi muistamiseen ja tarjoamaan sinulle sopivia mainoksia. Voit kuitenkin jättää pois nämä evästeet valitsemalla “Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin” ja klikkaamalla “Tallenna asetukset” -nappia. Kun jättäydyt pois, voit kuitenkin ottaa evästeet käyttöön poistamalla valinnan kohdasta “Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin” ja klikkaamalla “Tallenna asetukset” -nappia.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin\",\n                        \"enable\": \"Ota käyttöön\",\n                        \"disable\": \"Poista käytöstä\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Pois jättäytymisesi asetuksesi on pantu täytäntöön tällä sivustolla, sillä havaitsimme maailmanlaajuisen tietosuojan hallintasignaalin selaimeltasi, joten et voi muuttaa tätä asetusta.</p>\"\n                    }\n                },\n                \"showLess\": \"Näytä vähemmän\",\n                \"showMore\": \"Näytä lisää\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Peruuttaa\",\n                        \"confirm\": \"Tallenna asetukset\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Suostumusasetukset\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Eväste\",\n                        \"duration\": \"Kesto\",\n                        \"description\": \"Kuvaus\"\n                    }\n                },\n                \"message\": \"Ei näytettäviä evästeitä.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Hyväksy evästeen suostumus\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Arvostamme yksityisyyttäsi\",\n                \"description\": \"<p>Tämä verkkosivusto tai sen kolmannen osapuolen työkalut käsittelevät henkilötietoja. Voit kieltäytyä henkilökohtaisten tietojesi myynnistä napsauttamalla “Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin” linkkiä.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Hyväksy kaikki\",\n                        \"reject\": \"Hylätä\",\n                        \"settings\": \"Mukauta\",\n                        \"readMore\": \"Evästekäytäntö\",\n                        \"donotSell\": \"Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Tallenna asetukset\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Mukauta suostumuksen asetuksia\",\n                \"description\": \"<p>Käytämme eväseitä auttamaan sinua navigoimaan tehokkaasti ja suorittaaksemme tiettyjä toimintoja. Löydät tarkempaa tietoa kaikista evästeistä alla olevien kategorioiden alta. ”Välttämättömiksi” kategorioituja evästeitä säilytetään selaimessasi, sillä ne ovat välttämättömiä sivuston perustoimintojen käyttämiseksi.</p><p>Käytämme myös kolmansien osapuolien evästeitä, jotka auttavat meitä analysoimaan sivustomme käyttöäsi, tallentamaan asetuksesi ja tarjoamaan sinulle relevanttia sisältöä ja mainoksia. Nämä evästeet tallennetaan selaimeesi vain etukäteen antamallasi suostumuksella.</p><p>Voit halutessasi ottaa käyttöön tai poistaa käytöstä joitain evästeitä tai kaikki niistä, mutta osan poisto käytöstä voi vaikuttaa selauskokemukseesi.</p>\",\n                \"showMore\": \"Näytä lisää\",\n                \"showLess\": \"Näytä vähemmän\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Aina aktiivinen\",\n                        \"enable\": \"ota käyttöön\",\n                        \"disable\": \"Poista käytöstä\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Hyväksy kaikki\",\n                        \"save\": \"Tallenna asetukset\",\n                        \"reject\": \"Hylätä\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Pois jättäytymisen asetukset\",\n                \"description\": \"<p>Käytämme kolmansien osapuolien evästeitä, joita käytetään analysoimaan verkkosivun käyttöä, asetuksiesi muistamiseen ja tarjoamaan sinulle sopivia mainoksia. Voit kuitenkin jättää pois nämä evästeet valitsemalla “Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin” ja klikkaamalla “Tallenna asetukset” -nappia. Kun jättäydyt pois, voit kuitenkin ottaa evästeet käyttöön poistamalla valinnan kohdasta “Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin” ja klikkaamalla “Tallenna asetukset” -nappia.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Henkilökohtaisia tietojani ei saa myydä tai jakaa eteenpäin\",\n                        \"enable\": \"Ota käyttöön\",\n                        \"disable\": \"Poista käytöstä\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Pois jättäytymisesi asetuksesi on pantu täytäntöön tällä sivustolla, sillä havaitsimme maailmanlaajuisen tietosuojan hallintasignaalin selaimeltasi, joten et voi muuttaa tätä asetusta.</p>\"\n                    }\n                },\n                \"showLess\": \"Näytä vähemmän\",\n                \"showMore\": \"Näytä lisää\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Peruuttaa\",\n                        \"confirm\": \"Tallenna asetukset\"\n                    }\n                },\n                \"closeButton\": \"kiinni\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Suostumusasetukset\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Eväste\",\n                        \"duration\": \"Kesto\",\n                        \"description\": \"Kuvaus\"\n                    }\n                },\n                \"message\": \"Ei näytettäviä evästeitä.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Hyväksy evästeen suostumus\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/pt-br.json","ext":"json","size":10333,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valorizamos sua privacidade\",\n                \"description\": \"<p>Utilizamos cookies para aprimorar sua experiência de navegação, exibir anúncios ou conteúdo personalizado e analisar nosso tráfego. Ao clicar em “Aceitar todos”, você concorda com nosso uso de cookies.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceitar tudo\",\n                        \"reject\": \"Rejeitar\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de Cookies\",\n                        \"donotSell\": \"Não venda ou compartilhe minhas informações pessoais\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salve minhas preferências\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar preferências de consentimento\",\n                \"description\": \"<p>Utilizamos cookies para ajudar você a navegar com eficiência e executar certas funções. Você encontrará informações detalhadas sobre todos os cookies sob cada categoria de consentimento abaixo.</p><p>Os cookies que são classificados com a marcação “Necessário” são armazenados em seu navegador, pois são essenciais para possibilitar o uso de funcionalidades básicas do site.</p><p>Também usamos cookies de terceiros que nos ajudam a analisar como você usa esse site, armazenar suas preferências e fornecer conteúdo e anúncios que sejam relevantes para você. Esses cookies somente serão armazenados em seu navegador mediante seu prévio consentimento.</p><p>Você pode optar por ativar ou desativar alguns ou todos esses cookies, mas desativá-los pode afetar sua experiência de navegação.</p>\",\n                \"showMore\": \"Mostrar mais\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre ativo\",\n                        \"enable\": \"Habilitar\",\n                        \"disable\": \"Desabilitar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceitar tudo\",\n                        \"save\": \"Salve minhas preferências\",\n                        \"reject\": \"Rejeitar\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferências de desativação\",\n                \"description\": \"<p>Usamos cookies de terceiros que nos ajudam a analisar como você usa este site, armazena suas preferências e oferece conteúdo e anúncios que são relevantes para você. No entanto, você pode desativar esses cookies marcando \\\"Não venda ou compartilhe minhas informações pessoais\\\" e clicando no botão \\\"Salve minhas preferências\\\". Uma vez desativado, você pode optar por ativar novamente a qualquer momento desmarcando \\\"Não venda ou compartilhe minhas informações pessoais\\\" e clicando no botão \\\"Salve minhas preferências\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Não venda ou compartilhe minhas informações pessoais\",\n                        \"enable\": \"Habilitar\",\n                        \"disable\": \"Desabilitar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Suas configurações de desativação para este site foram respeitadas, pois detectamos um sinal global de controle de privacidade do seu navegador e, portanto, você não pode alterar essa configuração.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar menos\",\n                \"showMore\": \"Mostrar mais\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Salve minhas preferências\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferências de consentimento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duração\",\n                        \"description\": \"Descrição\"\n                    }\n                },\n                \"message\": \"Bem, cookies para exibir.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor, aceite o consentimento do cookie\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valorizamos sua privacidade\",\n                \"description\": \"<p>Este site ou suas ferramentas de terceiros processam dados pessoais. Você pode optar por não vender suas informações pessoais clicando no link \\\"Não venda ou compartilhe minhas informações pessoais\\\".</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceitar tudo\",\n                        \"reject\": \"Rejeitar\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de Cookies\",\n                        \"donotSell\": \"Não venda ou compartilhe minhas informações pessoais\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salve minhas preferências\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar preferências de consentimento\",\n                \"description\": \"<p>Utilizamos cookies para ajudar você a navegar com eficiência e executar certas funções. Você encontrará informações detalhadas sobre todos os cookies sob cada categoria de consentimento abaixo.</p><p>Os cookies que são classificados com a marcação “Necessário” são armazenados em seu navegador, pois são essenciais para possibilitar o uso de funcionalidades básicas do site.</p><p>Também usamos cookies de terceiros que nos ajudam a analisar como você usa esse site, armazenar suas preferências e fornecer conteúdo e anúncios que sejam relevantes para você. Esses cookies somente serão armazenados em seu navegador mediante seu prévio consentimento.</p><p>Você pode optar por ativar ou desativar alguns ou todos esses cookies, mas desativá-los pode afetar sua experiência de navegação.</p>\",\n                \"showMore\": \"Mostrar mais\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre ativo\",\n                        \"enable\": \"Habilitar\",\n                        \"disable\": \"Desabilitar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceitar tudo\",\n                        \"save\": \"Salve minhas preferências\",\n                        \"reject\": \"Rejeitar\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferências de desativação\",\n                \"description\": \"<p>Usamos cookies de terceiros que nos ajudam a analisar como você usa este site, armazena suas preferências e oferece conteúdo e anúncios que são relevantes para você. No entanto, você pode desativar esses cookies marcando \\\"Não venda ou compartilhe minhas informações pessoais\\\" e clicando no botão \\\"Salve minhas preferências\\\". Uma vez desativado, você pode optar por ativar novamente a qualquer momento desmarcando \\\"Não venda ou compartilhe minhas informações pessoais\\\" e clicando no botão \\\"Salve minhas preferências\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Não venda ou compartilhe minhas informações pessoais\",\n                        \"enable\": \"Habilitar\",\n                        \"disable\": \"Desabilitar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Suas configurações de desativação para este site foram respeitadas, pois detectamos um sinal global de controle de privacidade do seu navegador e, portanto, você não pode alterar essa configuração.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar menos\",\n                \"showMore\": \"Mostrar mais\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Salve minhas preferências\"\n                    }\n                },\n                \"closeButton\": \"Fechar\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferências de consentimento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duração\",\n                        \"description\": \"Descrição\"\n                    }\n                },\n                \"message\": \"Bem, cookies para exibir.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor, aceite o consentimento do cookie\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/default.json","ext":"json","size":2342,"mtime":1757312769,"type":"text","content":"{\n    \"notice\": {\n        \"elements\": {\n            \"title\": \"\",\n            \"description\": \"\",\n            \"privacyLink\": \"\",\n            \"buttons\": {\n                \"elements\": {\n                    \"accept\": \"\",\n                    \"reject\": \"\",\n                    \"settings\": \"\",\n                    \"readMore\": \"\",\n                    \"donotSell\": \"\"\n                }\n            },\n            \"closeButton\": \"\"\n        }\n    },\n    \"categoryPreview\": {\n        \"elements\": {\n            \"buttons\": {\n                \"elements\": {\n                    \"save\": \"\"\n                }\n            }\n        }\n    },\n    \"preferenceCenter\": {\n        \"elements\": {\n            \"title\": \"\",\n            \"description\": \"\",\n            \"showMore\": \"\",\n            \"showLess\": \"\",\n            \"category\": {\n                \"elements\": {\n                    \"alwaysEnabled\": \"\",\n                    \"enable\": \"\",\n                    \"disable\": \"\"\n                }\n            },\n            \"buttons\": {\n                \"elements\": {\n                    \"accept\": \"\",\n                    \"save\": \"\",\n                    \"reject\": \"\"\n                }\n            },\n            \"closeButton\": \"\"\n        }\n    },\n    \"optoutPopup\": {\n        \"elements\": {\n            \"title\": \"\",\n            \"description\": \"\",\n            \"optOption\": {\n                \"elements\": {\n                    \"title\": \"\",\n                    \"enable\": \"\",\n                    \"disable\": \"\"\n                }\n            },\n            \"gpcOption\": {\n                \"elements\": {\n                    \"description\": \"\"\n                }\n            },\n            \"showLess\": \"\",\n            \"showMore\": \"\",\n            \"buttons\": {\n                \"elements\": {\n                    \"cancel\": \"\",\n                    \"confirm\": \"\"\n                }\n            },\n            \"closeButton\": \"\"\n        }\n    },\n    \"revisitConsent\": {\n        \"elements\": {\n            \"title\": \"\"\n        }\n    },\n    \"auditTable\": {\n        \"elements\": {\n            \"headers\": {\n                \"elements\": {\n                    \"id\": \"\",\n                    \"duration\": \"\",\n                    \"description\": \"\"\n                }\n            },\n            \"message\": \"\"\n        }\n    },\n    \"videoPlaceholder\": {\n        \"elements\": {\n            \"title\": \"\"\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/hu.json","ext":"json","size":10505,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Fontosnak tartjuk az adatok védelmét\",\n                \"description\": \"<p>A böngészési élmény fokozása, a személyre szabott hirdetések vagy tartalmak megjelenítése, valamint a forgalom elemzése érdekében sütiket (cookie) használunk. A \\\"Mindet elfogadom\\\" gombra kattintva hozzájárulhat a sütik használatához.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Az összes elfogadása\",\n                        \"reject\": \"Elutasít\",\n                        \"settings\": \"Testreszabás\",\n                        \"readMore\": \"Cookie-szabályzat\",\n                        \"donotSell\": \"Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Mentse el a beállításokat\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Engedélyek beállítása\",\n                \"description\": \"<p>A hatékony navigáció és bizonyos funkciók működésének érdekében sütiket használunk. Az alábbiakban az egyes kategóriák alatt részletes információkat talál minden sütiről.</p><p>A \\\"Szükséges\\\" kategóriába sorolt sütiket a böngésző tárolja, mivel ezek elengedhetetlenül szükségesek a webhely alapvető funkcióihoz. </p><p>A harmadik féltől származó sütik segítenek a weboldal használatának elemzésében, tárolják a preferenciáit és releváns tartalmakat és hirdetéseket biztosítanak Önnek. Ezeket a sütiket csak az Ön előzetes beleegyezésével tároljuk a böngészőjében.</p><p>Eldöntheti, hogy engedélyezi vagy letiltja ezeket a sütiket, de bizonyos sütik letiltása befolyásolhatja a böngészési élményt.</p>\",\n                \"showMore\": \"Mutass többet\",\n                \"showLess\": \"Mutass kevesebbet\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Mindig aktív\",\n                        \"enable\": \"Engedélyezze\",\n                        \"disable\": \"Letiltás\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Az összes elfogadása\",\n                        \"save\": \"Mentse el a beállításokat\",\n                        \"reject\": \"Elutasít\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Kikapcsolási preferenciák\",\n                \"description\": \"<p>Külső felektől származó cookie-kat használunk arra, hogy elemezzük, hogyan használja ezt a weboldalt, megjegyezzük preferenciáit, és releváns tartalmat és hirdetéseket biztosítsunk. Ezeket a cookie-kat kikapcsolhatja, ha megjelöli a „Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat” opciót, majd rákattint a „Mentse el a beállításokat” gombra. A kikapcsolásuk után, bármikor újra engedélyezheti őket, ha visszavonja a „Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat” kijelölését, és rákattint a \\\"Mentse el a beállításokat\\\" gombra.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat\",\n                        \"enable\": \"Engedélyezze\",\n                        \"disable\": \"Letiltás\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>A kikapcsolási beállításait tiszteletben tartottuk ezen a weboldalon, mivel a böngészője egy globális adatvédelmi ellenőrző jelzést érzékelt, ezért nem tudja megváltoztatni ezt a beállítást.</p>\"\n                    }\n                },\n                \"showLess\": \"Mutass kevesebbet\",\n                \"showMore\": \"Mutass többet\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Mégse\",\n                        \"confirm\": \"Mentse el a beállításokat\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Hozzájárulási beállítások\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Időtartam\",\n                        \"description\": \"Leírás\"\n                    }\n                },\n                \"message\": \"Nincs megjeleníthető cookie.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Kérjük, fogadja el a cookie-k beleegyezését\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Fontosnak tartjuk az adatok védelmét\",\n                \"description\": \"<p>Ez a weboldal vagy harmadik féltől származó eszközei feldolgozzák a személyes adatokat. A „Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat” linkre kattintva letilthatja személyes adatainak értékesítését.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Az összes elfogadása\",\n                        \"reject\": \"Elutasít\",\n                        \"settings\": \"Testreszabás\",\n                        \"readMore\": \"Cookie-szabályzat\",\n                        \"donotSell\": \"Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Mentse el a beállításokat\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Engedélyek beállítása\",\n                \"description\": \"<p>A hatékony navigáció és bizonyos funkciók működésének érdekében sütiket használunk. Az alábbiakban az egyes kategóriák alatt részletes információkat talál minden sütiről.</p><p>A \\\"Szükséges\\\" kategóriába sorolt sütiket a böngésző tárolja, mivel ezek elengedhetetlenül szükségesek a webhely alapvető funkcióihoz. </p><p>A harmadik féltől származó sütik segítenek a weboldal használatának elemzésében, tárolják a preferenciáit és releváns tartalmakat és hirdetéseket biztosítanak Önnek. Ezeket a sütiket csak az Ön előzetes beleegyezésével tároljuk a böngészőjében.</p><p>Eldöntheti, hogy engedélyezi vagy letiltja ezeket a sütiket, de bizonyos sütik letiltása befolyásolhatja a böngészési élményt.</p>\",\n                \"showMore\": \"Mutass többet\",\n                \"showLess\": \"Mutass kevesebbet\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Mindig aktív\",\n                        \"enable\": \"Engedélyezze\",\n                        \"disable\": \"Letiltás\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Az összes elfogadása\",\n                        \"save\": \"Mentse el a beállításokat\",\n                        \"reject\": \"Elutasít\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Kikapcsolási preferenciák\",\n                \"description\": \"<p>Külső felektől származó cookie-kat használunk arra, hogy elemezzük, hogyan használja ezt a weboldalt, megjegyezzük preferenciáit, és releváns tartalmat és hirdetéseket biztosítsunk. Ezeket a cookie-kat kikapcsolhatja, ha megjelöli a „Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat” opciót, majd rákattint a „Mentse el a beállításokat” gombra. A kikapcsolásuk után, bármikor újra engedélyezheti őket, ha visszavonja a „Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat” kijelölését, és rákattint a \\\"Mentse el a beállításokat\\\" gombra.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Ne Értékesítse vagy Ossza Meg SZemélyes Adataimat\",\n                        \"enable\": \"Engedélyezze\",\n                        \"disable\": \"Letiltás\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>A kikapcsolási beállításait tiszteletben tartottuk ezen a weboldalon, mivel a böngészője egy globális adatvédelmi ellenőrző jelzést érzékelt, ezért nem tudja megváltoztatni ezt a beállítást.</p>\"\n                    }\n                },\n                \"showLess\": \"Mutass kevesebbet\",\n                \"showMore\": \"Mutass többet\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Mégse\",\n                        \"confirm\": \"Mentse el a beállításokat\"\n                    }\n                },\n                \"closeButton\": \"Bezárás\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Hozzájárulási beállítások\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Időtartam\",\n                        \"description\": \"Leírás\"\n                    }\n                },\n                \"message\": \"Nincs megjeleníthető cookie.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Kérjük, fogadja el a cookie-k beleegyezését\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/de.json","ext":"json","size":10799,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Wir schätzen Ihre Privatsphäre\",\n                \"description\": \"<p>Wir verwenden Cookies, um Ihr Surferlebnis zu verbessern, personalisierte Anzeigen oder Inhalte einzusetzen und unseren Datenverkehr zu analysieren. Wenn Sie auf „Alle akzeptieren\\\" klicken, stimmen Sie der Anwendung von Cookies zu.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Alle akzeptieren\",\n                        \"reject\": \"Alles ablehnen\",\n                        \"settings\": \"Anpassen\",\n                        \"readMore\": \"Cookie-Richtlinie\",\n                        \"donotSell\": \"Verkaufen oder teilen Sie meine persönlichen Daten nicht\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Speichern Sie meine Einstellungen\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Einstellungen für die Zustimmung anpassen\",\n                \"description\": \"<p>Wir verwenden Cookies, damit Sie effizient navigieren und bestimmte Funktionen ausführen können. Detaillierte Informationen zu allen Cookies finden Sie unten unter jeder Einwilligungskategorie.</p><p>Die als „notwendig\\\" kategorisierten Cookies werden in Ihrem Browser gespeichert, da sie für die Aktivierung der grundlegenden Funktionalitäten der Website unerlässlich sind.</p><p>Wir verwenden auch Cookies von Drittanbietern, die uns dabei helfen, zu analysieren, wie Sie diese Website nutzen, Ihre Präferenzen zu speichern und die für Sie relevanten Inhalte und Werbeanzeigen bereitzustellen. Diese Cookies werden nur mit Ihrer vorherigen Einwilligung in Ihrem Browser gespeichert.</p><p>Sie können einige oder alle dieser Cookies aktivieren oder deaktivieren, aber die Deaktivierung einiger dieser Cookies kann Ihre Browser-Erfahrung beeinträchtigen.</p>\",\n                \"showMore\": \"Mehr zeigen\",\n                \"showLess\": \"Weniger zeigen\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Immer aktiv\",\n                        \"enable\": \"Ermöglichen\",\n                        \"disable\": \"Deaktivieren\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Alle akzeptieren\",\n                        \"save\": \"Speichern Sie meine Einstellungen\",\n                        \"reject\": \"Alles ablehnen\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Opt-out-Präferenzen\",\n                \"description\": \"<p>Wir verwenden Cookies von Drittanbietern, mit deren Hilfe wir analysieren können, wie Sie diese Website nutzen, Ihre Präferenzen speichern und die für Sie relevanten Inhalte und Anzeigen bereitstellen. Sie können diese Cookies jedoch ablehnen, indem Sie „Verkaufen oder teilen Sie meine persönlichen Daten nicht“ aktivieren und auf die Schaltfläche „Speichern Sie meine Einstellungen“ klicken. Nachdem Sie sich abgemeldet haben, können Sie sich jederzeit wieder anmelden, indem Sie das Kontrollkästchen „Verkaufen oder teilen Sie meine persönlichen Daten nicht“ deaktivieren und auf die Schaltfläche „Speichern Sie meine Einstellungen“ klicken.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Verkaufen oder teilen Sie meine persönlichen Daten nicht\",\n                        \"enable\": \"Ermöglichen\",\n                        \"disable\": \"Deaktivieren\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Ihre Opt-out-Einstellungen für diese Website wurden respektiert, da wir ein Global-Privacy-Control-Signal von Ihrem Browser erkannt haben und Sie diese Einstellung daher nicht ändern können.</p>\"\n                    }\n                },\n                \"showLess\": \"Weniger zeigen\",\n                \"showMore\": \"Mehr zeigen\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Stornieren\",\n                        \"confirm\": \"Speichern Sie meine Einstellungen\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Einstellungen zustimmen\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Dauer\",\n                        \"description\": \"Beschreibung\"\n                    }\n                },\n                \"message\": \"Keine Cookies zum Anzeigen.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Bitte akzeptieren Sie die Cookie-Einwilligung\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Wir schätzen Ihre Privatsphäre\",\n                \"description\": \"<p>Diese Website oder ihre Tools von Drittanbietern verarbeiten personenbezogene Daten. Sie können den Verkauf Ihrer persönlichen Daten abbestellen, indem Sie auf den Link \\\"Verkaufen oder teilen Sie meine persönlichen Daten nicht\\\" klicken.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Alle akzeptieren\",\n                        \"reject\": \"Alles ablehnen\",\n                        \"settings\": \"Anpassen\",\n                        \"readMore\": \"Cookie-Richtlinie\",\n                        \"donotSell\": \"Verkaufen oder teilen Sie meine persönlichen Daten nicht\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Speichern Sie meine Einstellungen\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Einstellungen für die Zustimmung anpassen\",\n                \"description\": \"<p>Wir verwenden Cookies, damit Sie effizient navigieren und bestimmte Funktionen ausführen können. Detaillierte Informationen zu allen Cookies finden Sie unten unter jeder Einwilligungskategorie.</p><p>Die als „notwendig\\\" kategorisierten Cookies werden in Ihrem Browser gespeichert, da sie für die Aktivierung der grundlegenden Funktionalitäten der Website unerlässlich sind.</p><p>Wir verwenden auch Cookies von Drittanbietern, die uns dabei helfen, zu analysieren, wie Sie diese Website nutzen, Ihre Präferenzen zu speichern und die für Sie relevanten Inhalte und Werbeanzeigen bereitzustellen. Diese Cookies werden nur mit Ihrer vorherigen Einwilligung in Ihrem Browser gespeichert.</p><p>Sie können einige oder alle dieser Cookies aktivieren oder deaktivieren, aber die Deaktivierung einiger dieser Cookies kann Ihre Browser-Erfahrung beeinträchtigen.</p>\",\n                \"showMore\": \"Mehr zeigen\",\n                \"showLess\": \"Weniger zeigen\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Immer aktiv\",\n                        \"enable\": \"Ermöglichen\",\n                        \"disable\": \"Deaktivieren\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Alle akzeptieren\",\n                        \"save\": \"Speichern Sie meine Einstellungen\",\n                        \"reject\": \"Alles ablehnen\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Opt-out-Präferenzen\",\n                \"description\": \"<p>Wir verwenden Cookies von Drittanbietern, mit deren Hilfe wir analysieren können, wie Sie diese Website nutzen, Ihre Präferenzen speichern und die für Sie relevanten Inhalte und Anzeigen bereitstellen. Sie können diese Cookies jedoch ablehnen, indem Sie „Verkaufen oder teilen Sie meine persönlichen Daten nicht“ aktivieren und auf die Schaltfläche „Speichern Sie meine Einstellungen“ klicken. Nachdem Sie sich abgemeldet haben, können Sie sich jederzeit wieder anmelden, indem Sie das Kontrollkästchen „Verkaufen oder teilen Sie meine persönlichen Daten nicht“ deaktivieren und auf die Schaltfläche „Speichern Sie meine Einstellungen“ klicken.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Verkaufen oder teilen Sie meine persönlichen Daten nicht\",\n                        \"enable\": \"Ermöglichen\",\n                        \"disable\": \"Deaktivieren\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Ihre Opt-out-Einstellungen für diese Website wurden respektiert, da wir ein Global-Privacy-Control-Signal von Ihrem Browser erkannt haben und Sie diese Einstellung daher nicht ändern können.</p>\"\n                    }\n                },\n                \"showLess\": \"Weniger zeigen\",\n                \"showMore\": \"Mehr zeigen\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Stornieren\",\n                        \"confirm\": \"Speichern Sie meine Einstellungen\"\n                    }\n                },\n                \"closeButton\": \"Nah dran\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Einstellungen zustimmen\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Dauer\",\n                        \"description\": \"Beschreibung\"\n                    }\n                },\n                \"message\": \"Keine Cookies zum Anzeigen.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Bitte akzeptieren Sie die Cookie-Einwilligung\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/it.json","ext":"json","size":10321,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Diamo valore alla tua privacy\",\n                \"description\": \"<p>Utilizziamo i cookie per migliorare la tua esperienza di navigazione, offrirti pubblicità o contenuti personalizzati e analizzare il nostro traffico. Cliccando “Accetta tutti”, acconsenti al nostro utilizzo dei cookie.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accettare tutto\",\n                        \"reject\": \"Rifiuta tutto\",\n                        \"settings\": \"Personalizza\",\n                        \"readMore\": \"Politica sui cookie\",\n                        \"donotSell\": \"Non vendere o condividere i miei dati personali\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salva le mie preferenze\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizza le preferenze di consenso\",\n                \"description\": \"<p>Utilizziamo i cookie per aiutarti a navigare in maniera efficiente e a svolgere determinate funzioni. Troverai informazioni dettagliate su tutti i cookie sotto ogni categoria di consensi sottostanti. I cookie categorizzatati come “Necessari” vengono memorizzati sul tuo browser in quanto essenziali per consentire le funzionalità di base del sito.</p><p>Utilizziamo inoltre cookie di terze parti che ci aiutano nell’analizzare come utilizzi questo sito web, memorizzare le tue preferenze e offrirti contenuti e pubblicità rilevanti per te. Questi cookie saranno memorizzati sul tuo browser solo a seguito del tuo consenso.</p><p>Puoi decidere di attivare o disattivare alcuni o tutti questi cookie, ma la disattivazione di alcuni di questi potrebbe avere un impatto sulla tua esperienza sul browser.</p>\",\n                \"showMore\": \"Mostra di più\",\n                \"showLess\": \"Mostra meno\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre attivi\",\n                        \"enable\": \"Abilitare\",\n                        \"disable\": \"Disattivare\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accettare tutto\",\n                        \"save\": \"Salva le mie preferenze\",\n                        \"reject\": \"Rifiuta tutto\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferenze di opt-out\",\n                \"description\": \"<p>Utilizziamo cookie di terze parti che ci aiutano ad analizzare come utilizzi questo sito web, memorizzare le tue preferenze e fornire i contenuti e gli annunci che sono rilevanti per te. Tuttavia, puoi disattivare questi cookie selezionando \\\"Non vendere o condividere i miei dati personali\\\" e facendo clic sul pulsante \\\"Salva le mie preferenze\\\". Una volta effettuato l'opt-out, è possibile attivarli nuovamente in qualsiasi momento deselezionando \\\"Non vendere o condividere i miei dati personali\\\" e facendo clic sul pulsante \\\"Salva le mie preferenze\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Non vendere o condividere i miei dati personali\",\n                        \"enable\": \"Abilitare\",\n                        \"disable\": \"Disattivare\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Dopo aver rilevato una richiesta di controllo della privacy dal tuo browser, le impostazioni di opt-out per questo sito web sono state rispettate e, pertanto, non è possibile modificare questa impostazione.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostra meno\",\n                \"showMore\": \"Mostra di più\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Annulla\",\n                        \"confirm\": \"Salva le mie preferenze\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferenze di consenso\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Durata\",\n                        \"description\": \"descrizione\"\n                    }\n                },\n                \"message\": \"Nessun cookie da visualizzare.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Si prega di accettare il consenso ai cookie\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Diamo valore alla tua privacy\",\n                \"description\": \"<p>Questo sito Web oi suoi strumenti di terze parti elaborano i dati personali. Puoi disattivare la vendita delle tue informazioni personali facendo clic sul collegamento \\\"Non vendere o condividere i miei dati personali\\\".</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accettare tutto\",\n                        \"reject\": \"Rifiuta tutto\",\n                        \"settings\": \"Personalizza\",\n                        \"readMore\": \"Politica sui cookie\",\n                        \"donotSell\": \"Non vendere o condividere i miei dati personali\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Salva le mie preferenze\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizza le preferenze di consenso\",\n                \"description\": \"<p>Utilizziamo i cookie per aiutarti a navigare in maniera efficiente e a svolgere determinate funzioni. Troverai informazioni dettagliate su tutti i cookie sotto ogni categoria di consensi sottostanti. I cookie categorizzatati come “Necessari” vengono memorizzati sul tuo browser in quanto essenziali per consentire le funzionalità di base del sito.</p><p>Utilizziamo inoltre cookie di terze parti che ci aiutano nell’analizzare come utilizzi questo sito web, memorizzare le tue preferenze e offrirti contenuti e pubblicità rilevanti per te. Questi cookie saranno memorizzati sul tuo browser solo a seguito del tuo consenso.</p><p>Puoi decidere di attivare o disattivare alcuni o tutti questi cookie, ma la disattivazione di alcuni di questi potrebbe avere un impatto sulla tua esperienza sul browser.</p>\",\n                \"showMore\": \"Mostra di più\",\n                \"showLess\": \"Mostra meno\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Sempre attivi\",\n                        \"enable\": \"Abilitare\",\n                        \"disable\": \"Disattivare\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accettare tutto\",\n                        \"save\": \"Salva le mie preferenze\",\n                        \"reject\": \"Rifiuta tutto\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferenze di opt-out\",\n                \"description\": \"<p>Utilizziamo cookie di terze parti che ci aiutano ad analizzare come utilizzi questo sito web, memorizzare le tue preferenze e fornire i contenuti e gli annunci che sono rilevanti per te. Tuttavia, puoi disattivare questi cookie selezionando \\\"Non vendere o condividere i miei dati personali\\\" e facendo clic sul pulsante \\\"Salva le mie preferenze\\\". Una volta effettuato l'opt-out, è possibile attivarli nuovamente in qualsiasi momento deselezionando \\\"Non vendere o condividere i miei dati personali\\\" e facendo clic sul pulsante \\\"Salva le mie preferenze\\\".</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Non vendere o condividere i miei dati personali\",\n                        \"enable\": \"Abilitare\",\n                        \"disable\": \"Disattivare\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Dopo aver rilevato una richiesta di controllo della privacy dal tuo browser, le impostazioni di opt-out per questo sito web sono state rispettate e, pertanto, non è possibile modificare questa impostazione.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostra meno\",\n                \"showMore\": \"Mostra di più\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Annulla\",\n                        \"confirm\": \"Salva le mie preferenze\"\n                    }\n                },\n                \"closeButton\": \"Vicino\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferenze di consenso\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Durata\",\n                        \"description\": \"descrizione\"\n                    }\n                },\n                \"message\": \"Nessun cookie da visualizzare.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Si prega di accettare il consenso ai cookie\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/en.json","ext":"json","size":9639,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"We value your privacy\",\n                \"description\": \"<p>We use cookies to enhance your browsing experience, serve personalised ads or content, and analyse our traffic. By clicking \\\"Accept All\\\", you consent to our use of cookies.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accept All\",\n                        \"reject\": \"Reject All\",\n                        \"settings\": \"Customise\",\n                        \"readMore\": \"Cookie Policy\",\n                        \"donotSell\": \"Do Not Sell or Share My Personal Information\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Save My Preferences\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Customise Consent Preferences\",\n                \"description\": \"<p>We use cookies to help you navigate efficiently and perform certain functions. You will find detailed information about all cookies under each consent category below.</p><p>The cookies that are categorised as \\\"Necessary\\\" are stored on your browser as they are essential for enabling the basic functionalities of the site. </p><p>We also use third-party cookies that help us analyse how you use this website, store your preferences, and provide the content and advertisements that are relevant to you. These cookies will only be stored in your browser with your prior consent.</p><p>You can choose to enable or disable some or all of these cookies but disabling some of them may affect your browsing experience.</p>\",\n                \"showMore\": \"Show more\",\n                \"showLess\": \"Show less\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Always Active\",\n                        \"enable\": \"Enable\",\n                        \"disable\": \"Disable\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accept All\",\n                        \"save\": \"Save My Preferences\",\n                        \"reject\": \"Reject All\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Opt-out Preferences\",\n                \"description\": \"<p>We use third-party cookies that help us analyse how you use this website, store your preferences, and provide the content and advertisements that are relevant to you. However, you can opt out of these cookies by checking \\\"Do Not Sell or Share My Personal Information\\\" and clicking the \\\"Save My Preferences\\\" button. Once you opt out, you can opt in again at any time by unchecking \\\"Do Not Sell or Share My Personal Information\\\" and clicking the \\\"Save My Preferences\\\" button.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Do Not Sell or Share My Personal Information\",\n                        \"enable\": \"Enable\",\n                        \"disable\": \"Disable\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Your opt-out settings for this website have been respected since we detected a <b>Global Privacy Control</b> signal from your browser and, therefore, you cannot change this setting.</p>\"\n                    }\n                },\n                \"showLess\": \"Show less\",\n                \"showMore\": \"Show more\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancel\",\n                        \"confirm\": \"Save My Preferences\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Consent Preferences\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duration\",\n                        \"description\": \"Description\"\n                    }\n                },\n                \"message\": \"No cookies to display.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Please accept cookies to access this content\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"We value your privacy\",\n                \"description\": \"<p>This website or its third-party tools process personal data. You can opt out of the sale of your personal information by clicking on the \\\"Do Not Sell or Share My Personal Information\\\" link.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accept All\",\n                        \"reject\": \"Reject All\",\n                        \"settings\": \"Customise\",\n                        \"readMore\": \"Cookie Policy\",\n                        \"donotSell\": \"Do Not Sell or Share My Personal Information\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Save My Preferences\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Customise Consent Preferences\",\n                \"description\": \"<p>We use cookies to help you navigate efficiently and perform certain functions. You will find detailed information about all cookies under each consent category below.</p><p>The cookies that are categorised as \\\"Necessary\\\" are stored on your browser as they are essential for enabling the basic functionalities of the site. </p><p>We also use third-party cookies that help us analyse how you use this website, store your preferences, and provide the content and advertisements that are relevant to you. These cookies will only be stored in your browser with your prior consent.</p><p>You can choose to enable or disable some or all of these cookies but disabling some of them may affect your browsing experience.</p>\",\n                \"showMore\": \"Show more\",\n                \"showLess\": \"Show less\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Always Active\",\n                        \"enable\": \"Enable\",\n                        \"disable\": \"Disable\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Accept All\",\n                        \"save\": \"Save My Preferences\",\n                        \"reject\": \"Reject All\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Opt-out Preferences\",\n                \"description\": \"<p>We use third-party cookies that help us analyse how you use this website, store your preferences, and provide the content and advertisements that are relevant to you. However, you can opt out of these cookies by checking \\\"Do Not Sell or Share My Personal Information\\\" and clicking the \\\"Save My Preferences\\\" button. Once you opt out, you can opt in again at any time by unchecking \\\"Do Not Sell or Share My Personal Information\\\" and clicking the \\\"Save My Preferences\\\" button.</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"Do Not Sell or Share My Personal Information\",\n                        \"enable\": \"Enable\",\n                        \"disable\": \"Disable\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Your opt-out settings for this website have been respected since we detected a <b>Global Privacy Control</b> signal from your browser and, therefore, you cannot change this setting.</p>\"\n                    }\n                },\n                \"showLess\": \"Show less\",\n                \"showMore\": \"Show more\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancel\",\n                        \"confirm\": \"Save My Preferences\"\n                    }\n                },\n                \"closeButton\": \"Close\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Consent Preferences\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duration\",\n                        \"description\": \"Description\"\n                    }\n                },\n                \"message\": \"No cookies to display.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Please accept cookies to access this content\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/includes/contents/es.json","ext":"json","size":10419,"mtime":1757312769,"type":"text","content":"{\n    \"gdpr\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valoramos tu privacidad\",\n                \"description\": \"<p>Usamos cookies para mejorar su experiencia de navegación, mostrarle anuncios o contenidos personalizados y analizar nuestro tráfico. Al hacer clic en “Aceptar todo” usted da su consentimiento a nuestro uso de las cookies.</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceptar todo\",\n                        \"reject\": \"Rechazar todo\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de cookies\",\n                        \"donotSell\": \"No vendan ni compartan mi información personal\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Guardar mis preferencias\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar las preferencias de consentimiento\",\n                \"description\": \"<p>Usamos cookies para ayudarle a navegar de manera eficiente y realizar ciertas funciones. Encontrará información detallada sobre cada una de las cookies bajo cada categoría de consentimiento a continuación.</p><p>Las cookies categorizadas como “Necesarias” se guardan en su navegador, ya que son esenciales para permitir las funcionalidades básicas del sitio web.</p><p>También utilizamos cookies de terceros que nos ayudan a analizar cómo usted utiliza este sitio web, guardar sus preferencias y aportar el contenido y la publicidad que le sean relevantes. Estas cookies solo se guardan en su navegador previo consentimiento por su parte.</p><p>Puede optar por activar o desactivar alguna o todas estas cookies, aunque la desactivación de algunas podría afectar a su experiencia de navegación.</p>\",\n                \"showMore\": \"Mostrar más\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Siempre activas\",\n                        \"enable\": \"Permitir\",\n                        \"disable\": \"Desactivar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceptar todo\",\n                        \"save\": \"Guardar mis preferencias\",\n                        \"reject\": \"Rechazar todo\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferencias de exclusión voluntaria\",\n                \"description\": \"<p>Utilizamos cookies de terceros que nos ayudan a analizar el uso que usted hace de este sitio web, a almacenar sus preferencias y a ofrecerle el contenido y la publicidad que le resulten de interés. Sin embargo, usted puede excluirse de estas cookies marcando «No vendan ni compartan mi información personal» y haciendo clic en el botón «Guardar mis preferencias». Una vez que haya optado por la exclusión, podrá cancelarlo en cualquier momento desmarcando «No vendan ni compartan mi información personal» y haciendo clic en el botón «Guardar mis preferencias».</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"No vendan ni compartan mi información personal\",\n                        \"enable\": \"Permitir\",\n                        \"disable\": \"Desactivar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Su configuración de exclusión voluntaria para este sitio web se ha respetado desde que detectamos una señal de control de privacidad global de su navegador y, por lo tanto, no puede cambiar esta configuración.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar más\",\n                \"showMore\": \"Mostrar menos\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Guardar mis preferencias\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferencias de consentimiento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duración\",\n                        \"description\": \"Descripción\"\n                    }\n                },\n                \"message\": \"No hay cookies para mostrar.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor acepte el consentimiento de cookies\"\n            }\n        }\n    },\n    \"ccpa\": {\n        \"notice\": {\n            \"elements\": {\n                \"title\": \"Valoramos tu privacidad\",\n                \"description\": \"<p>Este sitio web o sus herramientas de terceros procesan datos personales. Puede optar por no participar en la venta de su información personal haciendo clic en el enlace \\\"No vendan ni compartan mi información personal\\\".</p>\",\n                \"privacyLink\": \"\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceptar todo\",\n                        \"reject\": \"Rechazar todo\",\n                        \"settings\": \"Personalizar\",\n                        \"readMore\": \"Política de cookies\",\n                        \"donotSell\": \"No vendan ni compartan mi información personal\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"categoryPreview\": {\n            \"elements\": {\n                \"buttons\": {\n                    \"elements\": {\n                        \"save\": \"Guardar mis preferencias\"\n                    }\n                }\n            }\n        },\n        \"preferenceCenter\": {\n            \"elements\": {\n                \"title\": \"Personalizar las preferencias de consentimiento\",\n                \"description\": \"<p>Usamos cookies para ayudarle a navegar de manera eficiente y realizar ciertas funciones. Encontrará información detallada sobre cada una de las cookies bajo cada categoría de consentimiento a continuación.</p><p>Las cookies categorizadas como “Necesarias” se guardan en su navegador, ya que son esenciales para permitir las funcionalidades básicas del sitio web.</p><p>También utilizamos cookies de terceros que nos ayudan a analizar cómo usted utiliza este sitio web, guardar sus preferencias y aportar el contenido y la publicidad que le sean relevantes. Estas cookies solo se guardan en su navegador previo consentimiento por su parte.</p><p>Puede optar por activar o desactivar alguna o todas estas cookies, aunque la desactivación de algunas podría afectar a su experiencia de navegación.</p>\",\n                \"showMore\": \"Mostrar más\",\n                \"showLess\": \"Mostrar menos\",\n                \"category\": {\n                    \"elements\": {\n                        \"alwaysEnabled\": \"Siempre activas\",\n                        \"enable\": \"Permitir\",\n                        \"disable\": \"Desactivar\"\n                    }\n                },\n                \"buttons\": {\n                    \"elements\": {\n                        \"accept\": \"Aceptar todo\",\n                        \"save\": \"Guardar mis preferencias\",\n                        \"reject\": \"Rechazar todo\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"optoutPopup\": {\n            \"elements\": {\n                \"title\": \"Preferencias de exclusión voluntaria\",\n                \"description\": \"<p>Utilizamos cookies de terceros que nos ayudan a analizar el uso que usted hace de este sitio web, a almacenar sus preferencias y a ofrecerle el contenido y la publicidad que le resulten de interés. Sin embargo, usted puede excluirse de estas cookies marcando «No vendan ni compartan mi información personal» y haciendo clic en el botón «Guardar mis preferencias». Una vez que haya optado por la exclusión, podrá cancelarlo en cualquier momento desmarcando «No vendan ni compartan mi información personal» y haciendo clic en el botón «Guardar mis preferencias».</p>\",\n                \"optOption\": {\n                    \"elements\": {\n                        \"title\": \"No vendan ni compartan mi información personal\",\n                        \"enable\": \"Permitir\",\n                        \"disable\": \"Desactivar\"\n                    }\n                },\n                \"gpcOption\": {\n                    \"elements\": {\n                        \"description\": \"<p>Su configuración de exclusión voluntaria para este sitio web se ha respetado desde que detectamos una señal de control de privacidad global de su navegador y, por lo tanto, no puede cambiar esta configuración.</p>\"\n                    }\n                },\n                \"showLess\": \"Mostrar más\",\n                \"showMore\": \"Mostrar menos\",\n                \"buttons\": {\n                    \"elements\": {\n                        \"cancel\": \"Cancelar\",\n                        \"confirm\": \"Guardar mis preferencias\"\n                    }\n                },\n                \"closeButton\": \"Cerca\"\n            }\n        },\n        \"revisitConsent\": {\n            \"elements\": {\n                \"title\": \"Preferencias de consentimiento\"\n            }\n        },\n        \"auditTable\": {\n            \"elements\": {\n                \"headers\": {\n                    \"elements\": {\n                        \"id\": \"Cookie\",\n                        \"duration\": \"Duración\",\n                        \"description\": \"Descripción\"\n                    }\n                },\n                \"message\": \"No hay cookies para mostrar.\"\n            }\n        },\n        \"videoPlaceholder\": {\n            \"elements\": {\n                \"title\": \"Por favor acepte el consentimiento de cookies\"\n            }\n        }\n    }\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/api/class-api.php","ext":"php","size":15137,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package CookieYes\\Lite\\Admin\\Modules\\Banners\\Api\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Banners\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Banner;\nuse Exception;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Cookies API\n *\n * @class       Api\n * @version     3.0.0\n * @package     CookieYes\n * @extends     Rest_Controller\n */\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'banners';\n\n\t/**\n\t * Banner controller object.\n\t *\n\t * @var object\n\t */\n\tprotected $controller;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\t$this->controller = Controller::get_instance();\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t}\n\n\t/**\n\t * Register the routes for cookies.\n\t *\n\t * @return void\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/bulk',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'bulk' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<id>[\\d]+)',\n\t\t\tarray(\n\t\t\t\t'args' => array(\n\t\t\t\t\t'id' => array(\n\t\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => array(\n\t\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::EDITABLE,\n\t\t\t\t\t'callback'            => array( $this, 'update_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'update_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::EDITABLE ),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::DELETABLE,\n\t\t\t\t\t'callback'            => array( $this, 'delete_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'delete_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::DELETABLE ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/preview',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_preview' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/presets',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_presets' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/configs',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_configs' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\t/**\n\t * Get a collection of items.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_items( $request ) {\n\t\t$objects = array();\n\t\t$items   = $this->controller->get_items();\n\t\tforeach ( $items as $data ) {\n\t\t\t$object    = new Banner( (int) $data->banner_id );\n\t\t\t$data      = $this->prepare_item_for_response( $object, $request );\n\t\t\t$objects[] = $this->prepare_response_for_collection( $data );\n\t\t}\n\t\t// Wrap the data in a response object.\n\t\treturn rest_ensure_response( $objects );\n\t}\n\n\t/**\n\t * Get a collection of items.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_item( $request ) {\n\t\t$object = new Banner( (int) $request['id'] );\n\t\tif ( ! $object || 0 === $object->get_id() ) {\n\t\t\treturn new WP_Error( 'cookieyes_rest_invalid_id', __( 'Invalid ID.', 'cookie-law-info' ), array( 'status' => 404 ) );\n\t\t}\n\t\t$data = $this->prepare_item_for_response( $object, $request );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Create a new banner.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function create_item( $request ) {\n\t\tif ( ! empty( $request['id'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'cookieyes_rest_item_exists',\n\t\t\t\t__( 'Cannot create existing banner.', 'cookie-law-info' ),\n\t\t\t\tarray( 'status' => 400 )\n\t\t\t);\n\t\t}\n\t\t$object = $this->prepare_item_for_database( $request );\n\t\t$object->save();\n\t\t$data = $this->prepare_item_for_response( $object, $request );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Update an existing banner.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function update_item( $request ) {\n\t\tif ( empty( $request['id'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'cookieyes_rest_item_exists',\n\t\t\t\t__( 'Invalid banner id', 'cookie-law-info' ),\n\t\t\t\tarray( 'status' => 400 )\n\t\t\t);\n\t\t}\n\t\t$registered = $this->get_collection_params();\n\t\t$object     = $this->prepare_item_for_database( $request );\n\t\tif ( isset( $registered['language'], $request['language'] ) ) {\n\t\t\t$object->set_language( sanitize_text_field( $request['language'] ) );\n\t\t}\n\t\t$object->save();\n\t\t$data = $this->prepare_item_for_response( $object, $request );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Delete an existing banner.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function delete_item( $request ) {\n\t\tif ( empty( $request['id'] ) ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'cookieyes_rest_item_exists',\n\t\t\t\t__( 'Invalid banner id', 'cookie-law-info' ),\n\t\t\t\tarray( 'status' => 400 )\n\t\t\t);\n\t\t}\n\t\t$banner_id = $request['id'];\n\t\t$data      = $this->controller->remove( $banner_id );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Performs bulk update request.\n\t *\n\t * @param object $request WP request object.\n\t * @return array\n\t */\n\tpublic function bulk( $request ) {\n\t\t$clear = $request->get_param('clear');\n\t\tif ( is_null( $clear ) ) {\n\t\t\t$clear = true;\n\t\t} else {\n\t\t\t$clear = filter_var( $clear, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE );\n\t\t}\n\t\ttry {\n\t\t\tif ( ! isset( $request['banners'] ) ) {\n\t\t\t\treturn new WP_Error( 'cookieyes_rest_invalid_data', __( 'No data specified to create/edit banners', 'cookie-law-info' ), array( 'status' => 404 ) );\n\t\t\t}\n\t\t\tif ( ! defined( 'CKY_BULK_REQUEST' ) ) {\n\t\t\t\tdefine( 'CKY_BULK_REQUEST', true );\n\t\t\t}\n\t\t\t$item_objects = array();\n\t\t\t$objects      = array();\n\t\t\t$data         = $request['banners'];\n\n\t\t\tforeach ( $data as $_banner ) {\n\t\t\t\t$object = $this->prepare_item_for_database( $_banner );\n\t\t\t\t$object->save();\n\t\t\t\t$item_objects[] = $object;\n\t\t\t}\n\t\t\tforeach ( $item_objects as $data ) {\n\t\t\t\t$data      = $this->prepare_item_for_response( $data, $request );\n\t\t\t\t$objects[] = $this->prepare_response_for_collection( $data );\n\t\t\t}\n\t\t\tdo_action( 'cky_after_update_banner', $clear );\n\t\t\treturn rest_ensure_response( $objects );\n\t\t} catch ( Exception $e ) {\n\t\t\treturn new WP_Error( $e->getCode(), $e->getMessage(), array( 'status' => $e->getCode() ) );\n\t\t}\n\t}\n\n\t/**\n\t * Load banner preview.\n\t *\n\t * @param WP_REST_Request $request WP_REST_Request object.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_preview( $request ) {\n\t\t$data = array();\n\t\tif ( ! defined( 'CKY_PREVIEW_REQUEST' ) ) {\n\t\t\tdefine( 'CKY_PREVIEW_REQUEST', true );\n\t\t}\n\t\t$object   = $this->prepare_item_for_database( $request );\n\t\t$language = isset( $request['language'] ) ? $request['language'] : cky_default_language();\n\t\t$object->set_language( $language );\n\t\t$template       = $object->get_template();\n\t\t$data['html']   = $template['html'];\n\t\t$data['styles'] = $template['styles'];\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Load presets\n\t *\n\t * @param WP_REST_Request $request WP_REST_Request object.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_presets( $request ) {\n\t\t$registered = $this->get_collection_params();\n\t\t$presets    = array();\n\t\tif ( isset( $registered['ver'], $request['ver'] ) ) {\n\t\t\t$template = new \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Template( false );\n\t\t\t$presets  = $template->get_presets( $request['ver'] );\n\t\t}\n\t\treturn rest_ensure_response( $presets );\n\t}\n\n\t/**\n\t * Load default banner configs\n\t *\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_configs() {\n\t\t$configs = array(\n\t\t\t'gdpr' => $this->controller->get_default_configs(),\n\t\t\t'ccpa' => $this->controller->get_default_configs( 'ccpa' ),\n\t\t);\n\t\treturn rest_ensure_response( $configs );\n\t}\n\n\t/**\n\t * Format data to provide output to API\n\t *\n\t * @param object $object Object of the corresponding item.\n\t * @param array  $request Request params.\n\t * @return array\n\t */\n\tpublic function prepare_item_for_response( $object, $request ) {\n\t\t$data    = $this->get_formatted_item_data( $object );\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Format the support before sending.\n\t *\n\t * @param Banner $object Banner object.\n\t * @return object\n\t */\n\tpublic function get_formatted_item_data( $object ) {\n\t\treturn array(\n\t\t\t'id'         => $object->get_id(),\n\t\t\t'slug'       => $object->get_slug(),\n\t\t\t'name'       => $object->get_name(),\n\t\t\t'status'     => $object->get_status(),\n\t\t\t'default'    => $object->get_default(),\n\t\t\t'properties' => $object->get_settings(),\n\t\t\t'contents'   => $object->get_contents(),\n\t\t);\n\t}\n\n\t/**\n\t * Prepare a single item for create or update.\n\t *\n\t * @param  WP_REST_Request $request Request object.\n\t * @return object\n\t */\n\tpublic function prepare_item_for_database( $request ) {\n\t\t$id     = isset( $request['id'] ) ? absint( $request['id'] ) : 0;\n\t\t$object = new Banner( $id );\n\t\t$object->set_name( $request['name'] );\n\t\t$object->set_default( $request['default'] );\n\t\t$object->set_status( $request['status'] );\n\t\t$object->set_settings( $request['properties'] );\n\t\t$object->set_contents( $request['contents'] );\n\t\treturn $object;\n\t}\n\n\t/**\n\t * Get the query params for collections.\n\t *\n\t * @return array\n\t */\n\tpublic function get_collection_params() {\n\t\treturn array(\n\t\t\t'context'  => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t'search'   => array(\n\t\t\t\t'description'       => __( 'Limit results to those matching a string.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'string',\n\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t\t'ver'      => array(\n\t\t\t\t'description'       => __( 'Version', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'string',\n\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t\t'language' => array(\n\t\t\t\t'description'       => __( 'Language of the banner', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'string',\n\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\n\t\t);\n\t}\n\n\t/**\n\t * Get the Consent logs's schema, conforming to JSON Schema.\n\t *\n\t * @return array\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/draft-04/schema#',\n\t\t\t'title'      => 'Banners',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'id'            => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'view' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'name'          => array(\n\t\t\t\t\t'description' => __( 'Banner name for reference', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'slug'          => array(\n\t\t\t\t\t'description' => __( 'Banner unique name', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'settings'      => array(\n\t\t\t\t\t'description' => __( 'Banner settings.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'array',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'contents'      => array(\n\t\t\t\t\t'description' => __( 'Banner contents.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'default'       => array(\n\t\t\t\t\t'description' => __( 'Indicates whether the banner is default or not', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'date_created'  => array(\n\t\t\t\t\t'description' => __( 'The date the banner was created, as GMT.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'date-time',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'date_modified' => array(\n\t\t\t\t\t'description' => __( 'The date the banner was last modified, as GMT.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'date-time',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\n\t\t\t),\n\t\t);\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n\n} // End the class.\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/banners/class-banners.php","ext":"php","size":1851,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Banners file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Banners;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Api\\Api;\nuse CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Template;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Banners\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Banners extends Modules {\n\n\t/**\n\t * Banners controller class.\n\t *\n\t * @var object\n\t */\n\tprivate $controller;\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$this->load_apis();\n\t\t$this->controller = Controller::get_instance();\n\t\tadd_action( 'admin_init', array( $this->controller, 'install_tables' ) );\n\t\tadd_action( 'cky_after_update_banner', array( $this->controller, 'delete_cache' ) );\n\t\tadd_action( 'admin_init', array( $this->controller, 'reset_cache' ) );\n\t\tadd_action( 'admin_init', array( Template::get_instance(), 'delete_cache' ) );\n\t\tadd_filter( 'cky_registered_admin_menus', array( $this, 'register_menus' ) );\n\t\tadd_action( 'cky_reinstall_tables', array( $this->controller, 'reinstall' ) );\n\t}\n\n\t/**\n\t * Load API files\n\t *\n\t * @return void\n\t */\n\tpublic function load_apis() {\n\t\tnew Api();\n\t}\n\n\t/**\n\t * Register menus for this module.\n\t *\n\t * @param array $menus Registered menus.\n\t * @return array\n\t */\n\tpublic function register_menus( $menus ) {\n\t\t$menus['customize'] = array(\n\t\t\t'name'     => __( 'Cookie Banner', 'cookie-law-info' ),\n\t\t\t'callback' => array( $this, 'menu_page_template' ),\n\t\t\t'order'    => 2,\n\t\t\t'redirect' => CKY_APP_URL . '/customize',\n\t\t);\n\t\treturn $menus;\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/review-feedback/class-review-feedback.php","ext":"php","size":7671,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Review_Feedback file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Review_Feedback;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Includes\\Notice;\nuse CookieYes\\Lite\\Admin\\Modules\\Connect_Banner\\Connect_Banner;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Uninstall feedback Operation\n *\n * @class       Review_Feedback\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Review_Feedback extends Modules {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = '/settings/notices/review_notice';\n\n\t/**\n\t * WordPress.org review link\n\t *\n\t * @var string\n\t */\n\tprotected $review_url = 'https://wordpress.org/support/plugin/cookie-law-info/reviews/#new-post';\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\tadd_action( 'admin_notices', array( $this, 'add_notice' ) );\n\t\tadd_action( 'admin_print_footer_scripts', array( $this, 'add_script' ) );\n\t\tadd_filter( 'admin_footer_text', array( $this, 'add_footer_review_link' ) );\n\t}\n\n\t/**\n\t * Display review notice\n\t *\n\t * @return void\n\t */\n\tpublic function add_notice() {\n\t\t$plugin_dir_url = defined( 'CKY_PLUGIN_URL' ) ? CKY_PLUGIN_URL : trailingslashit( site_url() );\n\t\t$assets_path    = $plugin_dir_url . 'admin/dist/img/';\n\t\t$screen         = get_current_screen();\n\n\t\tif ( $screen && 'edit' === $screen->parent_base || ! current_user_can( 'manage_options' ) || true === cky_is_admin_page() ) {\n\t\t\treturn;\n\t\t}\n\t\t$notices = Notice::get_instance()->get();\n\t\tif ( ! isset( $notices['review_notice'] ) || empty( $notices['review_notice'] ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$connect_banner = Connect_Banner::get_instance()->check_condition();\n\t\tif ( $screen && 'plugins' === $screen->id && $connect_banner ) {\n\t\t\treturn;\n\t\t}\n\t\t?>\n\t\t<div class=\"cky-notice-review cky-admin-notice cky-admin-notice-default is-dismissible\">\n\t\t\t<div class=\"cky-admin-notice-content\">\n\t\t\t\t<div class=\"cky-admin-notice-message\">\n\t\t\t\t\t<div class=\"cky-row cky-align-center\">\n\t\t\t\t\t\t<div class=\"cky-col-12\">\n\t\t\t\t\t\t\t<h4 class=\"cky-admin-notice-header\"><img width=\"100\" src=\"<?php echo esc_url( $assets_path . 'logo.svg' ); ?>\" alt=\"<?php esc_attr_e( 'CookieYes Logo', 'cookie-law-info' ); ?>\"></h4> <?php //phpcs:ignore PluginCheck.CodeAnalysis.ImageFunctions.NonEnqueuedImage ?>\n\t\t\t\t\t\t\t<p style=\"margin-top: 15px; margin-bottom:5px;\"><?php \n\t\t\t\t\t\t\t\t/* translators: %1$s: opening bold tag, %2$s: closing bold tag */\n\t\t\t\t\t\t\t\techo wp_kses_post( sprintf( __( 'Hey, we at %1$s CookieYes %2$s would like to thank you for using our plugin. We would really appreciate if you could take a moment to drop a quick review that will inspire us to keep going.', 'cookie-law-info' ), '<b>', '</b>' ) ); \n\t\t\t\t\t\t\t?></p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"cky-col-12\">\n\t\t\t\t\t\t\t<div class=\"cky-flex\" style=\"margin-top: 10px;\">\n\t\t\t\t\t\t\t\t<button class=\"cky-button cky-button-review\"><?php echo esc_html__( 'Review now', 'cookie-law-info' ); ?></button>\n\t\t\t\t\t\t\t\t<button class=\"cky-button-outline-secondary cky-button cky-button-cancel\"><?php echo esc_html__( 'Remind me later', 'cookie-law-info' ); ?></button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"cky-admin-notice-close\"><button type=\"button\" aria-label=\"Close\" class=\"cky-close cky-button-cancel\"><span aria-hidden=\"true\">×</span></button></div>\n\t\t</div>\n\t\t<style>\n\t\t\t.cky-admin-notice {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\tposition: relative;\n\t\t\t\tmargin: 0 0 10px;\n\t\t\t\tborder-radius: 5px;\n\t\t\t\tbackground: #ffffff;\n\t\t\t\tmargin: 15px 20px 10px 2px;\n\t\t\t\twidth: calc(100% - 20px);\n\t\t\t\tfloat: left;\n\t\t\t\tposition: relative;\n\t\t\t\tborder: 1px solid #d7e1f2;\n\t\t\t}\n\t\t\t.cky-admin-notice-content {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 10px 15px 10px 15px;\n\t\t\t\tborder: 0;\n\t\t\t}\n\t\t\t.cky-admin-notice-header {\n\t\t\t\tmargin-top: 5px;\n\t\t\t}\n\t\t\t.cky-admin-notice .cky-admin-notice-content .cky-admin-notice-header {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmargin: 0 0 5px;\n\t\t\t\tpadding: 0;\n\t\t\t\tborder: 0;\n\t\t\t\tcolor: #23282d;\n\t\t\t\tfont-size: 16px;\n\t\t\t\tline-height: 18px;\n\t\t\t}\n\t\t\t.cky-button {\n\t\t\t\twidth: auto;\n\t\t\t\tmin-width: 80px;\n\t\t\t\tpadding: 8px 14px;\n\t\t\t\tbackground-color: #1863dc;\n\t\t\t\tcolor: #ffffff;\n\t\t\t\tborder: 1px solid #1863dc;\n\t\t\t\tfont-weight: 500;\n\t\t\t\tfont-size: 14px;\n\t\t\t\tborder-radius: 3px;\n\t\t\t\tcursor: pointer;\n\t\t\t\tline-height: 16px;\n\t\t\t}\n\t\t\t.cky-button-outline-secondary {\n\t\t\t\tbackground-color: transparent;\n\t\t\t\tcolor: #555d66;\n\t\t\t\tborder-color: #c9d0d6;\n\t\t\t}\n\t\t\t.cky-flex {\n\t\t\t\t.cky-button-outline-secondary{\n\t\t\t\t\tmargin-left: 10px;\n\t\t\t\t}\n\t\t\t}\n\t\t\t.cky-admin-notice .cky-close {\n\t\t\t\tfont-size: 20px;\n\t\t\t\tfont-weight: 300;\n\t\t\t\tpadding: 0;\n\t\t\t\tbackground: transparent;\n\t\t\t\tborder: none;\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tcolor: #7e7e7e;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\t\t\t.cky-admin-notice .cky-admin-notice-close {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmargin-right: 15px;\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 0;\n\t\t\t\ttop: 10px;\n\t\t\t}\n\t\t\t.cky-admin-notice .cky-admin-notice-content p {\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\t.cky-admin-notice-footer {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 45px;\n\t\t\t\tbottom: 15px;\n\t\t\t}\n\t\t\t.cky-admin-notice-message {\n\t\t\t\tflex: 1;\n\t\t\t\tposition: relative;\n\t\t\t\tpadding: 5px 20px 3px 0px;\n\t\t\t}\n\t\t</style>\n\t\t<?php\n\n\t}\n\n\t/**\n\t * Review feedback scripts.\n\t *\n\t * @return void\n\t */\n\tpublic function add_script() {\n\t\t$expiry = 30 * DAY_IN_SECONDS;\n\t\t?>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t(function($) {\n\t\t\t\t\tconst expiration = '<?php echo esc_js( $expiry ); ?>';\n\t\t\t\t\tfunction ckyUpdateNotice( expiry = expiration ) {\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\turl: \"<?php echo esc_url_raw( rest_url() . $this->namespace . $this->rest_base ); ?>\",\n\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t'X-WP-Nonce': '<?php echo esc_js( wp_create_nonce( 'wp_rest' ) ); ?>',\n\t\t\t\t\t\t\t\tcontentType: 'application/json'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\t\tdataType: 'json',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\texpiry: expiry\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcomplete: function( response ) {\n\t\t\t\t\t\t\t\t$('.cky-notice-review').hide();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\t$(document).on('click', '.cky-button-cancel', function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tckyUpdateNotice();\n\t\t\t\t\t});\n\t\t\t\t\t$(document).on('click', '.cky-button-review', function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tckyUpdateNotice(0);\n\t\t\t\t\t\twindow.open('<?php echo esc_js( $this->review_url ); ?>');\n\t\t\t\t\t});\n\t\t\t\t})(jQuery)\n\t\t\t</script>\n\t\t\t<?php\n\t}\n\n\tfunction add_footer_review_link($footer_text) {\n\t\t$notices = Notice::get_instance()->get_dismissed();\n\t\n\t\tif ( isset( $notices['review_notice'] ) && ( $notices['review_notice'] === false ) ) {\n\t\t\treturn $footer_text;\n\t\t}\n\t\t\n\t\t// Check if we are on the plugin page\n\t\t$screen = get_current_screen();\n\t\tif ($screen->id == 'toplevel_page_cookie-law-info') {\n\t\t\t$link_text = esc_html__( 'Give us a 5-star rating!', 'cookie-law-info' );\n\t\t\t$link1 = sprintf(\n\t\t\t\t'<a class=\"cky-button-review\" href=\"%1$s\" target=\"_blank\" title=\"%2$s\">&#9733;&#9733;&#9733;&#9733;&#9733;</a>',\n\t\t\t\t$this->review_url,\n\t\t\t\t$link_text\n\t\t\t);\n\t\t\t$link2 = sprintf(\n\t\t\t\t'<a class=\"cky-button-review\" href=\"%1$s\" target=\"_blank\" title=\"%2$s\">WordPress.org</a>',\n\t\t\t\t$this->review_url,\n\t\t\t\t$link_text\n\t\t\t);\n\n\t\t\treturn sprintf(\n\t\t\t\t/* translators: %1$s: CookieYes plugin name in bold, %2$s: star rating link, %3$s: WordPress.org link */\n\t\t\t\tesc_html__(\n\t\t\t\t\t'Please rate %1$s %2$s on %3$s to help us spread the word. Thank you from the team CookieYes!',\n\t\t\t\t\t'cookie-law-info'\n\t\t\t\t),\n\t\t\t\tsprintf( '<strong>%1$s</strong>', 'CookieYes' ),\n\t\t\t\twp_kses_post( $link1 ),\n\t\t\t\twp_kses_post( $link2 )\n\t\t\t);\n\t\t}\n\t\treturn $footer_text;\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/class-cache.php","ext":"php","size":1322,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Class Cookies file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache;\n\nuse CookieYes\\Lite\\Includes\\Modules;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Cookies\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Cache extends Modules {\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\tadd_action( 'plugins_loaded', array( $this, 'load_services' ) );\n\t}\n\n\t/**\n\t * Load services classes.\n\t *\n\t * @return void\n\t */\n\tpublic function load_services() {\n\t\t$modules = $this->get_services();\n\t\tforeach ( $modules as $module ) {\n\t\t\t$parts = explode( '_', $module );\n\t\t\t$temp  = array();\n\t\t\tforeach ( $parts as $part ) {\n\t\t\t\t$temp[] = ucfirst( $part );\n\t\t\t}\n\t\t\t$class      = implode( '_', $temp );\n\t\t\t$class_name = 'CookieYes\\Lite\\\\Admin\\\\Modules\\\\Cache\\\\Services\\\\' . ucfirst( $class );\n\n\t\t\tif ( class_exists( $class_name ) ) {\n\t\t\t\tnew $class_name( $module );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Get supported list of services.\n\t *\n\t * @return array\n\t */\n\tpublic function get_services() {\n\t\treturn array(\n\t\t\t'wp_rocket',\n\t\t\t'autoptimize',\n\t\t\t'hummingbird',\n\t\t\t'w3_total_cache',\n\t\t\t'wp_fastest_cache',\n\t\t\t'wp_super_cache',\n\t\t\t'breeze',\n\t\t\t'siteground_optimize',\n\t\t\t'cache_enabler',\n\t\t\t'litespeed_cache',\n\t\t);\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-services.php","ext":"php","size":1511,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nabstract class Services {\n\n\t/**\n\t * Module constructor.\n\t */\n\tpublic function __construct() {\n\t\tif ( $this->is_active() ) {\n\t\t\t$this->run();\n\t\t}\n\t}\n\n\t/**\n\t * Load plugin hooks\n\t *\n\t * @return void\n\t */\n\tpublic function load_hooks() {\n\t\tadd_action( 'cky_after_update_banner', array( $this, 'clear_cache' ), 10, 1 );\n\t\tadd_action( 'cky_after_update_cookie', array( $this, 'clear_cache' ) );\n\t\tadd_action( 'cky_after_update_cookie_category', array( $this, 'clear_cache' ) );\n\t\tadd_action( 'cky_after_connect', array( $this, 'clear_cache' ) );\n\t\tadd_action( 'cky_after_update_settings', array( $this, 'clear_cache' ), 10, 1 );\n\t\tadd_action( 'cky_after_activate', array( $this, 'clear_cache' ) );\n\t\tadd_action( 'cky_clear_cache', array( $this, 'clear_cache' ) );\n\t}\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tabstract public function is_active();\n\n\t/**\n\t * Initializes the module. Always executed even if the module is deactivated.\n\t *\n\t * Do not use __construct in subclasses, use init() instead\n\t */\n\tabstract public function clear_cache();\n\n\t/**\n\t * Initializes the module. Always executed even if the module is deactivated.\n\t *\n\t * Do not use __construct in subclasses, use init() instead\n\t */\n\tabstract public function run();\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-wp-super-cache.php","ext":"php","size":995,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Wp_Super_Cache extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn function_exists( 'wp_cache_clean_cache' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\tglobal $file_prefix, $supercachedir;\n\t\tif ( empty( $supercachedir ) && function_exists( 'get_supercache_dir' ) ) {\n\t\t\t$supercachedir = get_supercache_dir();\n\t\t}\n\t\treturn wp_cache_clean_cache( $file_prefix );\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-autoptimize.php","ext":"php","size":821,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Autoptimize extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn class_exists( \\autoptimizeCache::class );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn \\autoptimizeCache::clearall();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-breeze.php","ext":"php","size":810,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Breeze extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn class_exists( \\Breeze_Admin::class );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return void\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\tdo_action( 'breeze_clear_all_cache' );\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-litespeed-cache.php","ext":"php","size":824,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Litespeed_Cache extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn class_exists( \\LiteSpeed\\Purge::class );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn \\LiteSpeed\\Purge::purge_all();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-wp-rocket.php","ext":"php","size":801,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Wp_Rocket extends Services {\n\n\t/**\n\t * Load plugin hooks\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn function_exists( 'rocket_clean_domain' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn rocket_clean_domain();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-w3-total-cache.php","ext":"php","size":814,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass W3_Total_Cache extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn function_exists( 'w3tc_pgcache_flush' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn w3tc_pgcache_flush();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-siteground-optimize.php","ext":"php","size":833,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Siteground_Optimize extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn function_exists( 'sg_cachepress_purge_cache' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn sg_cachepress_purge_cache();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-hummingbird.php","ext":"php","size":828,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Hummingbird extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn class_exists( \\Hummingbird\\WP_Hummingbird::class );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return void\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\tdo_action( 'wphb_clear_page_cache' );\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-cache-enabler.php","ext":"php","size":803,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Cache_Enabler extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn has_action( 'ce_clear_cache' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return void\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\tdo_action( 'ce_clear_cache' );\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-wp-fastest-cache.php","ext":"php","size":820,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Wp_Fastest_Cache extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn function_exists( 'wpfc_clear_all_cache' );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\treturn wpfc_clear_all_cache();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/cache/services/class-borlabs-cache.php","ext":"php","size":1145,"mtime":1756375105,"type":"text","content":"<?php\n/**\n * Abstract class to handle all the modules on the plugin.\n *\n * @package CookieYes\\Lite\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Cache\\Services;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Cache\\Services\\Services;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Module\n */\nclass Borlabs_Cache extends Services {\n\n\t/**\n\t * Load hooks of each plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function run() {\n\t\t$this->load_hooks();\n\t}\n\n\t/**\n\t * Check if the the cache service is installed/active;\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_active() {\n\t\treturn class_exists( \\Borlabs\\Cache\\Frontend\\Garbage::class );\n\t}\n\n\t/**\n\t * Clear the cache if any.\n\t *\n\t * @return boolean\n\t */\n\tpublic function clear_cache( $clear = true ) {\n\t\tif ( $clear === false ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( function_exists( \\Borlabs\\Cache\\Frontend\\Garbage::getInstance()->clearStylesPreCacheFiles() ) ) {\n\t\t\t\\Borlabs\\Cache\\Frontend\\Garbage::getInstance()->clearStylesPreCacheFiles();\n\t\t}\n\t\tif ( function_exists( \\Borlabs\\Cache\\Frontend\\Garbage::getInstance()->clearCache() ) ) {\n\t\t\t\\Borlabs\\Cache\\Frontend\\Garbage::getInstance()->clearCache();\n\t\t}\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/settings/includes/class-controller.php","ext":"php","size":17292,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Controller file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Includes\\Cloud;\nuse WP_Error;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Controller\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Controller extends Cloud {\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t/**\n\t * Localize common plugin settings.\n\t *\n\t * @param array $data Data.\n\t * @return array\n\t */\n\tpublic function load_common_settings( $data ) {\n\t\t$settings                = new Settings();\n\t\t$data['settings']        = $settings->get();\n\t\t$data['settings']['url'] = get_site_url();\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Sync data to CookieYes web app.\n\t *\n\t * @return array\n\t */\n\tpublic function sync() {\n\t\t$settings = new Settings();\n\t\t$this->make_auth_request();\n\t\t$data     = $this->prepare_data();\n\t\t$response = $this->post(\n\t\t\t'websites/' . $this->get_website_id() . '/sync',\n\t\t\twp_json_encode( $data )\n\t\t);\n\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 !== $response_code ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\n\t\tif ( ! array_key_exists( 'scriptUrl', $response ) ) {\n\t\t\treturn false;\n\t\t}\n\t\tdo_action( 'cky_after_connect' );\n\t\treturn $settings->get();\n\t}\n\n\t/**\n\t * This API should be called to disconnect from the web app.\n\t *\n\t * @return boolean\n\t */\n\tpublic function disconnect() {\n\t\t$settings = new Settings();\n\t\t$options  = $settings->get();\n\t\t$this->make_auth_request();\n\t\t$response      = $this->post(\n\t\t\t'plugin/disconnect',\n\t\t\twp_json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'website_id' => $settings->get_website_id(),\n\t\t\t\t\t'platform'   => 'wordpress',\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 !== $response_code ) {\n\t\t\treturn false;\n\t\t}\n\t\t$options['api']['token'] = '';\n\t\t$settings->update( $options );\n\t\tdo_action( 'cky_after_connect' );\n\t\treturn true;\n\t}\n\n\t/**\n\t * Prepare entire data before sending.\n\t *\n\t * @return array\n\t */\n\tpublic function prepare_data() {\n\t\t$settings = new Settings();\n\t\t$data     = array();\n\t\t$item     = \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller::get_instance()->get_active_item();\n\t\t$banner   = new \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Banner( $item );\n\t\t/** General Settings */\n\t\t$data['settings']   = array(\n\t\t\t'plan'       => $settings->get_plan(),\n\t\t\t'domain'     => home_url(),\n\t\t\t'consentLog' => array(\n\t\t\t\t'status' => true,\n\t\t\t),\n\t\t);\n\t\t$data['categories'] = $this->prepare_cookies();\n\t\t$data['banners']    = $this->prepare_banners();\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Prepare and format cookies prior to syncing.\n\t *\n\t * @return array\n\t */\n\tpublic function prepare_cookies() {\n\t\t$data  = array();\n\t\t$items = \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Category_Controller::get_instance()->get_items();\n\n\t\tforeach ( $items as $item ) {\n\t\t\t$object = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie_Categories( $item );\n\t\t\t$data[] = array(\n\t\t\t\t'name'            => $object->get_name(),\n\t\t\t\t'description'     => $object->get_description(),\n\t\t\t\t'slug'            => $object->get_slug(),\n\t\t\t\t'isNecessaryLike' => 'necessary' === $object->get_slug() ? true : false,\n\t\t\t\t'active'          => $object->get_visibility(),\n\t\t\t\t'defaultConsent'  => array(\n\t\t\t\t\t'gdpr' => $object->get_slug() === 'necessary' ? true : $object->get_prior_consent(),\n\t\t\t\t\t'ccpa' => $object->get_sell_personal_data() === true && $object->get_slug() !== 'necessary' ? false : true,\n\t\t\t\t),\n\t\t\t\t'cookies'         => $this->get_cookies( $object->get_id() ),\n\t\t\t);\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Get cookies by category\n\t *\n\t * @param string $category Category slug.\n\t * @return array\n\t */\n\tpublic function get_cookies( $category = '' ) {\n\t\t$data  = array();\n\t\t$items = \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie_Controller::get_instance()->get_items_by_category( $category );\n\t\tforeach ( $items as $item ) {\n\t\t\t$object = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie( $item );\n\t\t\t$data[] = array(\n\t\t\t\t'cookie_id'   => $object->get_name(),\n\t\t\t\t'type'        => $object->get_type(),\n\t\t\t\t'domain'      => $object->get_domain(),\n\t\t\t\t'duration'    => $object->get_duration(),\n\t\t\t\t'description' => $object->get_description(),\n\t\t\t\t'website_id'  => $this->get_website_id(),\n\t\t\t\t'provider'    => $object->get_url_pattern(),\n\t\t\t);\n\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Prepare and format banners prior to sync.\n\t *\n\t * @return array\n\t */\n\tpublic function prepare_banners() {\n\t\t$items   = \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller::get_instance()->get_items();\n\t\t$banners = array();\n\t\tforeach ( $items as $item ) {\n\t\t\t$object                                    = new \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Banner( $item );\n\t\t\t$banner                                    = array(\n\t\t\t\t'id'      => $object->get_id(),\n\t\t\t\t'name'    => $object->get_name(),\n\t\t\t\t'slug'    => $object->get_slug(),\n\t\t\t\t'default' => $object->get_default(),\n\t\t\t\t'status'  => ( true === $object->get_status() ? 'active' : 'inactive' ),\n\t\t\t);\n\t\t\t$data                                      = array_merge( $banner, array_merge( $object->get_settings(), array( 'content' => $object->get_contents() ) ) );\n\t\t\t$data['settings']['languages']['selected'] = cky_selected_languages();\n\t\t\t$data['settings']['languages']['default']  = cky_default_language();\n\n\t\t\t$data['settings']['ruleSet'] = array(\n\t\t\t\tarray(\n\t\t\t\t\t'code'    => 'ALL',\n\t\t\t\t\t'regions' => array(),\n\t\t\t\t),\n\t\t\t);\n\n\t\t\t$banners[] = $data;\n\t\t}\n\t\treturn $banners;\n\t}\n\n\t/**\n\t *  Fetch site info from either locally or from API.\n\t *\n\t * @param array $args Array of arguments.\n\t * @return array\n\t */\n\tpublic function get_info( $args = array() ) {\n\t\t$data = array();\n\t\tif ( false === cky_is_cloud_request() ) {\n\t\t\t$data = $this->get_site_info( $args );\n\t\t} else {\n\t\t\t$data = $this->get_app_info( $args );\n\t\t}\n\t\treturn $data;\n\t}\n\n\t/**\n\t *  Get the current plan details and features list from a local DB.\n\t *\n\t * @param array $args Array of arguments.\n\t * @return array\n\t */\n\tpublic function get_site_info( $args = array() ) {\n\t\treturn $this->get_default();\n\t}\n\n\t/**\n\t * Get default site info.\n\t *\n\t * @return array\n\t */\n\tpublic function get_default() {\n\t\t$settings = new Settings();\n\t\t$scan     = \\CookieYes\\Lite\\Admin\\Modules\\Scanner\\Includes\\Controller::get_instance()->get_info();\n\t\treturn array(\n\t\t\t'id'             => '',\n\t\t\t'url'            => get_site_url(),\n\t\t\t'plan'           => array(\n\t\t\t\t'id'          => '',\n\t\t\t\t'slug'        => 'free',\n\t\t\t\t'name'        => __( 'Free', 'cookie-law-info' ),\n\t\t\t\t'description' => __( 'Free Plan', 'cookie-law-info' ),\n\t\t\t\t'scan_limit'  => '100',\n\t\t\t\t'log_limit'   => 5000,\n\t\t\t\t'features'    => array(\n\t\t\t\t\t'multi_law'         => false,\n\t\t\t\t\t'custom_css'        => false,\n\t\t\t\t\t'custom_branding'   => false,\n\t\t\t\t\t'config_geo_rules'  => false,\n\t\t\t\t\t'max_free_websites' => 1,\n\t\t\t\t\t'remove_powered_by' => false,\n\t\t\t\t\t'popup_layout'      => false,\n\t\t\t\t),\n\t\t\t),\n\t\t\t'banners'        => array(\n\t\t\t\t'status' => \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller::get_instance()->check_status(),\n\t\t\t),\n\t\t\t'consent_logs'   => array(\n\t\t\t\t'status' => $settings->get_consent_log_status(),\n\t\t\t),\n\t\t\t'scans'          => array(\n\t\t\t\t'date'   => isset( $scan['date'] ) ? $scan['date'] : '',\n\t\t\t\t'status' => isset( $scan['status'] ) ? $scan['status'] : false,\n\t\t\t),\n\t\t\t'languages'      => array(\n\t\t\t\t'default' => $settings->get_default_language(),\n\t\t\t),\n\t\t\t'tables_missing' => count( cky_missing_tables() ) > 0 ? true : false,\n\t\t);\n\t}\n\n\t/**\n\t * Check API before initializing the plugin.\n\t *\n\t * @return void\n\t */\n\tpublic function check_api() {\n\t\tif ( ! cky_is_cloud_request() ) {\n\t\t\treturn;\n\t\t}\n\t\t$response = $this->get_app_info();\n\t\tif ( is_wp_error( $response ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$this->maybe_update_settings( $response );\n\t}\n\n\t/**\n\t * Maybe update the plugin settings if required.\n\t *\n\t * @param array $response Response from the web app.\n\t * @return void\n\t */\n\tpublic function maybe_update_settings( $response ) {\n\t\t$settings             = new Settings();\n\t\t$data                 = $settings->get();\n\t\t$data['consent_logs'] = isset( $response['consent_logs'] ) ? $response['consent_logs'] : array();\n\t\t$data['languages']    = isset( $response['languages'] ) ? $response['languages'] : array();\n\t\tupdate_option( 'cky_settings', $data );\n\t}\n\n\t/**\n\t * Load site info from the web app.\n\t *\n\t * @param array $args Array of arguments.\n\t * @return array\n\t */\n\tpublic function get_app_info( $args = array() ) {\n\t\t$data = array();\n\t\tif ( ! $this->get_website_id() ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'cky_invalid_website_id',\n\t\t\t\t__( 'Invalid Website ID', 'cookie-law-info' ),\n\t\t\t\tarray( 'status' => 404 )\n\t\t\t);\n\n\t\t}\n\t\t$response      = $this->get(\n\t\t\t'websites/' . $this->get_website_id()\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$response        = json_decode( wp_remote_retrieve_body( $response ), true );\n\n\t\t\t$user            = isset( $response['user'] ) ? $response['user'] : array();\n\t\t\t$plan            = isset( $response['websiteplan'] ) ? $response['websiteplan'] : array();\n\t\t\t$features        = isset( $plan['features'] ) ? $plan['features'] : array();\n\t\t\t$scan_timestamp  = isset( $response['last_scan_at'] ) ? strtotime( sanitize_text_field( $response['last_scan_at'] ) ) : false;\n\t\t\t$scan_success_timestamp  = isset( $response['last_successful_scan_at'] ) ? strtotime( sanitize_text_field( $response['last_successful_scan_at'] ) ) : false;\n\t\t\t$date            = isset( $scan_timestamp ) && is_int( $scan_timestamp ) ? gmdate( 'd M Y', $scan_timestamp ) : '';\n\t\t\t$time            = isset( $scan_timestamp ) && is_int( $scan_timestamp ) ? gmdate( 'H:i:s', $scan_timestamp ) : '';\n\t\t\t$success_date            = isset( $scan_success_timestamp ) && is_int( $scan_success_timestamp ) ? gmdate( 'd M Y', $scan_success_timestamp ) : '';\n\t\t\t$success_time            = isset( $scan_success_timestamp ) && is_int( $scan_success_timestamp ) ? gmdate( 'H:i:s', $scan_success_timestamp ) : '';\n\t\t\t$applicable_laws = isset( $response['applicableLaws'] ) ? $response['applicableLaws'] : array( 'gdpr' );\n\t\t\t$applicable_laws = implode( ' & ', $applicable_laws );\n\n\t\t\t$grace_period      = isset( $response['grace_period_ends_at'] ) ? strtotime( sanitize_text_field( $response['grace_period_ends_at'] ) ) : false;\n\t\t\t$grace_period_ends = isset( $grace_period ) && is_int( $grace_period ) ? gmdate( 'F d, Y', $grace_period ) : '';\n\n\t\t\t$pageview_reset_timestamp = isset( $response['pageviews']['ends_at'] ) ? strtotime( sanitize_text_field( $response['pageviews']['ends_at'] ) ) : false;\n\t\t\t$pageview_reset_date = is_int( $pageview_reset_timestamp ) ? gmdate( 'F d, Y', $pageview_reset_timestamp ) : '';\n\n\t\t\t$data = array(\n\t\t\t\t'id'             => $this->get_website_id(),\n\t\t\t\t'url'            => isset( $response['url'] ) ? esc_url_raw( $response['url'] ) : esc_url_raw( get_site_url() ),\n\t\t\t\t'status'         => isset( $response['status'] ) ? sanitize_text_field( $response['status'] ) : '',\n\t\t\t\t'banner_disabled_manually' => isset($response['banner_disabled_manually']) && true == $response['banner_disabled_manually'],\n\t\t\t\t'user'           => array(\n\t\t\t\t\t'name'        => isset( $user['name'] ) ? sanitize_text_field( $user['name'] ) : '',\n\t\t\t\t\t'email'       => isset( $user['email'] ) ? sanitize_email( $user['email'] ) : '',\n\t\t\t\t),\n\t\t\t\t'plan'           => array(\n\t\t\t\t\t'id'          => isset( $plan['id'] ) ? sanitize_text_field( $plan['id'] ) : '',\n\t\t\t\t\t'slug'        => isset( $plan['slug'] ) ? sanitize_text_field( $plan['slug'] ) : '',\n\t\t\t\t\t'name'        => isset( $plan['name'] ) ? sanitize_text_field( $plan['name'] ) : '',\n\t\t\t\t\t'description' => isset( $plan['description'] ) ? sanitize_text_field( $plan['description'] ) : '',\n\t\t\t\t\t'scan_limit'  => isset( $plan['scan_limit'] ) ? absint( $plan['scan_limit'] ) : 100,\n\t\t\t\t\t'log_limit'   => isset( $plan['log_limit'] ) ? absint( $plan['log_limit'] ) : 5000,\n\t\t\t\t\t'log_limit'   => isset( $plan['log_limit'] ) ? absint( $plan['log_limit'] ) : 5000,\n\t\t\t\t\t'features'    => array(\n\t\t\t\t\t\t'multi_law'         => isset( $features['multi_law'] ) && true === $features['multi_law'] ? true : false,\n\t\t\t\t\t\t'custom_css'        => isset( $features['custom_css'] ) && true === $features['custom_css'] ? true : false,\n\t\t\t\t\t\t'custom_branding'   => isset( $features['custom_branding'] ) && true === $features['custom_branding'] ? true : false,\n\t\t\t\t\t\t'config_geo_rules'  => isset( $features['config_geo_rules'] ) && true === $features['config_geo_rules'] ? true : false,\n\t\t\t\t\t\t'max_free_websites' => isset( $plan['max_free_websites'] ) ? absint( $plan['max_free_websites'] ) : 1,\n\t\t\t\t\t\t'remove_powered_by' => isset( $features['remove_powered_by'] ) && true === $features['remove_powered_by'] ? true : false,\n\t\t\t\t\t\t'popup_layout'      => isset( $features['popup_layout'] ) && true === $features['popup_layout'] ? true : false,\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\t'banners'        => array(\n\t\t\t\t\t'status' => isset( $response['banner_status'] ) && 1 === $response['banner_status'] ? true : false,\n\t\t\t\t\t'laws'   => $applicable_laws,\n\t\t\t\t\t'is_iab_enabled' => isset( $response['isIABEnabled'] ) && true === $response['isIABEnabled'],\n\t\t\t\t\t'targetedLocation' => isset( $response['targetedLocation'] ) ? $response['targetedLocation'] : 'worldwide',\n\t\t\t\t),\n\t\t\t\t'consent_logs'   => array(\n\t\t\t\t\t'status' => isset( $response['visitor_log'] ) && true === $response['visitor_log'] ? true : false,\n\t\t\t\t),\n\t\t\t\t'scans'          => array(\n\t\t\t\t\t'date'   => array(\n\t\t\t\t\t\t'date' => $date,\n\t\t\t\t\t\t'time' => $time,\n\t\t\t\t\t),\n\t\t\t\t\t'status' => isset( $response['last_scan_at'] ) && '' !== $response['last_scan_at'] ? true : false,\n\t\t\t\t),\n\t\t\t\t'success_scan'          => array(\n\t\t\t\t\t'date'   => array(\n\t\t\t\t\t\t'date' => $success_date,\n\t\t\t\t\t\t'time' => $success_time,\n\t\t\t\t\t),\n\t\t\t\t\t'status' => isset( $response['last_successful_scan_at'] ) && '' !== $response['last_successful_scan_at'],\n\t\t\t\t),\n\t\t\t\t'languages'      => array(\n\t\t\t\t\t'selected' => isset( $response['language']['preferred'] ) ? cky_sanitize_text( $response['language']['preferred'] ) : array(),\n\t\t\t\t\t'default'  => isset( $response['settings_json']['defaultLanguage'] ) ? cky_sanitize_text( $response['settings_json']['defaultLanguage'] ) : 'en',\n\t\t\t\t),\n\t\t\t\t'tables_missing' => false,\n\t\t\t\t'pageviews'      => array(\n\t\t\t\t\t'count'    => isset( $response['pageviews']['views'] ) ? absint( $response['pageviews']['views'] ) : 0,\n\t\t\t\t\t'limit'    => isset( $response['pageviews']['views_limit'] ) ? absint( $response['pageviews']['views_limit'] ) : 25000,\n\t\t\t\t\t'exceeded' => isset( $response['pageviews']['limit_exceeded'] ) && 1 === absint( $response['pageviews']['limit_exceeded'] ),\n\t\t\t\t\t'ends_at'   => $pageview_reset_date,\n\t\t\t\t),\n\t\t\t\t'website'        => array(\n\t\t\t\t\t'status'               => isset( $response['website_status'] ) ? sanitize_text_field( $response['website_status'] ) : 'active',\n\t\t\t\t\t'is_trial'             => isset( $response['is_trial'] ) && true === $response['is_trial'],\n\t\t\t\t\t'is_trial_with_card'   => isset( $response['trial_with_card'] ) && true === $response['trial_with_card'],\n\t\t\t\t\t'grace_period_ends_at' => $grace_period_ends,\n\t\t\t\t\t'payment_status'       => isset( $response['payment_status'] ) && true === $response['payment_status'],\n\t\t\t\t\t'selected_plan'        => isset( $plan['slug'] ) ? sanitize_text_field( $plan['slug'] ) : 'free',\n\t\t\t\t\t'canStartOptoutTrial'  => isset( $response['canStartOptoutTrial'] ) ? (bool) $response['canStartOptoutTrial'] : false,\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn $data;\n\t\t}\n\t\treturn new WP_Error(\n\t\t\t'cky_api_fetching_failed',\n\t\t\t__( 'Failed to fetch data from the API', 'cookie-law-info' ),\n\t\t\tarray( 'status' => 400 )\n\t\t);\n\t}\n\n\t/**\n\t * Force update app settings if any changes from the plugin side.\n\t *\n\t * @param array $settings Settings array.\n\t * @return void\n\t */\n\tpublic function maybe_update_app_settings( $settings = array() ) {\n\t\tif ( ! cky_is_cloud_request() || ! $this->get_website_id() ) {\n\t\t\treturn;\n\t\t}\n\t\t$data     = array(\n\t\t\t'preferred_languages' => isset( $settings['languages']['selected'] ) ? $settings['languages']['selected'] : array(),\n\t\t\t'default_language'    => isset( $settings['languages']['default'] ) ? $settings['languages']['default'] : 'en',\n\t\t\t'visitor_log'         => isset( $settings['consent_logs']['status'] ) && true === $settings['consent_logs']['status'] ? 1 : 0,\n\t\t);\n\t\t$response = $this->put(\n\t\t\t'websites/' . $this->get_website_id(),\n\t\t\twp_json_encode( $data )\n\t\t);\n\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 !== $response_code ) {\n\t\t\treturn new WP_Error(\n\t\t\t\t'cky_api_settings_update_failed',\n\t\t\t\t__( 'Failed to the update the data to web app', 'cookie-law-info' ),\n\t\t\t\tarray( 'status' => 200 )\n\t\t\t);\n\t\t}\n\t}\n\t/**\n\t * Delete the cache.\n\t *\n\t * @return void\n\t */\n\tpublic function delete_cache() {\n\t\twp_cache_flush();\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/settings/includes/class-settings.php","ext":"php","size":5840,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Banner file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes;\n\nuse CookieYes\\Lite\\Includes\\Store;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Settings\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Settings extends Store {\n\t/**\n\t * Data array, with defaults.\n\t *\n\t * @var array\n\t */\n\tprotected $data = array();\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\t$this->data = $this->get_defaults();\n\t}\n\n\t/**\n\t * Get default plugin settings\n\t *\n\t * @return array\n\t */\n\tpublic function get_defaults() {\n\t\treturn array(\n\t\t\t'site'         => array(\n\t\t\t\t'url'       => get_site_url(),\n\t\t\t\t'installed' => time(),\n\t\t\t),\n\t\t\t'api'          => array(\n\t\t\t\t'token' => '',\n\t\t\t),\n\t\t\t'account'      => array(\n\t\t\t\t'email'       => '',\n\t\t\t\t'domain'      => '',\n\t\t\t\t'connected'   => false,\n\t\t\t\t'plan'        => 'free',\n\t\t\t\t'website_id'  => '',\n\t\t\t\t'website_key' => '',\n\t\t\t),\n\t\t\t'consent_logs' => array(\n\t\t\t\t'status' => true,\n\t\t\t),\n\t\t\t'languages'    => array(\n\t\t\t\t'selected' => array( 'en' ),\n\t\t\t\t'default'  => 'en',\n\t\t\t),\n\t\t\t'onboarding'   => array(\n\t\t\t\t'step' => 2,\n\t\t\t),\n\t\t);\n\n\t}\n\t/**\n\t * Get settings\n\t *\n\t * @param string $group Name of the group.\n\t * @param string $key Name of the key.\n\t * @return array\n\t */\n\tpublic function get( $group = '', $key = '' ) {\n\t\t$settings = get_option( 'cky_settings', $this->data );\n\t\t$settings = self::sanitize( $settings, $this->data );\n\t\tif ( empty( $key ) && empty( $group ) ) {\n\t\t\treturn $settings;\n\t\t} elseif ( ! empty( $key ) && ! empty( $group ) ) {\n\t\t\t$settings = isset( $settings[ $group ] ) ? $settings[ $group ] : array();\n\t\t\treturn isset( $settings[ $key ] ) ? $settings[ $key ] : array();\n\t\t} else {\n\t\t\treturn isset( $settings[ $group ] ) ? $settings[ $group ] : array();\n\t\t}\n\t}\n\n\t/**\n\t * Excludes a key from sanitizing multiple times.\n\t *\n\t * @return array\n\t */\n\tpublic static function get_excludes() {\n\t\treturn array(\n\t\t\t'selected',\n\t\t);\n\t}\n\t/**\n\t * Update settings to database.\n\t *\n\t * @param array $data Array of settings data.\n\t * @return void\n\t */\n\tpublic function update( $data, $clear = true ) {\n\t\t$settings = get_option( 'cky_settings', $this->data );\n\t\tif ( empty( $settings ) ) {\n\t\t\t$settings = $this->data;\n\t\t}\n\t\t$settings = self::sanitize( $data, $settings );\n\t\tupdate_option( 'cky_settings', $settings );\n\t\tdo_action( 'cky_after_update_settings', $clear );\n\t}\n\n\t/**\n\t * Sanitize options\n\t *\n\t * @param array $settings Input settings array.\n\t * @param array $defaults Default settings array.\n\t * @return array\n\t */\n\tpublic static function sanitize( $settings, $defaults ) {\n\t\t$result  = array();\n\t\t$excludes = self::get_excludes();\n\t\tforeach ( $defaults as $key => $data ) {\n\t\t\t$value = isset( $settings[ $key ] ) ? $settings[ $key ] : $data;\n\t\t\tif ( in_array( $key, $excludes, true ) ) {\n\t\t\t\t$result[ $key ] = self::sanitize_option( $key, $value );\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$result[ $key ] = self::sanitize( $value, $data );\n\t\t\t} else {\n\t\t\t\tif ( is_string( $key ) ) {\n\t\t\t\t\t$result[ $key ] = self::sanitize_option( $key, $value );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\t/**\n\t * Sanitize the option values\n\t *\n\t * @param string $option The name of the option.\n\t * @param string $value  The unsanitised value.\n\t * @return string Sanitized value.\n\t */\n\tpublic static function sanitize_option( $option, $value ) {\n\t\tswitch ( $option ) {\n\t\t\tcase 'connected':\n\t\t\tcase 'status':\n\t\t\tcase 'connected':\n\t\t\t\t$value = cky_sanitize_bool( $value );\n\t\t\t\tbreak;\n\t\t\tcase 'installed':\n\t\t\tcase 'step':\n\t\t\t\t$value = absint( $value );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$value = cky_sanitize_text( $value );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t// Getter Functions.\n\n\t/**\n\t * Get account token for authentication.\n\t *\n\t * @return string\n\t */\n\tpublic function get_token() {\n\t\treturn $this->get( 'api', 'token' );\n\t}\n\n\t/**\n\t * Check whether the site is connected to CookieYes Webapp.\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_connected() {\n\t\treturn $this->get( 'account', 'connected' );\n\t}\n\n\t/**\n\t * Get website ID\n\t *\n\t * @return string\n\t */\n\tpublic function get_website_id() {\n\t\treturn $this->get( 'account', 'website_id' );\n\t}\n\t/**\n\t * Get website ID\n\t *\n\t * @return string\n\t */\n\tpublic function get_plan() {\n\t\treturn $this->get( 'account', 'plan' );\n\t}\n\t/**\n\t * Get the website key\n\t *\n\t * @return string\n\t */\n\tpublic function get_website_key() {\n\t\treturn $this->get( 'account', 'website_key' );\n\t}\n\t/**\n\t * Get current site URL.\n\t *\n\t * @return string\n\t */\n\tpublic function get_url() {\n\t\treturn $this->get( 'site', 'url' );\n\t}\n\n\t/**\n\t * Get the script URL\n\t *\n\t * @return string\n\t */\n\tpublic function get_script_url() {\n\t\treturn CKY_APP_CDN_URL . '/client_data/' . $this->get_website_key() . '/script.js';\n\t}\n\n\t/**\n\t * Get consent log status\n\t *\n\t * @return boolean\n\t */\n\tpublic function get_consent_log_status() {\n\t\treturn (bool) $this->get( 'consent_logs', 'status' );\n\n\t}\n\n\t/**\n\t * Returns the default language code\n\t *\n\t * @return string\n\t */\n\tpublic function get_default_language() {\n\t\treturn sanitize_text_field( $this->get( 'languages', 'default' ) );\n\t}\n\n\t/**\n\t * Returns the selected languages.\n\t *\n\t * @return array\n\t */\n\tpublic function get_selected_languages() {\n\t\treturn cky_sanitize_text( $this->get( 'languages', 'selected' ) );\n\t}\n\n\t/**\n\t * First installed date of the plugin.\n\t *\n\t * @return string\n\t */\n\tpublic function get_installed_date() {\n\t\treturn $this->get( 'site', 'installed' );\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/settings/class-settings.php","ext":"php","size":1351,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Settings file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Settings;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Api\\Api;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Settings\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Settings extends Modules {\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$controller = Includes\\Controller::get_instance();\n\t\tadd_filter( 'cky_admin_scripts_config', array( $controller, 'load_common_settings' ) );\n\t\tadd_action( 'cky_after_connect', array( $controller, 'delete_cache' ) );\n\t\t$this->load_default();\n\t\t$this->load_apis();\n\t}\n\n\t/**\n\t * Load API files\n\t *\n\t * @return void\n\t */\n\tpublic function load_apis() {\n\t\tnew Api();\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n\n\t/**\n\t * Load default settings to the database.\n\t *\n\t * @return void\n\t */\n\tpublic function load_default() {\n\t\tif ( false === cky_first_time_install() ||  false !== get_option( 'cky_settings', false ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$settings = new \\CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings();\n\t\t$default  = $settings->get_defaults();\n\t\t$settings->update( $default );\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/settings/api/class-api.php","ext":"php","size":17088,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package Settings\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Settings\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse stdClass;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Controller;\nuse CookieYes\\Lite\\Includes\\Connect_Notice;\nuse CookieYes\\Lite\\Includes\\Notice;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Cookies API\n *\n * @class       Api\n * @version     3.0.0\n * @package     CookieYes\n * @extends     Rest_Controller\n */\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'settings';\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t}\n\t/**\n\t * Register the routes for cookies.\n\t *\n\t * @return void\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/laws',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_laws' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/info',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_info' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/disconnect',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'disconnect' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/sync',\n\t\t\tarray(\n\t\t\t\t'args'   => array(\n\t\t\t\t\t'id' => array(\n\t\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'send_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/cache/purge',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'clear_cache' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/notices/(?P<notice>[a-zA-Z0-9-_]+)',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'update_notice' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/expand',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'expand_notice' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/connect_notice',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'update_connect_notice' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/reinstall',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'install_missing_tables' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\t/**\n\t * Get a collection of items.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_items( $request ) {\n\t\t$object = new Settings();\n\t\t$data   = $object->get();\n\t\treturn rest_ensure_response( $data );\n\t}\n\t/**\n\t * Create a single cookie or cookie category.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function create_item( $request ) {\n\t\t$data    = $this->prepare_item_for_database( $request );\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Fetch default laws from database\n\t *\n\t * @param array $request WP_REST_Request $request Full details about the request.\n\t * @return array\n\t */\n\tpublic function get_laws( $request = array() ) {\n\t\t$object = array(\n\t\t\tarray(\n\t\t\t\t'slug'        => 'gdpr',\n\t\t\t\t'title'       => __( 'GDPR (General Data Protection Regulation)', 'cookie-law-info' ),\n\t\t\t\t'description' => __( 'Continue with the GDPR template if most of your targeted audience are from the EU or UK. It creates a customizable banner that allows your visitors to accept/reject cookies or adjust their consent preferences.', 'cookie-law-info' ),\n\t\t\t\t'tooltip'     => __(\n\t\t\t\t\t'Choose GDPR if most of your targeted audience are from the EU or UK.\n\t\t\t\t\tIt creates a customizable banner that allows your visitors to accept/reject cookies or adjust their consent preferences.',\n\t\t\t\t\t'cookie-law-info'\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'slug'        => 'ccpa',\n\t\t\t\t'title'       => __( 'CCPA (California Consumer Privacy Act)', 'cookie-law-info' ),\n\t\t\t\t'description' => __( 'Choose CCPA if most of your targeted audience are from California or US. This will create a customizable banner with a \"Do Not Sell My Personal Information\" link that allows your visitors to refuse the use of cookies.', 'cookie-law-info' ),\n\t\t\t\t'tooltip'     => __(\n\t\t\t\t\t'Choose CCPA if most of your targeted audience are from California or US.\n\t\t\t\t\tIt creates a customizable banner with a \"Do Not Sell My Personal Information\" link that allows your visitors to refuse the use of cookies.',\n\t\t\t\t\t'cookie-law-info'\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'slug'        => 'info',\n\t\t\t\t'title'       => __( 'INFO (Information Display Banner)', 'cookie-law-info' ),\n\t\t\t\t'description' => __( 'Choose INFO if you do not want to block any cookies on your website. This will create a dismissible banner that provides some general information to your site visitors.', 'cookie-law-info' ),\n\t\t\t\t'tooltip'     => __(\n\t\t\t\t\t'Choose Info if you do not want to block any cookies on your website.\n\t\t\t\t\t\tIt creates a dismissible banner that provides some general info to your site visitors.',\n\t\t\t\t\t'cookie-law-info'\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\t$data   = $this->prepare_item_for_response( $object, $request );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Get site info including the features allowed for the current plan.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_info( $request ) {\n\t\t$args       = array();\n\t\t$registered = $this->get_collection_params();\n\t\tif ( isset( $registered['force'], $request['force'] ) ) {\n\t\t\t$args['force'] = (bool) $request['force'];\n\t\t}\n\t\t$response = Controller::get_instance()->get_info( $args );\n\t\tif ( empty( $response ) ) {\n\t\t\t$data = array();\n\t\t} else {\n\t\t\t$data = $this->prepare_item_for_response( $response, $request );\n\t\t}\n\t\t$objects = $this->prepare_response_for_collection( $data );\n\t\treturn rest_ensure_response( $objects );\n\t}\n\n\t/**\n\t * Send data directly to CookieYes web app.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function send_items( $request ) {\n\t\t$response = Controller::get_instance()->sync();\n\t\tif ( empty( $response ) ) {\n\t\t\t$data = array();\n\t\t} else {\n\t\t\t$data = $this->prepare_item_for_response( $response, $request );\n\t\t}\n\t\t$objects = $this->prepare_response_for_collection( $data );\n\t\treturn rest_ensure_response( $objects );\n\t}\n\n\t/**\n\t * Clear cache of all the modules\n\t *\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function clear_cache() {\n\t\t$banner_controller   = new \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller();\n\t\t$category_controller = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Category_Controller();\n\t\t$cookie_controller   = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie_Controller();\n\t\t$banner_controller->delete_cache();\n\t\t$category_controller->delete_cache();\n\t\t$cookie_controller->delete_cache();\n\t\twp_cache_flush();\n\t\t$data = array( 'status' => true );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Initiate disconnect request.\n\t *\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function disconnect() {\n\t\t$response = Controller::get_instance()->disconnect();\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Update the status of admin notices.\n\t *\n\t * @param object $request Request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function update_notice( $request ) {\n\t\t$response = array( 'status' => false );\n\t\t$notice   = isset( $request['notice'] ) ? $request['notice'] : false;\n\t\t$expiry   = isset( $request['expiry'] ) ? intval( $request['expiry'] ) : 0;\n\t\tif ( $notice ) {\n\t\t\tNotice::get_instance()->dismiss( $notice, $expiry );\n\t\t\t$response['status'] = true;\n\t\t}\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Update the expand status of connect notice.\n\t *\n\t * @param object $request Request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function expand_notice( $request ) {\n\t\t$response = array( 'status' => false );\n\t\t$expand   = isset( $request['expand'] ) ? boolval( $request['expand'] ) : true;\n\n\t\tConnect_Notice::get_instance()->save_state( $expand );\n\t\t$response['status'] = true;\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Update the status of connect notice.\n\t *\n\t * @param object $request Request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\n\tpublic function update_connect_notice( $request ) {\n\t\t$response = array( 'status' => false );\n\t\t$connect_notice = isset( $request['connect_notice'] ) ? boolval( $request['connect_notice'] ) : true;\n\t\tConnect_Notice::get_instance()->save_connect_notice( $connect_notice );\n\t\t$response['status'] = true;\n\t\treturn rest_ensure_response( $response );\n\t}\n\n\t/**\n\t * Update the status of admin notices.\n\t *\n\t * @param object $request Request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function install_missing_tables( $request ) {\n\t\t$missing_tables = cky_missing_tables();\n\t\tif ( count( $missing_tables ) > 0 ) {\n\t\t\tdo_action( 'cky_reinstall_tables' );\n\t\t\tdo_action( 'cky_clear_cache' );\n\t\t}\n\t\treturn rest_ensure_response( array( 'success' => true ) );\n\t}\n\n\t/**\n\t * Format data to provide output to API\n\t *\n\t * @param object $object Object of the corresponding item Cookie or Cookie_Categories.\n\t * @param array  $request Request params.\n\t * @return array\n\t */\n\tpublic function prepare_item_for_response( $object, $request ) {\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->add_additional_fields_to_object( $object, $request );\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\t/**\n\t * Prepare a single item for create or update.\n\t *\n\t * @param  WP_REST_Request $request Request object.\n\t * @return stdClass\n\t */\n\tpublic function prepare_item_for_database( $request ) {\n\t\t$clear = $request->get_param('clear');\n\t\tif ( is_null( $clear ) ) {\n\t\t\t$clear = true;\n\t\t} else {\n\t\t\t$clear = filter_var( $clear, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE );\n\t\t}\n\t\t$object     = new Settings();\n\t\t$data       = $object->get();\n\t\t$schema     = $this->get_item_schema();\n\t\t$properties = isset( $schema['properties'] ) && is_array( $schema['properties'] ) ? $schema['properties'] : array();\n\t\tif ( ! empty( $properties ) ) {\n\t\t\t$properties_keys = array_keys(\n\t\t\t\tarray_filter(\n\t\t\t\t\t$properties,\n\t\t\t\t\tfunction( $property ) {\n\t\t\t\t\t\treturn isset( $property['readonly'] ) && true === $property['readonly'] ? false : true;\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\tforeach ( $properties_keys as $key ) {\n\t\t\t\t$value        = isset( $request[ $key ] ) ? $request[ $key ] : '';\n\t\t\t\t$data[ $key ] = $value;\n\t\t\t}\n\t\t}\n\t\t$object->update( $data, $clear );\n\t\treturn $object->get();\n\t}\n\n\t/**\n\t * Get the query params for collections.\n\t *\n\t * @return array\n\t */\n\tpublic function get_collection_params() {\n\t\treturn array(\n\t\t\t'context'  => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t'paged'    => array(\n\t\t\t\t'description'       => __( 'Current page of the collection.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'integer',\n\t\t\t\t'default'           => 1,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t\t'minimum'           => 1,\n\t\t\t),\n\t\t\t'per_page' => array(\n\t\t\t\t'description'       => __( 'Maximum number of items to be returned in result set.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'integer',\n\t\t\t\t'default'           => 10,\n\t\t\t\t'minimum'           => 1,\n\t\t\t\t'maximum'           => 100,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t\t'search'   => array(\n\t\t\t\t'description'       => __( 'Limit results to those matching a string.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'string',\n\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t\t'force'    => array(\n\t\t\t\t'type'        => 'boolean',\n\t\t\t\t'description' => __( 'Force fetch data', 'cookie-law-info' ),\n\t\t\t),\n\t\t);\n\t}\n\n\t/**\n\t * Get the Consent logs's schema, conforming to JSON Schema.\n\t *\n\t * @return array\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/draft-04/schema#',\n\t\t\t'title'      => 'consentlogs',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'id'           => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'view' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'site'         => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'api'          => array(\n\t\t\t\t\t'description' => __( 'Language.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'account'      => array(\n\t\t\t\t\t'description' => __( 'Language.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'consent_logs' => array(\n\t\t\t\t\t'description' => __( 'Language.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'languages'    => array(\n\t\t\t\t\t'description' => __( 'Language.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'onboarding'   => array(\n\t\t\t\t\t'description' => __( 'Language.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n\n} // End the class.\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/dashboard/includes/class-controller.php","ext":"php","size":4582,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Dashboard controller class.\n *\n * @link       https://www.cookieyes.com/\n * @since      3.0.0\n *\n * @package    CookieYes\\Lite\\Admin\\Modules\\Dashboard\\Includes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Dashboard\\Includes;\n\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Includes\\Cloud;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Dashboard controller class.\n *\n * @class       Controller\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Controller extends Cloud {\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\t/**\n\t * Cookie items\n\t *\n\t * @var array\n\t */\n\tpublic $languages;\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t/**\n\t * Load data\n\t *\n\t * @return array\n\t */\n\tpublic function get_items() {\n\t\t$data = array();\n\t\tif ( ! $this->get_website_id() ) {\n\t\t\treturn $data;\n\t\t}\n\t\t$response      = $this->get(\n\t\t\t'websites/' . $this->get_website_id() . '/dashboard'\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\t$stats    = isset( $response['statistics'] ) ? $response['statistics'] : array();\n\t\t\t$data     = array(\n\t\t\t\t'cookies'    => isset( $stats['total_cookies'] ) ? $stats['total_cookies'] : 0,\n\t\t\t\t'scripts'    => isset( $stats['total_scripts'] ) ? $stats['total_scripts'] : 0,\n\t\t\t\t'categories' => isset( $stats['total_categories'] ) ? $stats['total_categories'] : 0,\n\t\t\t\t'pages'      => isset( $stats['total_pages'] ) ? $stats['total_pages'] : 0,\n\t\t\t);\n\t\t}\n\t\treturn $data;\n\t}\n\n\tpublic function get_plans() {\n\t\t$data = array();\n\t\t$this->set_api_url(CKY_APP_URL . '/api/v3/' );\n\t\t$response      = $this->get(\n\t\t\t'plans'\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\t$response = isset( $response['data'] ) ? $response['data'] : array();\n\t\t\tif (isset($response['freePlan'])) {\n\t\t\t\t$item = $response['freePlan'];\n\t\t\t\tif (isset($item['features'])) {\n\t\t\t\t\tforeach ($item['features'] as $key => $value) {\n\t\t\t\t\t\t$data['plan']['free']['features'][$key] = $value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isset($response['paidPlans'])) {\n\t\t\t\t$items = $response['paidPlans'];\n\t\t\t\tforeach($items as $val) {\n\t\t\t\t\tif($val['slug'] === 'basic-monthly') {\n\t\t\t\t\t\tif (isset($val['features'])) {\n\t\t\t\t\t\t\tforeach ($val['features'] as $key => $value) {\n\t\t\t\t\t\t\t\t$data['plan']['basic']['features'][$key] = $value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(isset($val['currency'])){\n\t\t\t\t\t\t\t$data['plan']['basic']['monthly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif($val['slug'] === 'pro-monthly') {\n\t\t\t\t\t\tif (isset($val['features'])) {\n\t\t\t\t\t\t\tforeach ($val['features'] as $key => $value) {\n\t\t\t\t\t\t\t\t$data['plan']['pro']['features'][$key] = $value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(isset($val['currency'])){\n\t\t\t\t\t\t\t$data['plan']['pro']['monthly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif($val['slug'] === 'ultimate-monthly') {\n\t\t\t\t\t\tif (isset($val['features'])) {\n\t\t\t\t\t\t\tforeach ($val['features'] as $key => $value) {\n\t\t\t\t\t\t\t\t$data['plan']['ultimate']['features'][$key] = $value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(isset($val['currency'])){\n\t\t\t\t\t\t\t$data['plan']['ultimate']['monthly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(isset($val['currency'])) {\n\t\t\t\t\t\tif($val['slug'] === 'basic-yearly') {\n\t\t\t\t\t\t\t$data['plan']['basic']['yearly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif($val['slug'] === 'pro-yearly') {\n\t\t\t\t\t\t\t$data['plan']['pro']['yearly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telseif($val['slug'] === 'ultimate-yearly') {\n\t\t\t\t\t\t\t$data['plan']['ultimate']['yearly'][$val['currency']] = isset($val['cost']) ? $val['cost'] : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n\n\tpublic function get_currencies() {\n\t\t$data = array();\n\t\t$response      = $this->get(\n\t\t\t'currencies'\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\tif( $response['success'] ) {\n\t\t\t\t$data = isset( $response['data'] ) ? $response['data'] : array();\n\t\t\t}\n\t\t}\n\t\treturn $data;\n\t}\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/dashboard/api/class-api.php","ext":"php","size":2868,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package CookieYes\\Lite\\Admin\\Modules\\Banners\\Api\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Dashboard\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse stdClass;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Dashboard\\Includes\\Controller;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n\n/**\n * Cookies API\n *\n * @class       Api\n * @version     3.0.0\n * @package     CookieYes\n * @extends     Rest_Controller\n */\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'dashboard';\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t}\n\t/**\n\t * Register the routes for cookies.\n\t *\n\t * @return void\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/summary',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/plans',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_plan_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/currencies',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_currency_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\t/**\n\t * Get a collection of items.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_items( $request ) {\n\t\t$data = Controller::get_instance()->get_items();\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\tpublic function get_currency_items( $request ) {\n\t\t$data = Controller::get_instance()->get_currencies();\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\tpublic function get_plan_items( $request ) {\n\t\t$data = Controller::get_instance()->get_plans();\n\t\treturn rest_ensure_response( $data );\n\t}\n\n} // End the class.\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/dashboard/class-dashboard.php","ext":"php","size":606,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Dashboard file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Dashboard;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Admin\\Modules\\Dashboard\\Api\\Api;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Dashboard\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Dashboard extends Modules {\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$this->load_apis();\n\n\t}\n\n\t/**\n\t * Load API files\n\t *\n\t * @return void\n\t */\n\tpublic function load_apis() {\n\t\tnew Api();\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/uninstall-feedback/class-uninstall-feedback.php","ext":"php","size":16033,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Uninstall_Feedback file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Uninstall_Feedback;\n\nuse WP_Error;\nuse CookieYes\\Lite\\Includes\\Modules;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Uninstall feedback Operation\n *\n * @class       Uninstall_Feedback\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Uninstall_Feedback extends Modules {\n\n\t/**\n\t * API url.\n\t *\n\t * @var string\n\t */\n\tprotected $api_url = 'https://feedback.cookieyes.com/api/v1/feedbacks';\n\n\t/**\n\t * Plugin version.\n\t *\n\t * @var string\n\t */\n\tprotected $current_version = CLI_VERSION;\n\n\t/**\n\t * Plugin basename.\n\t *\n\t * @var string\n\t */\n\tprotected $plugin_file = CLI_PLUGIN_BASENAME; // plugin main file.\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = '/uninstall-feedback';\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\n\t\tadd_action( 'admin_footer', array( $this, 'attach_feedback_modal' ) );\n\t\tadd_filter( 'plugin_action_links_' . plugin_basename( $this->plugin_file ), array( $this, 'plugin_action_links' ) );\n\t\tadd_action( 'rest_api_init', array( $this, 'cky_register_routes' ) );\n\t}\n\n\t/**\n\t * Register the routes for uninstall feedback.\n\t */\n\tpublic function cky_register_routes() {\n\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t$this->rest_base,\n\t\t\tarray(\n\t\t\t\t'methods'             => 'POST',\n\t\t\t\t'callback'            => array( $this, 'send_uninstall_reason' ),\n\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Check if a given request has access to create an item.\n\t *\n\t * @param  WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|boolean\n\t */\n\tpublic function create_item_permissions_check( $request ) {\n\t\tif ( ! current_user_can( 'manage_options' ) ) {\n\t\t\treturn new WP_Error( 'cookieyes_rest_cannot_create', __( 'Sorry, you are not allowed to create resources.', 'cookie-law-info' ), array( 'status' => rest_authorization_required_code() ) );\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Edit action links\n\t *\n\t * @param array $links action links.\n\t * @return array\n\t */\n\tpublic function plugin_action_links( $links ) {\n\n\t\tif ( array_key_exists( 'deactivate', $links ) ) {\n\t\t\t$links['deactivate'] = str_replace( '<a', '<a class=\"cky-deactivate-link\"', $links['deactivate'] );\n\t\t}\n\n\t\treturn $links;\n\t}\n\n\t/**\n\t * Get the uninstall reasons\n\t *\n\t * @return array\n\t */\n\tprivate function get_uninstall_reasons() {\n\n\t\t$reasons = array(\n\t\t\tarray(\n\t\t\t\t'id'     => 'setup-difficult',\n\t\t\t\t'text'   => __( 'Setup is too difficult/ Lack of documentation', 'cookie-law-info' ),\n\t\t\t\t'fields' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type'        => 'textarea',\n\t\t\t\t\t\t'placeholder' => __(\n\t\t\t\t\t\t\t'Describe the challenges that you faced while using our plugin',\n\t\t\t\t\t\t\t'cookie-law-info'\n\t\t\t\t\t\t),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'     => 'not-have-that-feature',\n\t\t\t\t'text'   => __( 'The plugin is great, but I need specific feature that you don\\'t support', 'cookie-law-info' ),\n\t\t\t\t'fields' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type'        => 'textarea',\n\t\t\t\t\t\t'placeholder' => __( 'Could you tell us more about that feature?', 'cookie-law-info' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'   => 'affecting-performance',\n\t\t\t\t'text' => __( 'The plugin is affecting website speed', 'cookie-law-info' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'     => 'found-better-plugin',\n\t\t\t\t'text'   => __( 'I found a better plugin', 'cookie-law-info' ),\n\t\t\t\t'fields' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type'        => 'text',\n\t\t\t\t\t\t'placeholder' => __( 'Please share which plugin', 'cookie-law-info' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'     => 'cookieyes-connection-issues',\n\t\t\t\t'text'   => __( 'I have issues while connecting to the CookieYes web app', 'cookie-law-info' ),\n\t\t\t\t'fields' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type'        => 'textarea',\n\t\t\t\t\t\t'placeholder' => __( 'Please describe the issues', 'cookie-law-info' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'   => 'use-cookieyes-webapp',\n\t\t\t\t'text' => __( 'I would like to use the CookieYes web app instead of the plugin', 'cookie-law-info' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'   => 'temporary-deactivation',\n\t\t\t\t'text' => __( 'It’s a temporary deactivation', 'cookie-law-info' ),\n\t\t\t),\n\t\t\tarray(\n\t\t\t\t'id'     => 'other',\n\t\t\t\t'text'   => __( 'Other', 'cookie-law-info' ),\n\t\t\t\t'fields' => array(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'type'        => 'textarea',\n\t\t\t\t\t\t'placeholder' => __( 'Please share the reason', 'cookie-law-info' ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn $reasons;\n\t}\n\n\t/**\n\t * Attach modal for feedback and uninstall\n\t *\n\t * @return void\n\t */\n\tpublic function attach_feedback_modal() {\n\t\tglobal $pagenow;\n\t\tif ( 'plugins.php' !== $pagenow ) {\n\t\t\treturn;\n\t\t}\n\t\t$reasons = $this->get_uninstall_reasons();\n\t\t?>\n\t\t<div class=\"cky-modal\" id=\"cky-modal\">\n\t\t\t<div class=\"cky-modal-wrap\">\n\t\t\t\t<div class=\"cky-modal-header\">\n\t\t\t\t\t<h3><?php echo esc_html__( 'Quick Feedback', 'cookie-law-info' ); ?></h3>\n\t\t\t\t\t<button type=\"button\" class=\"cky-modal-close\"><svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"> <path d=\"M0.572899 0.00327209C0.459691 0.00320032 0.349006 0.036716 0.254854 0.0995771C0.160701 0.162438 0.0873146 0.251818 0.0439819 0.356405C0.000649228 0.460992 -0.0106814 0.576084 0.0114242 0.687113C0.0335299 0.798142 0.0880779 0.900118 0.168164 0.980132L4.18928 5L0.168164 9.01987C0.0604905 9.12754 0 9.27358 0 9.42585C0 9.57812 0.0604905 9.72416 0.168164 9.83184C0.275838 9.93951 0.421875 10 0.574148 10C0.726422 10 0.872459 9.93951 0.980133 9.83184L5.00125 5.81197L9.02237 9.83184C9.13023 9.93836 9.2755 9.99844 9.4271 9.99923C9.5023 9.99958 9.57681 9.98497 9.6463 9.95623C9.71579 9.92749 9.77886 9.8852 9.83184 9.83184C9.93924 9.72402 9.99955 9.57804 9.99955 9.42585C9.99955 9.27367 9.93924 9.12768 9.83184 9.01987L5.81072 5L9.83184 0.980132C9.88515 0.926818 9.92744 0.863524 9.9563 0.793865C9.98515 0.724206 10 0.649547 10 0.574148C10 0.49875 9.98515 0.42409 9.9563 0.354431C9.92744 0.284772 9.88515 0.221479 9.83184 0.168164C9.77852 0.114849 9.71523 0.072558 9.64557 0.0437044C9.57591 0.0148507 9.50125 0 9.42585 0C9.35045 0 9.27579 0.0148507 9.20614 0.0437044C9.13648 0.072558 9.07318 0.114849 9.01987 0.168164L4.99813 4.19053L0.976385 0.170662C0.868901 0.0635642 0.723383 0.00338113 0.57165 0.00327209H0.572899Z\" fill=\"#ffffff\"/> </svg></button>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"cky-modal-body\">\n\t\t\t\t\t<h4 class=\"cky-feedback-caption\"><?php echo esc_html__( 'If you have a moment, please let us know why you are deactivating the CookieYes plugin.', 'cookie-law-info' ); ?></h4>\n\t\t\t\t\t<ul class=\"cky-feedback-reasons-list\">\n\t\t\t\t\t\t<?php\n\t\t\t\t\t\tforeach ( $reasons as $reason ) :\n\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t\t<div class=\"cky-feedback-form-group\">\n\t\t\t\t\t\t\t\t\t<label class=\"cky-feedback-label\"><input type=\"radio\" name=\"selected-reason\" value=\"<?php echo esc_attr( $reason['id'] ); ?>\" class=\"cky-feedback-input-radio\"><?php echo esc_html( $reason['text'] ); ?></label>\n\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t$fields = ( isset( $reason['fields'] ) && is_array( $reason['fields'] ) ) ? $reason['fields'] : array();\n\t\t\t\t\t\t\t\t\tif ( empty( $fields ) ) {\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t<div class=\"cky-feedback-form-fields\">\n\t\t\t\t\t\t\t\t\t\t<?php\n\n\t\t\t\t\t\t\t\t\t\tforeach ( $fields as $field ) :\n\t\t\t\t\t\t\t\t\t\t\t$field_type        = isset( $field['type'] ) ? $field['type'] : 'text';\n\t\t\t\t\t\t\t\t\t\t\t$field_placeholder = isset( $field['placeholder'] ) ? $field['placeholder'] : '';\n\t\t\t\t\t\t\t\t\t\t\t$field_key         = isset( $reason['id'] ) ? $reason['id'] : '';\n\t\t\t\t\t\t\t\t\t\t\t$field_name        = $field_key . '-' . $field_type;\n\t\t\t\t\t\t\t\t\t\t\tif ( 'textarea' === $field_type ) :\n\t\t\t\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t\t\t\t<textarea rows=\"3\" cols=\"45\" class=\"cky-feedback-input-field\" name=\"<?php echo esc_attr( $field_name ); ?>\" placeholder=\"<?php echo esc_attr( $field_placeholder ); ?>\"></textarea>\n\t\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\telse :\n\t\t\t\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t\t\t\t<input class=\"cky-feedback-input-field\" type=\"text\" name=\"<?php echo esc_attr( $field_name ); ?>\" placeholder=\"<?php echo esc_attr( $field_placeholder ); ?>\" >\n\t\t\t\t\t\t\t\t\t\t\t\t<?php\n\t\t\t\t\t\t\t\t\t\t\tendif;\n\t\t\t\t\t\t\t\t\t\t\tendforeach;\n\t\t\t\t\t\t\t\t\t\t?>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</li>\n\n\t\t\t\t\t\t<?php endforeach; ?>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<div class=\"cky-uninstall-feedback-privacy-policy\">\n\t\t\t\t\t\t<?php esc_html__( \"We do not collect any personal data when you submit this form. It's your feedback that we value.\", 'cookie-law-info' ); ?>\n\t\t\t\t\t\t<a href=\"https://www.cookieyes.com/privacy-policy/\" target=\"_blank\"><?php echo esc_html__( 'Privacy Policy', 'cookie-law-info' ); ?></a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"cky-modal-footer\">\n\t\t\t\t\t<button class=\"button-primary cky-modal-submit\">\n\t\t\t\t\t\t<?php echo esc_html__( 'Submit & Deactivate', 'cookie-law-info' ); ?>\n\t\t\t\t\t</button>\n\t\t\t\t\t<a class=\"cky-goto-support\" href=\"https://www.cookieyes.com/support/\" target=\"_blank\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-external\"></span>\n\t\t\t\t\t\t<?php echo esc_html__( 'Go to support', 'cookie-law-info' ); ?>\n\t\t\t\t\t</a>\n\t\t\t\t\t<button class=\"button-secondary cky-modal-skip\">\n\t\t\t\t\t\t<?php echo esc_html__( 'Skip & Deactivate', 'cookie-law-info' ); ?>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<style type=\"text/css\">\n\t\t\t.cky-modal {\n\t\t\t\tposition: fixed;\n\t\t\t\tz-index: 99999;\n\t\t\t\ttop: 0;\n\t\t\t\tright: 0;\n\t\t\t\tbottom: 0;\n\t\t\t\tleft: 0;\n\t\t\t\tbackground: rgba(0, 0, 0, 0.5);\n\t\t\t\tdisplay: none;\n\t\t\t}\n\n\t\t\t.cky-modal.modal-active {\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tjustify-content: center;\n\t\t\t}\n\n\t\t\t.cky-modal-wrap {\n\t\t\t\twidth: 600px;\n\t\t\t\tposition: relative;\n\t\t\t\tbackground: #fff;\n\t\t\t}\n\n\t\t\t.cky-modal-header {\n\t\t\t\tbackground: linear-gradient(336.94deg,#1A7FBB -111.69%,#26238D 196.34%);\n\t\t\t\tpadding: 12px 20px;\n\t\t\t}\n\n\t\t\t.cky-modal-header h3 {\n\t\t\t\tdisplay: inline-block;\n\t\t\t\tcolor: #fff;\n\t\t\t\tline-height: 150%;\n\t\t\t\tmargin: 0;\n\t\t\t}\n\n\t\t\t.cky-modal-body {\n\t\t\t\tfont-size: 14px;\n\t\t\t\tline-height: 2.4em;\n\t\t\t\tpadding: 5px 30px 20px 30px;\n\t\t\t\tbox-sizing: border-box;\n\t\t\t}\n\n\t\t\t.cky-modal-body h3 {\n\t\t\t\tfont-size: 15px;\n\t\t\t}\n\n\t\t\t.cky-modal-body .input-text,\n\t\t\t.cky-modal-body {\n\t\t\t\twidth: 100%;\n\t\t\t}\n\n\t\t\t.cky-modal-body .cky-feedback-input {\n\t\t\t\tmargin-top: 5px;\n\t\t\t\tmargin-left: 20px;\n\t\t\t}\n\n\t\t\t.cky-modal-footer {\n\t\t\t\tpadding: 0px 20px 15px 20px;\n\t\t\t\tdisplay: flex;\n\t\t\t}\n\n\t\t\t.cky-button-left {\n\t\t\t\tfloat: left;\n\t\t\t}\n\n\t\t\t.cky-button-right {\n\t\t\t\tfloat: right;\n\t\t\t}\n\n\t\t\t.cky-sub-reasons {\n\t\t\t\tdisplay: none;\n\t\t\t\tpadding-left: 20px;\n\t\t\t\tpadding-top: 10px;\n\t\t\t\tpadding-bottom: 4px;\n\t\t\t}\n\n\t\t\t.cky-uninstall-feedback-privacy-policy {\n\t\t\t\ttext-align: left;\n\t\t\t\tfont-size: 12px;\n\t\t\t\tline-height: 14px;\n\t\t\t\tmargin-top: 20px;\n\t\t\t\tfont-style: italic;\n\t\t\t}\n\n\t\t\t.cky-uninstall-feedback-privacy-policy a {\n\t\t\t\tfont-size: 11px;\n\t\t\t\tcolor: #1863DC;\n\t\t\t\ttext-decoration-color: #99c3d7;\n\t\t\t}\n\n\t\t\t.cky-goto-support {\n\t\t\t\tcolor: #1863DC;\n\t\t\t\ttext-decoration: none;\n\t\t\t\tdisplay: flex;\n\t\t\t\talign-items: center;\n\t\t\t\tmargin-left: 15px;\n\t\t\t}\n\n\t\t\t.cky-modal-footer .cky-modal-submit {\n\t\t\t\tbackground-color: #1863DC;\n\t\t\t\tborder-color: #1863DC;\n\t\t\t\tcolor: #FFFFFF;\n\t\t\t}\n\n\t\t\t.cky-modal-footer .cky-modal-skip {\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: #a4afb7;\n\t\t\t\tbackground: none;\n\t\t\t\tborder: none;\n\t\t\t\tmargin-left: auto;\n\t\t\t}\n\n\t\t\t.cky-modal-close {\n\t\t\t\tbackground: transparent;\n\t\t\t\tborder: none;\n\t\t\t\tcolor: #fff;\n\t\t\t\tfloat: right;\n\t\t\t\tfont-size: 18px;\n\t\t\t\tfont-weight: lighter;\n\t\t\t\tcursor: pointer;\n\t\t\t}\n\n\t\t\t.cky-feedback-caption {\n\t\t\t\tfont-weight: bold;\n\t\t\t\tfont-size: 15px;\n\t\t\t\tcolor: #27283C;\n\t\t\t\tline-height: 1.5;\n\t\t\t}\n\n\t\t\tinput[type=\"radio\"].cky-feedback-input-radio {\n\t\t\t\tmargin: 0 10px 0 0;\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t\t.cky-feedback-reasons-list li {\n\t\t\t\tline-height: 1.9;\n\t\t\t}\n\t\t\t.cky-feedback-label {\n\t\t\t\tfont-size: 13px;\n\t\t\t}\n\t\t\t.cky-modal .cky-feedback-input-field {\n\t\t\t\twidth: 98%;\n\t\t\t\tdisplay: flex;\n\t\t\t\tpadding: 5px;\n\t\t\t\t-webkit-box-shadow: none;\n\t\t\t\tbox-shadow: none;\n\t\t\t\tfont-size: 13px;\n\t\t\t}\n\t\t\t.cky-modal input[type=\"text\"].cky-feedback-input-field:focus {\n\t\t\t\t-webkit-box-shadow: none;\n\t\t\t\tbox-shadow: none;\n\t\t\t}\n\t\t\t.cky-feedback-form-fields {\n\t\t\t\tmargin: 10px 0 0 25px;\n\t\t\t\tdisplay: none;\n\t\t\t}\n\t\t</style>\n\n\t\t<script type=\"text/javascript\">\n\t\t\t(function($) {\n\t\t\t\t$(function() {\n\t\t\t\t\tconst modal = $('#cky-modal');\n\t\t\t\t\tlet deactivateLink = '';\n\t\t\t\t\t$('a.cky-deactivate-link').click(function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tmodal.addClass('modal-active');\n\t\t\t\t\t\tdeactivateLink = $(this).attr('href');\n\t\t\t\t\t\tmodal.find('a.dont-bother-me').attr('href', deactivateLink).css('float', 'right');\n\t\t\t\t\t});\n\n\t\t\t\t\tmodal.on('click', '.cky-modal-skip', function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tmodal.removeClass('modal-active');\n\t\t\t\t\t\twindow.location.href = deactivateLink;\n\t\t\t\t\t});\n\n\t\t\t\t\tmodal.on('click', '.cky-modal-close', function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tmodal.removeClass('modal-active');\n\t\t\t\t\t});\n\t\t\t\t\tmodal.on('click', 'input[type=\"radio\"]', function() {\n\t\t\t\t\t\t$('.cky-feedback-form-fields').hide();\n\t\t\t\t\t\tconst $parent =   $(this).closest('.cky-feedback-form-group');\n\t\t\t\t\t\tif( !$parent ) return;\n\t\t\t\t\t\tconst $fields = $parent.find('.cky-feedback-form-fields');\n\t\t\t\t\t\tif( !$fields ) return;\n\t\t\t\t\t\tconst $input = $fields.find('.cky-feedback-input-field');\n\t\t\t\t\t\t$input && $fields.show(),$input.focus();\n\t\t\t\t\t});\n\t\t\t\t\tmodal.on('click', '.cky-modal-submit', function(e) {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tconst button = $(this);\n\t\t\t\t\t\tif (button.hasClass('disabled')) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst $radio = $('input[type=\"radio\"]:checked', modal);\n\t\t\t\t\t\tconst $parent =   $radio && $radio.closest('.cky-feedback-form-group');\n\t\t\t\t\t\tif( !$parent ) {\n\t\t\t\t\t\t\twindow.location.href = deactivateLink;\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst $input = $parent.find('.cky-feedback-input-field');\n\t\t\t\t\t\t$.ajax({\n\t\t\t\t\t\t\turl: \"<?php echo esc_url_raw( rest_url() . $this->namespace . $this->rest_base ); ?>\",\n\t\t\t\t\t\t\ttype: 'POST',\n\t\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\treason_id: (0 === $radio.length) ? 'none' : $radio.val(),\n\t\t\t\t\t\t\t\treason_text: (0 === $radio.length) ? 'none' : $radio.closest('label').text(),\n\t\t\t\t\t\t\t\treason_info: (0 !== $input.length) ? $input.val().trim() : ''\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tbeforeSend: function(xhr) {\n\t\t\t\t\t\t\t\tbutton.addClass('disabled');\n\t\t\t\t\t\t\t\tbutton.text('Processing...');\n\t\t\t\t\t\t\t\txhr.setRequestHeader( 'X-WP-Nonce', '<?php echo esc_js( wp_create_nonce( 'wp_rest' ) ); ?>');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\t\t\twindow.location.href = deactivateLink;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}(jQuery));\n\t\t</script>\n\t\t<?php\n\t}\n\n\t/**\n\t * Send uninstall reason to server\n\t *\n\t * @param array $request request data.\n\t * @return void\n\t */\n\tpublic function send_uninstall_reason( $request ) {\n\t\tglobal $wpdb;\n\t\tif ( ! isset( $request['reason_id'] ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\t\t$data = array(\n\t\t\t'reason_slug'    => sanitize_text_field( wp_unslash( $request['reason_id'] ) ),\n\t\t\t'reason_detail'  => ! empty( $request['reason_text'] ) ? sanitize_text_field( wp_unslash( $request['reason_text'] ) ) : null,\n\t\t\t'date'           => gmdate( 'M d, Y h:i:s A' ),\n\t\t\t'comments'       => ! empty( $request['reason_info'] ) ? sanitize_text_field( wp_unslash( $request['reason_info'] ) ) : null,\n\t\t\t'server'         => ! empty( $_SERVER['SERVER_SOFTWARE'] ) ? sanitize_text_field( wp_unslash( $_SERVER['SERVER_SOFTWARE'] ) ) : null,\n\t\t\t'php_version'    => phpversion(),\n\t\t\t'mysql_version'  => $wpdb->db_version(),\n\t\t\t'wp_version'     => get_bloginfo( 'version' ),\n\t\t\t'wc_version'     => defined( 'WC_VERSION' ) ? WC_VERSION : null,\n\t\t\t'locale'         => get_locale(),\n\t\t\t'plugin_version' => $this->current_version,\n\t\t\t'is_multisite'   => is_multisite(),\n\t\t);\n\n\t\t$response = wp_remote_post(\n\t\t\t$this->api_url,\n\t\t\tarray(\n\t\t\t\t'headers'     => array( 'Content-Type' => 'application/json; charset=utf-8' ),\n\t\t\t\t'method'      => 'POST',\n\t\t\t\t'timeout'     => 45,\n\t\t\t\t'redirection' => 5,\n\t\t\t\t'httpversion' => '1.0',\n\t\t\t\t'blocking'    => false,\n\t\t\t\t'body'        => wp_json_encode( $data ),\n\t\t\t\t'cookies'     => array(),\n\t\t\t)\n\t\t);\n\t\twp_send_json_success();\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/policies/class-policies.php","ext":"php","size":990,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Policies file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Policies;\n\nuse CookieYes\\Lite\\Includes\\Modules;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Policies\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Policies extends Modules {\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\tadd_filter( 'cky_registered_admin_menus', array( $this, 'register_menus' ) );\n\t}\n\n\t/**\n\t * Pass menu items to be registered.\n\t *\n\t * @param array $menus Sub menu array.\n\t * @return array\n\t */\n\tpublic function register_menus( $menus ) {\n\t\t$menus['policies'] = array(\n\t\t\t'name'     => __( 'Policy Generators', 'cookie-law-info' ),\n\t\t\t'callback' => array( $this, 'menu_page_template' ),\n\t\t\t'order'    => 5,\n\t\t);\n\t\treturn $menus;\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/upgrade/class-upgrade.php","ext":"php","size":21686,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Review_Feedback file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Upgrade;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Includes\\Notice;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Uninstall feedback Operation\n *\n * @class       Review_Feedback\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Upgrade extends Modules {\n\n\t/**\n\t * Existing plugin settings.\n\t *\n\t * @var array\n\t */\n\tprotected $settings = array();\n\n\t/**\n\t * Skip overriding the settings.\n\t *\n\t * @var boolean\n\t */\n\tprotected $skip = false;\n\n\t/**\n\t * Current law\n\t *\n\t * @var string\n\t */\n\tprotected $law = 'gdpr';\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\tadd_action( 'admin_init', array( $this, 'migrate' ) );\n\t\tadd_action( 'admin_init', array( $this, 'add_migration_notice' ) );\n\t\tadd_action( 'admin_init', array( $this, 'revert' ) );\n\t}\n\n\t/**\n\t * Start doing migration\n\t *\n\t * @return void\n\t */\n\tpublic function migrate() {\n\t\tif ( ! isset( $_GET['_wpnonce'] ) || ! wp_verify_nonce( sanitize_text_field( wp_unslash( $_GET['_wpnonce'] ) ), 'migrate' ) || ! current_user_can( 'manage_options' ) ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( isset( $_GET['migrate'] ) && 'process' === sanitize_text_field( wp_unslash( $_GET['migrate'] ) ) ) {\n\t\t\tregister_post_type( CLI_POST_TYPE );\n\t\t\tregister_taxonomy(\n\t\t\t\t'cookielawinfo-category',\n\t\t\t\t'cookielawinfo'\n\t\t\t);\n\t\t\t$this->start_migration();\n\t\t}\n\t}\n\t/**\n\t * Start migrating\n\t *\n\t * @return void\n\t */\n\tpublic function start_migration() {\n\t\trequire_once CLI_PLUGIN_BASEPATH . 'legacy/includes/class-cookie-law-info.php';\n\t\trequire_once CLI_PLUGIN_BASEPATH . 'legacy/public/modules/shortcode/shortcode.php';\n\t\trequire_once CLI_PLUGIN_BASEPATH . 'legacy/admin/modules/ccpa/ccpa.php';\n\n\t\t$this->settings = \\Cookie_Law_Info::get_settings();\n\t\t$this->migrate_settings();\n\t\t$this->migrate_categories();\n\t\t$this->migrate_banners();\n\t\tupdate_option(\n\t\t\t'cky_migration_options',\n\t\t\tarray(\n\t\t\t\t'status' => true,\n\t\t\t\t'expiry' => time() + 14 * DAY_IN_SECONDS,\n\t\t\t)\n\t\t);\n\t\twp_safe_redirect( admin_url( 'admin.php?page=cookie-law-info' ) );\n\t}\n\n\t/**\n\t * Return old plugin items.\n\t *\n\t * @return array\n\t */\n\tpublic function get_old_category_terms() {\n\t\tglobal $wp_version;\n\t\t$taxonomy = 'cookielawinfo-category';\n\t\t$terms    = array();\n\t\tif ( version_compare( $wp_version, '4.9', '>=' ) ) {\n\t\t\t$args  = array(\n\t\t\t\t'taxonomy'   => $taxonomy,\n\t\t\t\t'hide_empty' => false,\n\t\t\t);\n\t\t\t$terms = get_terms( $args );\n\t\t} else {\n\t\t\t$terms = get_terms( $taxonomy, array( 'hide_empty' => false ) ); // phpcs:ignore WordPress.WP.DeprecatedParameters.Get_termsParam2Found\n\t\t}\n\t\treturn $this->order_term_by_key( $terms );\n\t}\n\n\t/**\n\t * Migrate the cookie categories.\n\t *\n\t * @return void\n\t */\n\tpublic function migrate_categories() {\n\t\t$this->clear_existing_categories();\n\t\t$terms        = $this->get_old_category_terms();\n\t\t$lang         = cky_default_language();\n\t\t$languages    = cky_i18n_selected_languages();\n\t\t$default_lang = cky_i18n_default_language();\n\n\t\tif ( is_array( $terms ) ) {\n\t\t\tforeach ( $terms as $term ) {\n\t\t\t\tif ( is_object( $term ) ) {\n\t\t\t\t\t$object        = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie_Categories();\n\t\t\t\t\t$term_language = cky_i18n_term_language( $term->term_id );\n\t\t\t\t\tif ( $term_language === $default_lang ) {\n\n\t\t\t\t\t\t$name        = array();\n\t\t\t\t\t\t$description = array();\n\n\t\t\t\t\t\tforeach ( $languages as $language ) {\n\t\t\t\t\t\t\t$name[ $language ]        = $term->name;\n\t\t\t\t\t\t\t$description[ $language ] = strip_shortcodes( $term->description );\n\t\t\t\t\t\t\tif ( $default_lang !== $language ) {\n\t\t\t\t\t\t\t\t$translated = cky_i18n_term_by_language( $term->term_id, $language );\n\t\t\t\t\t\t\t\tif ( false !== $translated ) {\n\t\t\t\t\t\t\t\t\t$name[ $language ]        = isset( $translated->name ) ? $translated->name : '';\n\t\t\t\t\t\t\t\t\t$description[ $language ] = isset( $translated->description ) ? strip_shortcodes( $translated->description ) : '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$object->set_name( $name );\n\t\t\t\t\t\t$object->set_description( $description );\n\t\t\t\t\t\t$object->set_slug( $term->slug );\n\t\t\t\t\t\tif ( 'necessary' === $term->slug ) {\n\t\t\t\t\t\t\t$object->set_prior_consent( true );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t$object->save();\n\t\t\t\t\t\t$cookies = $this->get_cookies_by_term( $term->slug );\n\n\t\t\t\t\t\tif ( ! empty( $cookies ) ) {\n\t\t\t\t\t\t\tforeach ( $cookies as $key => $item ) {\n\t\t\t\t\t\t\t\t$cookie      = new \\CookieYes\\Lite\\Admin\\Modules\\Cookies\\Includes\\Cookie();\n\t\t\t\t\t\t\t\t$meta        = get_post_custom( $item->ID );\n\t\t\t\t\t\t\t\t$description = array();\n\t\t\t\t\t\t\t\t$duration    = array();\n\t\t\t\t\t\t\t\tforeach ( $languages as $language ) {\n\t\t\t\t\t\t\t\t\t$description[ $language ] = strip_shortcodes( $item->post_content );\n\t\t\t\t\t\t\t\t\t$duration[ $language ]    = sanitize_text_field( isset( $meta['_cli_cookie_duration'][0] ) ? $meta['_cli_cookie_duration'][0] : '' );\n\t\t\t\t\t\t\t\t\tif ( $default_lang !== $language ) {\n\t\t\t\t\t\t\t\t\t\t$translated = cky_i18n_post_by_language( $item->ID, $language );\n\t\t\t\t\t\t\t\t\t\tif ( ! $translated ) {\n\t\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t$translated_meta          = get_post_custom( $translated->ID );\n\t\t\t\t\t\t\t\t\t\t$duration[ $language ]    = sanitize_text_field( ! empty( $translated_meta['_cli_cookie_duration'][0] ) ? $translated_meta['_cli_cookie_duration'][0] : $duration[ $lang ] );\n\t\t\t\t\t\t\t\t\t\t$description[ $language ] = isset( $translated->post_content ) ? strip_shortcodes( $translated->post_content ) : '';\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t$cookie->set_name( $item->post_title );\n\t\t\t\t\t\t\t\t$cookie->set_description( $description );\n\t\t\t\t\t\t\t\t$cookie->set_duration( $duration );\n\t\t\t\t\t\t\t\t$cookie->set_category( $object->get_id() );\n\t\t\t\t\t\t\t\t$cookie->save();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Flush existing data from cookie and category table.\n\t *\n\t * @return void\n\t */\n\tpublic function clear_existing_categories() {\n\t\tglobal $wpdb;\n\t\t$wpdb->query( \"TRUNCATE TABLE {$wpdb->prefix}cky_cookie_categories;\" ); // phpcs:ignore WordPress.DB.DirectDatabaseQuery\n\t\t$wpdb->query( \"TRUNCATE TABLE {$wpdb->prefix}cky_cookies;\" ); // phpcs:ignore WordPress.DB.DirectDatabaseQuery\n\t}\n\n\t/**\n\t * Get the cookies for corresponding categories.\n\t *\n\t * @param string $slug Slug of the term.\n\t * @return array\n\t */\n\tpublic function get_cookies_by_term( $slug ) {\n\t\t$cookies = array();\n\t\t$args    = array(\n\t\t\t'posts_per_page' => -1,\n\t\t\t'post_type'      => 'cookielawinfo',\n\t\t\t'tax_query'      => array( // phpcs:ignore WordPress.DB.SlowDBQuery.slow_db_query_tax_query\n\t\t\t\tarray(\n\t\t\t\t\t'taxonomy' => 'cookielawinfo-category',\n\t\t\t\t\t'field'    => 'slug',\n\t\t\t\t\t'terms'    => $slug,\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\t\t$posts   = get_posts( $args );\n\t\tif ( $posts ) {\n\t\t\t$cookies = $posts;\n\t\t}\n\t\treturn $cookies;\n\t}\n\n\t/**\n\t * Migrate the site settings\n\t *\n\t * @return void\n\t */\n\tpublic function migrate_settings() {\n\t\t$settings                         = new Settings();\n\t\t$options                          = $settings->get();\n\t\t$options['languages']['default']  = cky_i18n_default_language();\n\t\t$options['languages']['selected'] = cky_i18n_selected_languages();\n\t\t$settings->update( $options );\n\t}\n\n\t/**\n\t * Migrate banner config and contents\n\t *\n\t * @return void\n\t */\n\tpublic function migrate_banners() {\n\t\t$languages = cky_i18n_selected_languages();\n\t\t$banners   = \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Controller::get_instance()->get_items();\n\t\t$old_law   = isset( $this->settings['consent_type'] ) ? $this->settings['consent_type'] : 'gdpr';\n\t\tforeach ( $banners as $key => $item ) {\n\t\t\t$banner    = new \\CookieYes\\Lite\\Admin\\Modules\\Banners\\Includes\\Banner( $item->banner_id );\n\t\t\t$type      = $banner->get_law();\n\t\t\t$this->law = $type;\n\t\t\t$banner->set_status( false );\n\n\t\t\tif ( $type === $old_law || ( 'ccpa_gdpr' === $old_law && 'gdpr' === $type ) ) {\n\t\t\t\t$banner->set_status( true );\n\t\t\t\t$contents = array();\n\t\t\t\tforeach ( $languages as $language ) {\n\t\t\t\t\t$contents[ $language ] = $this->prepare_contents( $banner->get_contents( $language ), $language );\n\t\t\t\t}\n\t\t\t\t$banner->set_contents( $contents );\n\t\t\t\t$this->skip = false;\n\t\t\t} elseif ( 'ccpa_gdpr' === $old_law ) {\n\t\t\t\tif ( 'gdpr' === $type ) {\n\t\t\t\t\t$banner->set_status( true );\n\t\t\t\t}\n\t\t\t\t$this->skip = false;\n\t\t\t} else {\n\t\t\t\t$this->skip = true;\n\t\t\t}\n\n\t\t\t$settings = $this->prepare_config( $banner->get_settings() );\n\t\t\t$banner->set_settings( $settings );\n\t\t\t$banner->save();\n\t\t}\n\t}\n\n\t/**\n\t * Prepare banner config for migration.\n\t *\n\t * @param array $config Banner config.\n\t * @return array\n\t */\n\tpublic function prepare_config( $config = array() ) {\n\t\t$settings     = $this->settings;\n\t\t$current_type = isset( $settings['cookie_bar_as'] ) ? sanitize_text_field( $settings['cookie_bar_as'] ) : 'banner';\n\t\t$position     = isset( $settings['notify_position_vertical'] ) ? sanitize_text_field( $settings['notify_position_vertical'] ) : 'bottom-left';\n\t\t$heading      = isset( $settings['bar_heading_text'] ) ? $settings['bar_heading_text'] : '';\n\n\t\t$type = 'banner';\n\t\tif ( 'popup' === $current_type || 'widget' === $current_type ) {\n\t\t\t$type     = 'box';\n\t\t\t$position = isset( $settings['widget_position'] ) ? sanitize_text_field( $settings['widget_position'] ) : 'left';\n\t\t\t$position = \"bottom-{$position}\";\n\t\t}\n\t\t$config['settings']['type']     = $type;\n\t\t$config['settings']['theme']    = 'custom';\n\t\t$config['settings']['position'] = $position;\n\n\t\t$background_color = isset( $settings['background'] ) ? cky_sanitize_color( $settings['background'] ) : $config['config']['notice']['styles']['background-color'];\n\t\t$border_color     = isset( $settings['border'] ) ? cky_sanitize_color( $settings['border'] ) : $config['config']['notice']['styles']['border-color'];\n\t\t$color            = isset( $settings['text'] ) ? cky_sanitize_color( $settings['text'] ) : $config['config']['notice']['styles']['color'];\n\n\t\t$config['config']['notice']['styles']['background-color']                 = $background_color;\n\t\t$config['config']['notice']['styles']['border-color']                     = $border_color;\n\t\t$config['config']['notice']['elements']['title']['styles']['color']       = $color;\n\t\t$config['config']['notice']['elements']['description']['styles']['color'] = $color;\n\t\t$config['config']['notice']['elements']['closeButton']['status'] = has_shortcode( $settings['notify_message'], 'cookie_close' );\n\n\t\t$config['config']['preferenceCenter']['styles']['background-color'] = $background_color;\n\t\t$config['config']['preferenceCenter']['styles']['border-color']     = $border_color;\n\n\t\t$buttons_config = isset( $config['config']['notice']['elements']['buttons']['elements'] ) ? $config['config']['notice']['elements']['buttons']['elements'] : array();\n\n\t\tif ( ! empty( $buttons_config ) ) {\n\t\t\t$accept_button = has_shortcode( $settings['notify_message'], 'cookie_accept_all' ) ? 'button_7' : 'button_1';\n\n\t\t\t$buttons_config['accept']    = isset( $buttons_config['accept'] ) ? $this->prepare_buttons( $accept_button, $buttons_config['accept'] ) : array();\n\t\t\t$buttons_config['reject']    = isset( $buttons_config['reject'] ) ? $this->prepare_buttons( 'button_3', $buttons_config['reject'] ) : array();\n\t\t\t$buttons_config['settings']  = isset( $buttons_config['settings'] ) ? $this->prepare_buttons( 'button_4', $buttons_config['settings'] ) : array();\n\t\t\t$buttons_config['donotSell'] = isset( $buttons_config['donotSell'] ) ? $this->prepare_buttons( 'button_6', $buttons_config['donotSell'] ) : array();\n\t\t\t$buttons_config['readMore']  = isset( $buttons_config['readMore'] ) ? $this->prepare_buttons( 'button_2', $buttons_config['readMore'] ) : array();\n\t\t\t$buttons_config['readMore']  = $this->prepare_readmore( $buttons_config['readMore'] );\n\n\t\t\t$config['config']['notice']['elements']['buttons']['elements'] = $buttons_config;\n\n\t\t\t$preference_center  = isset( $config['config']['preferenceCenter'] ) ? $config['config']['preferenceCenter'] : array();\n\t\t\t$preference_buttons = isset( $preference_center['elements']['buttons']['elements'] ) ? $preference_center['elements']['buttons']['elements'] : array();\n\n\t\t\t$preference_buttons['accept']['styles'] = isset( $buttons_config['accept']['styles'] ) ? $buttons_config['accept']['styles'] : array();\n\t\t\t$preference_buttons['reject']['styles'] = isset( $buttons_config['reject']['styles'] ) ? $buttons_config['reject']['styles'] : array();\n\t\t\t$preference_buttons['save']['styles']   = isset( $buttons_config['settings']['styles'] ) ? $buttons_config['settings']['styles'] : array();\n\n\t\t\t$config['config']['preferenceCenter']['elements']['buttons']['elements'] = $preference_buttons;\n\t\t}\n\t\t$revisit_options = isset( $config['config']['revisitConsent'] ) ? $config['config']['revisitConsent'] : array();\n\n\t\t$config['config']['revisitConsent'] = $this->get_revisit_options( $revisit_options );\n\t\treturn $config;\n\t}\n\n\t/**\n\t * Prepare the buttons for migration.\n\t *\n\t * @param string $button Button slug as of old settings.\n\t * @param array  $config Existing config.\n\t * @return array\n\t */\n\tpublic function prepare_buttons( $button = 'button_1', $config = array() ) {\n\t\t$settings  = $this->settings;\n\t\t$shortcode = $this->get_shortcode( $button );\n\t\tif ( false === $this->skip ) {\n\t\t\t$config['status'] = has_shortcode( $settings['notify_message'], $shortcode );\n\t\t}\n\t\tif ( 'ccpa' === $this->law && 'button_6' !== $button || 'gdpr' === $this->law && 'button_6' === $button ) {\n\t\t\t$config['status'] = false;\n\t\t}\n\t\t$config['styles']['background-color'] = isset( $settings[ \"{$button}_button_colour\" ] ) ? $settings[ \"{$button}_button_colour\" ] : '';\n\t\t$config['styles']['color']            = isset( $settings[ \"{$button}_link_colour\" ] ) ? $settings[ \"{$button}_link_colour\" ] : '';\n\t\t$config['styles']['border-color']     = $config['styles']['background-color'];\n\t\treturn $config;\n\t}\n\n\t/**\n\t * Set background and border color transparent.\n\t *\n\t * @param array $config Existing config.\n\t * @return array\n\t */\n\tpublic function prepare_readmore( $config = array() ) {\n\t\t$config['styles']['background-color'] = 'transparent';\n\t\t$config['styles']['border-color']     = 'transparent';\n\t\treturn $config;\n\t}\n\n\t/**\n\t * Prepare banner contents for migration.\n\t *\n\t * @param array  $contents Existing contents.\n\t * @param string $language Language slug.\n\t * @return array\n\t */\n\tpublic function prepare_contents( $contents, $language ) {\n\t\t$settings              = $this->settings;\n\t\t$notice                = isset( $contents['notice']['elements'] ) ? $contents['notice']['elements'] : array();\n\t\t$notice['title']       = isset( $settings['bar_heading_text'] ) ? cky_i18n_translate_string( $settings['bar_heading_text'], 'bar_heading_text', $language ) : '';\n\t\t$notice['description'] = isset( $settings['notify_message'] ) ? wp_strip_all_tags( strip_shortcodes( cky_i18n_translate_string( $settings['notify_message'], 'notify_message', $language ) ) ) : '';\n\t\t$notice['privacyLink'] = $this->get_readmore_link();\n\n\t\t$accept_button                             = has_shortcode( $settings['notify_message'], 'cookie_accept_all' ) ? 'button_7' : 'button_1';\n\t\t$notice['buttons']['elements']['accept']   = $this->get_button_text( $accept_button, $language );\n\t\t$notice['buttons']['elements']['reject']   = $this->get_button_text( 'button_3', $language );\n\t\t$notice['buttons']['elements']['settings'] = $this->get_button_text( 'button_4', $language );\n\t\t$notice['buttons']['elements']['readMore'] = $this->get_button_text( 'button_2', $language );\n\t\t$contents['notice']['elements']            = $notice;\n\n\t\t// Preference center.\n\n\t\t$preference = isset( $contents['preferenceCenter']['elements'] ) ? $contents['preferenceCenter']['elements'] : array();\n\t\t$existing   = $this->get_preference_center_texts();\n\n\t\t$preference['title']                             = cky_i18n_translate_string( $existing['title'], 'privacy_overview_title', $language, 'cookielawinfo_privacy_overview_content_settings' );\n\t\t$preference['description']                       = cky_i18n_translate_string( $existing['description'], 'privacy_overview_content', $language, 'cookielawinfo_privacy_overview_content_settings' );\n\t\t$preference['buttons']['elements']['accept']     = $this->get_button_text( $accept_button, $language );\n\t\t$preference['buttons']['elements']['reject']     = $this->get_button_text( 'button_3', $language );\n\t\t$contents['preferenceCenter']['elements']        = $preference;\n\t\t$contents['revisitConsent']['elements']['title'] = cky_i18n_translate_string( $existing['title'], 'title', $language );\n\t\treturn $contents;\n\t}\n\n\t/**\n\t * Get button text based on language\n\t *\n\t * @param string $button Button slug.\n\t * @param string $language Language code.\n\t * @return string\n\t */\n\tpublic function get_button_text( $button = 'button_1', $language = 'en' ) {\n\t\t$settings = $this->settings;\n\t\treturn isset( $settings[ \"{$button}_text\" ] ) ? cky_i18n_translate_string( $settings[ \"{$button}_text\" ], \"{$button}_text\", $language ) : '';\n\t}\n\n\t/**\n\t * Return preference center options\n\t *\n\t * @return array\n\t */\n\tpublic function get_preference_center_texts() {\n\t\t$overview    = get_option( 'cookielawinfo_privacy_overview_content_settings' );\n\t\t$title       = sanitize_text_field( stripslashes( isset( $overview['privacy_overview_title'] ) ? $overview['privacy_overview_title'] : '' ) );\n\t\t$description = wp_kses_post( isset( $overview['privacy_overview_content'] ) ? $overview['privacy_overview_content'] : '' );\n\t\treturn array(\n\t\t\t'title'       => $title,\n\t\t\t'description' => $description,\n\t\t);\n\t}\n\n\t/**\n\t * Migrate revisit consent option.\n\t *\n\t * @param array $options Array of options.\n\t * @return array\n\t */\n\tpublic function get_revisit_options( $options = array() ) {\n\t\t$settings            = $this->settings;\n\t\t$status              = isset( $settings['showagain_tab'] ) ? (bool) $settings['showagain_tab'] : false;\n\t\t$position            = isset( $settings['notify_position_horizontal'] ) && 'right' === $settings['notify_position_horizontal'] ? 'bottom-right' : 'bottom-left';\n\t\t$options['status']   = $status;\n\t\t$options['position'] = $position;\n\t\treturn $options;\n\t}\n\n\t/**\n\t * Map shortcodes to corresponding buttons.\n\t *\n\t * @param string $button Button slug.\n\t * @return string\n\t */\n\tpublic function get_shortcode( $button ) {\n\t\tswitch ( $button ) {\n\t\t\tcase 'button_1':\n\t\t\t\treturn 'cookie_button';\n\t\t\tcase 'button_2':\n\t\t\t\treturn 'cookie_link';\n\t\t\tcase 'button_3':\n\t\t\t\treturn 'cookie_reject';\n\t\t\tcase 'button_4':\n\t\t\t\treturn 'cookie_settings';\n\t\t\tcase 'button_6':\n\t\t\t\treturn 'wt_cli_ccpa_optout';\n\t\t\tcase 'button_7':\n\t\t\t\treturn 'cookie_accept_all';\n\t\t\tdefault:\n\t\t\t\treturn 'cookie_button';\n\t\t}\n\t}\n\n\t/**\n\t * Reorder the terms based on the priority.\n\t *\n\t * @param array  $terms Terms array.\n\t * @param string $order Sorting order.\n\t * @return array\n\t */\n\tpublic function order_term_by_key( $terms, $order = 'DESC' ) {\n\t\t$sort_order  = SORT_DESC;\n\t\t$meta_values = array();\n\t\tif ( 'ASC' === $order ) {\n\t\t\t$sort_order = SORT_ASC;\n\t\t}\n\t\tif ( ! empty( $terms ) && is_array( $terms ) ) {\n\t\t\tforeach ( $terms as $key => $term ) {\n\t\t\t\t$priority      = get_term_meta( $term->term_id, 'CLIpriority' );\n\t\t\t\t$meta_values[] = isset( $priority ) ? absint( $priority ) : 0;\n\t\t\t}\n\t\t\tif ( ! empty( $meta_values ) && is_array( $meta_values ) ) {\n\t\t\t\tarray_multisort( $meta_values, $sort_order, $terms );\n\t\t\t}\n\t\t}\n\t\treturn $terms;\n\t}\n\n\t/**\n\t * Add a migration notice which allows to revert back to the legacy UI.\n\t *\n\t * @return void\n\t */\n\tpublic function add_migration_notice() {\n\t\t$options = get_option( 'cky_migration_options', array() );\n\t\t$status  = isset( $options['status'] ) ? $options['status'] : false;\n\t\t$expiry  = isset( $options['expiry'] ) ? $options['expiry'] : 0;\n\n\t\tif ( ! $status || ( 0 !== $expiry && time() > $expiry ) ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( true === $status ) {\n\t\t\tadd_filter(\n\t\t\t\t'cky_admin_scripts_global',\n\t\t\t\tfunction( $config ) {\n\t\t\t\t\t$config['legacyURL'] = esc_attr( wp_nonce_url( add_query_arg( 'revert', 'true', admin_url( 'admin.php?page=cookie-law-info' ) ), 'revert', '_wpnonce' ) );\n\t\t\t\t\treturn $config;\n\t\t\t\t}\n\t\t\t);\n\t\t\t$date   = date_i18n( 'M d,Y', $expiry );\n\t\t\t$notice = Notice::get_instance();\n\t\t\t$notice->add(\n\t\t\t\t'migration_notice',\n\t\t\t\tarray( // translators: %s: Migration notice expiry notice.\n\t\t\t\t\t'message' => sprintf( __( 'Not satisfied with the New UI and related changes? You can switch back to the old UI at any time until %s.', 'cookie-law-info' ), esc_html( $date ) ),\n\t\t\t\t\t'type'    => 'info',\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\t}\n\t/**\n\t * Return the readmore link\n\t *\n\t * @return string\n\t */\n\tprivate function get_readmore_link() {\n\t\tif ( $this->settings['button_2_url_type'] == 'url' ) {\n\t\t\treturn isset( $this->settings['button_2_url'] ) ? $this->settings['button_2_url'] : '';\n\t\t} else {\n\t\t\t$page = isset( $this->settings['button_2_page'] ) ? intval( $this->settings['button_2_page'] ) : false;\n\n\t\t\t$privacy = '';\n\t\t\tif ( ! $page ) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\t$post = get_post( $page );\n\t\t\tif ( $post instanceof \\WP_Post ) {\n\t\t\t\tif ( 'publish' === $post->post_status ) {\n\t\t\t\t\t$privacy = get_page_link( $post );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $privacy;\n\t\t}\n\t}\n\t/**\n\t * Revert plugin to legacy UI\n\t *\n\t * @return void\n\t */\n\tpublic function revert() {\n\t\tif ( ! isset( $_GET['_wpnonce'] ) || ! wp_verify_nonce( sanitize_text_field( wp_unslash( $_GET['_wpnonce'] ) ), 'revert' ) || ! current_user_can( 'manage_options' ) ) {\n\t\t\treturn;\n\t\t}\n\t\tif ( ! isset( $_GET['revert'] ) && 'true' === sanitize_text_field( wp_unslash( $_GET['revert'] ) ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$settings = new Settings();\n\t\t$options  = $settings->get();\n\n\t\t$options['api']['token']         = '';\n\t\t$options['account']['connected'] = false;\n\t\t$settings->update( $options );\n\t\tdelete_option( 'cky_cookie_consent_lite_db_version' );\n\t\twp_safe_redirect( admin_url( 'edit.php?post_type=cookielawinfo&page=cookie-law-info' ) );\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/gcm/class-gcm.php","ext":"php","size":1086,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Gcm file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Gcm;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Admin\\Modules\\Gcm\\Api\\Api;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nclass Gcm extends Modules {\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$controller = Includes\\Controller::get_instance();\n\t\tadd_filter( 'cky_admin_scripts_gcm_config', array( $controller, 'load_common_gcm_settings' ) );\n\t\t$this->load_apis();\n\t\t$this->load_gcm_default();\n\t}\n\n\t/**\n\t * Load API files\n\t *\n\t * @return void\n\t */\n\tpublic function load_apis() {\n\t\tnew Api();\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n\n\tpublic function load_gcm_default() {\n\t\tif ( false === cky_first_time_install() ||  false !== get_option( 'cky_gcm_settings', false ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$settings = new \\CookieYes\\Lite\\Admin\\Modules\\Gcm\\Includes\\Gcm_Settings();\n\t\t$default  = $settings->get_defaults();\n\t\t$settings->update( $default );\n\t}\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/gcm/includes/class-controller.php","ext":"php","size":842,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Controller file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Gcm\\Includes;\n\nuse CookieYes\\Lite\\Admin\\Modules\\Gcm\\Includes\\Gcm_Settings;\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Includes\\Cloud;\nuse WP_Error;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nclass Controller extends Cloud {\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\tpublic function load_common_gcm_settings( $data ) {\n\t\t$settings                = new Gcm_Settings();\n\t\t$data['settings']        = $settings->get();\n\t\treturn $data;\n\t}\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/gcm/includes/class-gcm-settings.php","ext":"php","size":3097,"mtime":1757312769,"type":"text","content":"<?php\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Gcm\\Includes;\n\nuse CookieYes\\Lite\\Includes\\Store;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nclass Gcm_Settings extends Store {\n\tprotected $data = array();\n\n\tprivate static $instance;\n\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\tpublic function __construct() {\n\t\t$this->data = $this->get_defaults();\n\t}\n\n\tpublic function get_defaults() {\n\t\treturn array(\n\t\t\t'status' => false,\n\t\t\t'default_settings' => array(\n\t\t\t\tarray(\n\t\t\t\t\t'analytics' => 'denied',\n\t\t\t\t\t'advertisement' => 'denied',\n\t\t\t\t\t'functional' => 'denied',\n\t\t\t\t\t'necessary' => 'granted',\n\t\t\t\t\t'ad_user_data' => 'denied',\n\t\t\t\t\t'ad_personalization' => 'denied',\n\t\t\t\t\t'regions' => 'All',\n\t\t\t\t)\n\t\t\t),\n\t\t\t'wait_for_update' => 2000,\n\t\t\t'url_passthrough' => false,\n\t\t\t'ads_data_redaction' => false,\n\t\t);\n\t}\n\n\tpublic function get( $group = '', $key = '' ) {\n\t\t$settings = get_option( 'cky_gcm_settings', $this->data );\n\t\t$settings = self::sanitize( $settings, $this->data );\n\t\tif ( empty( $key ) && empty( $group ) ) {\n\t\t\treturn $settings;\n\t\t} elseif ( ! empty( $key ) && ! empty( $group ) ) {\n\t\t\t$settings = isset( $settings[ $group ] ) ? $settings[ $group ] : array();\n\t\t\treturn isset( $settings[ $key ] ) ? $settings[ $key ] : array();\n\t\t} else {\n\t\t\treturn isset( $settings[ $group ] ) ? $settings[ $group ] : array();\n\t\t}\n\t}\n\t/**\n\t * Excludes a key from sanitizing multiple times.\n\t *\n\t * @return array\n\t */\n\tpublic static function get_excludes() {\n\t\treturn array(\n\t\t\t'default_settings',\n\t\t);\n\t}\n\t/**\n\t * Update settings to database.\n\t *\n\t * @param array $data Array of settings data.\n\t * @return void\n\t */\n\tpublic function update( $data ) {\n\t\t$settings = get_option( 'cky_gcm_settings', $this->data );\n\t\tif ( empty( $settings ) ) {\n\t\t\t$settings = $this->data;\n\t\t}\n\t\t$settings = self::sanitize( $data, $settings );\n\t\tupdate_option( 'cky_gcm_settings', $settings );\n\t\tdo_action( 'cky_after_update_settings', $settings );\n\t}\n\n\tpublic function sanitize( $settings, $defaults ) {\n\t\t$result  = array();\n\t\t$excludes = self::get_excludes();\n\t\tforeach ( $defaults as $key => $data ) {\n\t\t\t$value = isset( $settings[ $key ] ) ? $settings[ $key ] : $data;\n\t\t\tif ( in_array( $key, $excludes, true ) ) {\n\t\t\t\t$result[ $key ] = $value;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif ( is_array( $value ) ) {\n\t\t\t\t$result[ $key ] = self::sanitize( $value, $data );\n\t\t\t} elseif ( is_string( $key ) ) {\n\t\t\t\t$result[ $key ] = self::sanitize_option( $key, $value );\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\n\n\tpublic static function sanitize_option( $option, $value ) {\n\t\tswitch ( $option ) {\n\t\t\tcase 'status':\n\t\t\tcase 'url_passthrough':\n\t\t\tcase 'ads_data_redaction':\n\t\t\t\t$value = cky_sanitize_bool( $value );\n\t\t\t\tbreak;\n\t\t\tcase 'wait_for_update':\n\t\t\t\t$value = absint( $value );\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$value = cky_sanitize_text( $value );\n\t\t\t\tbreak;\n\t\t}\n\t\treturn $value;\n\t}\n\n\t/**\n\t * Check whether GCM is enabled.\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_gcm_enabled() {\n\t\treturn $this->get( 'status' );\n\t}\n}"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/gcm/api/class-api.php","ext":"php","size":3960,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package Gcm\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Gcm\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Gcm\\Includes\\Gcm_Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'gcm';\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t}\n\t/**\n\t * Register the routes for gcm.\n\t *\n\t * @return void\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Create gcm.\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function create_item( $request ) {\n\t\tif ( false === cky_is_cloud_request() ) {\n\t\t\treturn new WP_Error( 'cookieyes_rest_invalid_data', __( 'Invalid method', 'cookie-law-info' ), array( 'status' => 404 ) );\n\t\t}\n\t\t$data = $this->prepare_item_for_database( $request );\n\t\t$context = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t$data    = $this->add_additional_fields_to_object( $data, $request );\n\t\t$data    = $this->filter_response_by_context( $data, $context );\n\t\treturn rest_ensure_response( $data );\n\t}\n\n\tpublic function prepare_item_for_database( $request ) {\n\t\t$object     = new Gcm_Settings();\n\t\t$data       = $object->get();\n\t\t$schema     = $this->get_item_schema();\n\t\t$properties = isset( $schema['properties'] ) && is_array( $schema['properties'] ) ? $schema['properties'] : array();\n\t\tif ( ! empty( $properties ) ) {\n\t\t\t$properties_keys = array_keys(\n\t\t\t\tarray_filter(\n\t\t\t\t\t$properties,\n\t\t\t\t\tfunction( $property ) {\n\t\t\t\t\t\treturn isset( $property['readonly'] ) && true === $property['readonly'] ? false : true;\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t);\n\t\t\tforeach ( $properties_keys as $key ) {\n\t\t\t\t$value        = isset( $request[ $key ] ) ? $request[ $key ] : '';\n\t\t\t\t$data[ $key ] = $value;\n\t\t\t}\n\t\t}\n\t\t$object->update( $data );\n\t\treturn $object->get();\n\t}\n\n\t/**\n\t * Get the Gcm's schema, conforming to JSON Schema.\n\t *\n\t * @return array\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/draft-04/schema#',\n\t\t\t'title'      => 'gcm',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'status'           => array(\n\t\t\t\t\t'description' => __( 'GCM status.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'default_settings'         => array(\n\t\t\t\t\t'description' => __( 'Default settings.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'array',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'wait_for_update'          => array(\n\t\t\t\t\t'description' => __( 'Wait for update.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'url_passthrough'      => array(\n\t\t\t\t\t'description' => __( 'Pass ad click information through URLs.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'ads_data_redaction' => array(\n\t\t\t\t\t'description' => __( 'Redact ads data.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'boolean',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/scanner/class-scanner.php","ext":"php","size":1086,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Scanner file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Scanner;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Scanner\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Scanner extends Modules {\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$controller = new \\CookieYes\\Lite\\Admin\\Modules\\Scanner\\Includes\\Controller();\n\t\t$this->load_apis( $controller );\n\t\tadd_filter( 'cky_admin_scripts_scanner_config', array( $controller, 'load_scanner_config' ) );\n\t}\n\n\t/**\n\t * Load API classes\n\t *\n\t * @param object $controller Controller object.\n\t * @return void\n\t */\n\tpublic function load_apis( $controller ) {\n\t\t$api = new \\CookieYes\\Lite\\Admin\\Modules\\Scanner\\Api\\Api( $controller );\n\t}\n\n\t/**\n\t * Add admin sub menus\n\t *\n\t * @return void\n\t */\n\tpublic function admin_menu() {\n\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/scanner/includes/class-controller.php","ext":"php","size":3790,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Controller file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Scanner\\Includes;\n\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Cookieyes;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Controller\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Controller extends Cookieyes {\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\n\t/**\n\t * Base path for cookie scanner API\n\t *\n\t * @var string\n\t */\n\tprivate $rest_path;\n\n\t/**\n\t * Default scan data\n\t *\n\t * @var array\n\t */\n\tprivate static $default = array(\n\t\t'id'     => 0,\n\t\t'status' => '',\n\t\t'type'   => '',\n\t\t'date'   => '',\n\t);\n\n\t/**\n\t * Last scan info.\n\t *\n\t * @var array\n\t */\n\tprotected $last_scan_info;\n\t/**\n\t * Constructor\n\t *\n\t * @return void\n\t */\n\tpublic function __construct() {\n\t\t$this->make_auth_request();\n\t\tparent::__construct();\n\t\t$this->rest_path = 'websites/' . $this->get_website_id() . '/scans';\n\t}\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t/**\n\t * Fetch scan histories from the web app.\n\t *\n\t * @param array $args Array of arguments.\n\t * @return array\n\t */\n\tpublic function get_history( $args = array() ) {\n\t\treturn $this->get( add_query_arg( $args, $this->rest_path ) );\n\t}\n\n\t/**\n\t * Get the details of a scan with ID.\n\t *\n\t * @param integer $id Web app id of the corresponding scan.\n\t * @return array\n\t */\n\tpublic function get_scan_details( $id = 0 ) {\n\t\treturn $this->get( $this->rest_path . '/' . $id );\n\t}\n\n\t/**\n\t * Check whether the scan can be initiated\n\t *\n\t * @return array\n\t */\n\tpublic function can_scan() {\n\t\treturn $this->post( 'websites/' . $this->get_website_id() . '/can-scan' );\n\t}\n\n\t/**\n\t * Send a API request to the web app to initiate the scan\n\t *\n\t * @return array\n\t */\n\tpublic function initiate_scan() {\n\t\treturn $this->post(\n\t\t\t$this->rest_path,\n\t\t\twp_json_encode(\n\t\t\t\tarray(\n\t\t\t\t\t'page_limit'  => 100,\n\t\t\t\t\t'type'        => 'deep',\n\t\t\t\t\t'concurrency' => 1,\n\t\t\t\t)\n\t\t\t)\n\t\t);\n\t}\n\t/**\n\t * Get the last scan info\n\t *\n\t * @return array\n\t */\n\tpublic function get_info() {\n\t\tif ( ! $this->last_scan_info ) {\n\t\t\t$data                 = get_option( 'cky_scan_details', self::$default );\n\t\t\t$timestamp            = strtotime( sanitize_text_field( $data['date'] ) );\n\t\t\t$formatted            = gmdate( 'd F Y H:i:s', $timestamp );\n\t\t\t$this->last_scan_info = array(\n\t\t\t\t'id'     => absint( $data['id'] ),\n\t\t\t\t'status' => sanitize_text_field( $data['status'] ),\n\t\t\t\t'type'   => sanitize_text_field( $data['type'] ),\n\t\t\t\t'date'   => sanitize_text_field( $formatted ),\n\t\t\t);\n\t\t}\n\t\treturn $this->last_scan_info;\n\n\t}\n\n\t/**\n\t * Update the last scan info to the option table\n\t *\n\t * @param array $data Scan data received from the CookieYes web app after initiating the scan.\n\t * @return void\n\t */\n\tpublic function update_info( $data = array() ) {\n\t\t$scan_data = get_option( 'cky_scan_details', self::$default );\n\t\t$data      = array(\n\t\t\t'id'     => absint( isset( $data['id'] ) ? $data['id'] : $scan_data['id'] ),\n\t\t\t'status' => sanitize_text_field( isset( $data['status'] ) ? $data['status'] : $scan_data['status'] ),\n\t\t\t'type'   => sanitize_text_field( isset( $data['type'] ) ? $data['type'] : $scan_data['type'] ),\n\t\t\t'date'   => sanitize_text_field( isset( $data['date'] ) ? $data['date'] : $scan_data['date'] ),\n\t\t);\n\t\tupdate_option( 'cky_scan_details', $data );\n\t\t$this->last_scan_info = $data;\n\t}\n\t/**\n\t * Load scanner configs into WordPress localization function\n\t *\n\t * @return array\n\t */\n\tpublic function load_scanner_config() {\n\t\treturn $this->get_info();\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/scanner/api/class-api.php","ext":"php","size":12270,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package Settings\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Scanner\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse stdClass;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Cookies API\n *\n * @class       Api\n * @version     3.0.0\n * @package     CookieYes\n * @extends     Rest_Controller\n */\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'scans';\n\n\t/**\n\t * Base controller\n\t *\n\t * @var object\n\t */\n\tprotected $controller;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param object $controller Controller class object.\n\t */\n\tpublic function __construct( $controller ) {\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t\t$this->controller = $controller;\n\t}\n\n\t/**\n\t * Register the routes for cookies.\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base,\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_items' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::CREATABLE,\n\t\t\t\t\t'callback'            => array( $this, 'create_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'create_item_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_endpoint_args_for_item_schema( WP_REST_Server::CREATABLE ),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/(?P<id>[\\d]+)',\n\t\t\tarray(\n\t\t\t\t'args' => array(\n\t\t\t\t\t'id' => array(\n\t\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_item' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => array(\n\t\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/details/(?P<id>[\\d]+)',\n\t\t\tarray(\n\t\t\t\t'args' => array(\n\t\t\t\t\t'id' => array(\n\t\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_details' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_item_permissions_check' ),\n\t\t\t\t\t'args'                => array(\n\t\t\t\t\t\t'context' => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t\t\t),\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Get scan histories\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_items( $request ) {\n\t\t$history_details = array();\n\t\t$history_args    = array(\n\t\t\t'per_page' => isset( $request['per_page'] ) ? absint( $request['per_page'] ) : 10,\n\t\t\t'page'     => isset( $request['page'] ) ? absint( $request['page'] ) : 1,\n\t\t);\n\t\t$response        = $this->controller->get_history( $history_args );\n\t\t$response_code   = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$items = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\tif ( isset( $items['data'] ) ) {\n\t\t\t\tforeach ( $items['data'] as $index => $item ) {\n\t\t\t\t\t$data                   = new stdClass();\n\t\t\t\t\t$data->id               = isset( $item['id'] ) ? absint( $item['id'] ) : 0;\n\t\t\t\t\t$data->scan_status      = isset( $item['scan_status'] ) ? sanitize_text_field( $item['scan_status'] ) : '';\n\t\t\t\t\t$data->pages_scanned    = isset( $item['pages_scanned'] ) ? absint( $item['pages_scanned'] ) : 0;\n\t\t\t\t\t$data->total_categories = isset( $item['total_categories'] ) ? absint( $item['total_categories'] ) : 0;\n\t\t\t\t\t$data->total_cookies    = isset( $item['total_cookies'] ) ? absint( $item['total_cookies'] ) : 0;\n\t\t\t\t\t$data->total_scripts    = isset( $item['total_scripts'] ) ? absint( $item['total_scripts'] ) : 0;\n\t\t\t\t\t$data->created_at       = isset( $item['created_at'] ) ? sanitize_text_field( $item['created_at'] ) : '';\n\t\t\t\t\tif ( ! empty( $data ) ) {\n\t\t\t\t\t\t$history_details['data'][ $index ] = $data;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t$pagination_data           = new stdClass();\n\t\t\t$pagination_data->per_page = isset( $items['per_page'] ) ? absint( $items['per_page'] ) : 10;\n\t\t\t$pagination_data->total    = isset( $items['total'] ) ? absint( $items['total'] ) : 0;\n\t\t\tif ( ! empty( $pagination_data ) ) {\n\t\t\t\t$history_details['pagination'] = $pagination_data;\n\t\t\t}\n\t\t}\n\t\treturn $history_details;\n\t}\n\n\t/**\n\t * Get individual scan details\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_details( $request ) {\n\t\t$scan_id      = (int) $request['id'];\n\t\t$scan_details = array();\n\t\tif ( 0 === $scan_id ) {\n\t\t\treturn new WP_Error( 'cookieyes_rest_invalid_id', __( 'Invalid ID.', 'cookie-law-info' ), array( 'status' => 404 ) );\n\t\t}\n\t\t$response      = $this->controller->get_scan_details( $scan_id );\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$items = json_decode( wp_remote_retrieve_body( $response ), true );\n\n\t\t\t$data      = new stdClass();\n\t\t\t$data->id  = isset( $items['id'] ) ? absint( $items['id'] ) : 0;\n\t\t\t$scan_date = isset( $items['scan_date'] ) ? sanitize_text_field( $items['scan_date'] ) : '';\n\n\t\t\tif ( ! empty( $scan_date ) ) {\n\t\t\t\t$scan_date_time  = new \\DateTime( $scan_date );\n\t\t\t\t$data->scan_date = cky_i18n_date( $scan_date_time->format( 'U' ) );\n\t\t\t}\n\t\t\t$data->scan_status      = isset( $items['scan_status'] ) ? sanitize_text_field( $items['scan_status'] ) : '';\n\t\t\t$data->total_pages      = isset( $items['total_pages'] ) ? absint( $items['total_pages'] ) : 0;\n\t\t\t$data->total_categories = isset( $items['total_categories'] ) ? absint( $items['total_categories'] ) : 0;\n\t\t\t$data->total_cookies    = isset( $items['total_cookies'] ) ? absint( $items['total_cookies'] ) : 0;\n\t\t\t$data->total_scripts    = isset( $items['total_scripts'] ) ? absint( $items['total_scripts'] ) : 0;\n\n\t\t\tif ( isset( $items['categories'] ) ) {\n\t\t\t\tforeach ( $items['categories'] as $category_index => $category ) {\n\t\t\t\t\t$data->categories[ $category_index ]['name'] = isset( $category['name'] ) ? sanitize_text_field( $category['name'] ) : '';\n\t\t\t\t\tif ( isset( $category['cookies'] ) ) {\n\t\t\t\t\t\tforeach ( $category['cookies'] as $cookie ) {\n\t\t\t\t\t\t\t$cookie_id = $cookie['cookie_id'];\n\t\t\t\t\t\t\t$data->categories[ $category_index ]['cookies'][ $cookie_id ]['cookie_id']   = isset( $cookie['cookie_id'] ) ? sanitize_text_field( $cookie['cookie_id'] ) : '';\n\t\t\t\t\t\t\t$data->categories[ $category_index ]['cookies'][ $cookie_id ]['description'] = isset( $cookie['description'] ) ? sanitize_text_field( $cookie['description'] ) : '';\n\t\t\t\t\t\t\t$data->categories[ $category_index ]['cookies'][ $cookie_id ]['duration']    = isset( $cookie['duration'] ) ? sanitize_text_field( $cookie['duration'] ) : '';\n\t\t\t\t\t\t\t$data->categories[ $category_index ]['cookies'][ $cookie_id ]['type']        = isset( $cookie['type'] ) ? sanitize_text_field( $cookie['type'] ) : '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( isset( $items['urls'] ) ) {\n\t\t\t\tforeach ( $items['urls'] as $url_index => $url ) {\n\t\t\t\t\t$data->urls[ $url_index ]['count'] = isset( $url['count'] ) ? absint( $url['count'] ) : 0;\n\t\t\t\t\t$data->urls[ $url_index ]['name']  = isset( $url['name'] ) ? sanitize_text_field( $url['name'] ) : '';\n\t\t\t\t}\n\t\t\t}\n\t\t\t$scan_details = $data;\n\t\t}\n\t\treturn $scan_details;\n\t}\n\n\t/**\n\t * Initiate a new scan by sending scan request to web app\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function create_item( $request ) {\n\t\t$can_scan_response      = $this->controller->can_scan();\n\t\t$can_scan_response_code = wp_remote_retrieve_response_code( $can_scan_response );\n\t\tif ( 200 === $can_scan_response_code ) {\n\t\t\t$can_scan_response = json_decode( wp_remote_retrieve_body( $can_scan_response ), true );\n\t\t\tif ( ! $can_scan_response['canScan'] ) {\n\t\t\t\treturn new WP_Error( 'cky_rest_scan_initiated', __( 'Could not initiate the scan, please try again', 'cookie-law-info' ), array( 'status' => 200 ) );\n\t\t\t}\n\t\t}\n\t\t$response      = $this->controller->initiate_scan();\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code || 400 === $response_code ) {\n\t\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\tif ( 200 === $response_code ) {\n\t\t\t\t$this->controller->update_info(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'status' => 'initiated',\n\t\t\t\t\t\t'date'   => isset( $response['created_at'] ) ? $response['created_at'] : '',\n\t\t\t\t\t\t'type'   => isset( $response['type'] ) ? $response['type'] : '',\n\t\t\t\t\t\t'id'     => isset( $response['id'] ) ? $response['id'] : '',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn $response;\n\t\t\t} else {\n\t\t\t\t$this->controller->update_info(\n\t\t\t\t\tarray(\n\t\t\t\t\t\t'status' => 'initiated',\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn rest_ensure_response( $this->controller->get_info() );\n\t\t\t}\n\t\t} else {\n\t\t\treturn new WP_Error( 'cky_rest_scan_initiated', __( 'Could not initiate the scan, please try again', 'cookie-law-info' ), array( 'status' => 200 ) );\n\t\t}\n\t\treturn json_decode( wp_remote_retrieve_body( $response ), true );\n\t}\n\n\t/**\n\t * Format data\n\t *\n\t * @param object $object Item data.\n\t * @return void\n\t */\n\tprotected function get_formatted_item_data( $object ) {\n\t\t$data = $object->get_data();\n\t}\n\n\t/**\n\t * Get the Cookies's schema, conforming to JSON Schema.\n\t *\n\t * @return array\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/draft-04/schema#',\n\t\t\t'title'      => 'cookie_categories',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'id'            => array(\n\t\t\t\t\t'description' => __( 'Unique identifier for the resource.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'view' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'date_created'  => array(\n\t\t\t\t\t'description' => __( 'The date the cookie was created, as GMT.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'date-time',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'date_modified' => array(\n\t\t\t\t\t'description' => __( 'The date the cookie was last modified, as GMT.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'date-time',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t\t'readonly'    => true,\n\t\t\t\t),\n\t\t\t\t'name'          => array(\n\t\t\t\t\t'description' => __( 'Cookie category name.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'slug'          => array(\n\t\t\t\t\t'description' => __( 'Cookie category unique name', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'description'   => array(\n\t\t\t\t\t'description' => __( 'Cookie category description.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'default_state' => array(\n\t\t\t\t\t'description' => __( 'Cookie type.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'head_scripts'  => array(\n\t\t\t\t\t'description' => __( 'Cookie scripts.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'body_scripts'  => array(\n\t\t\t\t\t'description' => __( 'Cookie scripts.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'cookies'       => array(\n\t\t\t\t\t'description' => __( 'Cookie count.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'integer',\n\t\t\t\t\t'context'     => array( 'view' ),\n\t\t\t\t),\n\n\t\t\t),\n\t\t);\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n} // End the class.\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/consentlogs/includes/class-controller.php","ext":"php","size":2168,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Controller file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Consentlogs\\Includes;\n\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Includes\\Cloud;\nuse CookieYes\\Lite\\Includes\\Cache;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Cookies Operation\n *\n * @class       Controller\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Controller extends Cloud {\n\n\t/**\n\t * Instance of the current class\n\t *\n\t * @var object\n\t */\n\tprivate static $instance;\n\t/**\n\t * Cookie items\n\t *\n\t * @var array\n\t */\n\tprotected $cache_group = 'consent_logs';\n\n\t/**\n\t * Consent log limit\n\t *\n\t * @var integer\n\t */\n\tprivate static $limit = 100;\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t/**\n\t * Get statistics of consent log\n\t *\n\t * @return array\n\t */\n\tpublic function get_statistics() {\n\t\t$logs = array();\n\t\t$this->set_api_url( CKY_APP_URL . '/api/v3/' );\n\t\t$this->make_auth_request();\n\t\t$data = array( 'granularity' => '7d' );\n\t\t$response      = $this->get(\n\t\t\t'websites/' . $this->get_website_id() . '/consent-logs/chart-data',\n\t\t\t$data\n\t\t);\n\t\t$response_code = wp_remote_retrieve_response_code( $response );\n\t\tif ( 200 === $response_code ) {\n\t\t\t$response = json_decode( wp_remote_retrieve_body( $response ), true );\n\t\t\t$items    = isset( $response['consent'] ) ? $response['consent'] : array();\n\t\t\tif ( empty( $items ) ) {\n\t\t\t\treturn $logs;\n\t\t\t}\n\t\t\t$total = 0;\n\t\t\tforeach ( $items as $item ) {\n\t\t\t\t$type = 'partial';\n\t\t\t\tif ( isset( $item['name'] ) ) {\n\t\t\t\t\tif ( 'Accepted' === $item['name'] ) {\n\t\t\t\t\t\t$type = 'accepted';\n\t\t\t\t\t} elseif ( 'Rejected' === $item['name'] ) {\n\t\t\t\t\t\t$type = 'rejected';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t$count  = isset( $item['count'] ) ? absint( $item['count'] ) : 0;\n\t\t\t\t$total  = $total + $count;\n\t\t\t\t$logs[] = array(\n\t\t\t\t\t'type'  => $type,\n\t\t\t\t\t'count' => $count,\n\t\t\t\t);\n\t\t\t}\n\t\t\tif ( $total <= 0 ) {\n\t\t\t\treturn array();\n\t\t\t}\n\t\t}\n\t\tCache::set( 'statistics', $this->cache_group, $logs );\n\t\treturn $logs;\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/consentlogs/class-consentlogs.php","ext":"php","size":1418,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class ConsentLogs file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Consentlogs;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Admin\\Modules\\Consentlogs\\Includes\\Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Consentlogs\\Api\\Api;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n\n/**\n * Handles Cookies Operation\n *\n * @class       ConsentLogs\n * @version     3.0.0\n * @package     CookieYes\n */\nclass ConsentLogs extends Modules {\n\n\t/**\n\t * ConsentLogs controller class.\n\t *\n\t * @var object\n\t */\n\tprivate $controller;\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function init() {\n\t\t$this->load_apis();\n\t\t$this->controller = Controller::get_instance();\n\t\tadd_filter( 'cky_registered_admin_menus', array( $this, 'register_menus' ) );\n\t}\n\n\t/**\n\t * Load API files\n\t *\n\t * @return void\n\t */\n\tpublic function load_apis() {\n\t\tnew Api();\n\t}\n\n\t/**\n\t * Pass menu items to be registered.\n\t *\n\t * @param array $menus Sub menu array.\n\t * @return array\n\t */\n\tpublic function register_menus( $menus ) {\n\t\t$menus['logs'] = array(\n\t\t\t'name'     => __( 'Consent Log', 'cookie-law-info' ),\n\t\t\t'callback' => array( $this, 'menu_page_template' ),\n\t\t\t'order'    => 4,\n\t\t\t'redirect' => CKY_APP_URL . '/consent-logs',\n\t\t);\n\t\treturn $menus;\n\t}\n\n\t/**\n\t * Main menu template\n\t *\n\t * @return void\n\t */\n\tpublic function menu_page_template() {\n\t\techo '<div id=\"cky-app\"></div>';\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/consentlogs/api/class-api.php","ext":"php","size":4539,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Api file.\n *\n * @package Api\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Consentlogs\\Api;\n\nuse WP_REST_Server;\nuse WP_Error;\nuse stdClass;\nuse CookieYes\\Lite\\Includes\\Rest_Controller;\nuse CookieYes\\Lite\\Admin\\Modules\\Consentlogs\\Includes\\Controller;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n\n/**\n * Consent logs API\n *\n * @class       Api\n * @version     3.0.0\n * @package     CookieYes\n * @extends     Rest_Controller\n */\nclass Api extends Rest_Controller {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = 'consent_logs';\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\tadd_action( 'rest_api_init', array( $this, 'register_routes' ), 10 );\n\t}\n\t/**\n\t * Register the routes for cookies.\n\t *\n\t * @return void\n\t */\n\tpublic function register_routes() {\n\t\tregister_rest_route(\n\t\t\t$this->namespace,\n\t\t\t'/' . $this->rest_base . '/statistics',\n\t\t\tarray(\n\t\t\t\tarray(\n\t\t\t\t\t'methods'             => WP_REST_Server::READABLE,\n\t\t\t\t\t'callback'            => array( $this, 'get_statistics' ),\n\t\t\t\t\t'permission_callback' => array( $this, 'get_items_permissions_check' ),\n\t\t\t\t\t'args'                => $this->get_collection_params(),\n\t\t\t\t),\n\t\t\t\t'schema' => array( $this, 'get_public_item_schema' ),\n\t\t\t)\n\t\t);\n\n\t}\n\n\t/**\n\t * Get consent statistics\n\t *\n\t * @param WP_REST_Request $request Full details about the request.\n\t * @return WP_Error|WP_REST_Response\n\t */\n\tpublic function get_statistics( $request ) {\n\t\t$objects = array();\n\t\t$items   = array();\n\t\tif ( false === cky_is_cloud_request() ) {\n\t\t\treturn $items;\n\t\t}\n\t\t$items = Controller::get_instance()->get_statistics();\n\t\tforeach ( $items as $data ) {\n\t\t\t$context   = ! empty( $request['context'] ) ? $request['context'] : 'view';\n\t\t\t$data      = $this->add_additional_fields_to_object( $data, $request );\n\t\t\t$data      = $this->filter_response_by_context( $data, $context );\n\t\t\t$objects[] = $this->prepare_response_for_collection( $data );\n\t\t}\n\t\treturn rest_ensure_response( $objects );\n\n\t}\n\n\t/**\n\t * Get the query params for collections.\n\t *\n\t * @return array\n\t */\n\tpublic function get_collection_params() {\n\t\treturn array(\n\t\t\t'context'  => $this->get_context_param( array( 'default' => 'view' ) ),\n\t\t\t'paged'    => array(\n\t\t\t\t'description'       => __( 'Current page of the collection.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'integer',\n\t\t\t\t'default'           => 1,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t\t'minimum'           => 1,\n\t\t\t),\n\t\t\t'per_page' => array(\n\t\t\t\t'description'       => __( 'Maximum number of items to be returned in result set.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'integer',\n\t\t\t\t'default'           => 10,\n\t\t\t\t'minimum'           => 1,\n\t\t\t\t'maximum'           => 100,\n\t\t\t\t'sanitize_callback' => 'absint',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t\t'search'   => array(\n\t\t\t\t'description'       => __( 'Limit results to those matching a string.', 'cookie-law-info' ),\n\t\t\t\t'type'              => 'string',\n\t\t\t\t'sanitize_callback' => 'sanitize_text_field',\n\t\t\t\t'validate_callback' => 'rest_validate_request_arg',\n\t\t\t),\n\t\t);\n\t}\n\t/**\n\t * Get the Consent logs's schema, conforming to JSON Schema.\n\t *\n\t * @return array\n\t */\n\tpublic function get_item_schema() {\n\t\t$schema = array(\n\t\t\t'$schema'    => 'http://json-schema.org/draft-04/schema#',\n\t\t\t'title'      => 'consentlogs',\n\t\t\t'type'       => 'object',\n\t\t\t'properties' => array(\n\t\t\t\t'ip'         => array(\n\t\t\t\t\t'description' => __( 'Visitor IP.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'country'    => array(\n\t\t\t\t\t'description' => __( 'Visitor Country.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'status'     => array(\n\t\t\t\t\t'description' => __( 'Consent status.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'log'        => array(\n\t\t\t\t\t'description' => __( 'Log.', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'object',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t\t'consent_id' => array(\n\t\t\t\t\t'description' => __( 'Unique visitor ID', 'cookie-law-info' ),\n\t\t\t\t\t'type'        => 'string',\n\t\t\t\t\t'context'     => array( 'view', 'edit' ),\n\t\t\t\t),\n\t\t\t),\n\t\t);\n\n\t\treturn $this->add_additional_fields_schema( $schema );\n\t}\n\n} // End the class.\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/modules/connect-banner/class-connect-banner.php","ext":"php","size":4036,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Class Connect_Banner file.\n *\n * @package CookieYes\n */\n\nnamespace CookieYes\\Lite\\Admin\\Modules\\Connect_Banner;\n\nuse CookieYes\\Lite\\Includes\\Modules;\nuse CookieYes\\Lite\\Includes\\Notice;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit; // Exit if accessed directly.\n}\n\n/**\n * Handles Connect Banner Operation\n *\n * @class       Connect_Banner\n * @version     3.0.0\n * @package     CookieYes\n */\nclass Connect_Banner extends Modules {\n\n\t/**\n\t * Endpoint namespace.\n\t *\n\t * @var string\n\t */\n\tprotected $namespace = 'cky/v1';\n\n\t/**\n\t * Route base.\n\t *\n\t * @var string\n\t */\n\tprotected $rest_base = '/settings/notices/connect_banner';\n\n\tprivate static $instance;\n\n\t/**\n\t * Return the current instance of the class\n\t *\n\t * @return object\n\t */\n\tpublic static function get_instance() {\n\t\tif ( null === self::$instance ) {\n\t\t\tself::$instance = new self();\n\t\t}\n\t\treturn self::$instance;\n\t}\n\n\t/**\n\t * Constructor.\n\t */\n\tpublic function __construct() {\n\t\tparent::__construct('connect_banner');\n\t}\n\n\t/**\n\t * Initialize the class\n\t */\n\tpublic function init() {\n\t\tif ($this->check_condition()) {\n\t\t\tadd_action( 'admin_notices', array( $this, 'show_banner' ) );\n\t\t\tadd_action( 'admin_print_footer_scripts', array( $this, 'add_script' ) );\n\t\t}\n\t}\n\n\tpublic function show_banner() {\n\t\t$screen = get_current_screen();\n\t\tif ( $screen && 'plugins' === $screen->id ) {\n\t\t\t?>\n\t\t\t<div class=\"cky-notice-connect notice-info notice is-dismissible\">\n\t\t\t\t<div class=\"cky-notice-connect-header\"><b>\n\t\t\t\t\t<?php echo wp_kses_post( __( 'Unlock advanced features for seamless compliance', 'cookie-law-info' ) ); ?>\n\t\t\t\t</b></div>\n\t\t\t\t<p class=\"cky-notice-connect-content\">\n\t\t\t\t\t<?php echo wp_kses_post( __( 'Automate your cookie scan, record consent logs, and access analytics to streamline consent management and enhance compliance by connecting to the web app.', 'cookie-law-info' ) ); ?>\n\t\t\t\t</p>\n\t\t\t\t<a class=\"cky-connect-button button button-primary\" data-type=\"connect\"><?php echo esc_html( __( 'Connect to CookieYes Web App', 'cookie-law-info' ) ); ?></a>\n\t\t\t</div>\n\t\t\t<style>\n\t\t\t\t.cky-notice-connect {\n\t\t\t\t\tpadding: 12px;\n\t\t\t\t\t.cky-notice-connect-header, .cky-notice-connect-content {\n\t\t\t\t\t\tfont-size: 14px;\n\t\t\t\t\t}\n\t\t\t\t\t.cky-connect-button {\n\t\t\t\t\t\tpadding: 7px 58px 7px 62px;\n\t\t\t\t\t\tline-height: normal;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t</style>\n\t\t\t<?php\n\t\t}\n\t}\n\n\t/**\n\t * Review feedback scripts.\n\t *\n\t * @return void\n\t */\n\tpublic function add_script() {\n\t\t$expiry = 30 * DAY_IN_SECONDS;\n\t\t?>\n\t\t\t<script type=\"text/javascript\">\n\t\t\t\t(function() {\n\t\t\t\t\tconst expiration = '<?php echo esc_js( $expiry ); ?>';\t\n\t\t\t\t\tasync function ckyUpdateNotice(expiry = expiration) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst response = await fetch('<?php echo esc_url_raw( rest_url() . $this->namespace . $this->rest_base ); ?>', {\n\t\t\t\t\t\t\t\tmethod: 'POST',\n\t\t\t\t\t\t\t\theaders: {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t\t\t'X-WP-Nonce': '<?php echo esc_js( wp_create_nonce( 'wp_rest' ) ); ?>'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tbody: JSON.stringify({ expiry })\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\t\tthrow new Error('Network response was not ok');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tconsole.error('Error:', error);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Handle notice dismiss and connect button clicks\n\t\t\t\t\tdocument.addEventListener('click', function(e) {\n\t\t\t\t\t\tconst dismissButton = e.target.closest('.cky-notice-connect .notice-dismiss');\n\t\t\t\t\t\tconst connectButton = e.target.closest('.cky-connect-button');\n\n\t\t\t\t\t\tif (dismissButton) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\tckyUpdateNotice();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (connectButton) {\n\t\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\t\twindow.location.href = '<?php echo esc_js( admin_url( 'admin.php?page=cookie-law-info#/dashboard' ) ); ?>';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t})();\n\t\t\t</script>\n\t\t\t<?php\n\t}\n\n\tpublic function check_condition() {\n\t\t$connected = Settings::get_instance()->is_connected();\n\t\t$notices = Notice::get_instance()->get();\n\t\tif ( $connected || isset( $notices['connect_banner'] ) ) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/package-lock.json","ext":"json","size":725357,"mtime":1757312769},{"base":"plugins","rel":"cookie-law-info/lite/admin/package.json","ext":"json","size":1883,"mtime":1757312769,"type":"text","content":"{\n  \"name\": \"gdpr-cookie-consent\",\n  \"version\": \"3.0.6\",\n  \"private\": true,\n  \"scripts\": {\n    \"serve\": \"vue-cli-service serve\",\n    \"build\": \"node build-dev.js\",\n    \"build:production\": \"node build.js\",\n    \"lint\": \"vue-cli-service lint\",\n    \"build-webpack-lite\": \"webpack-cli --config webpack/lite.config.js --mode production\"\n  },\n  \"dependencies\": {\n    \"@popperjs/core\": \"2.11.8\",\n    \"@wordpress/api-fetch\": \"5.2.1\",\n    \"apexcharts\": \"3.44.2\",\n    \"chart.js\": \"3.9.1\",\n    \"core-js\": \"3.6.5\",\n    \"md5\": \"2.3.0\",\n    \"moment\": \"2.30.1\",\n    \"sass\": \"1.62.1\",\n    \"vue\": \"2.7.16\",\n    \"vue-apexcharts\": \"1.6.1\",\n    \"vue-color\": \"2.8.1\",\n    \"vue-frag\": \"1.4.1\",\n    \"vue-router\": \"3.6.5\",\n    \"vuex\": \"3.6.2\"\n  },\n  \"devDependencies\": {\n    \"@babel/plugin-proposal-nullish-coalescing-operator\": \"7.18.6\",\n    \"@babel/plugin-proposal-optional-chaining\": \"7.21.0\",\n    \"@babel/preset-env\": \"7.24.0\",\n    \"@vue/cli-plugin-babel\": \"4.5.19\",\n    \"@vue/cli-plugin-eslint\": \"4.5.19\",\n    \"@vue/cli-plugin-router\": \"4.5.19\",\n    \"@vue/cli-service\": \"4.5.19\",\n    \"anymatch\": \"3.1.3\",\n    \"babel-eslint\": \"10.1.0\",\n    \"braces\": \"3.0.3\",\n    \"ejs\": \"^3.1.9\",\n    \"eslint\": \"6.8.0\",\n    \"eslint-plugin-vue\": \"6.2.2\",\n    \"html-minifier\": \"^4.0.0\",\n    \"ip\": \"^2.0.0\",\n    \"json5\": \"^2.2.3\",\n    \"micromatch\": \"4.0.8\",\n    \"node-forge\": \"^1.3.1\",\n    \"nth-check\": \"^2.1.1\",\n    \"readdirp\": \"3.6.0\",\n    \"sass-loader\": \"10.4.1\",\n    \"tough-cookie\": \"^4.1.3\",\n    \"vue-template-compiler\": \"2.7.16\",\n    \"webpack-cli\": \"4.10.0\",\n    \"webpack-dev-middleware\": \"^5.3.4\"\n  },\n  \"eslintConfig\": {\n    \"root\": true,\n    \"env\": {\n      \"node\": true\n    },\n    \"extends\": [\n      \"plugin:vue/essential\",\n      \"eslint:recommended\"\n    ],\n    \"parserOptions\": {\n      \"parser\": \"babel-eslint\"\n    },\n    \"rules\": {}\n  },\n  \"browserslist\": [\n    \"> 1%\",\n    \"last 2 versions\",\n    \"not dead\"\n  ]\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/admin/vue.config.js","ext":"js","size":1618,"mtime":1757312769,"type":"text","content":"const path = require(\"path\");\n\nmodule.exports = {\n  productionSourceMap: process.env.NODE_ENV === 'production' ? false : true,\n\n  css: {\n    extract: true, // ✅ forces CSS file output even in dev builds\n    loaderOptions: {\n      sass: {\n        additionalData: `\n          @import \"@/scss/_mixins.scss\";\n          @import \"@/scss/_functions.scss\";\n          @import \"@/scss/_variables.scss\";\n        `\n      }\n    }\n  },\n\n  filenameHashing: false,\n\n  publicPath: '/wp-content/plugins/cookie-law-info/lite/admin/dist',\n\n  transpileDependencies: [\n    '@wordpress/hooks',\n    '@wordpress/i18n'\n  ],\n\n  configureWebpack: (config) => {\n    config.module.rules.push({\n      test: /\\.m?js$/,\n      include: /node_modules\\/@wordpress/,\n      use: {\n        loader: 'babel-loader',\n        options: {\n          presets: [\n            ['@babel/preset-env', { targets: { node: 'current' } }]\n          ],\n          plugins: [\n            '@babel/plugin-proposal-optional-chaining',\n            '@babel/plugin-proposal-nullish-coalescing-operator'\n          ]\n        }\n      }\n    });\n  },\n\n  chainWebpack: (config) => {\n    const isProd = process.env.NODE_ENV === 'production';\n\n    config.output\n      .filename(isProd ? 'js/[name].min.js' : 'js/[name].js')\n      .chunkFilename(isProd ? 'js/[name].min.js' : 'js/[name].js');\n\n    if (config.plugins.has('extract-css')) {\n      config.plugin('extract-css').tap(args => {\n        args[0].filename = isProd ? 'css/[name].min.css' : 'css/[name].css';\n        args[0].chunkFilename = isProd ? 'css/[name].min.css' : 'css/[name].css';\n        return args;\n      });\n    }\n  }\n};"},{"base":"plugins","rel":"cookie-law-info/lite/integrations/cookieyes/includes/class-cloud.php","ext":"php","size":4971,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * CookieYes Web app storage class.\n *\n * @link       https://www.cookieyes.com/\n * @since      3.0.0\n *\n * @package    CookieYes\\Lite\\Integrations\\Cookieyes\\Includes\n */\n\nnamespace CookieYes\\Lite\\Integrations\\Cookieyes\\Includes;\n\nuse Exception;\nuse WP_Error;\nuse CookieYes\\Lite\\Integrations\\Cookieyes\\Cookieyes;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Request\n */\nabstract class Cloud extends Cookieyes {\n\n\t/**\n\t * Array of allowed methods\n\t *\n\t * @since 3.0.0\n\t * @var array\n\t */\n\tprivate static $allowed_methods = array(\n\t\t'bulk_read',\n\t\t'read',\n\t\t'create',\n\t\t'update',\n\t\t'remove',\n\t\t'get_template',\n\t);\n\n\t/**\n\t * Perform a request based on the license status\n\t *\n\t * @since 3.0.0\n\t * @param string  $request Request type. Allowed types read, write, update & delete.\n\t * @param mixed   $value Request value eg: Id or slug.\n\t * @param boolean $return Check if function returns any value.\n\t * @return array\n\t */\n\tpublic function prepare_request( $request = 'read', $value = false, $return = true ) {\n\t\ttry {\n\t\t\t$cloud = false;\n\t\t\tif ( ! in_array( $request, self::$allowed_methods, true ) ) {\n\t\t\t\treturn new WP_Error( 'invalid-method', sprintf( __( 'Invalid method.', 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t\t\t}\n\t\t\tif ( true === $this->is_connected() ) {\n\t\t\t\t$cloud = true;\n\t\t\t}\n\t\t\tif ( is_callable( array( $this, $request ) ) ) {\n\t\t\t\tif ( false === $value ) {\n\t\t\t\t\t$data = $this->{$request}( $cloud );\n\t\t\t\t} else {\n\t\t\t\t\t$data = $this->{$request}( $value, $cloud );\n\n\t\t\t\t}\n\t\t\t\tif ( true === $return ) {\n\t\t\t\t\treturn $data;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch ( Exception $e ) {\n\t\t\treturn new WP_Error( 'invalid-method', sprintf( __( 'Invalid method.', 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t\t}\n\t}\n\t/**\n\t * Read data from the local database or cloud\n\t *\n\t * @since 3.0.0\n\t * @param integer $id Id of the corresponding object.\n\t * @param boolean $cloud Decides whether to read data from cloud or local database.\n\t * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.\n\t */\n\tprotected function read( $id, $cloud ) {\n\t\t// translators: %s: Class method name.\n\t\treturn new WP_Error( 'invalid-method', sprintf( __( \"Method '%s' not implemented. Must be overridden in subclass.\", 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t}\n\n\t/**\n\t * Add data to the local database or from cloud\n\t *\n\t * @since 3.0.0\n\t * @param integer $object Corresponding object.\n\t * @param boolean $cloud Decides whether to read data from cloud or local database.\n\t * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.\n\t */\n\tprotected function create( $object, $cloud ) {\n\t\t// translators: %s: Class method name.\n\t\treturn new WP_Error( 'invalid-method', sprintf( __( \"Method '%s' not implemented. Must be overridden in subclass.\", 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t}\n\n\t/**\n\t * Delete data from the local database or from cloud\n\t *\n\t * @since 3.0.0\n\t * @param integer $id Id of the corresponding object.\n\t * @param boolean $cloud Decides whether to read data from cloud or local database.\n\t * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.\n\t */\n\tprotected function update( $id, $cloud ) {\n\t\t// translators: %s: Class method name.\n\t\treturn new WP_Error( 'invalid-method', sprintf( __( \"Method '%s' not implemented. Must be overridden in subclass.\", 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t}\n\n\t/**\n\t * Add data to the local database or from cloud\n\t *\n\t * @since 3.0.0\n\t * @param integer $object Corresponding object.\n\t * @param boolean $cloud Decides whether to read data from cloud or local database.\n\t * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.\n\t */\n\tprotected function remove( $object, $cloud ) {\n\t\t// translators: %s: Class method name.\n\t\treturn new WP_Error( 'invalid-method', sprintf( __( \"Method '%s' not implemented. Must be overridden in subclass.\", 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t}\n\n\t/**\n\t * Get template of a banner, only supported for Banner class\n\t *\n\t * @since 3.0.0\n\t * @param object  $object Object of the corresponding class.\n\t * @param boolean $cloud Decides whether to read data from cloud or local database.\n\t * @return WP_Error|WP_REST_Response Response object on success, or WP_Error object on failure.\n\t */\n\tprotected function get_template( $object, $cloud ) {\n\t\t// translators: %s: Class method name.\n\t\treturn new WP_Error( 'invalid-method', sprintf( __( \"Method '%s' not implemented. Must be overridden in subclass.\", 'cookie-law-info' ), __METHOD__ ), array( 'status' => 405 ) );\n\t}\n\n\t/**\n\t * Check if the plugin is connected to the web app.\n\t *\n\t * @return boolean\n\t */\n\tpublic function is_connected() {\n\t\t$settings = new Settings();\n\t\treturn $settings->is_connected();\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/integrations/cookieyes/class-cookieyes.php","ext":"php","size":2211,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * CookieYes Integration\n *\n * @link       https://www.cookieyes.com/\n * @since      3.0.0\n *\n * @package    CookieYes\\Lite\\Integrations\\Cookieyes\n */\n\nnamespace CookieYes\\Lite\\Integrations\\Cookieyes;\n\nuse CookieYes\\Lite\\Includes\\Request;\nuse CookieYes\\Lite\\Admin\\Modules\\Settings\\Includes\\Settings;\n\nif ( ! defined( 'ABSPATH' ) ) {\n\texit;\n}\n\n/**\n * Class Request\n */\nclass Cookieyes extends Request {\n\n\t/**\n\t * API Key\n\t *\n\t * @var string\n\t */\n\tprivate $api_key = '';\n\n\t/**\n\t * CookieYes web site id\n\t *\n\t * @var integer\n\t */\n\tprivate $website_id;\n\n\tprivate $api_url;\n\t/**\n\t * License object\n\t *\n\t * @var object\n\t */\n\t/**\n\t * Base URL of CookieYes API\n\t */\n\tconst API_BASE_PATH = CKY_APP_URL . '/api/v2/';\n\n\t/**\n\t * Constructor\n\t */\n\tpublic function __construct() {\n\t\t$this->init();\n\t}\n\t/**\n\t * Initialize necessary variables to make an API call\n\t *\n\t * @return void\n\t */\n\tpublic function init() {\n\t\t$settings         = new Settings();\n\t\t$this->api_key    = $settings->get_token();\n\t\t$this->website_id = $settings->get_website_id();\n\t\t$this->set_api_url();\n\t\t$this->add_header_argument( 'Content-Type', 'application/json' );\n\t\t$this->add_header_argument( 'Accept', 'application/json' );\n\t}\n\n\tpublic function set_api_url( $base = '' ) {\n\t\tif ( empty( $base ) ) {\n\t\t\tif ( defined( 'self::API_BASE_PATH' ) && self::API_BASE_PATH ) {\n\t\t\t\t$base = self::API_BASE_PATH;\n\t\t\t}\n\t\t}\n\t\t$this->api_url = $base;\n\t}\n\n\t/**\n\t * Get API URL.\n\t *\n\t * @param string $path  Endpoint path.\n\t *\n\t * @return string\n\t */\n\tpublic function get_api_url( $path = '' ) {\n\t\treturn $this->api_url . $path;\n\t}\n\n\t/**\n\t * Get API key.\n\t *\n\t * @return string\n\t */\n\tprotected function get_api_key() {\n\t\treturn $this->api_key;\n\t}\n\n\t/**\n\t * Make a authenticated request by adding\n\t *\n\t * @return void\n\t */\n\tprotected function make_auth_request() {\n\t\t$api_key = $this->get_api_key();\n\t\tif ( ! empty( $api_key ) ) {\n\t\t\t$this->add_header_argument( 'Authorization', 'Bearer ' . $api_key );\n\t\t}\n\t}\n\n\t/**\n\t * Returns the website id\n\t *\n\t * @return integer\n\t */\n\tprotected function get_website_id() {\n\t\treturn $this->website_id;\n\t}\n\t/**\n\t * Get the license info\n\t *\n\t * @return array\n\t */\n\tprotected function get_license() {\n\t\treturn true;\n\t}\n\n}\n"},{"base":"plugins","rel":"cookie-law-info/lite/loader.php","ext":"php","size":767,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Initialize the plugin.\n */\n\nif ( ! function_exists( 'cky_define_constants' ) ) {\n\t/**\n\t * Return parsed URL\n\t *\n\t * @return void\n\t */\n\tfunction cky_define_constants() {\n\t\tif ( ! defined( 'CKY_PLUGIN_URL' ) ) {\n\t\t\tdefine( 'CKY_PLUGIN_URL', plugin_dir_url( __FILE__ ) );\n\t\t}\n\t\tif ( ! defined( 'CKY_APP_ASSETS_URL' ) ) {\n\t\t\tdefine( 'CKY_APP_ASSETS_URL', plugin_dir_url( __FILE__ ) . 'frontend/images/' );\n\t\t}\n\t}\n}\n\ncky_define_constants();\n\nrequire_once CLI_PLUGIN_BASEPATH . 'class-autoloader.php';\n\n$autoloader = new \\CookieYes\\Lite\\Autoloader();\n$autoloader->register();\n\nregister_activation_hook( __FILE__, array( \\CookieYes\\Lite\\Includes\\Activator::get_instance(), 'install' ) );\n\n$cky_loader = new \\CookieYes\\Lite\\Includes\\CLI();\n$cky_loader->run();\n\n\n"},{"base":"plugins","rel":"cookie-law-info/class-autoloader.php","ext":"php","size":1041,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * Custom autoloader\n *\n *  @package CookieYes\n */\n\nnamespace CookieYes\\Lite;\n\n/**\n * Custom class autoloader class\n */\nclass Autoloader {\n\n\t/**\n\t * Autoloader function\n\t *\n\t * @return void\n\t */\n\tpublic function register() {\n\t\tspl_autoload_register( array( __CLASS__, 'load_class' ) );\n\t}\n\t/**\n\t * Custom Class Loader For Boiler Plate\n\t *\n\t * @param string $class_name Class names.\n\t * @return void\n\t */\n\tpublic static function load_class( $class_name ) {\n\t\tif ( false === strpos( $class_name, 'CookieYes' ) ) {\n\t\t\treturn;\n\t\t}\n\t\t$file_parts = explode( '\\\\', $class_name );\n\t\t$namespace  = '';\n\t\tfor ( $i = count( $file_parts ) - 1; $i > 0; $i-- ) {\n\n\t\t\t$current = strtolower( $file_parts[ $i ] );\n\t\t\t$current = str_ireplace( '_', '-', $current );\n\t\t\tif ( count( $file_parts ) - 1 === $i ) {\n\t\t\t\t$file_name = \"class-$current.php\";\n\t\t\t} else {\n\t\t\t\t$namespace = '/' . $current . $namespace;\n\t\t\t}\n\t\t}\n\t\t$filepath = dirname( __FILE__ ) . $namespace . '/' . $file_name;\n\t\tif ( file_exists( $filepath ) ) {\n\t\t\trequire $filepath;\n\t\t}\n\t}\n}\n"},{"base":"plugins","rel":"cookie-law-info/readme.txt","ext":"txt","size":15868,"mtime":1757312769,"type":"text","content":"=== CookieYes - Cookie Banner for Cookie Consent (Easy to setup GDPR/CCPA Compliant Cookie Notice) ===\nContributors: webtoffee, cookieyesdev\nDonate link: https://www.cookieyes.com/ \nTags: cookie notice, cookie consent, cookie banner, eu cookie law, cookieyes\nRequires at least: 5.0.0\nTested up to: 6.8\nRequires PHP: 5.6\nStable tag: 3.3.4\nLicense: GPLv3\nLicense URI: http://www.gnu.org/licenses/gpl-3.0.html\n\nEasily set up cookie consent banner, notice, and policy pages for compliance with global cookie laws (GDPR, DSGVO, RGPD, CCPA/CPRA, etc).\n\n== Description ==\n\nThe CookieYes plugin enables seamless cookie consent and GDPR compliance by integrating an intuitive cookie banner into your website. It offers full support for GDPR (DSGVO, RGPD) and CCPA/CPRA to easily obtain user consent for cookies, ensuring legal compliance.\n\nCustomizable cookie banner designs and options make configuring a GDPR-compliant cookie consent solution simple. The plugin also supports various other global privacy regulations beyond GDPR, including LGPD (Brazil), CNIL (France), PIPEDA (Canada), Law 25 (Quebec), POPIA (South Africa), nFADP (Switzerland), Privacy Act (Australia), PDPL (Saudi Arabia), PDPL (Argentina), PDPL (Andorra), DPA (Faroe Islands), and the California Consumer Privacy Act (CCPA/CPRA). Additionally, it's designed to align with significant state privacy laws in the US, such as VCDPA (Virginia), CPA (Colorado), CTDPA (Connecticut), and UCPA (Utah).\n\nOur cookie plugin ranks among the top WordPress solutions for cookie compliance and is certified by Google, providing a comprehensive suite of features, including policy page generators.\n\n== Key Features == \n\n- **Cookie consent banner**: The plugin will enable a cookie consent banner with Accept and Reject options.\n\n- **Customization**: Customize the cookie notice style so it blends with your existing website: change the colours, fonts, styles, position on the page, and even how it behaves when you click “Accept All”.\n\n- **Automatic scanning**: Single-click automatic scanning and categorization of cookies.\n\n- **Cookie auto-blocking**: Automatically block non-essential cookies to ensure GDPR compliance.\n\n- **Cookie list**: This lets you display the list of cookies neatly in a table on your Privacy & Cookies Policy page by using a shortcode. You can also add new cookies manually, edit existing ones (CookieID, Category, Description, Script URL Pattern), and delete cookies as needed.\n\n- **Preference center**: Offer a second layer of control through a preference center within the banner. Allow site visitors to provide granular consent for specific cookie categories, giving them the choice to opt in or opt-out.\n\n- **Revisit consent button**: Visitors can either permanently dismiss the cookie banner or access it later through a revisit consent button, which can be tailored in terms of colour and position.\n\n- **Consent logging**: Log users' consent and export it into a CSV file.\n\n- **CCPA/CPRA opt-out**: The plugin can be configured to have a CCPA/CPRA ‘Do Not Sell or Share My Personal Information’ control on the cookie notice.\n\n- **Google Consent Mode support**: Implement Google Consent Mode v2 easily to keep ads effective.\n\n- **Auto-translation**: Auto-translate the banner in 30+ languages as per the user’s browser language. Compatible with WPML and Polylang.\n\n- **Policy generators**: Includes Cookie Policy and Privacy Policy generators.\n\n- **Integration with CookieYes Web App**: Free connection with CookieYes web app to access advanced features (cookie scan, consent log, etc.) and manage all settings from the web app account.\n\nHere is how you can integrate the CookieYes plugin with our web app:\n\nhttps://www.youtube.com/watch?v=qw2iYti4aZ8\n\n= Connection to app.cookieyes.com & feedback.cookieyes.com =\n\nThis plugin connects your site to app.cookieyes.com to enable features such as cookie scanning, syncing settings with your CookieYes account, and displaying scan results and consent data in the dashboard. It also connects to feedback.cookieyes.com for collecting feedback when the plugin is deactivated. To learn what data is collected and how it is used, please refer to our [Privacy Policy](https://www.cookieyes.com/privacy-policy/) and [Terms & Conditions](https://www.cookieyes.com/terms-and-conditions/)\n\n== Additional Features == \n\n- **Opt-In and Opt-Out banner**: Opt-in consent banner for GDPR & opt-out banner for CCPA/CPRA.\n- **Footer link**: Add the \"Do Not Sell or Share My Personal Information\" link to your website footer using an HTML code.\n- **Placement options**: Choose to display the cookie banner in either the header or footer of your website, based on your preference.\n- **Integration compatibility**: Compatible with major caching servers and plugins.\n- **Preview functionality**: Easily preview the cookie banner within the admin settings.\n\n\n== The CookieYes GDPR Cookie Consent Plugin Uses The Following Cookie Only ==\n\n- \"cookieyes-consent\" – CookieYes sets this cookie to remember users' consent preferences so that their preferences are respected on their subsequent visits to this site. It does not collect or store any personal information of the site visitors.\n\n\n== Setup Guide ==\n\nOur [WordPress cookie plugin user guide](https://www.cookieyes.com/documentation/install-cookieyes-wordpress-plugin/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY \"Installation and Setup guide\") will help you set up the plugin on your website.\n\n\n== Useful links ==\n\n[Support](https://www.cookieyes.com/support/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n[Plugin FAQ](https://www.cookieyes.com/documentation/wordpress-plugin-faq/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n[Knowledge base](https://www.cookieyes.com/knowledge-base/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n[GDPR cookie consent](https://cookieyes.com/blog/gdpr-cookie-consent/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n[Cookie Law](https://cookieyes.com/blog/cookie-law/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n[Cookie banner guide](https://www.cookieyes.com/blog/cookie-banner/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n\n\n== CookieYes GDPR Cookie Consent plugin premium features ==\n\nAccess the following features by subscribing to a premium plan (Basic, Pro, or Ultimate) on the CookieYes web app account. [See all features and compare plans](https://www.cookieyes.com/pricing/?utm_source=wordpress&utm_medium=plugin&utm_campaign=wordpress_page&utm_content=l_1&ref=WPCY)\n\n&#9989; **Increased pageviews limit**: Increase your pageviews limit, extending from 100,000 to unlimited. </li>\n&#9989; **Enhanced scanning capacity**: Our tool can scan up to 8,000 pages in a single scan. </li>\n&#9989; **GDPR/US laws template**: Offer opt-in consent banner for GDPR and opt-out banner for US privacy laws such as CCPA/CPRA. </li>\n&#9989; **Global Privacy Control**: Respect the user’s GPC setting if enabled. </li>\n&#9989; **TCF v2.2 integration**: We seamlessly integrate with TCF v2.2, the IAB Europe Consent Framework for Publishers. Our registered CMP ID is 401. </li>\n&#9989; **Advanced customization**: Customize your banner with advanced design options such as custom CSS to suit your brand's identity. </li>\n&#9989; **Popup layout**: Add a cookie notification in the form of a ‘Popup’. </li>\n&#9989; **Geo-targeting banner**: Target your cookie banner based on location, including GDPR banner for Worldwide, EU & UK, and Other countries, as well as CCPA/CPRA banner for Worldwide, United States, and Other countries. </li>\n&#9989; **Scan behind login**: You can scan behind login pages to ensure comprehensive coverage. </li>\n&#9989; **Scheduled scans**: Set up scans on a schedule that works for you. </li>\n&#9989; **Custom branding**: Add your brand logo to the cookie banner for a personalized touch. </li>\n\n= NOTE: INSTALLING THIS PLUGIN ALONE DOES NOT MAKE YOUR SITE GDPR AND CCPA COMPLIANT. SINCE EACH SITE USES DIFFERENT COOKIES, YOU NEED TO ENSURE YOU HAVE THE NECESSARY CONFIGURATIONS IN PLACE WITH A SUPPORTING COOKIE NOTICE. = \n\n\n== Frequently Asked Questions ==\n\n= The cookie notice header doesn’t work on my browser =\nPlease report a bug on the support forum. Make sure to include the following information:\n\n* Your URL (We need it to help you!)\n* WordPress version (found in the bottom right-hand corner of the dashboard)\n* Browser where the issue is observed (e.g., Firefox, Chrome, IE)\n* Describe the problem. The more information you provide, the faster we can respond.\n\n\n= What does this plugin do? =\nThis WordPress cookie plugin will:\n\n* Add a cookie banner to the top/bottom of all pages on your website, notifying visitors that you have a clearly defined privacy and cookie policy.\n* Allow you to record which cookies your site uses and neatly display a list of these cookies. You can add this list to your Privacy Policy page or Cookie Policy page using a shortcode.\nNote: If you connect your site to the CookieYes web app, you have to replace the shortcode with an HTML code.\n\n= What is a cookie notice? =\nA cookie notice, also known as a cookie banner, is a message informing visitors about the site's use of cookies. It typically explains what cookies are, why they are used, and how they affect user privacy. It often includes options for users to consent to or manage cookie preferences, ensuring compliance with privacy laws like the GDPR and CCPA. The goal is to provide transparency and allow users to make informed decisions about their data.\n\n= Do visitors now have to accept/refuse cookies in order to use websites? =\nNo, Only the ‘Necessary’ cookies will be loaded until the user gives consent. \n\n= Does this plugin stop cookies from being stored? =\nVisitors can reject the category of cookies they don't want to be installed. In such cases, all cookies in that category will be blocked for the user.\n\nBut if another plugin adds scripts or places a cookie, we have no control. We have no way of knowing what plugins you use or how they work, so blocking/deleting cookies on a WordPress website/blog might possibly/probably break your site. Larger websites with substantial budgets may well invest in such technology, but this plugin aims to help you provide a certain level of compliance without taking drastic action.\n\n= Does this plugin guarantee that I comply with GDPR? =\nThis plugin can be used to comply with the cookie consent requirements of major data privacy laws such as the GDPR. However, you need to assess your website's use of cookies to confirm that it aligns with GDPR guidelines. If you are seeking specialist legal advice regarding your website, we suggest that you consult a lawyer to understand how you can achieve full GDPR compliance.\n\n= What is GDPR? =\nGDPR, or the General Data Protection Regulation is a comprehensive data protection law in the EU aimed at safeguarding EU individuals' privacy and regulating how organizations handle their personal data. It is also known as DatenSchutz-Grundverordnung or DSGVO in German.\n\n= What is CCPA? =\nCCPA is the California Consumer Privacy Act, a law granting California residents more control over their personal information held by businesses. Businesses must be transparent, offer opt-out options, and ensure data security.\n\n= What is GDPR cookie consent? =\nGDPR requires websites to obtain explicit consent from users before storing or accessing cookies on their devices. This is known as GDPR cookie consent.\n\nGDPR mandates cookie consent because cookies allow websites to collect data and track users across multiple sessions. Since this impacts user privacy, consent is required before enabling cookies, especially non-essential cookies like analytics, advertisements, etc.\n\n= What is CCPA compliance? =\nCCPA Compliance refers to adherence to the California Consumer Privacy Act (CCPA), a law designed to protect the privacy rights of California residents. It mandates that businesses handling the personal information of California residents provide certain rights and protections to those individuals. Compliance involves ensuring that businesses meet the CCPA's requirements regarding data collection and processing.\n\n= Does the plugin block cookies before consent? =\nNon-essential cookies are automatically blocked until explicit consent is given by users. Essential or strictly necessary cookies are allowed by default to ensure site functionality.\n\n= Can I export or log user consent as per GDPR requirements? =\nYes, you can export a log of all user cookie consent and preferences related to cookies. This helps meet GDPR compliance needs.\n\n= Can the plugin help me generate a GDPR-compliant cookie policy? =\nYes, we provide an easy wizard to customize and generate a GDPR-compliant cookie policy based on your scanned site cookies.\n\n= Does CookieYes integrate with WP Consent API? =\nYes, CookieYes integrates with [WP Consent API](https://wordpress.org/plugins/wp-consent-api). This allows for efficient sharing of user consent data with other compatible plugins, enhancing privacy compliance and streamlining cookie consent management on your WordPress site.\n\n== Installation ==\n\n= Automatic installation =\n\n- Go to **Plugins** from your WordPress dashboard and select **Add New Plugin**.\n\n- Search for “CookieYes” and **Install Now**.\n\n- Click **Activate** to enable the plugin.\n\n= Manual installation =\n\n- Download the CookieYes plugin zip file from the WordPress.org page.\n\n- Go to **Plugins** from your WordPress dashboard and select **Add New Plugin**.\n\n- Click **Upload Plugin** and choose the downloaded zip file.\n\n- Click **Install Now** and after installation, click **Activate Plugin**.\n\nAlternatively, you can upload the zip using the FTP application. Extract the zip file and upload the folder to your **/wp-content/plugins/** directory. Once uploaded, activate the plugin from your WordPress dashboard.\n\n= To connect the plugin to the CookieYes web app: =\n\n**_(Please note that the Web App integration is optional. You can still use the plugin without connecting it to the app.)_**\n\n- After activating the plugin, click **CookieYes** on your WordPress dashboard menu.\n\n- Click **Connect to a new account**. You will be prompted to sign up for a new account or log in if you already have one.\n\n= Plugin updates =\n\nEvery time we update the plugin, you will see a notification on the installed plugins page. You can directly update the plugin from the WordPress dashboard. We recommend keeping the plugin updated to avail new functionalities and security features.\n\n\n== Screenshots ==\n\n1. Cookie consent banner on the user-end\n2. Cookie preference center on the user-end\n3. CookieYes GDPR cookie consent WordPress plugin - Admin panel\n4. Cookie banner settings for cookie compliance\n5. Manage cookies for cookie compliance\n6. Add new cookie\n7. Languages for cookie banner auto-translation\n8. Edit cookie banner content in multiple languages\n9. Privacy policy generator and cookie policy generator\n\n== Changelog ==\n\n= 3.3.4 =\n\n[Add] - Info notice before connecting to web app.\n\n= 3.3.3 =\n\n[Add] - Included expanded js and css code.\n[Tweak] - Review link updated.\n[Fix] - Minor fixes.\n\n= 3.3.2 =\n\n[Enhancement] - Accessibility improvements.  \n[Removed] - AccessYes promotion banner removed from the plugin.\n[Fix] - Minor bug fixes.  \n\n= Earlier versions =\nFor the changelog of earlier versions, please refer to the [changelog.txt](https://github.com/cookieyeshq/cookie-law-info/blob/main/changelog.txt).\n\n== Upgrade Notice ==\n\n= 3.3.4 =\n\n[Add] - Info notice before connecting to web app."},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ja-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":343,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ja\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"AI\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u30af\\u30ea\\u30a8\\u30a4\\u30bf\\u30fc\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_ES-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1487,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_ES\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar aviso\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalice sus contenidos\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en su solicitud. Por favor, int\\u00e9ntelo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Utilizar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenidos quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe un post motivador sobre...\"],\"Write a recommendation list of...\":[\"Escriba una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escriba un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Redactar contenidos promocionales sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-he_IL-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":2673,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"he_IL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u05d4\\u05d5\\u05e1\\u05e3 \\u05ea\\u05de\\u05d5\\u05e0\\u05d4 \\u05d1\\u05ea\\u05d5\\u05da \\u05d4\\u05ea\\u05d5\\u05db\\u05df \\u05e9\\u05dc\\u05d9\"],\"Content length\":[\"\\u05d0\\u05d5\\u05e8\\u05da \\u05ea\\u05d5\\u05db\\u05df\"],\"Create content\":[\"\\u05e6\\u05d5\\u05e8 \\u05ea\\u05d5\\u05db\\u05df\"],\"Edit prompt\":[\"\\u05e2\\u05e8\\u05d5\\u05da \\u05d4\\u05d5\\u05d3\\u05e2\\u05d4\"],\"Formal\":[\"\\u05e8\\u05e9\\u05de\\u05d9\"],\"Friendly\":[\"\\u05d7\\u05d1\\u05e8\\u05d5\\u05ea\\u05d9\"],\"Long\":[\"\\u05d0\\u05e8\\u05d5\\u05da\"],\"Main topic\":[\"\\u05e0\\u05d5\\u05e9\\u05d0 \\u05e2\\u05d9\\u05e7\\u05e8\\u05d9\"],\"Medium\":[\"\\u05d1\\u05d9\\u05e0\\u05d5\\u05e0\\u05d9\"],\"Neutral\":[\"\\u05e0\\u05d9\\u05d8\\u05e8\\u05dc\\u05d9\"],\"Personalize your content\":[\"\\u05d4\\u05ea\\u05d0\\u05dd \\u05d0\\u05d9\\u05e9\\u05d9\\u05ea \\u05d0\\u05ea \\u05d4\\u05ea\\u05d5\\u05db\\u05df \\u05e9\\u05dc\\u05da\"],\"Short\":[\"\\u05e7\\u05e6\\u05e8\"],\"There was an error with your request. Please try again.\":[\"\\u05d0\\u05d9\\u05e8\\u05e2\\u05d4 \\u05e9\\u05d2\\u05d9\\u05d0\\u05d4 \\u05d1\\u05d1\\u05e7\\u05e9\\u05ea\\u05da. \\u05d0\\u05e0\\u05d0 \\u05e0\\u05e1\\u05d4 \\u05e9\\u05d5\\u05d1.\"],\"Tone of voice\":[\"\\u05d8\\u05d5\\u05df \\u05d4\\u05d3\\u05d9\\u05d1\\u05d5\\u05e8\"],\"Trustworthy\":[\"\\u05d0\\u05de\\u05d9\\u05df\"],\"Use this content\":[\"\\u05d4\\u05e9\\u05ea\\u05de\\u05e9 \\u05d1\\u05ea\\u05d5\\u05db\\u05df \\u05d6\\u05d4\"],\"What content do you want AI to create today?\":[\"\\u05d0\\u05d9\\u05d6\\u05d4 \\u05ea\\u05d5\\u05db\\u05df \\u05d0\\u05ea\\u05d4 \\u05e8\\u05d5\\u05e6\\u05d4 \\u05e9\\u05d4-AI \\u05d9\\u05d9\\u05e6\\u05d5\\u05e8 \\u05d4\\u05d9\\u05d5\\u05dd?\"],\"Witty\":[\"\\u05e9\\u05e0\\u05d5\\u05df\"],\"Write a motivational post about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e4\\u05d5\\u05e1\\u05d8 \\u05de\\u05d5\\u05d8\\u05d9\\u05d1\\u05e6\\u05d9\\u05d5\\u05e0\\u05d9 \\u05e2\\u05dc...\"],\"Write a recommendation list of...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e8\\u05e9\\u05d9\\u05de\\u05ea \\u05d4\\u05de\\u05dc\\u05e6\\u05d5\\u05ea \\u05e9\\u05dc...\"],\"Write a step-by-step tutorial about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05de\\u05d3\\u05e8\\u05d9\\u05da \\u05de\\u05e4\\u05d5\\u05e8\\u05d8 \\u05e9\\u05dc\\u05d1 \\u05d0\\u05d7\\u05e8 \\u05e9\\u05dc\\u05d1 \\u05e2\\u05dc...\"],\"Write a summary of...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e1\\u05d9\\u05db\\u05d5\\u05dd \\u05e9\\u05dc...\"],\"Write an article about ...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05de\\u05d0\\u05de\\u05e8 \\u05e2\\u05dc ...\"],\"Write promotional content about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05ea\\u05d5\\u05db\\u05df \\u05e4\\u05e8\\u05e1\\u05d5\\u05de\\u05d9 \\u05e2\\u05dc...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ja-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":2555,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ja\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u5185\\u306b\\u753b\\u50cf\\u3092\\u8ffd\\u52a0\\u3059\\u308b\"],\"AI Content Creator\":[\"AI\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u30af\\u30ea\\u30a8\\u30a4\\u30bf\\u30fc\"],\"Content length\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306e\\u9577\\u3055\"],\"Create content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u4f5c\\u6210\"],\"Edit prompt\":[\"\\u7de8\\u96c6\\u30d7\\u30ed\\u30f3\\u30d7\\u30c8\"],\"Formal\":[\"\\u30d5\\u30a9\\u30fc\\u30de\\u30eb\"],\"Friendly\":[\"\\u30d5\\u30ec\\u30f3\\u30c9\\u30ea\\u30fc\"],\"Long\":[\"\\u9577\\u3044\"],\"Main topic\":[\"\\u4e3b\\u306a\\u30c8\\u30d4\\u30c3\\u30af\"],\"Medium\":[\"\\u4e2d\\u7a0b\\u5ea6\"],\"Neutral\":[\"\\u30cb\\u30e5\\u30fc\\u30c8\\u30e9\\u30eb\"],\"Personalize your content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306e\\u30d1\\u30fc\\u30bd\\u30ca\\u30e9\\u30a4\\u30ba\"],\"Short\":[\"\\u77ed\\u3044\"],\"There was an error with your request. Please try again.\":[\"\\u30ea\\u30af\\u30a8\\u30b9\\u30c8\\u306b\\u30a8\\u30e9\\u30fc\\u304c\\u767a\\u751f\\u3057\\u307e\\u3057\\u305f\\u3002\\u3082\\u3046\\u4e00\\u5ea6\\u304a\\u8a66\\u3057\\u304f\\u3060\\u3055\\u3044\\u3002\"],\"Tone of voice\":[\"\\u6587\\u7ae0\\u306e\\u30c8\\u30fc\\u30f3\"],\"Trustworthy\":[\"\\u8aa0\\u5b9f\"],\"Use this content\":[\"\\u3053\\u306e\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u4f7f\\u7528\\u3059\\u308b\"],\"What content do you want AI to create today?\":[\"\\u4eca\\u3001AI\\u306b\\u4f5c\\u3063\\u3066\\u307b\\u3057\\u3044\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306f\\uff1f\"],\"Witty\":[\"\\u8efd\\u5999\"],\"Write a motivational post about...\":[\"\\u3084\\u308b\\u6c17\\u3092\\u8d77\\u3053\\u3055\\u305b\\u308b\\u8a18\\u4e8b\\u3092\\u66f8\\u3053\\u3046...\"],\"Write a recommendation list of...\":[\"\\u63a8\\u85a6\\u30ea\\u30b9\\u30c8\\u3092\\u66f8\\u304f\"],\"Write a step-by-step tutorial about...\":[\"\\u3053\\u306e\\u30c1\\u30e5\\u30fc\\u30c8\\u30ea\\u30a2\\u30eb\\u3067\\u306f\\u3001\\u6b21\\u306e\\u30b9\\u30c6\\u30c3\\u30d7\\u306b\\u9032\\u3080\\u305f\\u3081\\u306e\\u30b9\\u30c6\\u30c3\\u30d7\\u30d0\\u30a4\\u30b9\\u30c6\\u30c3\\u30d7\\u306e\\u30c1\\u30e5\\u30fc\\u30c8\\u30ea\\u30a2\\u30eb\\u3092\\u8a18\\u8ff0\\u3057\\u307e\\u3059\\u3002\"],\"Write a summary of...\":[\"\\u8981\\u7d04\\u3092\\u66f8\\u304f...\"],\"Write an article about ...\":[\"\\u306b\\u3064\\u3044\\u3066\\u306e\\u8a18\\u4e8b\\u3092\\u66f8\\u304f...\"],\"Write promotional content about...\":[\"...\\u306b\\u3064\\u3044\\u3066\\u306e\\u30d7\\u30ed\\u30e2\\u30fc\\u30b7\\u30e7\\u30f3\\u30fb\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u66f8\\u304f\\u3002\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-vi-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1899,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"vi\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"Th\\u00eam h\\u00ecnh \\u1ea3nh v\\u00e0o n\\u1ed9i dung c\\u1ee7a t\\u00f4i\"],\"Content length\":[\"\\u0110\\u1ed9 d\\u00e0i n\\u1ed9i dung\"],\"Create content\":[\"T\\u1ea1o n\\u1ed9i dung\"],\"Edit prompt\":[\"Ch\\u1ec9nh s\\u1eeda l\\u1eddi nh\\u1eafc\"],\"Formal\":[\"Trang tr\\u1ecdng\"],\"Friendly\":[\"Th\\u00e2n thi\\u1ec7n\"],\"Long\":[\"D\\u00e0i\"],\"Main topic\":[\"Ch\\u1ee7 \\u0111\\u1ec1 ch\\u00ednh\"],\"Medium\":[\"Trung b\\u00ecnh\"],\"Neutral\":[\"Trung l\\u1eadp\"],\"Personalize your content\":[\"T\\u00f9y ch\\u1ec9nh n\\u1ed9i dung c\\u1ee7a b\\u1ea1n\"],\"Short\":[\"Ng\\u1eafn\"],\"There was an error with your request. Please try again.\":[\"\\u0110\\u00e3 x\\u1ea3y ra l\\u1ed7i v\\u1edbi y\\u00eau c\\u1ea7u c\\u1ee7a b\\u1ea1n. Vui l\\u00f2ng th\\u1eed l\\u1ea1i.\"],\"Tone of voice\":[\"Gi\\u1ecdng \\u0111i\\u1ec7u\"],\"Trustworthy\":[\"\\u0110\\u00e1ng tin c\\u1eady\"],\"Use this content\":[\"S\\u1eed d\\u1ee5ng n\\u1ed9i dung n\\u00e0y\"],\"What content do you want AI to create today?\":[\"B\\u1ea1n mu\\u1ed1n AI t\\u1ea1o ra n\\u1ed9i dung g\\u00ec h\\u00f4m nay?\"],\"Witty\":[\"H\\u00f3m h\\u1ec9nh\"],\"Write a motivational post about...\":[\"Vi\\u1ebft m\\u1ed9t b\\u00e0i vi\\u1ebft truy\\u1ec1n c\\u1ea3m h\\u1ee9ng v\\u1ec1...\"],\"Write a recommendation list of...\":[\"Vi\\u1ebft danh s\\u00e1ch \\u0111\\u1ec1 xu\\u1ea5t v\\u1ec1...\"],\"Write a step-by-step tutorial about...\":[\"Vi\\u1ebft m\\u1ed9t h\\u01b0\\u1edbng d\\u1eabn chi ti\\u1ebft t\\u1eebng b\\u01b0\\u1edbc v\\u1ec1...\"],\"Write a summary of...\":[\"Vi\\u1ebft t\\u00f3m t\\u1eaft v\\u1ec1...\"],\"Write an article about ...\":[\"Vi\\u1ebft m\\u1ed9t b\\u00e0i b\\u00e1o v\\u1ec1 ...\"],\"Write promotional content about...\":[\"Vi\\u1ebft n\\u1ed9i dung qu\\u1ea3ng c\\u00e1o v\\u1ec1...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-nl_NL-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":299,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"nl_NL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"AI Content Maker\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-it_IT-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1480,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"it_IT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Aggiungere un'immagine all'interno del mio contenuto\"],\"Content length\":[\"Lunghezza contenuto\"],\"Create content\":[\"Crea contenuto\"],\"Edit prompt\":[\"Richiesta di modifica\"],\"Formal\":[\"Formale\"],\"Friendly\":[\"Amichevole\"],\"Long\":[\"Lungo\"],\"Main topic\":[\"Argomento principale\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutrale\"],\"Personalize your content\":[\"Personalizzare i contenuti\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Si \\u00e8 verificato un errore nella richiesta. Si prega di riprovare.\"],\"Tone of voice\":[\"Tono di voce\"],\"Trustworthy\":[\"Affidabile\"],\"Use this content\":[\"Utilizzare questo contenuto\"],\"What content do you want AI to create today?\":[\"Quali contenuti volete che l'IA crei oggi?\"],\"Witty\":[\"Witty\"],\"Write a motivational post about...\":[\"Scrivere un post motivazionale su...\"],\"Write a recommendation list of...\":[\"Scrivere un elenco di raccomandazioni...\"],\"Write a step-by-step tutorial about...\":[\"Scrivere un tutorial passo-passo su...\"],\"Write a summary of...\":[\"Scrivere un riassunto di...\"],\"Write an article about ...\":[\"Scrivere un articolo su ...\"],\"Write promotional content about...\":[\"Scrivere contenuti promozionali su...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-de_DE-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1543,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"de_DE\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Ein Bild innerhalb meines Inhalts hinzuf\\u00fcgen\"],\"Content length\":[\"L\\u00e4nge des Inhalts\"],\"Create content\":[\"Inhalt erstellen\"],\"Edit prompt\":[\"Eingabeaufforderung bearbeiten\"],\"Formal\":[\"Formell\"],\"Friendly\":[\"Freundlich\"],\"Long\":[\"Lang\"],\"Main topic\":[\"Hauptthema\"],\"Medium\":[\"Mittel\"],\"Neutral\":[\"Neutral\"],\"Personalize your content\":[\"Personalisiere deinen Inhalt\"],\"Short\":[\"Kurz\"],\"There was an error with your request. Please try again.\":[\"Es ist ein Fehler bei deiner Anfrage aufgetreten. Bitte versuche es noch einmal.\"],\"Tone of voice\":[\"Tonfall\"],\"Trustworthy\":[\"Vertrauensw\\u00fcrdig\"],\"Use this content\":[\"Diesen Inhalt verwenden\"],\"What content do you want AI to create today?\":[\"Welche Inhalte soll die KI heute erstellen?\"],\"Witty\":[\"Witzig\"],\"Write a motivational post about...\":[\"Schreibe einen motivierenden Beitrag \\u00fcber...\"],\"Write a recommendation list of...\":[\"Schreibe eine Empfehlungsliste mit...\"],\"Write a step-by-step tutorial about...\":[\"Schreibe eine Schritt-f\\u00fcr-Schritt-Anleitung \\u00fcber...\"],\"Write a summary of...\":[\"Schreibe eine Zusammenfassung von...\"],\"Write an article about ...\":[\"Schreibe einen Artikel \\u00fcber ...\"],\"Write promotional content about...\":[\"Schreibe Werbeinhalte \\u00fcber...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-lt_LT-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":383,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"lt_LT\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"AI Content Creator\":[\"DI turinio k\\u016brimo \\u012frankis\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ro_RO-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1671,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ro_RO\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 :(((n%100>19)||(( n%100==0)&&(n!=0)))? 2 : 1));\"},\"Add an image inside my content\":[\"Ad\\u0103uga\\u021bi o imagine \\u00een con\\u021binutul meu\"],\"Content length\":[\"Lungimea con\\u021binutului\"],\"Create content\":[\"Creeaz\\u0103 con\\u021binut\"],\"Edit prompt\":[\"Editare prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Prietenos\"],\"Long\":[\"Lung\"],\"Main topic\":[\"Subiect principal\"],\"Medium\":[\"Mediu\"],\"Neutral\":[\"Neutru\"],\"Personalize your content\":[\"Personaliza\\u021bi-v\\u0103 con\\u021binutul\"],\"Short\":[\"Scurt\"],\"There was an error with your request. Please try again.\":[\"S-a produs o eroare cu solicitarea dvs. V\\u0103 rug\\u0103m s\\u0103 \\u00eencerca\\u021bi din nou.\"],\"Tone of voice\":[\"Tonul vocii\"],\"Trustworthy\":[\"De \\u00eencredere\"],\"Use this content\":[\"Utiliza\\u021bi acest con\\u021binut\"],\"What content do you want AI to create today?\":[\"Ce con\\u021binut dori\\u021bi ca AI s\\u0103 creeze ast\\u0103zi?\"],\"Witty\":[\"Ingenios\"],\"Write a motivational post about...\":[\"Scrie o postare motiva\\u021bional\\u0103 despre...\"],\"Write a recommendation list of...\":[\"Scrie\\u021bi o list\\u0103 de recomand\\u0103ri de...\"],\"Write a step-by-step tutorial about...\":[\"Scrie\\u021bi un tutorial pas cu pas despre...\"],\"Write a summary of...\":[\"Scrie\\u021bi un rezumat al...\"],\"Write an article about ...\":[\"Scrie\\u021bi un articol despre ...\"],\"Write promotional content about...\":[\"Scrie\\u021bi con\\u021binut promo\\u021bional despre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ko_KR-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":2116,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ko_KR\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\ub0b4 \\ucf58\\ud150\\uce20\\uc5d0 \\uc774\\ubbf8\\uc9c0 \\ucd94\\uac00\"],\"AI Content Creator\":[\"AI \\ucf58\\ud150\\uce20 \\ud06c\\ub9ac\\uc5d0\\uc774\\ud130\"],\"Content length\":[\"\\ucf58\\ud150\\uce20 \\uae38\\uc774\"],\"Create content\":[\"\\ucf58\\ud150\\uce20 \\uc0dd\\uc131\"],\"Edit prompt\":[\"\\ud3b8\\uc9d1 \\ud504\\ub86c\\ud504\\ud2b8\"],\"Formal\":[\"\\uacf5\\uc2dd\"],\"Friendly\":[\"\\uce5c\\uc808\"],\"Long\":[\"\\uae34\"],\"Main topic\":[\"\\uc8fc\\uc694 \\uc8fc\\uc81c\"],\"Medium\":[\"\\uc911\\uac04\"],\"Neutral\":[\"\\uc911\\ub9bd\"],\"Personalize your content\":[\"\\ucf58\\ud150\\uce20 \\uac1c\\uc778\\ud654\"],\"Short\":[\"\\uc9e7\\uc740\"],\"There was an error with your request. Please try again.\":[\"\\uc694\\uccad\\uc5d0 \\uc624\\ub958\\uac00 \\ubc1c\\uc0dd\\ud588\\uc2b5\\ub2c8\\ub2e4. \\ub2e4\\uc2dc \\uc2dc\\ub3c4\\ud574 \\uc8fc\\uc138\\uc694.\"],\"Tone of voice\":[\"\\ud1a4\\uc564\\ub9e4\\ub108\"],\"Trustworthy\":[\"\\uc2e0\\ub8b0\\ud560 \\uc218 \\uc788\\ub294\"],\"Use this content\":[\"\\uc774 \\ucf58\\ud150\\uce20 \\uc0ac\\uc6a9\"],\"What content do you want AI to create today?\":[\"\\ud604\\uc7ac \\uc778\\uacf5\\uc9c0\\ub2a5\\uc774 \\uc5b4\\ub5a4 \\ucf58\\ud150\\uce20\\ub97c \\ub9cc\\ub4e4\\uae30\\ub97c \\uc6d0\\ud558\\uc2dc\\ub098\\uc694?\"],\"Witty\":[\"\\uc704\\ud2b8\\uc788\\ub294\"],\"Write a motivational post about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ub3d9\\uae30 \\ubd80\\uc5ec \\uac8c\\uc2dc\\ubb3c\\uc744 \\uc791\\uc131\\ud558\\uc138\\uc694.\"],\"Write a recommendation list of...\":[\"\\ucd94\\ucc9c \\ubaa9\\ub85d \\uc791\\uc131\\ud558\\uae30...\"],\"Write a step-by-step tutorial about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ub2e8\\uacc4\\ubcc4 \\ud29c\\ud1a0\\ub9ac\\uc5bc\\uc744 \\uc791\\uc131\\ud558\\uc138\\uc694.\"],\"Write a summary of...\":[\"\\uc694\\uc57d \\uc791\\uc131\\ud558\\uae30...\"],\"Write an article about ...\":[\"\\uc5d0 \\ub300\\ud55c \\uae30\\uc0ac \\uc791\\uc131 ...\"],\"Write promotional content about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ud64d\\ubcf4 \\ucf58\\ud150\\uce20 \\uc791\\uc131\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-tr_TR-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1675,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"tr_TR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u0130\\u00e7eri\\u011fimin i\\u00e7ine bir resim ekleme\"],\"Content length\":[\"\\u0130\\u00e7erik uzunlu\\u011fu\"],\"Create content\":[\"\\u0130\\u00e7erik \\u00fcret\"],\"Edit prompt\":[\"\\u0130stemi d\\u00fczenle\"],\"Formal\":[\"Resmi\"],\"Friendly\":[\"Samimi\"],\"Long\":[\"Uzun\"],\"Main topic\":[\"Ana konu\"],\"Medium\":[\"Orta\"],\"Neutral\":[\"N\\u00f6tr\"],\"Personalize your content\":[\"\\u0130\\u00e7eri\\u011finizi ki\\u015fiselle\\u015ftirin\"],\"Short\":[\"K\\u0131sa\"],\"There was an error with your request. Please try again.\":[\"\\u0130ste\\u011finizle ilgili bir hata olu\\u015ftu. L\\u00fctfen tekrar deneyin.\"],\"Tone of voice\":[\"Hitap \\u015fekli\"],\"Trustworthy\":[\"G\\u00fcvenilir\"],\"Use this content\":[\"Bu i\\u00e7eri\\u011fi kullan\\u0131n\"],\"What content do you want AI to create today?\":[\"Yapay zekan\\u0131n bug\\u00fcn hangi i\\u00e7eri\\u011fi olu\\u015fturmas\\u0131n\\u0131 istiyorsunuz?\"],\"Witty\":[\"Zeki\"],\"Write a motivational post about...\":[\"Hakk\\u0131nda motive edici bir yaz\\u0131 yaz\\u0131n...\"],\"Write a recommendation list of...\":[\"Bir tavsiye listesi yaz\\u0131n...\"],\"Write a step-by-step tutorial about...\":[\"Hakk\\u0131nda ad\\u0131m ad\\u0131m bir \\u00f6\\u011fretici yaz\\u0131n...\"],\"Write a summary of...\":[\"Bir \\u00f6zet yaz\\u0131n...\"],\"Write an article about ...\":[\"Hakk\\u0131nda bir makale yaz\\u0131n ...\"],\"Write promotional content about...\":[\"Hakk\\u0131nda tan\\u0131t\\u0131m i\\u00e7eri\\u011fi yaz\\u0131n...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_BR-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":314,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_BR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Criador de Conte\\u00fado com IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_MX-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_MX\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Creador de contenido con IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-it_IT-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1532,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"it_IT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Aggiungere un'immagine all'interno del mio contenuto\"],\"AI Content Creator\":[\"Creatore di contenuti AI\"],\"Content length\":[\"Lunghezza contenuto\"],\"Create content\":[\"Crea contenuto\"],\"Edit prompt\":[\"Richiesta di modifica\"],\"Formal\":[\"Formale\"],\"Friendly\":[\"Amichevole\"],\"Long\":[\"Lungo\"],\"Main topic\":[\"Argomento principale\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutrale\"],\"Personalize your content\":[\"Personalizzare i contenuti\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Si \\u00e8 verificato un errore nella richiesta. Si prega di riprovare.\"],\"Tone of voice\":[\"Tono di voce\"],\"Trustworthy\":[\"Affidabile\"],\"Use this content\":[\"Utilizzare questo contenuto\"],\"What content do you want AI to create today?\":[\"Quali contenuti volete che l'IA crei oggi?\"],\"Witty\":[\"Witty\"],\"Write a motivational post about...\":[\"Scrivere un post motivazionale su...\"],\"Write a recommendation list of...\":[\"Scrivere un elenco di raccomandazioni...\"],\"Write a step-by-step tutorial about...\":[\"Scrivere un tutorial passo-passo su...\"],\"Write a summary of...\":[\"Scrivere un riassunto di...\"],\"Write an article about ...\":[\"Scrivere un articolo su ...\"],\"Write promotional content about...\":[\"Scrivere contenuti promozionali su...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ar-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":463,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ar\",\"plural-forms\":\"nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100 >= 3 && n%100<=10 ? 3 : n%100 >= 11 && n%100<=99 ? 4 : 5;\"},\"AI Content Creator\":[\"\\u0645\\u0646\\u0634\\u0626 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0628\\u0627\\u0644\\u0640AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-zh_CN-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"zh_CN\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"AI\\u5185\\u5bb9\\u751f\\u6210\\u5668\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_ES-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1581,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-04-15 11:46+0000\",\"generator\":\"Loco https:\\/\\/localise.biz\\/\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"hostinger-ai-assistant\",\"locale_data\":{\"hostinger-ai-assistant\":{\"\":{\"domain\":\"\",\"lang\":\"es_ES\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"AI Content Creator\":[\"Creador de contenido con IA\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personaliza tu contenido\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en tu solicitud. Por favor, int\\u00e9ntalo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Usar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenido quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe una publicaci\\u00f3n motivadora sobre...\"],\"Write a recommendation list of...\":[\"Escribe una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escribe un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Escribe contenido promocional sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ko_KR-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":330,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ko_KR\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"AI \\ucf58\\ud150\\uce20 \\ud06c\\ub9ac\\uc5d0\\uc774\\ud130\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-hi_IN-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":377,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-04-28 01:19+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"hi_IN\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"AI \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u094d\\u0930\\u093f\\u090f\\u091f\\u0930\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-uk-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":3927,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"uk\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"\\u0414\\u043e\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u043d\\u044f \\u0432\\u0441\\u0435\\u0440\\u0435\\u0434\\u0438\\u043d\\u0456 \\u043c\\u043e\\u0433\\u043e \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443\"],\"AI Content Creator\":[\"\\u0413\\u0435\\u043d\\u0435\\u0440\\u0430\\u0442\\u043e\\u0440 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443 \\u0428\\u0406\"],\"Content length\":[\"\\u0414\\u043e\\u0432\\u0436\\u0438\\u043d\\u0430 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443\"],\"Create content\":[\"\\u0417\\u0433\\u0435\\u043d\\u0435\\u0440\\u0443\\u0432\\u0430\\u0442\\u0438 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\"],\"Edit prompt\":[\"\\u0417\\u0430\\u043f\\u0440\\u043e\\u0448\\u0435\\u043d\\u043d\\u044f \\u0434\\u043e \\u0440\\u0435\\u0434\\u0430\\u0433\\u0443\\u0432\\u0430\\u043d\\u043d\\u044f\"],\"Formal\":[\"\\u041e\\u0444\\u0456\\u0446\\u0456\\u0439\\u043d\\u0438\\u0439\"],\"Friendly\":[\"\\u0417\\u0440\\u0443\\u0447\\u043d\\u0438\\u0439\"],\"Long\":[\"\\u0414\\u043e\\u0432\\u0433\\u0438\\u0439\"],\"Main topic\":[\"\\u041e\\u0441\\u043d\\u043e\\u0432\\u043d\\u0430 \\u0442\\u0435\\u043c\\u0430\"],\"Medium\":[\"\\u0421\\u0435\\u0440\\u0435\\u0434\\u043d\\u0456\\u0439\"],\"Neutral\":[\"\\u041d\\u0435\\u0439\\u0442\\u0440\\u0430\\u043b\\u044c\\u043d\\u0438\\u0439\"],\"Personalize your content\":[\"\\u041f\\u0435\\u0440\\u0441\\u043e\\u043d\\u0430\\u043b\\u0456\\u0437\\u0443\\u0439\\u0442\\u0435 \\u0441\\u0432\\u0456\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\"],\"Short\":[\"\\u041a\\u043e\\u0440\\u043e\\u0442\\u043a\\u0438\\u0439\"],\"There was an error with your request. Please try again.\":[\"\\u0423 \\u0432\\u0430\\u0448\\u043e\\u043c\\u0443 \\u0437\\u0430\\u043f\\u0438\\u0442\\u0456 \\u0441\\u0442\\u0430\\u043b\\u0430\\u0441\\u044f \\u043f\\u043e\\u043c\\u0438\\u043b\\u043a\\u0430. \\u0411\\u0443\\u0434\\u044c \\u043b\\u0430\\u0441\\u043a\\u0430, \\u0441\\u043f\\u0440\\u043e\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0449\\u0435 \\u0440\\u0430\\u0437.\"],\"Tone of voice\":[\"\\u0421\\u0442\\u0438\\u043b\\u044c \"],\"Trustworthy\":[\"\\u041d\\u0430\\u0434\\u0456\\u0439\\u043d\\u0438\\u0439\"],\"Use this content\":[\"\\u0412\\u0438\\u043a\\u043e\\u0440\\u0438\\u0441\\u0442\\u043e\\u0432\\u0443\\u0439\\u0442\\u0435 \\u0446\\u0435\\u0439 \\u0432\\u043c\\u0456\\u0441\\u0442\"],\"What content do you want AI to create today?\":[\"\\u042f\\u043a\\u0438\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u0432\\u0438 \\u0445\\u043e\\u0447\\u0435\\u0442\\u0435, \\u0449\\u043e\\u0431 \\u0428\\u0406 \\u0441\\u0442\\u0432\\u043e\\u0440\\u044e\\u0432\\u0430\\u0432 \\u0441\\u044c\\u043e\\u0433\\u043e\\u0434\\u043d\\u0456?\"],\"Witty\":[\"\\u0414\\u043e\\u0442\\u0435\\u043f\\u043d\\u0438\\u0439\"],\"Write a motivational post about...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u043c\\u043e\\u0442\\u0438\\u0432\\u0430\\u0446\\u0456\\u0439\\u043d\\u0438\\u0439 \\u043f\\u043e\\u0441\\u0442 \\u043f\\u0440\\u043e.\"],\"Write a recommendation list of...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0441\\u043f\\u0438\\u0441\\u043e\\u043a \\u0440\\u0435\\u043a\\u043e\\u043c\\u0435\\u043d\\u0434\\u0430\\u0446\\u0456\\u0439 \\u0434\\u043b\\u044f...\"],\"Write a step-by-step tutorial about...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u043f\\u043e\\u043a\\u0440\\u043e\\u043a\\u043e\\u0432\\u0443 \\u0456\\u043d\\u0441\\u0442\\u0440\\u0443\\u043a\\u0446\\u0456\\u044e \\u043f\\u0440\\u043e.\"],\"Write a summary of...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0440\\u0435\\u0437\\u044e\\u043c\\u0435...\"],\"Write an article about ...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0441\\u0442\\u0430\\u0442\\u0442\\u044e \\u043f\\u0440\\u043e ...\"],\"Write promotional content about...\":[\"\\u041f\\u0438\\u0441\\u0430\\u0442\\u0438 \\u0440\\u0435\\u043a\\u043b\\u0430\\u043c\\u043d\\u0438\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u043f\\u0440\\u043e.\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_BR-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1578,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_BR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Adicionar uma imagem em meu conte\\u00fado\"],\"AI Content Creator\":[\"Criador de Conte\\u00fado com IA\"],\"Content length\":[\"Tamanho do conte\\u00fado\"],\"Create content\":[\"Gerar conte\\u00fado\\n\"],\"Edit prompt\":[\"Editar prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amig\\u00e1vel\"],\"Long\":[\"Longo\"],\"Main topic\":[\"T\\u00f3pico principal\"],\"Medium\":[\"M\\u00e9dio\\n\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalize seu conte\\u00fado\"],\"Short\":[\"Curto\"],\"There was an error with your request. Please try again.\":[\"Ocorreu um erro em sua solicita\\u00e7\\u00e3o. Por favor, tente novamente.\"],\"Tone of voice\":[\"Tom de voz\"],\"Trustworthy\":[\"Confi\\u00e1vel\"],\"Use this content\":[\"Use este conte\\u00fado\"],\"What content do you want AI to create today?\":[\"Que conte\\u00fado voc\\u00ea quer que a IA crie hoje?\"],\"Witty\":[\"Divertido\"],\"Write a motivational post about...\":[\"Escreva uma postagem motivacional sobre...\"],\"Write a recommendation list of...\":[\"Escreva uma lista de recomenda\\u00e7\\u00f5es de...\"],\"Write a step-by-step tutorial about...\":[\"Escreva um tutorial passo a passo sobre...\"],\"Write a summary of...\":[\"Escreva um resumo de...\"],\"Write an article about ...\":[\"Escreva um artigo sobre ...\"],\"Write promotional content about...\":[\"Escreva conte\\u00fado promocional sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_PT-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1514,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_PT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Adicionar uma imagem ao meu conte\\u00fado\"],\"Content length\":[\"Comprimento do conte\\u00fado\"],\"Create content\":[\"Gerar conte\\u00fado\"],\"Edit prompt\":[\"Editar prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Intuitivo\"],\"Long\":[\"Longo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"M\\u00e9dio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalize o seu conte\\u00fado\"],\"Short\":[\"Curto\"],\"There was an error with your request. Please try again.\":[\"Ocorreu um erro no seu pedido. Por favor, tente novamente.\"],\"Tone of voice\":[\"Tom de voz\"],\"Trustworthy\":[\"Fi\\u00e1vel\"],\"Use this content\":[\"Utilizar este conte\\u00fado\"],\"What content do you want AI to create today?\":[\"Que conte\\u00fados pretende que a IA crie hoje?\"],\"Witty\":[\"Inteligente\"],\"Write a motivational post about...\":[\"Escrever uma publica\\u00e7\\u00e3o motivacional sobre...\"],\"Write a recommendation list of...\":[\"Elaborar uma lista de recomenda\\u00e7\\u00f5es de...\"],\"Write a step-by-step tutorial about...\":[\"Escrever um tutorial passo a passo sobre...\"],\"Write a summary of...\":[\"Escrever um resumo de...\"],\"Write an article about ...\":[\"Escrever um artigo sobre ...\"],\"Write promotional content about...\":[\"Escrever conte\\u00fados promocionais sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-id_ID-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":296,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"id_ID\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"AI Content Creator\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-th-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":3514,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"th\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u0e40\\u0e1e\\u0e34\\u0e48\\u0e21\\u0e23\\u0e39\\u0e1b\\u0e20\\u0e32\\u0e1e\\u0e20\\u0e32\\u0e22\\u0e43\\u0e19\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e02\\u0e2d\\u0e07\\u0e09\\u0e31\\u0e19\"],\"Content length\":[\"\\u0e04\\u0e27\\u0e32\\u0e21\\u0e22\\u0e32\\u0e27\\u0e02\\u0e2d\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\"],\"Create content\":[\"\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\"],\"Edit prompt\":[\"\\u0e41\\u0e01\\u0e49\\u0e44\\u0e02\\u0e04\\u0e33\\u0e41\\u0e19\\u0e30\\u0e19\\u0e33\"],\"Formal\":[\"\\u0e17\\u0e32\\u0e07\\u0e01\\u0e32\\u0e23\"],\"Friendly\":[\"\\u0e40\\u0e1b\\u0e47\\u0e19\\u0e01\\u0e31\\u0e19\\u0e40\\u0e2d\\u0e07\"],\"Long\":[\"\\u0e22\\u0e32\\u0e27\"],\"Main topic\":[\"\\u0e2b\\u0e31\\u0e27\\u0e02\\u0e49\\u0e2d\\u0e2b\\u0e25\\u0e31\\u0e01\"],\"Medium\":[\"\\u0e1b\\u0e32\\u0e19\\u0e01\\u0e25\\u0e32\\u0e07\"],\"Neutral\":[\"\\u0e40\\u0e1b\\u0e47\\u0e19\\u0e01\\u0e25\\u0e32\\u0e07\"],\"Personalize your content\":[\"\\u0e1b\\u0e23\\u0e31\\u0e1a\\u0e41\\u0e15\\u0e48\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e02\\u0e2d\\u0e07\\u0e04\\u0e38\\u0e13\"],\"Short\":[\"\\u0e2a\\u0e31\\u0e49\\u0e19\"],\"There was an error with your request. Please try again.\":[\"\\u0e21\\u0e35\\u0e02\\u0e49\\u0e2d\\u0e1c\\u0e34\\u0e14\\u0e1e\\u0e25\\u0e32\\u0e14\\u0e43\\u0e19\\u0e01\\u0e32\\u0e23\\u0e23\\u0e49\\u0e2d\\u0e07\\u0e02\\u0e2d\\u0e02\\u0e2d\\u0e07\\u0e04\\u0e38\\u0e13 \\u0e01\\u0e23\\u0e38\\u0e13\\u0e32\\u0e25\\u0e2d\\u0e07\\u0e2d\\u0e35\\u0e01\\u0e04\\u0e23\\u0e31\\u0e49\\u0e07\"],\"Tone of voice\":[\"\\u0e42\\u0e17\\u0e19\\u0e20\\u0e32\\u0e29\\u0e32\"],\"Trustworthy\":[\"\\u0e40\\u0e0a\\u0e37\\u0e48\\u0e2d\\u0e16\\u0e37\\u0e2d\\u0e44\\u0e14\\u0e49\"],\"Use this content\":[\"\\u0e43\\u0e0a\\u0e49\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e15\\u0e48\\u0e2d\\u0e44\\u0e1b\\u0e19\\u0e35\\u0e49\"],\"What content do you want AI to create today?\":[\"\\u0e04\\u0e38\\u0e13\\u0e15\\u0e49\\u0e2d\\u0e07\\u0e01\\u0e32\\u0e23\\u0e43\\u0e2b\\u0e49 AI \\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e2d\\u0e30\\u0e44\\u0e23\\u0e43\\u0e19\\u0e27\\u0e31\\u0e19\\u0e19\\u0e35\\u0e49?\"],\"Witty\":[\"\\u0e40\\u0e09\\u0e25\\u0e35\\u0e22\\u0e27\\u0e09\\u0e25\\u0e32\\u0e14\"],\"Write a motivational post about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e42\\u0e1e\\u0e2a\\u0e15\\u0e4c\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e41\\u0e23\\u0e07\\u0e1a\\u0e31\\u0e19\\u0e14\\u0e32\\u0e25\\u0e43\\u0e08\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"],\"Write a recommendation list of...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e23\\u0e32\\u0e22\\u0e01\\u0e32\\u0e23\\u0e04\\u0e33\\u0e41\\u0e19\\u0e30\\u0e19\\u0e33\\u0e02\\u0e2d\\u0e07...\"],\"Write a step-by-step tutorial about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e04\\u0e39\\u0e48\\u0e21\\u0e37\\u0e2d\\u0e41\\u0e1a\\u0e1a\\u0e02\\u0e31\\u0e49\\u0e19\\u0e15\\u0e2d\\u0e19\\u0e15\\u0e48\\u0e2d\\u0e02\\u0e31\\u0e49\\u0e19\\u0e15\\u0e2d\\u0e19\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"],\"Write a summary of...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e2a\\u0e23\\u0e38\\u0e1b\\u0e02\\u0e2d\\u0e07...\"],\"Write an article about ...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e1a\\u0e17\\u0e04\\u0e27\\u0e32\\u0e21\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a ...\"],\"Write promotional content about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e2a\\u0e48\\u0e07\\u0e40\\u0e2a\\u0e23\\u0e34\\u0e21\\u0e01\\u0e32\\u0e23\\u0e02\\u0e32\\u0e22\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-fr_FR-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1581,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"fr_FR\",\"plural-forms\":\"nplurals=2; plural=n > 1;\"},\"Add an image inside my content\":[\"Ajouter une image dans mon contenu\"],\"AI Content Creator\":[\"Cr\\u00e9ateur de contenu IA\"],\"Content length\":[\"Longueur du contenu\"],\"Create content\":[\"Cr\\u00e9er du contenu\"],\"Edit prompt\":[\"Editer l'invite\"],\"Formal\":[\"Formel\"],\"Friendly\":[\"Convivial\"],\"Long\":[\"Long\"],\"Main topic\":[\"Th\\u00e8me principal\"],\"Medium\":[\"Moyen\"],\"Neutral\":[\"Neutre\"],\"Personalize your content\":[\"Personnalisez votre contenu\"],\"Short\":[\"Court\"],\"There was an error with your request. Please try again.\":[\"Une erreur s'est produite dans votre demande. Veuillez r\\u00e9essayer.\"],\"Tone of voice\":[\"Ton de r\\u00e9daction\"],\"Trustworthy\":[\"Fiable\"],\"Use this content\":[\"Utiliser ce contenu\"],\"What content do you want AI to create today?\":[\"Quel contenu voulez-vous que l'IA cr\\u00e9e aujourd'hui ?\"],\"Witty\":[\"Dr\\u00f4le\"],\"Write a motivational post about...\":[\"R\\u00e9diger un billet de motivation sur...\"],\"Write a recommendation list of...\":[\"R\\u00e9digez une liste de recommandations...\"],\"Write a step-by-step tutorial about...\":[\"R\\u00e9diger un tutoriel \\u00e9tape par \\u00e9tape sur...\"],\"Write a summary of...\":[\"R\\u00e9digez un r\\u00e9sum\\u00e9 de...\"],\"Write an article about ...\":[\"R\\u00e9digez un article sur ...\"],\"Write promotional content about...\":[\"R\\u00e9diger du contenu promotionnel sur...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-it_IT-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":307,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"it_IT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Creatore di contenuti AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_AR-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1542,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_AR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"AI Content Creator\":[\"Creador de contenido con IA\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar aviso\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalice sus contenidos\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en su solicitud. Por favor, int\\u00e9ntelo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Utilizar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenidos quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe un post motivador sobre...\"],\"Write a recommendation list of...\":[\"Escriba una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escriba un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Redactar contenidos promocionales sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-lt_LT-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1807,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"lt_LT\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"\\u012etraukti paveiksl\\u0117l\\u012f \\u012f turin\\u012f\"],\"AI Content Creator\":[\"DI turinio k\\u016brimo \\u012frankis\"],\"Content length\":[\"Turinio ilgis\"],\"Create content\":[\"Kurti turin\\u012f\"],\"Edit prompt\":[\"Redaguoti raginim\\u0105\"],\"Formal\":[\"Formalus\"],\"Friendly\":[\"Draugi\\u0161kas\"],\"Long\":[\"Ilgas\"],\"Main topic\":[\"Pagrindin\\u0117 tema\"],\"Medium\":[\"Vidutini\\u0161kai\"],\"Neutral\":[\"Neutralus\"],\"Personalize your content\":[\"Personalizuokite turin\\u012f\"],\"Short\":[\"Trumpas\"],\"There was an error with your request. Please try again.\":[\"J\\u016bs\\u0173 u\\u017eklausoje \\u012fvyko klaida. Bandykite dar kart\\u0105.\"],\"Tone of voice\":[\"Balso tonas\"],\"Trustworthy\":[\"Patikimas\"],\"Use this content\":[\"Naudokite \\u0161\\u012f turin\\u012f\"],\"What content do you want AI to create today?\":[\"Kok\\u012f turin\\u012f norite, kad dirbtinis intelektas sukurt\\u0173 \\u0161iandien?\"],\"Witty\":[\"\\u0160maik\\u0161tus\"],\"Write a motivational post about...\":[\"Para\\u0161ykite motyvacin\\u012f prane\\u0161im\\u0105 apie...\"],\"Write a recommendation list of...\":[\"Para\\u0161ykite rekomendacin\\u012f s\\u0105ra\\u0161\\u0105...\"],\"Write a step-by-step tutorial about...\":[\"Para\\u0161ykite \\u017eingsnis po \\u017eingsnio vadov\\u0117l\\u012f apie...\"],\"Write a summary of...\":[\"Para\\u0161ykite santrauk\\u0105 apie...\"],\"Write an article about ...\":[\"Para\\u0161ykite straipsn\\u012f apie ...\"],\"Write promotional content about...\":[\"Ra\\u0161ykite reklamin\\u012f turin\\u012f apie...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_AR-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1487,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_AR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar aviso\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalice sus contenidos\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en su solicitud. Por favor, int\\u00e9ntelo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Utilizar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenidos quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe un post motivador sobre...\"],\"Write a recommendation list of...\":[\"Escriba una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escriba un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Redactar contenidos promocionales sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-nl_NL-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1438,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"nl_NL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Een afbeelding toevoegen in mijn inhoud\"],\"Content length\":[\"Content lengte\"],\"Create content\":[\"Genereer content\"],\"Edit prompt\":[\"Bewerk prompt\"],\"Formal\":[\"Formeel\"],\"Friendly\":[\"Vriendelijk\"],\"Long\":[\"Lang\"],\"Main topic\":[\"Hoofdonderwerp\"],\"Medium\":[\"Medium\"],\"Neutral\":[\"Neutraal\"],\"Personalize your content\":[\"Personaliseer je inhoud\"],\"Short\":[\"Kort\"],\"There was an error with your request. Please try again.\":[\"Er is een fout opgetreden bij je aanvraag. Probeer het opnieuw.\"],\"Tone of voice\":[\"Schrijfstijl\"],\"Trustworthy\":[\"Betrouwbaar\"],\"Use this content\":[\"Gebruik deze inhoud\"],\"What content do you want AI to create today?\":[\"Welke content wil je dat AI vandaag maakt?\"],\"Witty\":[\"Grappig\"],\"Write a motivational post about...\":[\"Schrijf een motiverende post over...\"],\"Write a recommendation list of...\":[\"Schrijf een aanbevelingslijst van...\"],\"Write a step-by-step tutorial about...\":[\"Schrijf een stap-voor-stap handleiding over...\"],\"Write a summary of...\":[\"Schrijf een samenvatting van...\"],\"Write an article about ...\":[\"Schrijf een artikel over ...\"],\"Write promotional content about...\":[\"Schrijf promotie-inhoud over...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-vi-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1963,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"vi\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"Th\\u00eam h\\u00ecnh \\u1ea3nh v\\u00e0o n\\u1ed9i dung c\\u1ee7a t\\u00f4i\"],\"AI Content Creator\":[\"Tr\\u00ecnh t\\u1ea1o n\\u1ed9i dung AI\"],\"Content length\":[\"\\u0110\\u1ed9 d\\u00e0i n\\u1ed9i dung\"],\"Create content\":[\"T\\u1ea1o n\\u1ed9i dung\"],\"Edit prompt\":[\"Ch\\u1ec9nh s\\u1eeda l\\u1eddi nh\\u1eafc\"],\"Formal\":[\"Trang tr\\u1ecdng\"],\"Friendly\":[\"Th\\u00e2n thi\\u1ec7n\"],\"Long\":[\"D\\u00e0i\"],\"Main topic\":[\"Ch\\u1ee7 \\u0111\\u1ec1 ch\\u00ednh\"],\"Medium\":[\"Trung b\\u00ecnh\"],\"Neutral\":[\"Trung l\\u1eadp\"],\"Personalize your content\":[\"T\\u00f9y ch\\u1ec9nh n\\u1ed9i dung c\\u1ee7a b\\u1ea1n\"],\"Short\":[\"Ng\\u1eafn\"],\"There was an error with your request. Please try again.\":[\"\\u0110\\u00e3 x\\u1ea3y ra l\\u1ed7i v\\u1edbi y\\u00eau c\\u1ea7u c\\u1ee7a b\\u1ea1n. Vui l\\u00f2ng th\\u1eed l\\u1ea1i.\"],\"Tone of voice\":[\"Gi\\u1ecdng \\u0111i\\u1ec7u\"],\"Trustworthy\":[\"\\u0110\\u00e1ng tin c\\u1eady\"],\"Use this content\":[\"S\\u1eed d\\u1ee5ng n\\u1ed9i dung n\\u00e0y\"],\"What content do you want AI to create today?\":[\"B\\u1ea1n mu\\u1ed1n AI t\\u1ea1o ra n\\u1ed9i dung g\\u00ec h\\u00f4m nay?\"],\"Witty\":[\"H\\u00f3m h\\u1ec9nh\"],\"Write a motivational post about...\":[\"Vi\\u1ebft m\\u1ed9t b\\u00e0i vi\\u1ebft truy\\u1ec1n c\\u1ea3m h\\u1ee9ng v\\u1ec1...\"],\"Write a recommendation list of...\":[\"Vi\\u1ebft danh s\\u00e1ch \\u0111\\u1ec1 xu\\u1ea5t v\\u1ec1...\"],\"Write a step-by-step tutorial about...\":[\"Vi\\u1ebft m\\u1ed9t h\\u01b0\\u1edbng d\\u1eabn chi ti\\u1ebft t\\u1eebng b\\u01b0\\u1edbc v\\u1ec1...\"],\"Write a summary of...\":[\"Vi\\u1ebft t\\u00f3m t\\u1eaft v\\u1ec1...\"],\"Write an article about ...\":[\"Vi\\u1ebft m\\u1ed9t b\\u00e0i b\\u00e1o v\\u1ec1 ...\"],\"Write promotional content about...\":[\"Vi\\u1ebft n\\u1ed9i dung qu\\u1ea3ng c\\u00e1o v\\u1ec1...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pl_PL-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1639,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pl_PL\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"Dodawanie obrazu wewn\\u0105trz tre\\u015bci\"],\"AI Content Creator\":[\"Generator tre\\u015bci AI\"],\"Content length\":[\"D\\u0142ugo\\u015b\\u0107 tre\\u015bci\"],\"Create content\":[\"Generuj tre\\u015b\\u0107\"],\"Edit prompt\":[\"Edytuj monit\"],\"Formal\":[\"Formalny\"],\"Friendly\":[\"Przyjazny\"],\"Long\":[\"D\\u0142ugi\"],\"Main topic\":[\"G\\u0142\\u00f3wny temat\"],\"Medium\":[\"\\u015aredni\"],\"Neutral\":[\"Neutralny\"],\"Personalize your content\":[\"Personalizacja tre\\u015bci\"],\"Short\":[\"Kr\\u00f3tko\"],\"There was an error with your request. Please try again.\":[\"Wyst\\u0105pi\\u0142 b\\u0142\\u0105d w \\u017c\\u0105daniu. Spr\\u00f3buj ponownie.\"],\"Tone of voice\":[\"Styl wypowiedzi\"],\"Trustworthy\":[\"Godny zaufania\"],\"Use this content\":[\"U\\u017cyj tej zawarto\\u015bci\"],\"What content do you want AI to create today?\":[\"Jakie tre\\u015bci ma dzi\\u015b tworzy\\u0107 sztuczna inteligencja?\"],\"Witty\":[\"Zabawny\"],\"Write a motivational post about...\":[\"Napisz motywuj\\u0105cy post o...\"],\"Write a recommendation list of...\":[\"Napisz list\\u0119 rekomendacji...\"],\"Write a step-by-step tutorial about...\":[\"Napisz poradnik krok po kroku na temat...\"],\"Write a summary of...\":[\"Napisz podsumowanie...\"],\"Write an article about ...\":[\"Napisz artyku\\u0142 o ...\"],\"Write promotional content about...\":[\"Pisz tre\\u015bci promocyjne o...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_PT-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_PT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Criador de Conte\\u00fado IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ro_RO-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1717,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ro_RO\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 :(((n%100>19)||(( n%100==0)&&(n!=0)))? 2 : 1));\"},\"Add an image inside my content\":[\"Ad\\u0103uga\\u021bi o imagine \\u00een con\\u021binutul meu\"],\"AI Content Creator\":[\"AI Content Creator\"],\"Content length\":[\"Lungimea con\\u021binutului\"],\"Create content\":[\"Creeaz\\u0103 con\\u021binut\"],\"Edit prompt\":[\"Editare prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Prietenos\"],\"Long\":[\"Lung\"],\"Main topic\":[\"Subiect principal\"],\"Medium\":[\"Mediu\"],\"Neutral\":[\"Neutru\"],\"Personalize your content\":[\"Personaliza\\u021bi-v\\u0103 con\\u021binutul\"],\"Short\":[\"Scurt\"],\"There was an error with your request. Please try again.\":[\"S-a produs o eroare cu solicitarea dvs. V\\u0103 rug\\u0103m s\\u0103 \\u00eencerca\\u021bi din nou.\"],\"Tone of voice\":[\"Tonul vocii\"],\"Trustworthy\":[\"De \\u00eencredere\"],\"Use this content\":[\"Utiliza\\u021bi acest con\\u021binut\"],\"What content do you want AI to create today?\":[\"Ce con\\u021binut dori\\u021bi ca AI s\\u0103 creeze ast\\u0103zi?\"],\"Witty\":[\"Ingenios\"],\"Write a motivational post about...\":[\"Scrie o postare motiva\\u021bional\\u0103 despre...\"],\"Write a recommendation list of...\":[\"Scrie\\u021bi o list\\u0103 de recomand\\u0103ri de...\"],\"Write a step-by-step tutorial about...\":[\"Scrie\\u021bi un tutorial pas cu pas despre...\"],\"Write a summary of...\":[\"Scrie\\u021bi un rezumat al...\"],\"Write an article about ...\":[\"Scrie\\u021bi un articol despre ...\"],\"Write promotional content about...\":[\"Scrie\\u021bi con\\u021binut promo\\u021bional despre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-he_IL-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":335,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"he_IL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"\\u05d9\\u05d5\\u05e6\\u05e8 \\u05ea\\u05d5\\u05db\\u05df AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-zh_CN-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1720,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"zh_CN\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u5728\\u6211\\u7684\\u5185\\u5bb9\\u4e2d\\u6dfb\\u52a0\\u56fe\\u50cf\"],\"AI Content Creator\":[\"AI\\u5185\\u5bb9\\u751f\\u6210\\u5668\"],\"Content length\":[\"\\u5185\\u5bb9\\u957f\\u5ea6\"],\"Create content\":[\"\\u521b\\u5efa\\u5185\\u5bb9 \"],\"Edit prompt\":[\"\\u7f16\\u8f91\\u63d0\\u793a\"],\"Formal\":[\"\\u6b63\\u5f0f\"],\"Friendly\":[\"\\u53cb\\u597d\\u7684\"],\"Long\":[\"\\u957f\"],\"Main topic\":[\"\\u4e3b\\u8981\\u8bae\\u9898\"],\"Medium\":[\"\\u4e00\\u822c\"],\"Neutral\":[\"\\u6b63\\u5e38\"],\"Personalize your content\":[\"\\u4e2a\\u6027\\u5316\\u60a8\\u7684\\u5185\\u5bb9\"],\"Short\":[\"\\u77ed\"],\"There was an error with your request. Please try again.\":[\"\\u60a8\\u7684\\u8bf7\\u6c42\\u51fa\\u73b0\\u9519\\u8bef\\u3002\\u8bf7\\u91cd\\u8bd5\\u3002\"],\"Tone of voice\":[\"\\u8bed\\u6c14\"],\"Trustworthy\":[\"\\u503c\\u5f97\\u4fe1\\u8d56\"],\"Use this content\":[\"\\u4f7f\\u7528\\u6b64\\u5185\\u5bb9\"],\"What content do you want AI to create today?\":[\"\\u4eca\\u5929\\uff0c\\u60a8\\u5e0c\\u671b\\u4eba\\u5de5\\u667a\\u80fd\\u521b\\u5efa\\u54ea\\u4e9b\\u5185\\u5bb9\\uff1f\"],\"Witty\":[\"\\u6709\\u8da3\\u7684\"],\"Write a motivational post about...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write a recommendation list of...\":[\"\\u5199\\u4e00\\u4efd\\u63a8\\u8350\\u6e05\\u5355\\uff0c\\u5217\\u51fa...\"],\"Write a step-by-step tutorial about...\":[\"\\u64b0\\u5199\\u5173\\u4e8e......\"],\"Write a summary of...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write an article about ...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write promotional content about...\":[\"\\u64b0\\u5199\\u6709\\u5173...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-id_ID-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1473,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"id_ID\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"Menambahkan gambar di dalam konten saya\"],\"AI Content Creator\":[\"AI Content Creator\"],\"Content length\":[\"Panjang konten\"],\"Create content\":[\"Buat konten\"],\"Edit prompt\":[\"Permintaan pengeditan\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Ramah\"],\"Long\":[\"Panjang\"],\"Main topic\":[\"Topik utama\"],\"Medium\":[\"Sedang\"],\"Neutral\":[\"Netral\"],\"Personalize your content\":[\"Mempersonalisasi konten Anda\"],\"Short\":[\"Pendek\"],\"There was an error with your request. Please try again.\":[\"Ada kesalahan dengan permintaan Anda. Silakan coba lagi.\"],\"Tone of voice\":[\"Karakter brand\"],\"Trustworthy\":[\"Tepercaya\"],\"Use this content\":[\"Gunakan konten ini\"],\"What content do you want AI to create today?\":[\"Konten apa yang Anda ingin AI buat hari ini?\"],\"Witty\":[\"Jenaka\"],\"Write a motivational post about...\":[\"Tulislah sebuah postingan motivasi tentang...\"],\"Write a recommendation list of...\":[\"Tulis daftar rekomendasi dari...\"],\"Write a step-by-step tutorial about...\":[\"Tulis tutorial langkah demi langkah tentang...\"],\"Write a summary of...\":[\"Tuliskan ringkasan tentang...\"],\"Write an article about ...\":[\"Tulis artikel tentang ...\"],\"Write promotional content about...\":[\"Tulis konten promosi tentang...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_ES-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_ES\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Creador de contenido con IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-uk-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":3783,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"uk\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"\\u0414\\u043e\\u0434\\u0430\\u0439\\u0442\\u0435 \\u0437\\u043e\\u0431\\u0440\\u0430\\u0436\\u0435\\u043d\\u043d\\u044f \\u0432\\u0441\\u0435\\u0440\\u0435\\u0434\\u0438\\u043d\\u0456 \\u043c\\u043e\\u0433\\u043e \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443\"],\"Content length\":[\"\\u0414\\u043e\\u0432\\u0436\\u0438\\u043d\\u0430 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443\"],\"Create content\":[\"\\u0417\\u0433\\u0435\\u043d\\u0435\\u0440\\u0443\\u0432\\u0430\\u0442\\u0438 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\"],\"Edit prompt\":[\"\\u0417\\u0430\\u043f\\u0440\\u043e\\u0448\\u0435\\u043d\\u043d\\u044f \\u0434\\u043e \\u0440\\u0435\\u0434\\u0430\\u0433\\u0443\\u0432\\u0430\\u043d\\u043d\\u044f\"],\"Formal\":[\"\\u041e\\u0444\\u0456\\u0446\\u0456\\u0439\\u043d\\u0438\\u0439\"],\"Friendly\":[\"\\u0417\\u0440\\u0443\\u0447\\u043d\\u0438\\u0439\"],\"Long\":[\"\\u0414\\u043e\\u0432\\u0433\\u0438\\u0439\"],\"Main topic\":[\"\\u041e\\u0441\\u043d\\u043e\\u0432\\u043d\\u0430 \\u0442\\u0435\\u043c\\u0430\"],\"Medium\":[\"\\u0421\\u0435\\u0440\\u0435\\u0434\\u043d\\u0456\\u0439\"],\"Neutral\":[\"\\u041d\\u0435\\u0439\\u0442\\u0440\\u0430\\u043b\\u044c\\u043d\\u0438\\u0439\"],\"Personalize your content\":[\"\\u041f\\u0435\\u0440\\u0441\\u043e\\u043d\\u0430\\u043b\\u0456\\u0437\\u0443\\u0439\\u0442\\u0435 \\u0441\\u0432\\u0456\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\"],\"Short\":[\"\\u041a\\u043e\\u0440\\u043e\\u0442\\u043a\\u0438\\u0439\"],\"There was an error with your request. Please try again.\":[\"\\u0423 \\u0432\\u0430\\u0448\\u043e\\u043c\\u0443 \\u0437\\u0430\\u043f\\u0438\\u0442\\u0456 \\u0441\\u0442\\u0430\\u043b\\u0430\\u0441\\u044f \\u043f\\u043e\\u043c\\u0438\\u043b\\u043a\\u0430. \\u0411\\u0443\\u0434\\u044c \\u043b\\u0430\\u0441\\u043a\\u0430, \\u0441\\u043f\\u0440\\u043e\\u0431\\u0443\\u0439\\u0442\\u0435 \\u0449\\u0435 \\u0440\\u0430\\u0437.\"],\"Tone of voice\":[\"\\u0421\\u0442\\u0438\\u043b\\u044c \"],\"Trustworthy\":[\"\\u041d\\u0430\\u0434\\u0456\\u0439\\u043d\\u0438\\u0439\"],\"Use this content\":[\"\\u0412\\u0438\\u043a\\u043e\\u0440\\u0438\\u0441\\u0442\\u043e\\u0432\\u0443\\u0439\\u0442\\u0435 \\u0446\\u0435\\u0439 \\u0432\\u043c\\u0456\\u0441\\u0442\"],\"What content do you want AI to create today?\":[\"\\u042f\\u043a\\u0438\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u0432\\u0438 \\u0445\\u043e\\u0447\\u0435\\u0442\\u0435, \\u0449\\u043e\\u0431 \\u0428\\u0406 \\u0441\\u0442\\u0432\\u043e\\u0440\\u044e\\u0432\\u0430\\u0432 \\u0441\\u044c\\u043e\\u0433\\u043e\\u0434\\u043d\\u0456?\"],\"Witty\":[\"\\u0414\\u043e\\u0442\\u0435\\u043f\\u043d\\u0438\\u0439\"],\"Write a motivational post about...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u043c\\u043e\\u0442\\u0438\\u0432\\u0430\\u0446\\u0456\\u0439\\u043d\\u0438\\u0439 \\u043f\\u043e\\u0441\\u0442 \\u043f\\u0440\\u043e.\"],\"Write a recommendation list of...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0441\\u043f\\u0438\\u0441\\u043e\\u043a \\u0440\\u0435\\u043a\\u043e\\u043c\\u0435\\u043d\\u0434\\u0430\\u0446\\u0456\\u0439 \\u0434\\u043b\\u044f...\"],\"Write a step-by-step tutorial about...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u043f\\u043e\\u043a\\u0440\\u043e\\u043a\\u043e\\u0432\\u0443 \\u0456\\u043d\\u0441\\u0442\\u0440\\u0443\\u043a\\u0446\\u0456\\u044e \\u043f\\u0440\\u043e.\"],\"Write a summary of...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0440\\u0435\\u0437\\u044e\\u043c\\u0435...\"],\"Write an article about ...\":[\"\\u041d\\u0430\\u043f\\u0438\\u0448\\u0456\\u0442\\u044c \\u0441\\u0442\\u0430\\u0442\\u0442\\u044e \\u043f\\u0440\\u043e ...\"],\"Write promotional content about...\":[\"\\u041f\\u0438\\u0441\\u0430\\u0442\\u0438 \\u0440\\u0435\\u043a\\u043b\\u0430\\u043c\\u043d\\u0438\\u0439 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442 \\u043f\\u0440\\u043e.\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ar-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":3307,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ar\",\"plural-forms\":\"nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100 >= 3 && n%100<=10 ? 3 : n%100 >= 11 && n%100<=99 ? 4 : 5;\"},\"Add an image inside my content\":[\"\\u0625\\u0636\\u0627\\u0641\\u0629 \\u0635\\u0648\\u0631\\u0629 \\u062f\\u0627\\u062e\\u0644 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u062e\\u0627\\u0635 \\u0628\\u064a\"],\"AI Content Creator\":[\"\\u0645\\u0646\\u0634\\u0626 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0628\\u0627\\u0644\\u0640AI\"],\"Content length\":[\"\\u0637\\u0648\\u0644 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649\"],\"Create content\":[\"\\u0623\\u0646\\u0634\\u0626 \\u0645\\u062d\\u062a\\u0648\\u0649\"],\"Edit prompt\":[\"\\u062a\\u062d\\u0631\\u064a\\u0631 \\u0627\\u0644\\u0645\\u0637\\u0627\\u0644\\u0628\\u0629\"],\"Formal\":[\"\\u0631\\u064e\\u0633\\u0645\\u0650\\u064a\\u0651\"],\"Friendly\":[\"\\u0648\\u062f\\u0648\\u062f\"],\"Long\":[\"\\u0637\\u0648\\u064a\\u0644\"],\"Main topic\":[\"\\u0627\\u0644\\u0645\\u0648\\u0636\\u0648\\u0639 \\u0627\\u0644\\u0631\\u0626\\u064a\\u0633\\u064a\"],\"Medium\":[\"\\u0645\\u062a\\u0648\\u0633\\u0637\\u0629\"],\"Neutral\":[\"\\u062d\\u064a\\u0627\\u062f\\u064a\"],\"Personalize your content\":[\"\\u062a\\u062e\\u0635\\u064a\\u0635 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u062e\\u0627\\u0635 \\u0628\\u0643\"],\"Short\":[\"\\u0642\\u0635\\u064a\\u0631\"],\"There was an error with your request. Please try again.\":[\"\\u062d\\u062f\\u062b \\u062e\\u0637\\u0623 \\u0641\\u064a \\u0637\\u0644\\u0628\\u0643. \\u064a\\u0631\\u062c\\u0649 \\u0627\\u0644\\u0645\\u062d\\u0627\\u0648\\u0644\\u0629 \\u0645\\u0631\\u0629 \\u0623\\u062e\\u0631\\u0649.\"],\"Tone of voice\":[\"\\u0646\\u0628\\u0631\\u0629 \\u0627\\u0644\\u0635\\u0648\\u062a\"],\"Trustworthy\":[\"\\u062c\\u062f\\u064a\\u0631 \\u0628\\u0627\\u0644\\u062b\\u0642\\u0629\"],\"Use this content\":[\"\\u0627\\u0633\\u062a\\u062e\\u062f\\u0645 \\u0647\\u0630\\u0627 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649\"],\"What content do you want AI to create today?\":[\"\\u0645\\u0627 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u0630\\u064a \\u062a\\u0631\\u064a\\u062f \\u0623\\u0646 \\u064a\\u0646\\u0634\\u0626\\u0647 \\u0627\\u0644\\u0630\\u0643\\u0627\\u0621 \\u0627\\u0644\\u0627\\u0635\\u0637\\u0646\\u0627\\u0639\\u064a \\u0627\\u0644\\u064a\\u0648\\u0645\\u061f\"],\"Witty\":[\"\\u0628\\u0627\\u0631\\u0639\"],\"Write a motivational post about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0646\\u0634\\u0648\\u0631\\u064b\\u0627 \\u062a\\u062d\\u0641\\u064a\\u0632\\u064a\\u064b\\u0627 \\u0639\\u0646...\"],\"Write a recommendation list of...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0642\\u0627\\u0626\\u0645\\u0629 \\u062a\\u0648\\u0635\\u064a\\u0627\\u062a...\"],\"Write a step-by-step tutorial about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0628\\u0631\\u0646\\u0627\\u0645\\u062c\\u0627\\u064b \\u062a\\u0639\\u0644\\u064a\\u0645\\u064a\\u0627\\u064b \\u0645\\u0641\\u0635\\u0644\\u0627\\u064b \\u062e\\u0637\\u0648\\u0629 \\u0628\\u062e\\u0637\\u0648\\u0629 \\u062d\\u0648\\u0644...\"],\"Write a summary of...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0644\\u062e\\u0635\\u0627\\u064b \\u0644\\u0640...\"],\"Write an article about ...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0642\\u0627\\u0644\\u0627\\u064b \\u0639\\u0646 ...\"],\"Write promotional content about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u062d\\u062a\\u0648\\u0649 \\u062a\\u0631\\u0648\\u064a\\u062c\\u064a \\u0639\\u0646...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ro_RO-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":351,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ro_RO\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 :(((n%100>19)||(( n%100==0)&&(n!=0)))? 2 : 1));\"},\"AI Content Creator\":[\"AI Content Creator\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-tr_TR-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":318,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"tr_TR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"YZ \\u0130\\u00e7erik Olu\\u015fturucu\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_BR-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1519,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_BR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Adicionar uma imagem em meu conte\\u00fado\"],\"Content length\":[\"Tamanho do conte\\u00fado\"],\"Create content\":[\"Gerar conte\\u00fado\\n\"],\"Edit prompt\":[\"Editar prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amig\\u00e1vel\"],\"Long\":[\"Longo\"],\"Main topic\":[\"T\\u00f3pico principal\"],\"Medium\":[\"M\\u00e9dio\\n\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalize seu conte\\u00fado\"],\"Short\":[\"Curto\"],\"There was an error with your request. Please try again.\":[\"Ocorreu um erro em sua solicita\\u00e7\\u00e3o. Por favor, tente novamente.\"],\"Tone of voice\":[\"Tom de voz\"],\"Trustworthy\":[\"Confi\\u00e1vel\"],\"Use this content\":[\"Use este conte\\u00fado\"],\"What content do you want AI to create today?\":[\"Que conte\\u00fado voc\\u00ea quer que a IA crie hoje?\"],\"Witty\":[\"Divertido\"],\"Write a motivational post about...\":[\"Escreva uma postagem motivacional sobre...\"],\"Write a recommendation list of...\":[\"Escreva uma lista de recomenda\\u00e7\\u00f5es de...\"],\"Write a step-by-step tutorial about...\":[\"Escreva um tutorial passo a passo sobre...\"],\"Write a summary of...\":[\"Escreva um resumo de...\"],\"Write an article about ...\":[\"Escreva um artigo sobre ...\"],\"Write promotional content about...\":[\"Escreva conte\\u00fado promocional sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ko_KR-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":2036,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ko_KR\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\ub0b4 \\ucf58\\ud150\\uce20\\uc5d0 \\uc774\\ubbf8\\uc9c0 \\ucd94\\uac00\"],\"Content length\":[\"\\ucf58\\ud150\\uce20 \\uae38\\uc774\"],\"Create content\":[\"\\ucf58\\ud150\\uce20 \\uc0dd\\uc131\"],\"Edit prompt\":[\"\\ud3b8\\uc9d1 \\ud504\\ub86c\\ud504\\ud2b8\"],\"Formal\":[\"\\uacf5\\uc2dd\"],\"Friendly\":[\"\\uce5c\\uc808\"],\"Long\":[\"\\uae34\"],\"Main topic\":[\"\\uc8fc\\uc694 \\uc8fc\\uc81c\"],\"Medium\":[\"\\uc911\\uac04\"],\"Neutral\":[\"\\uc911\\ub9bd\"],\"Personalize your content\":[\"\\ucf58\\ud150\\uce20 \\uac1c\\uc778\\ud654\"],\"Short\":[\"\\uc9e7\\uc740\"],\"There was an error with your request. Please try again.\":[\"\\uc694\\uccad\\uc5d0 \\uc624\\ub958\\uac00 \\ubc1c\\uc0dd\\ud588\\uc2b5\\ub2c8\\ub2e4. \\ub2e4\\uc2dc \\uc2dc\\ub3c4\\ud574 \\uc8fc\\uc138\\uc694.\"],\"Tone of voice\":[\"\\ud1a4\\uc564\\ub9e4\\ub108\"],\"Trustworthy\":[\"\\uc2e0\\ub8b0\\ud560 \\uc218 \\uc788\\ub294\"],\"Use this content\":[\"\\uc774 \\ucf58\\ud150\\uce20 \\uc0ac\\uc6a9\"],\"What content do you want AI to create today?\":[\"\\ud604\\uc7ac \\uc778\\uacf5\\uc9c0\\ub2a5\\uc774 \\uc5b4\\ub5a4 \\ucf58\\ud150\\uce20\\ub97c \\ub9cc\\ub4e4\\uae30\\ub97c \\uc6d0\\ud558\\uc2dc\\ub098\\uc694?\"],\"Witty\":[\"\\uc704\\ud2b8\\uc788\\ub294\"],\"Write a motivational post about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ub3d9\\uae30 \\ubd80\\uc5ec \\uac8c\\uc2dc\\ubb3c\\uc744 \\uc791\\uc131\\ud558\\uc138\\uc694.\"],\"Write a recommendation list of...\":[\"\\ucd94\\ucc9c \\ubaa9\\ub85d \\uc791\\uc131\\ud558\\uae30...\"],\"Write a step-by-step tutorial about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ub2e8\\uacc4\\ubcc4 \\ud29c\\ud1a0\\ub9ac\\uc5bc\\uc744 \\uc791\\uc131\\ud558\\uc138\\uc694.\"],\"Write a summary of...\":[\"\\uc694\\uc57d \\uc791\\uc131\\ud558\\uae30...\"],\"Write an article about ...\":[\"\\uc5d0 \\ub300\\ud55c \\uae30\\uc0ac \\uc791\\uc131 ...\"],\"Write promotional content about...\":[\"\\ub2e4\\uc74c\\uc5d0 \\ub300\\ud55c \\ud64d\\ubcf4 \\ucf58\\ud150\\uce20 \\uc791\\uc131\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pl_PL-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1587,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pl_PL\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"Dodawanie obrazu wewn\\u0105trz tre\\u015bci\"],\"Content length\":[\"D\\u0142ugo\\u015b\\u0107 tre\\u015bci\"],\"Create content\":[\"Generuj tre\\u015b\\u0107\"],\"Edit prompt\":[\"Edytuj monit\"],\"Formal\":[\"Formalny\"],\"Friendly\":[\"Przyjazny\"],\"Long\":[\"D\\u0142ugi\"],\"Main topic\":[\"G\\u0142\\u00f3wny temat\"],\"Medium\":[\"\\u015aredni\"],\"Neutral\":[\"Neutralny\"],\"Personalize your content\":[\"Personalizacja tre\\u015bci\"],\"Short\":[\"Kr\\u00f3tko\"],\"There was an error with your request. Please try again.\":[\"Wyst\\u0105pi\\u0142 b\\u0142\\u0105d w \\u017c\\u0105daniu. Spr\\u00f3buj ponownie.\"],\"Tone of voice\":[\"Styl wypowiedzi\"],\"Trustworthy\":[\"Godny zaufania\"],\"Use this content\":[\"U\\u017cyj tej zawarto\\u015bci\"],\"What content do you want AI to create today?\":[\"Jakie tre\\u015bci ma dzi\\u015b tworzy\\u0107 sztuczna inteligencja?\"],\"Witty\":[\"Zabawny\"],\"Write a motivational post about...\":[\"Napisz motywuj\\u0105cy post o...\"],\"Write a recommendation list of...\":[\"Napisz list\\u0119 rekomendacji...\"],\"Write a step-by-step tutorial about...\":[\"Napisz poradnik krok po kroku na temat...\"],\"Write a summary of...\":[\"Napisz podsumowanie...\"],\"Write an article about ...\":[\"Napisz artyku\\u0142 o ...\"],\"Write promotional content about...\":[\"Pisz tre\\u015bci promocyjne o...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-th-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":3635,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"th\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u0e40\\u0e1e\\u0e34\\u0e48\\u0e21\\u0e23\\u0e39\\u0e1b\\u0e20\\u0e32\\u0e1e\\u0e20\\u0e32\\u0e22\\u0e43\\u0e19\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e02\\u0e2d\\u0e07\\u0e09\\u0e31\\u0e19\"],\"AI Content Creator\":[\"\\u0e15\\u0e31\\u0e27\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32 AI\"],\"Content length\":[\"\\u0e04\\u0e27\\u0e32\\u0e21\\u0e22\\u0e32\\u0e27\\u0e02\\u0e2d\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\"],\"Create content\":[\"\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\"],\"Edit prompt\":[\"\\u0e41\\u0e01\\u0e49\\u0e44\\u0e02\\u0e04\\u0e33\\u0e41\\u0e19\\u0e30\\u0e19\\u0e33\"],\"Formal\":[\"\\u0e17\\u0e32\\u0e07\\u0e01\\u0e32\\u0e23\"],\"Friendly\":[\"\\u0e40\\u0e1b\\u0e47\\u0e19\\u0e01\\u0e31\\u0e19\\u0e40\\u0e2d\\u0e07\"],\"Long\":[\"\\u0e22\\u0e32\\u0e27\"],\"Main topic\":[\"\\u0e2b\\u0e31\\u0e27\\u0e02\\u0e49\\u0e2d\\u0e2b\\u0e25\\u0e31\\u0e01\"],\"Medium\":[\"\\u0e1b\\u0e32\\u0e19\\u0e01\\u0e25\\u0e32\\u0e07\"],\"Neutral\":[\"\\u0e40\\u0e1b\\u0e47\\u0e19\\u0e01\\u0e25\\u0e32\\u0e07\"],\"Personalize your content\":[\"\\u0e1b\\u0e23\\u0e31\\u0e1a\\u0e41\\u0e15\\u0e48\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e02\\u0e2d\\u0e07\\u0e04\\u0e38\\u0e13\"],\"Short\":[\"\\u0e2a\\u0e31\\u0e49\\u0e19\"],\"There was an error with your request. Please try again.\":[\"\\u0e21\\u0e35\\u0e02\\u0e49\\u0e2d\\u0e1c\\u0e34\\u0e14\\u0e1e\\u0e25\\u0e32\\u0e14\\u0e43\\u0e19\\u0e01\\u0e32\\u0e23\\u0e23\\u0e49\\u0e2d\\u0e07\\u0e02\\u0e2d\\u0e02\\u0e2d\\u0e07\\u0e04\\u0e38\\u0e13 \\u0e01\\u0e23\\u0e38\\u0e13\\u0e32\\u0e25\\u0e2d\\u0e07\\u0e2d\\u0e35\\u0e01\\u0e04\\u0e23\\u0e31\\u0e49\\u0e07\"],\"Tone of voice\":[\"\\u0e42\\u0e17\\u0e19\\u0e20\\u0e32\\u0e29\\u0e32\"],\"Trustworthy\":[\"\\u0e40\\u0e0a\\u0e37\\u0e48\\u0e2d\\u0e16\\u0e37\\u0e2d\\u0e44\\u0e14\\u0e49\"],\"Use this content\":[\"\\u0e43\\u0e0a\\u0e49\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e15\\u0e48\\u0e2d\\u0e44\\u0e1b\\u0e19\\u0e35\\u0e49\"],\"What content do you want AI to create today?\":[\"\\u0e04\\u0e38\\u0e13\\u0e15\\u0e49\\u0e2d\\u0e07\\u0e01\\u0e32\\u0e23\\u0e43\\u0e2b\\u0e49 AI \\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e2d\\u0e30\\u0e44\\u0e23\\u0e43\\u0e19\\u0e27\\u0e31\\u0e19\\u0e19\\u0e35\\u0e49?\"],\"Witty\":[\"\\u0e40\\u0e09\\u0e25\\u0e35\\u0e22\\u0e27\\u0e09\\u0e25\\u0e32\\u0e14\"],\"Write a motivational post about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e42\\u0e1e\\u0e2a\\u0e15\\u0e4c\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e41\\u0e23\\u0e07\\u0e1a\\u0e31\\u0e19\\u0e14\\u0e32\\u0e25\\u0e43\\u0e08\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"],\"Write a recommendation list of...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e23\\u0e32\\u0e22\\u0e01\\u0e32\\u0e23\\u0e04\\u0e33\\u0e41\\u0e19\\u0e30\\u0e19\\u0e33\\u0e02\\u0e2d\\u0e07...\"],\"Write a step-by-step tutorial about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e04\\u0e39\\u0e48\\u0e21\\u0e37\\u0e2d\\u0e41\\u0e1a\\u0e1a\\u0e02\\u0e31\\u0e49\\u0e19\\u0e15\\u0e2d\\u0e19\\u0e15\\u0e48\\u0e2d\\u0e02\\u0e31\\u0e49\\u0e19\\u0e15\\u0e2d\\u0e19\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"],\"Write a summary of...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e2a\\u0e23\\u0e38\\u0e1b\\u0e02\\u0e2d\\u0e07...\"],\"Write an article about ...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e1a\\u0e17\\u0e04\\u0e27\\u0e32\\u0e21\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a ...\"],\"Write promotional content about...\":[\"\\u0e40\\u0e02\\u0e35\\u0e22\\u0e19\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32\\u0e2a\\u0e48\\u0e07\\u0e40\\u0e2a\\u0e23\\u0e34\\u0e21\\u0e01\\u0e32\\u0e23\\u0e02\\u0e32\\u0e22\\u0e40\\u0e01\\u0e35\\u0e48\\u0e22\\u0e27\\u0e01\\u0e31\\u0e1a...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-hi_IN-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":3497,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-04-28 01:19+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"hi_IN\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u092e\\u0947\\u0930\\u0947 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092e\\u0947\\u0902 \\u0907\\u092e\\u0947\\u091c \\u091c\\u094b\\u095c\\u0947\\u0902\"],\"AI Content Creator\":[\"AI \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u094d\\u0930\\u093f\\u090f\\u091f\\u0930\"],\"Content length\":[\"\\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u0940 \\u0932\\u0902\\u092c\\u093e\\u0908\"],\"Create content\":[\"\\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092c\\u0928\\u093e\\u090f\\u0902\"],\"Edit prompt\":[\"\\u092a\\u094d\\u0930\\u0949\\u092e\\u094d\\u092a\\u094d\\u091f \\u090f\\u0921\\u093f\\u091f \\u0915\\u0930\\u0947\\u0902\"],\"Formal\":[\"\\u0914\\u092a\\u091a\\u093e\\u0930\\u093f\\u0915\"],\"Friendly\":[\"\\u092e\\u093f\\u0924\\u094d\\u0930\\u0924\\u093e\\u092a\\u0942\\u0930\\u094d\\u0923\"],\"Long\":[\"\\u0932\\u0902\\u092c\\u093e\"],\"Main topic\":[\"\\u092e\\u0941\\u0916\\u094d\\u092f \\u0935\\u093f\\u0937\\u092f\"],\"Medium\":[\"\\u092e\\u0927\\u094d\\u092f\\u092e\"],\"Neutral\":[\"\\u0924\\u091f\\u0938\\u094d\\u0925\"],\"Personalize your content\":[\"\\u0905\\u092a\\u0928\\u093e \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092a\\u0930\\u094d\\u0938\\u0928\\u0932\\u093e\\u0907\\u095b \\u0915\\u0930\\u0947\\u0902\"],\"Short\":[\"\\u0938\\u0902\\u0915\\u094d\\u0937\\u093f\\u092a\\u094d\\u0924\"],\"There was an error with your request. Please try again.\":[\"\\u0906\\u092a\\u0915\\u0947 \\u0905\\u0928\\u0941\\u0930\\u094b\\u0927 \\u092e\\u0947\\u0902 \\u0924\\u094d\\u0930\\u0941\\u091f\\u093f \\u092a\\u0947\\u0936 \\u0906\\u0908 \\u0939\\u0948\\u0964 \\u0915\\u0943\\u092a\\u092f\\u093e \\u0926\\u094b\\u092c\\u093e\\u0930\\u093e  \\u092a\\u094d\\u0930\\u092f\\u093e\\u0938 \\u0915\\u0930\\u0947\\u0902\\u0964\"],\"Tone of voice\":[\"\\u092c\\u094b\\u0932\\u0940 \\u0915\\u093e \\u0932\\u0939\\u095b\\u093e\"],\"Trustworthy\":[\"\\u092d\\u0930\\u094b\\u0938\\u0947\\u092e\\u0902\\u0926\"],\"Use this content\":[\"\\u0907\\u0938 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u093e \\u0907\\u0938\\u094d\\u0924\\u0947\\u092e\\u093e\\u0932 \\u0915\\u0930\\u0947\\u0902\"],\"What content do you want AI to create today?\":[\"\\u0906\\u091c \\u0906\\u092a AI \\u0938\\u0947 \\u0915\\u094c\\u0928\\u0938\\u093e \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092c\\u0928\\u0935\\u093e\\u0928\\u093e \\u091a\\u093e\\u0939\\u0924\\u0947 \\u0939\\u0948\\u0902?\"],\"Witty\":[\"\\u0935\\u093f\\u0928\\u094b\\u0926\\u092a\\u0942\\u0930\\u094d\\u0923\"],\"Write a motivational post about...\":[\"\\u0907\\u0938 \\u0935\\u093f\\u0937\\u092f \\u092a\\u0930 \\u092a\\u094d\\u0930\\u0947\\u0930\\u0923\\u093e\\u0924\\u094d\\u092e\\u0915 \\u092a\\u094b\\u0938\\u094d\\u091f \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a recommendation list of...\":[\"\\u0938\\u0941\\u091d\\u093e\\u0935\\u094b\\u0902 \\u0915\\u0940 \\u0938\\u0942\\u091a\\u0940 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a step-by-step tutorial about...\":[\"\\u0938\\u094d\\u091f\\u0947\\u092a-\\u092c\\u093e\\u092f-\\u0938\\u094d\\u091f\\u0947\\u092a \\u091f\\u094d\\u092f\\u0942\\u091f\\u094b\\u0930\\u093f\\u092f\\u0932 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a summary of...\":[\"\\u0938\\u093e\\u0930\\u093e\\u0902\\u0936 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write an article about ...\":[\"\\u0932\\u0947\\u0916 \\u0932\\u093f\\u0916\\u0947\\u0902 ...\"],\"Write promotional content about...\":[\"\\u092a\\u094d\\u0930\\u091a\\u093e\\u0930\\u093e\\u0924\\u094d\\u092e\\u0915 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0932\\u093f\\u0916\\u0947\\u0902...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-he_IL-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":2753,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"he_IL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u05d4\\u05d5\\u05e1\\u05e3 \\u05ea\\u05de\\u05d5\\u05e0\\u05d4 \\u05d1\\u05ea\\u05d5\\u05da \\u05d4\\u05ea\\u05d5\\u05db\\u05df \\u05e9\\u05dc\\u05d9\"],\"AI Content Creator\":[\"\\u05d9\\u05d5\\u05e6\\u05e8 \\u05ea\\u05d5\\u05db\\u05df AI\"],\"Content length\":[\"\\u05d0\\u05d5\\u05e8\\u05da \\u05ea\\u05d5\\u05db\\u05df\"],\"Create content\":[\"\\u05e6\\u05d5\\u05e8 \\u05ea\\u05d5\\u05db\\u05df\"],\"Edit prompt\":[\"\\u05e2\\u05e8\\u05d5\\u05da \\u05d4\\u05d5\\u05d3\\u05e2\\u05d4\"],\"Formal\":[\"\\u05e8\\u05e9\\u05de\\u05d9\"],\"Friendly\":[\"\\u05d7\\u05d1\\u05e8\\u05d5\\u05ea\\u05d9\"],\"Long\":[\"\\u05d0\\u05e8\\u05d5\\u05da\"],\"Main topic\":[\"\\u05e0\\u05d5\\u05e9\\u05d0 \\u05e2\\u05d9\\u05e7\\u05e8\\u05d9\"],\"Medium\":[\"\\u05d1\\u05d9\\u05e0\\u05d5\\u05e0\\u05d9\"],\"Neutral\":[\"\\u05e0\\u05d9\\u05d8\\u05e8\\u05dc\\u05d9\"],\"Personalize your content\":[\"\\u05d4\\u05ea\\u05d0\\u05dd \\u05d0\\u05d9\\u05e9\\u05d9\\u05ea \\u05d0\\u05ea \\u05d4\\u05ea\\u05d5\\u05db\\u05df \\u05e9\\u05dc\\u05da\"],\"Short\":[\"\\u05e7\\u05e6\\u05e8\"],\"There was an error with your request. Please try again.\":[\"\\u05d0\\u05d9\\u05e8\\u05e2\\u05d4 \\u05e9\\u05d2\\u05d9\\u05d0\\u05d4 \\u05d1\\u05d1\\u05e7\\u05e9\\u05ea\\u05da. \\u05d0\\u05e0\\u05d0 \\u05e0\\u05e1\\u05d4 \\u05e9\\u05d5\\u05d1.\"],\"Tone of voice\":[\"\\u05d8\\u05d5\\u05df \\u05d4\\u05d3\\u05d9\\u05d1\\u05d5\\u05e8\"],\"Trustworthy\":[\"\\u05d0\\u05de\\u05d9\\u05df\"],\"Use this content\":[\"\\u05d4\\u05e9\\u05ea\\u05de\\u05e9 \\u05d1\\u05ea\\u05d5\\u05db\\u05df \\u05d6\\u05d4\"],\"What content do you want AI to create today?\":[\"\\u05d0\\u05d9\\u05d6\\u05d4 \\u05ea\\u05d5\\u05db\\u05df \\u05d0\\u05ea\\u05d4 \\u05e8\\u05d5\\u05e6\\u05d4 \\u05e9\\u05d4-AI \\u05d9\\u05d9\\u05e6\\u05d5\\u05e8 \\u05d4\\u05d9\\u05d5\\u05dd?\"],\"Witty\":[\"\\u05e9\\u05e0\\u05d5\\u05df\"],\"Write a motivational post about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e4\\u05d5\\u05e1\\u05d8 \\u05de\\u05d5\\u05d8\\u05d9\\u05d1\\u05e6\\u05d9\\u05d5\\u05e0\\u05d9 \\u05e2\\u05dc...\"],\"Write a recommendation list of...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e8\\u05e9\\u05d9\\u05de\\u05ea \\u05d4\\u05de\\u05dc\\u05e6\\u05d5\\u05ea \\u05e9\\u05dc...\"],\"Write a step-by-step tutorial about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05de\\u05d3\\u05e8\\u05d9\\u05da \\u05de\\u05e4\\u05d5\\u05e8\\u05d8 \\u05e9\\u05dc\\u05d1 \\u05d0\\u05d7\\u05e8 \\u05e9\\u05dc\\u05d1 \\u05e2\\u05dc...\"],\"Write a summary of...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05e1\\u05d9\\u05db\\u05d5\\u05dd \\u05e9\\u05dc...\"],\"Write an article about ...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05de\\u05d0\\u05de\\u05e8 \\u05e2\\u05dc ...\"],\"Write promotional content about...\":[\"\\u05db\\u05ea\\u05d5\\u05d1 \\u05ea\\u05d5\\u05db\\u05df \\u05e4\\u05e8\\u05e1\\u05d5\\u05de\\u05d9 \\u05e2\\u05dc...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_MX-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1487,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_MX\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar aviso\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalice sus contenidos\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en su solicitud. Por favor, int\\u00e9ntelo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Utilizar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenidos quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe un post motivador sobre...\"],\"Write a recommendation list of...\":[\"Escriba una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escriba un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Redactar contenidos promocionales sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ar-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":3185,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ar\",\"plural-forms\":\"nplurals=6; plural=n==0 ? 0 : n==1 ? 1 : n==2 ? 2 : n%100 >= 3 && n%100<=10 ? 3 : n%100 >= 11 && n%100<=99 ? 4 : 5;\"},\"Add an image inside my content\":[\"\\u0625\\u0636\\u0627\\u0641\\u0629 \\u0635\\u0648\\u0631\\u0629 \\u062f\\u0627\\u062e\\u0644 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u062e\\u0627\\u0635 \\u0628\\u064a\"],\"Content length\":[\"\\u0637\\u0648\\u0644 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649\"],\"Create content\":[\"\\u0623\\u0646\\u0634\\u0626 \\u0645\\u062d\\u062a\\u0648\\u0649\"],\"Edit prompt\":[\"\\u062a\\u062d\\u0631\\u064a\\u0631 \\u0627\\u0644\\u0645\\u0637\\u0627\\u0644\\u0628\\u0629\"],\"Formal\":[\"\\u0631\\u064e\\u0633\\u0645\\u0650\\u064a\\u0651\"],\"Friendly\":[\"\\u0648\\u062f\\u0648\\u062f\"],\"Long\":[\"\\u0637\\u0648\\u064a\\u0644\"],\"Main topic\":[\"\\u0627\\u0644\\u0645\\u0648\\u0636\\u0648\\u0639 \\u0627\\u0644\\u0631\\u0626\\u064a\\u0633\\u064a\"],\"Medium\":[\"\\u0645\\u062a\\u0648\\u0633\\u0637\\u0629\"],\"Neutral\":[\"\\u062d\\u064a\\u0627\\u062f\\u064a\"],\"Personalize your content\":[\"\\u062a\\u062e\\u0635\\u064a\\u0635 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u062e\\u0627\\u0635 \\u0628\\u0643\"],\"Short\":[\"\\u0642\\u0635\\u064a\\u0631\"],\"There was an error with your request. Please try again.\":[\"\\u062d\\u062f\\u062b \\u062e\\u0637\\u0623 \\u0641\\u064a \\u0637\\u0644\\u0628\\u0643. \\u064a\\u0631\\u062c\\u0649 \\u0627\\u0644\\u0645\\u062d\\u0627\\u0648\\u0644\\u0629 \\u0645\\u0631\\u0629 \\u0623\\u062e\\u0631\\u0649.\"],\"Tone of voice\":[\"\\u0646\\u0628\\u0631\\u0629 \\u0627\\u0644\\u0635\\u0648\\u062a\"],\"Trustworthy\":[\"\\u062c\\u062f\\u064a\\u0631 \\u0628\\u0627\\u0644\\u062b\\u0642\\u0629\"],\"Use this content\":[\"\\u0627\\u0633\\u062a\\u062e\\u062f\\u0645 \\u0647\\u0630\\u0627 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649\"],\"What content do you want AI to create today?\":[\"\\u0645\\u0627 \\u0627\\u0644\\u0645\\u062d\\u062a\\u0648\\u0649 \\u0627\\u0644\\u0630\\u064a \\u062a\\u0631\\u064a\\u062f \\u0623\\u0646 \\u064a\\u0646\\u0634\\u0626\\u0647 \\u0627\\u0644\\u0630\\u0643\\u0627\\u0621 \\u0627\\u0644\\u0627\\u0635\\u0637\\u0646\\u0627\\u0639\\u064a \\u0627\\u0644\\u064a\\u0648\\u0645\\u061f\"],\"Witty\":[\"\\u0628\\u0627\\u0631\\u0639\"],\"Write a motivational post about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0646\\u0634\\u0648\\u0631\\u064b\\u0627 \\u062a\\u062d\\u0641\\u064a\\u0632\\u064a\\u064b\\u0627 \\u0639\\u0646...\"],\"Write a recommendation list of...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0642\\u0627\\u0626\\u0645\\u0629 \\u062a\\u0648\\u0635\\u064a\\u0627\\u062a...\"],\"Write a step-by-step tutorial about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0628\\u0631\\u0646\\u0627\\u0645\\u062c\\u0627\\u064b \\u062a\\u0639\\u0644\\u064a\\u0645\\u064a\\u0627\\u064b \\u0645\\u0641\\u0635\\u0644\\u0627\\u064b \\u062e\\u0637\\u0648\\u0629 \\u0628\\u062e\\u0637\\u0648\\u0629 \\u062d\\u0648\\u0644...\"],\"Write a summary of...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0644\\u062e\\u0635\\u0627\\u064b \\u0644\\u0640...\"],\"Write an article about ...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u0642\\u0627\\u0644\\u0627\\u064b \\u0639\\u0646 ...\"],\"Write promotional content about...\":[\"\\u0627\\u0643\\u062a\\u0628 \\u0645\\u062d\\u062a\\u0648\\u0649 \\u062a\\u0631\\u0648\\u064a\\u062c\\u064a \\u0639\\u0646...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pt_PT-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1569,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pt_PT\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Adicionar uma imagem ao meu conte\\u00fado\"],\"AI Content Creator\":[\"Criador de Conte\\u00fado IA\"],\"Content length\":[\"Comprimento do conte\\u00fado\"],\"Create content\":[\"Gerar conte\\u00fado\"],\"Edit prompt\":[\"Editar prompt\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Intuitivo\"],\"Long\":[\"Longo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"M\\u00e9dio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalize o seu conte\\u00fado\"],\"Short\":[\"Curto\"],\"There was an error with your request. Please try again.\":[\"Ocorreu um erro no seu pedido. Por favor, tente novamente.\"],\"Tone of voice\":[\"Tom de voz\"],\"Trustworthy\":[\"Fi\\u00e1vel\"],\"Use this content\":[\"Utilizar este conte\\u00fado\"],\"What content do you want AI to create today?\":[\"Que conte\\u00fados pretende que a IA crie hoje?\"],\"Witty\":[\"Inteligente\"],\"Write a motivational post about...\":[\"Escrever uma publica\\u00e7\\u00e3o motivacional sobre...\"],\"Write a recommendation list of...\":[\"Elaborar uma lista de recomenda\\u00e7\\u00f5es de...\"],\"Write a step-by-step tutorial about...\":[\"Escrever um tutorial passo a passo sobre...\"],\"Write a summary of...\":[\"Escrever um resumo de...\"],\"Write an article about ...\":[\"Escrever um artigo sobre ...\"],\"Write promotional content about...\":[\"Escrever conte\\u00fados promocionais sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-de_DE-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1590,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"de_DE\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Ein Bild innerhalb meines Inhalts hinzuf\\u00fcgen\"],\"AI Content Creator\":[\"KI-Inhaltsersteller\"],\"Content length\":[\"L\\u00e4nge des Inhalts\"],\"Create content\":[\"Inhalt erstellen\"],\"Edit prompt\":[\"Eingabeaufforderung bearbeiten\"],\"Formal\":[\"Formell\"],\"Friendly\":[\"Freundlich\"],\"Long\":[\"Lang\"],\"Main topic\":[\"Hauptthema\"],\"Medium\":[\"Mittel\"],\"Neutral\":[\"Neutral\"],\"Personalize your content\":[\"Personalisiere deinen Inhalt\"],\"Short\":[\"Kurz\"],\"There was an error with your request. Please try again.\":[\"Es ist ein Fehler bei deiner Anfrage aufgetreten. Bitte versuche es noch einmal.\"],\"Tone of voice\":[\"Tonfall\"],\"Trustworthy\":[\"Vertrauensw\\u00fcrdig\"],\"Use this content\":[\"Diesen Inhalt verwenden\"],\"What content do you want AI to create today?\":[\"Welche Inhalte soll die KI heute erstellen?\"],\"Witty\":[\"Witzig\"],\"Write a motivational post about...\":[\"Schreibe einen motivierenden Beitrag \\u00fcber...\"],\"Write a recommendation list of...\":[\"Schreibe eine Empfehlungsliste mit...\"],\"Write a step-by-step tutorial about...\":[\"Schreibe eine Schritt-f\\u00fcr-Schritt-Anleitung \\u00fcber...\"],\"Write a summary of...\":[\"Schreibe eine Zusammenfassung von...\"],\"Write an article about ...\":[\"Schreibe einen Artikel \\u00fcber ...\"],\"Write promotional content about...\":[\"Schreibe Werbeinhalte \\u00fcber...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-vi-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":311,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"vi\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"Tr\\u00ecnh t\\u1ea1o n\\u1ed9i dung AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-id_ID-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1427,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"id_ID\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"Menambahkan gambar di dalam konten saya\"],\"Content length\":[\"Panjang konten\"],\"Create content\":[\"Buat konten\"],\"Edit prompt\":[\"Permintaan pengeditan\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Ramah\"],\"Long\":[\"Panjang\"],\"Main topic\":[\"Topik utama\"],\"Medium\":[\"Sedang\"],\"Neutral\":[\"Netral\"],\"Personalize your content\":[\"Mempersonalisasi konten Anda\"],\"Short\":[\"Pendek\"],\"There was an error with your request. Please try again.\":[\"Ada kesalahan dengan permintaan Anda. Silakan coba lagi.\"],\"Tone of voice\":[\"Karakter brand\"],\"Trustworthy\":[\"Tepercaya\"],\"Use this content\":[\"Gunakan konten ini\"],\"What content do you want AI to create today?\":[\"Konten apa yang Anda ingin AI buat hari ini?\"],\"Witty\":[\"Jenaka\"],\"Write a motivational post about...\":[\"Tulislah sebuah postingan motivasi tentang...\"],\"Write a recommendation list of...\":[\"Tulis daftar rekomendasi dari...\"],\"Write a step-by-step tutorial about...\":[\"Tulis tutorial langkah demi langkah tentang...\"],\"Write a summary of...\":[\"Tuliskan ringkasan tentang...\"],\"Write an article about ...\":[\"Tulis artikel tentang ...\"],\"Write promotional content about...\":[\"Tulis konten promosi tentang...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-ja-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":2459,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"ja\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u5185\\u306b\\u753b\\u50cf\\u3092\\u8ffd\\u52a0\\u3059\\u308b\"],\"Content length\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306e\\u9577\\u3055\"],\"Create content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u4f5c\\u6210\"],\"Edit prompt\":[\"\\u7de8\\u96c6\\u30d7\\u30ed\\u30f3\\u30d7\\u30c8\"],\"Formal\":[\"\\u30d5\\u30a9\\u30fc\\u30de\\u30eb\"],\"Friendly\":[\"\\u30d5\\u30ec\\u30f3\\u30c9\\u30ea\\u30fc\"],\"Long\":[\"\\u9577\\u3044\"],\"Main topic\":[\"\\u4e3b\\u306a\\u30c8\\u30d4\\u30c3\\u30af\"],\"Medium\":[\"\\u4e2d\\u7a0b\\u5ea6\"],\"Neutral\":[\"\\u30cb\\u30e5\\u30fc\\u30c8\\u30e9\\u30eb\"],\"Personalize your content\":[\"\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306e\\u30d1\\u30fc\\u30bd\\u30ca\\u30e9\\u30a4\\u30ba\"],\"Short\":[\"\\u77ed\\u3044\"],\"There was an error with your request. Please try again.\":[\"\\u30ea\\u30af\\u30a8\\u30b9\\u30c8\\u306b\\u30a8\\u30e9\\u30fc\\u304c\\u767a\\u751f\\u3057\\u307e\\u3057\\u305f\\u3002\\u3082\\u3046\\u4e00\\u5ea6\\u304a\\u8a66\\u3057\\u304f\\u3060\\u3055\\u3044\\u3002\"],\"Tone of voice\":[\"\\u6587\\u7ae0\\u306e\\u30c8\\u30fc\\u30f3\"],\"Trustworthy\":[\"\\u8aa0\\u5b9f\"],\"Use this content\":[\"\\u3053\\u306e\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u4f7f\\u7528\\u3059\\u308b\"],\"What content do you want AI to create today?\":[\"\\u4eca\\u3001AI\\u306b\\u4f5c\\u3063\\u3066\\u307b\\u3057\\u3044\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u306f\\uff1f\"],\"Witty\":[\"\\u8efd\\u5999\"],\"Write a motivational post about...\":[\"\\u3084\\u308b\\u6c17\\u3092\\u8d77\\u3053\\u3055\\u305b\\u308b\\u8a18\\u4e8b\\u3092\\u66f8\\u3053\\u3046...\"],\"Write a recommendation list of...\":[\"\\u63a8\\u85a6\\u30ea\\u30b9\\u30c8\\u3092\\u66f8\\u304f\"],\"Write a step-by-step tutorial about...\":[\"\\u3053\\u306e\\u30c1\\u30e5\\u30fc\\u30c8\\u30ea\\u30a2\\u30eb\\u3067\\u306f\\u3001\\u6b21\\u306e\\u30b9\\u30c6\\u30c3\\u30d7\\u306b\\u9032\\u3080\\u305f\\u3081\\u306e\\u30b9\\u30c6\\u30c3\\u30d7\\u30d0\\u30a4\\u30b9\\u30c6\\u30c3\\u30d7\\u306e\\u30c1\\u30e5\\u30fc\\u30c8\\u30ea\\u30a2\\u30eb\\u3092\\u8a18\\u8ff0\\u3057\\u307e\\u3059\\u3002\"],\"Write a summary of...\":[\"\\u8981\\u7d04\\u3092\\u66f8\\u304f...\"],\"Write an article about ...\":[\"\\u306b\\u3064\\u3044\\u3066\\u306e\\u8a18\\u4e8b\\u3092\\u66f8\\u304f...\"],\"Write promotional content about...\":[\"...\\u306b\\u3064\\u3044\\u3066\\u306e\\u30d7\\u30ed\\u30e2\\u30fc\\u30b7\\u30e7\\u30f3\\u30fb\\u30b3\\u30f3\\u30c6\\u30f3\\u30c4\\u3092\\u66f8\\u304f\\u3002\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-th-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":368,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"th\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"AI Content Creator\":[\"\\u0e15\\u0e31\\u0e27\\u0e2a\\u0e23\\u0e49\\u0e32\\u0e07\\u0e40\\u0e19\\u0e37\\u0e49\\u0e2d\\u0e2b\\u0e32 AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-fr_FR-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1526,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"fr_FR\",\"plural-forms\":\"nplurals=2; plural=n > 1;\"},\"Add an image inside my content\":[\"Ajouter une image dans mon contenu\"],\"Content length\":[\"Longueur du contenu\"],\"Create content\":[\"Cr\\u00e9er du contenu\"],\"Edit prompt\":[\"Editer l'invite\"],\"Formal\":[\"Formel\"],\"Friendly\":[\"Convivial\"],\"Long\":[\"Long\"],\"Main topic\":[\"Th\\u00e8me principal\"],\"Medium\":[\"Moyen\"],\"Neutral\":[\"Neutre\"],\"Personalize your content\":[\"Personnalisez votre contenu\"],\"Short\":[\"Court\"],\"There was an error with your request. Please try again.\":[\"Une erreur s'est produite dans votre demande. Veuillez r\\u00e9essayer.\"],\"Tone of voice\":[\"Ton de r\\u00e9daction\"],\"Trustworthy\":[\"Fiable\"],\"Use this content\":[\"Utiliser ce contenu\"],\"What content do you want AI to create today?\":[\"Quel contenu voulez-vous que l'IA cr\\u00e9e aujourd'hui ?\"],\"Witty\":[\"Dr\\u00f4le\"],\"Write a motivational post about...\":[\"R\\u00e9diger un billet de motivation sur...\"],\"Write a recommendation list of...\":[\"R\\u00e9digez une liste de recommandations...\"],\"Write a step-by-step tutorial about...\":[\"R\\u00e9diger un tutoriel \\u00e9tape par \\u00e9tape sur...\"],\"Write a summary of...\":[\"R\\u00e9digez un r\\u00e9sum\\u00e9 de...\"],\"Write an article about ...\":[\"R\\u00e9digez un article sur ...\"],\"Write promotional content about...\":[\"R\\u00e9diger du contenu promotionnel sur...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-de_DE-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":302,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"de_DE\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"KI-Inhaltsersteller\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-lt_LT-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1744,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"lt_LT\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"Add an image inside my content\":[\"\\u012etraukti paveiksl\\u0117l\\u012f \\u012f turin\\u012f\"],\"Content length\":[\"Turinio ilgis\"],\"Create content\":[\"Kurti turin\\u012f\"],\"Edit prompt\":[\"Redaguoti raginim\\u0105\"],\"Formal\":[\"Formalus\"],\"Friendly\":[\"Draugi\\u0161kas\"],\"Long\":[\"Ilgas\"],\"Main topic\":[\"Pagrindin\\u0117 tema\"],\"Medium\":[\"Vidutini\\u0161kai\"],\"Neutral\":[\"Neutralus\"],\"Personalize your content\":[\"Personalizuokite turin\\u012f\"],\"Short\":[\"Trumpas\"],\"There was an error with your request. Please try again.\":[\"J\\u016bs\\u0173 u\\u017eklausoje \\u012fvyko klaida. Bandykite dar kart\\u0105.\"],\"Tone of voice\":[\"Balso tonas\"],\"Trustworthy\":[\"Patikimas\"],\"Use this content\":[\"Naudokite \\u0161\\u012f turin\\u012f\"],\"What content do you want AI to create today?\":[\"Kok\\u012f turin\\u012f norite, kad dirbtinis intelektas sukurt\\u0173 \\u0161iandien?\"],\"Witty\":[\"\\u0160maik\\u0161tus\"],\"Write a motivational post about...\":[\"Para\\u0161ykite motyvacin\\u012f prane\\u0161im\\u0105 apie...\"],\"Write a recommendation list of...\":[\"Para\\u0161ykite rekomendacin\\u012f s\\u0105ra\\u0161\\u0105...\"],\"Write a step-by-step tutorial about...\":[\"Para\\u0161ykite \\u017eingsnis po \\u017eingsnio vadov\\u0117l\\u012f apie...\"],\"Write a summary of...\":[\"Para\\u0161ykite santrauk\\u0105 apie...\"],\"Write an article about ...\":[\"Para\\u0161ykite straipsn\\u012f apie ...\"],\"Write promotional content about...\":[\"Ra\\u0161ykite reklamin\\u012f turin\\u012f apie...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-fr_FR-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":309,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"fr_FR\",\"plural-forms\":\"nplurals=2; plural=n > 1;\"},\"AI Content Creator\":[\"Cr\\u00e9ateur de contenu IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-zh_CN-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1660,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"zh_CN\",\"plural-forms\":\"nplurals=1; plural=0;\"},\"Add an image inside my content\":[\"\\u5728\\u6211\\u7684\\u5185\\u5bb9\\u4e2d\\u6dfb\\u52a0\\u56fe\\u50cf\"],\"Content length\":[\"\\u5185\\u5bb9\\u957f\\u5ea6\"],\"Create content\":[\"\\u521b\\u5efa\\u5185\\u5bb9 \"],\"Edit prompt\":[\"\\u7f16\\u8f91\\u63d0\\u793a\"],\"Formal\":[\"\\u6b63\\u5f0f\"],\"Friendly\":[\"\\u53cb\\u597d\\u7684\"],\"Long\":[\"\\u957f\"],\"Main topic\":[\"\\u4e3b\\u8981\\u8bae\\u9898\"],\"Medium\":[\"\\u4e00\\u822c\"],\"Neutral\":[\"\\u6b63\\u5e38\"],\"Personalize your content\":[\"\\u4e2a\\u6027\\u5316\\u60a8\\u7684\\u5185\\u5bb9\"],\"Short\":[\"\\u77ed\"],\"There was an error with your request. Please try again.\":[\"\\u60a8\\u7684\\u8bf7\\u6c42\\u51fa\\u73b0\\u9519\\u8bef\\u3002\\u8bf7\\u91cd\\u8bd5\\u3002\"],\"Tone of voice\":[\"\\u8bed\\u6c14\"],\"Trustworthy\":[\"\\u503c\\u5f97\\u4fe1\\u8d56\"],\"Use this content\":[\"\\u4f7f\\u7528\\u6b64\\u5185\\u5bb9\"],\"What content do you want AI to create today?\":[\"\\u4eca\\u5929\\uff0c\\u60a8\\u5e0c\\u671b\\u4eba\\u5de5\\u667a\\u80fd\\u521b\\u5efa\\u54ea\\u4e9b\\u5185\\u5bb9\\uff1f\"],\"Witty\":[\"\\u6709\\u8da3\\u7684\"],\"Write a motivational post about...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write a recommendation list of...\":[\"\\u5199\\u4e00\\u4efd\\u63a8\\u8350\\u6e05\\u5355\\uff0c\\u5217\\u51fa...\"],\"Write a step-by-step tutorial about...\":[\"\\u64b0\\u5199\\u5173\\u4e8e......\"],\"Write a summary of...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write an article about ...\":[\"\\u5199\\u4e00\\u7bc7\\u5173\\u4e8e...\"],\"Write promotional content about...\":[\"\\u64b0\\u5199\\u6709\\u5173...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-pl_PL-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":367,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"pl_PL\",\"plural-forms\":\"nplurals=3; plural=(n==1 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"AI Content Creator\":[\"Generator tre\\u015bci AI\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-hi_IN-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":3375,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-04-28 01:19+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"hi_IN\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u092e\\u0947\\u0930\\u0947 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092e\\u0947\\u0902 \\u0907\\u092e\\u0947\\u091c \\u091c\\u094b\\u095c\\u0947\\u0902\"],\"Content length\":[\"\\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u0940 \\u0932\\u0902\\u092c\\u093e\\u0908\"],\"Create content\":[\"\\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092c\\u0928\\u093e\\u090f\\u0902\"],\"Edit prompt\":[\"\\u092a\\u094d\\u0930\\u0949\\u092e\\u094d\\u092a\\u094d\\u091f \\u090f\\u0921\\u093f\\u091f \\u0915\\u0930\\u0947\\u0902\"],\"Formal\":[\"\\u0914\\u092a\\u091a\\u093e\\u0930\\u093f\\u0915\"],\"Friendly\":[\"\\u092e\\u093f\\u0924\\u094d\\u0930\\u0924\\u093e\\u092a\\u0942\\u0930\\u094d\\u0923\"],\"Long\":[\"\\u0932\\u0902\\u092c\\u093e\"],\"Main topic\":[\"\\u092e\\u0941\\u0916\\u094d\\u092f \\u0935\\u093f\\u0937\\u092f\"],\"Medium\":[\"\\u092e\\u0927\\u094d\\u092f\\u092e\"],\"Neutral\":[\"\\u0924\\u091f\\u0938\\u094d\\u0925\"],\"Personalize your content\":[\"\\u0905\\u092a\\u0928\\u093e \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092a\\u0930\\u094d\\u0938\\u0928\\u0932\\u093e\\u0907\\u095b \\u0915\\u0930\\u0947\\u0902\"],\"Short\":[\"\\u0938\\u0902\\u0915\\u094d\\u0937\\u093f\\u092a\\u094d\\u0924\"],\"There was an error with your request. Please try again.\":[\"\\u0906\\u092a\\u0915\\u0947 \\u0905\\u0928\\u0941\\u0930\\u094b\\u0927 \\u092e\\u0947\\u0902 \\u0924\\u094d\\u0930\\u0941\\u091f\\u093f \\u092a\\u0947\\u0936 \\u0906\\u0908 \\u0939\\u0948\\u0964 \\u0915\\u0943\\u092a\\u092f\\u093e \\u0926\\u094b\\u092c\\u093e\\u0930\\u093e  \\u092a\\u094d\\u0930\\u092f\\u093e\\u0938 \\u0915\\u0930\\u0947\\u0902\\u0964\"],\"Tone of voice\":[\"\\u092c\\u094b\\u0932\\u0940 \\u0915\\u093e \\u0932\\u0939\\u095b\\u093e\"],\"Trustworthy\":[\"\\u092d\\u0930\\u094b\\u0938\\u0947\\u092e\\u0902\\u0926\"],\"Use this content\":[\"\\u0907\\u0938 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0915\\u093e \\u0907\\u0938\\u094d\\u0924\\u0947\\u092e\\u093e\\u0932 \\u0915\\u0930\\u0947\\u0902\"],\"What content do you want AI to create today?\":[\"\\u0906\\u091c \\u0906\\u092a AI \\u0938\\u0947 \\u0915\\u094c\\u0928\\u0938\\u093e \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u092c\\u0928\\u0935\\u093e\\u0928\\u093e \\u091a\\u093e\\u0939\\u0924\\u0947 \\u0939\\u0948\\u0902?\"],\"Witty\":[\"\\u0935\\u093f\\u0928\\u094b\\u0926\\u092a\\u0942\\u0930\\u094d\\u0923\"],\"Write a motivational post about...\":[\"\\u0907\\u0938 \\u0935\\u093f\\u0937\\u092f \\u092a\\u0930 \\u092a\\u094d\\u0930\\u0947\\u0930\\u0923\\u093e\\u0924\\u094d\\u092e\\u0915 \\u092a\\u094b\\u0938\\u094d\\u091f \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a recommendation list of...\":[\"\\u0938\\u0941\\u091d\\u093e\\u0935\\u094b\\u0902 \\u0915\\u0940 \\u0938\\u0942\\u091a\\u0940 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a step-by-step tutorial about...\":[\"\\u0938\\u094d\\u091f\\u0947\\u092a-\\u092c\\u093e\\u092f-\\u0938\\u094d\\u091f\\u0947\\u092a \\u091f\\u094d\\u092f\\u0942\\u091f\\u094b\\u0930\\u093f\\u092f\\u0932 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write a summary of...\":[\"\\u0938\\u093e\\u0930\\u093e\\u0902\\u0936 \\u0932\\u093f\\u0916\\u0947\\u0902...\"],\"Write an article about ...\":[\"\\u0932\\u0947\\u0916 \\u0932\\u093f\\u0916\\u0947\\u0902 ...\"],\"Write promotional content about...\":[\"\\u092a\\u094d\\u0930\\u091a\\u093e\\u0930\\u093e\\u0924\\u094d\\u092e\\u0915 \\u0915\\u0949\\u0928\\u094d\\u091f\\u0947\\u0902\\u091f \\u0932\\u093f\\u0916\\u0947\\u0902...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-nl_NL-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1482,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:43+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"nl_NL\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"Een afbeelding toevoegen in mijn inhoud\"],\"AI Content Creator\":[\"AI Content Maker\"],\"Content length\":[\"Content lengte\"],\"Create content\":[\"Genereer content\"],\"Edit prompt\":[\"Bewerk prompt\"],\"Formal\":[\"Formeel\"],\"Friendly\":[\"Vriendelijk\"],\"Long\":[\"Lang\"],\"Main topic\":[\"Hoofdonderwerp\"],\"Medium\":[\"Medium\"],\"Neutral\":[\"Neutraal\"],\"Personalize your content\":[\"Personaliseer je inhoud\"],\"Short\":[\"Kort\"],\"There was an error with your request. Please try again.\":[\"Er is een fout opgetreden bij je aanvraag. Probeer het opnieuw.\"],\"Tone of voice\":[\"Schrijfstijl\"],\"Trustworthy\":[\"Betrouwbaar\"],\"Use this content\":[\"Gebruik deze inhoud\"],\"What content do you want AI to create today?\":[\"Welke content wil je dat AI vandaag maakt?\"],\"Witty\":[\"Grappig\"],\"Write a motivational post about...\":[\"Schrijf een motiverende post over...\"],\"Write a recommendation list of...\":[\"Schrijf een aanbevelingslijst van...\"],\"Write a step-by-step tutorial about...\":[\"Schrijf een stap-voor-stap handleiding over...\"],\"Write a summary of...\":[\"Schrijf een samenvatting van...\"],\"Write an article about ...\":[\"Schrijf een artikel over ...\"],\"Write promotional content about...\":[\"Schrijf promotie-inhoud over...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-uk-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":472,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"uk\",\"plural-forms\":\"nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10 >= 2 && n%10<=4 &&(n%100<10||n%100 >= 20)? 1 : 2);\"},\"AI Content Creator\":[\"\\u0413\\u0435\\u043d\\u0435\\u0440\\u0430\\u0442\\u043e\\u0440 \\u043a\\u043e\\u043d\\u0442\\u0435\\u043d\\u0442\\u0443 \\u0428\\u0406\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_AR-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_AR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Creador de contenido con IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_CO-b6978939c855acb9d820962d02aa3a73.json","ext":"json","size":310,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_CO\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"AI Content Creator\":[\"Creador de contenido con IA\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-es_CO-5077900b945e87867c8b495c13f655ae.json","ext":"json","size":1487,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/src\\/edit.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"es_CO\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"A\\u00f1adir una imagen dentro de mi contenido\"],\"Content length\":[\"Longitud del contenido\"],\"Create content\":[\"Crear contenido\"],\"Edit prompt\":[\"Editar aviso\"],\"Formal\":[\"Formal\"],\"Friendly\":[\"Amigable\"],\"Long\":[\"Largo\"],\"Main topic\":[\"Tema principal\"],\"Medium\":[\"Medio\"],\"Neutral\":[\"Neutro\"],\"Personalize your content\":[\"Personalice sus contenidos\"],\"Short\":[\"Corto\"],\"There was an error with your request. Please try again.\":[\"Se ha producido un error en su solicitud. Por favor, int\\u00e9ntelo de nuevo.\"],\"Tone of voice\":[\"Tono de voz\"],\"Trustworthy\":[\"De confianza\"],\"Use this content\":[\"Utilizar este contenido\"],\"What content do you want AI to create today?\":[\"\\u00bfQu\\u00e9 contenidos quieres que cree hoy la IA?\"],\"Witty\":[\"Ingenioso\"],\"Write a motivational post about...\":[\"Escribe un post motivador sobre...\"],\"Write a recommendation list of...\":[\"Escriba una lista de recomendaciones de...\"],\"Write a step-by-step tutorial about...\":[\"Escribe un tutorial paso a paso sobre...\"],\"Write a summary of...\":[\"Escriba un resumen de...\"],\"Write an article about ...\":[\"Escribe un art\\u00edculo sobre ...\"],\"Write promotional content about...\":[\"Redactar contenidos promocionales sobre...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/languages/hostinger-ai-assistant-tr_TR-00f83ce084756a6612575b54162ad8c9.json","ext":"json","size":1738,"mtime":1757312769,"type":"text","content":"{\"translation-revision-date\":\"2025-08-08 10:44+0000\",\"generator\":\"WP-CLI\\/2.12.0\",\"source\":\"gutenberg-block\\/dist\\/index.js\",\"domain\":\"messages\",\"locale_data\":{\"messages\":{\"\":{\"domain\":\"messages\",\"lang\":\"tr_TR\",\"plural-forms\":\"nplurals=2; plural=n != 1;\"},\"Add an image inside my content\":[\"\\u0130\\u00e7eri\\u011fimin i\\u00e7ine bir resim ekleme\"],\"AI Content Creator\":[\"YZ \\u0130\\u00e7erik Olu\\u015fturucu\"],\"Content length\":[\"\\u0130\\u00e7erik uzunlu\\u011fu\"],\"Create content\":[\"\\u0130\\u00e7erik \\u00fcret\"],\"Edit prompt\":[\"\\u0130stemi d\\u00fczenle\"],\"Formal\":[\"Resmi\"],\"Friendly\":[\"Samimi\"],\"Long\":[\"Uzun\"],\"Main topic\":[\"Ana konu\"],\"Medium\":[\"Orta\"],\"Neutral\":[\"N\\u00f6tr\"],\"Personalize your content\":[\"\\u0130\\u00e7eri\\u011finizi ki\\u015fiselle\\u015ftirin\"],\"Short\":[\"K\\u0131sa\"],\"There was an error with your request. Please try again.\":[\"\\u0130ste\\u011finizle ilgili bir hata olu\\u015ftu. L\\u00fctfen tekrar deneyin.\"],\"Tone of voice\":[\"Hitap \\u015fekli\"],\"Trustworthy\":[\"G\\u00fcvenilir\"],\"Use this content\":[\"Bu i\\u00e7eri\\u011fi kullan\\u0131n\"],\"What content do you want AI to create today?\":[\"Yapay zekan\\u0131n bug\\u00fcn hangi i\\u00e7eri\\u011fi olu\\u015fturmas\\u0131n\\u0131 istiyorsunuz?\"],\"Witty\":[\"Zeki\"],\"Write a motivational post about...\":[\"Hakk\\u0131nda motive edici bir yaz\\u0131 yaz\\u0131n...\"],\"Write a recommendation list of...\":[\"Bir tavsiye listesi yaz\\u0131n...\"],\"Write a step-by-step tutorial about...\":[\"Hakk\\u0131nda ad\\u0131m ad\\u0131m bir \\u00f6\\u011fretici yaz\\u0131n...\"],\"Write a summary of...\":[\"Bir \\u00f6zet yaz\\u0131n...\"],\"Write an article about ...\":[\"Hakk\\u0131nda bir makale yaz\\u0131n ...\"],\"Write promotional content about...\":[\"Hakk\\u0131nda tan\\u0131t\\u0131m i\\u00e7eri\\u011fi yaz\\u0131n...\"]}}}"},{"base":"plugins","rel":"hostinger-ai-assistant/gutenberg-block/dist/index.asset.php","ext":"php","size":115,"mtime":1756373563,"type":"text","content":"<?php return array('dependencies' => array('react', 'wp-blocks', 'wp-i18n'), 'version' => 'fd257e3764e44e5e2e7b');\n"},{"base":"plugins","rel":"hostinger-ai-assistant/gutenberg-block/dist/index.js","ext":"js","size":15280,"mtime":1756373563,"type":"text","content":"(()=>{var e={556:(e,t,a)=>{e.exports=a(694)()},694:(e,t,a)=>{\"use strict\";var n=a(925);function o(){}function s(){}s.resetWarningCache=o,e.exports=function(){function e(e,t,a,o,s,r){if(r!==n){var i=new Error(\"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types\");throw i.name=\"Invariant Violation\",i}}function t(){return e}e.isRequired=e;var a={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:s,resetWarningCache:o};return a.PropTypes=a,a}},925:e=>{\"use strict\";e.exports=\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\"}},t={};function a(n){var o=t[n];if(void 0!==o)return o.exports;var s=t[n]={exports:{}};return e[n](s,s.exports,a),s.exports}a.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return a.d(t,{a:t}),t},a.d=(e,t)=>{for(var n in t)a.o(t,n)&&!a.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},a.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{\"use strict\";const e=window.React,t=window.wp.blocks,n=window.wp.i18n;function o(){return(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__logo\"},(0,e.createElement)(\"img\",{src:hst_ai_data.plugin_url+\"assets/img/hostinger-logo.svg\",alt:\"Hostinger\"}))}function s(t){const a=e.useRef(null),n=e.useRef(t);return e.useLayoutEffect(()=>{n.current=t}),e.useEffect(()=>{const e=e=>{const t=a.current;t&&!t.contains(e.target)&&n.current(e)};return document.addEventListener(\"mousedown\",e),document.addEventListener(\"touchstart\",e),()=>{document.removeEventListener(\"mousedown\",e),document.removeEventListener(\"touchstart\",e)}},[]),a}const r=function({value:t,label:a,placeholder:n,onChange:o}){const[r,i]=(0,e.useState)(!1),l=s(()=>{i(!1)});return(0,e.createElement)(\"div\",{className:\"hostinger-textarea \"+(r||t?\"hostinger-textarea--active\":\"\")},(0,e.createElement)(\"label\",null,a),(0,e.createElement)(\"textarea\",{ref:l,onClick:()=>{i(!0)},placeholder:n,value:t,onChange:e=>{o&&o(e.target.value)}}))},i=function({tags:t,onClick:a}){return(0,e.createElement)(\"div\",{className:\"hostinger-tags\"},t.map(t=>(0,e.createElement)(\"div\",{onClick:()=>(e=>{a&&a(e)})(t),className:\"hostinger-tags__item\"},t)))},l=function({value:t}){let a=t.length,n=(a<=10?hst_ai_data.translations.at_least_ten:\"\")+(a>=10&&a<40?hst_ai_data.translations.let_us_now_more:\"\")+(a>=40?hst_ai_data.translations.youre_good:\"\");return(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar\"},(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar__wrap\"+(a<=10?\" hostinger-progress-bar__wrap--is-poor\":\"\")+(a>=10&&a<40?\" hostinger-progress-bar__wrap--is-average\":\"\")+(a>=40?\" hostinger-progress-bar__wrap--is-good\":\"\")},(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar__step\"}),(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar__step\"}),(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar__step\"})),(0,e.createElement)(\"div\",{className:\"hostinger-progress-bar__status\",dangerouslySetInnerHTML:{__html:n}}))},c=function({isActive:t,option:a,onSelect:n}){return(0,e.createElement)(\"li\",{className:\"list-item \"+(t?\"list-item--active\":\"\"),onClick:()=>n(a)},(0,e.createElement)(\"span\",null,a.label))},h=function({options:t,noOptions:a,className:o,onSelect:s}){return(0,e.createElement)(\"ul\",{className:`list ${o}`},a?(0,e.createElement)(c,{className:\"list--no-match\",option:{label:(0,n.__)(\"No matching options\",\"hostinger-affiliate-plugin\"),value:\"no-option\"}}):t.map(t=>(0,e.createElement)(c,{key:t.value,option:t,isActive:t.selected,onSelect:()=>s(t)})))},d=function({options:t=[],defaultValue:a,className:o,placeholder:r,onSelect:i}){const[l,c]=(0,e.useState)(!1),d=s(()=>{c(!1)}),[m,g]=(0,e.useState)(a);return(0,e.createElement)(\"div\",{ref:d,className:`hostinger-dropdown ${o}`},(0,e.createElement)(\"div\",{className:\"hostinger-dropdown__container\"},(0,e.createElement)(\"div\",{onClick:()=>{0!=t.length&&c(!0)},className:\"hostinger-dropdown-field\"},(0,e.createElement)(\"fieldset\",{className:\"hostinger-dropdown__field-border\"}),(0,e.createElement)(\"div\",{className:\"hostinger-dropdown__field-label hostinger-dropdown__field-label--active\"},t.length>0&&m&&(0,e.createElement)(\"span\",null,r)),(0,e.createElement)(\"span\",{className:\"hostinger-dropdown-field__selected-value \"+(m?\"\":\"hostinger-dropdown-field__selected-value--no-options\")},0===t.length?(0,n.__)(\"No options\",\"hostinger-affiliate-plugin\"):m?.label||r),t.length>0&&(0,e.createElement)(\"span\",{className:\"hostinger-dropdown__arrow-icon \"+(l?\"hostinger-dropdown__arrow-icon--active\":\"\")},(0,e.createElement)(\"svg\",{part:\"svg\",xmlns:\"http://www.w3.org/2000/svg\",\"aria-hidden\":\"true\",viewBox:\"0 0 24 24\"},(0,e.createElement)(\"g\",null,(0,e.createElement)(\"path\",{\"fill-rule\":\"evenodd\",\"clip-rule\":\"evenodd\",d:\"M7 10L12 15L17 10H7Z\"}))))),l&&t.length>0&&(0,e.createElement)(h,{ref:d,className:\"hostinger-dropdown__list\",options:t,itemsPerList:5,onSelect:e=>{g(e),i&&i(e),c(!1)}})))},m=function({value:t,onChange:a}){return(0,e.createElement)(\"div\",{className:\"hostinger-checkbox \"+(t?\"hostinger-checkbox--active\":\"\")},(0,e.createElement)(\"label\",null,(0,e.createElement)(\"input\",{type:\"checkbox\",onChange:e=>{a&&a(t)},checked:t,value:\"1\"}),(0,e.createElement)(\"span\",null)))};var g=a(556),_=a.n(g);function u({width:t,height:a}){const n=[\"skeleton-loader\",\"skeleton-loader--rounded-xs\"].filter(Boolean).join(\" \"),o=e=>\"number\"==typeof e?`${e}px`:e;return(0,e.createElement)(\"div\",{className:n,style:{maxWidth:o(t),height:o(a)}})}u.propTypes={circle:_().bool,rounded:_().bool,roundedXs:_().bool,width:_().oneOfType([_().number,_().string]),height:_().oneOfType([_().number,_().string])};const p=u;(0,t.registerBlockType)(\"hostinger-ai-plugin/block\",{name:\"hostinger-ai-plugin/block\",title:(0,n.__)(\"AI Content Creator\",\"hostinger-ai-assistant\"),icon:(0,e.createElement)(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",fill:\"none\"},(0,e.createElement)(\"path\",{d:\"M19.1838 3.6567L19.3 3.40002L19.4162 3.6567C19.5494 3.95115 19.7876 4.18539 20.0843 4.31374L20.4801 4.48501L20.0782 4.66276C19.7782 4.79547 19.5394 5.03672 19.4098 5.33813L19.3 5.59348L19.1902 5.33812C19.0606 5.03672 18.8218 4.79547 18.5218 4.66276L18.1199 4.48501L18.5157 4.31374C18.8123 4.18539 19.0505 3.95115 19.1838 3.6567ZM20.0878 19.3153L20.4568 19.4749L20.0849 19.6359C19.7866 19.7649 19.5475 20.001 19.4147 20.2976L19.3 20.5537L19.1853 20.2976C19.0524 20.001 18.8133 19.7649 18.5151 19.6359L18.1432 19.4749L18.5121 19.3153L18.115 18.3975L18.5121 19.3153C18.818 19.1829 19.0614 18.9381 19.192 18.6314L19.3 18.3778L19.408 18.6314C19.408 18.6314 19.408 18.6314 19.408 18.6314C19.5385 18.9381 19.7819 19.1829 20.0878 19.3153L20.4849 18.3975L20.0878 19.3153ZM6.97754 10.049L6.08346 9.62936L6.97754 10.049L8.32987 7.16798L9.69923 10.0539C9.83154 10.3328 10.0588 10.5555 10.3402 10.6821L13.2131 11.9749L10.3406 13.2676L10.7509 14.1795L10.3405 13.2676C10.0583 13.3946 9.83058 13.6182 9.69844 13.8981L8.32988 16.7971L6.97832 13.903C6.8462 13.6201 6.61667 13.3942 6.3317 13.2666L5.92303 14.1793L6.3317 13.2666L3.44698 11.9749L6.332 10.6831C6.61618 10.5559 6.84525 10.3309 6.97754 10.049Z\",stroke:\"#673DE6\",\"stroke-width\":\"2\"})),category:\"common\",textdomain:\"hostinger-ai-assistant\",attributes:{content:{type:\"string\",default:\"\"},tone:{type:\"string\",default:\"formal\"},content_length:{type:\"string\",default:\"short\"},create_image:{type:\"boolean\",default:!1}},edit:function(t){const[a,s]=(0,e.useState)(!1),[c,h]=(0,e.useState)({}),[g,_]=(0,e.useState)(\"edit\"),u=[{value:\"short\",label:(0,n.__)(\"Short\",\"hostinger-ai-assistant\")},{value:\"medium\",label:(0,n.__)(\"Medium\",\"hostinger-ai-assistant\")},{value:\"long\",label:(0,n.__)(\"Long\",\"hostinger-ai-assistant\")}],b=[{value:\"neutral\",label:(0,n.__)(\"Neutral\",\"hostinger-ai-assistant\")},{value:\"formal\",label:(0,n.__)(\"Formal\",\"hostinger-ai-assistant\")},{value:\"trustworthy\",label:(0,n.__)(\"Trustworthy\",\"hostinger-ai-assistant\")},{value:\"friendly\",label:(0,n.__)(\"Friendly\",\"hostinger-ai-assistant\")},{value:\"witty\",label:(0,n.__)(\"Witty\",\"hostinger-ai-assistant\")}],v=[(0,n.__)(\"Write a step-by-step tutorial about...\",\"hostinger-ai-assistant\"),(0,n.__)(\"Write a recommendation list of...\",\"hostinger-ai-assistant\"),(0,n.__)(\"Write a motivational post about...\",\"hostinger-ai-assistant\"),(0,n.__)(\"Write promotional content about...\",\"hostinger-ai-assistant\"),(0,n.__)(\"Write an article about ...\",\"hostinger-ai-assistant\"),(0,n.__)(\"Write a summary of...\",\"hostinger-ai-assistant\")],w=(0,e.createElement)(e.Fragment,null,(0,e.createElement)(i,{tags:v,onClick:e=>t.setAttributes({content:e})})),E=(0,e.createElement)(e.Fragment,null,(0,e.createElement)(l,{value:t.attributes.content})),L=e=>{_(e)},k=(()=>{const e=new Uint8Array(16);window.crypto.getRandomValues(e),e[6]=15&e[6]|64,e[8]=63&e[8]|128;const t=Array.from(e).map(e=>e.toString(16).padStart(2,\"0\")).join(\"\");return`${t.slice(0,8)}-${t.slice(8,12)}-${t.slice(12,16)}-${t.slice(16,20)}-${t.slice(20)}`})(),f=(e=\"\")=>{let a=\"\";return t.attributes.create_image&&(a+=e||(c.data&&c.data.image?`<img src=\"${c.data.image}\"/>`:\"\")),a+=c.data&&c.data.content?c.data.content:\"\",a};return a?(0,e.createElement)(\"div\",{className:\"hostinger-ai-block\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__skeleton\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__skeleton_heading\"},(0,e.createElement)(p,{height:\"48px\",width:\"100%\"}),(0,e.createElement)(p,{height:\"48px\",width:\"277px\"})),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__skeleton_image\"},(0,e.createElement)(p,{height:\"368px\",width:\"100%\"})),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__skeleton_paragraph\"},(0,e.createElement)(p,{height:\"36px\",width:\"80%\"}),(0,e.createElement)(p,{height:\"24px\",width:\"100%\"}),(0,e.createElement)(p,{height:\"24px\",width:\"100%\"}),(0,e.createElement)(p,{height:\"24px\",width:\"75%\"})),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__skeleton_paragraph\"},(0,e.createElement)(p,{height:\"36px\",width:\"80%\"})))):\"preview\"==g?(0,e.createElement)(\"div\",{className:\"hostinger-ai-block\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__preview_content\",dangerouslySetInnerHTML:{__html:f()}}),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__preview_controls\"},(0,e.createElement)(\"button\",{className:\"hostinger-block-button hostinger-block-button--is-normal hostinger-block-button--is-primary-outline\",onClick:()=>L(\"edit\")},(0,n.__)(\"Edit prompt\",\"hostinger-ai-assistant\")),(0,e.createElement)(\"button\",{className:\"hostinger-block-button hostinger-block-button--is-normal hostinger-block-button--is-primary\",onClick:()=>{(e=>{const{blocks:a}=wp;let n=wp.blocks.createBlock(\"core/html\",{content:e}),o=wp.data.select(\"core/editor\").getBlockIndex(t.clientId);wp.data.dispatch(\"core/editor\").insertBlocks(n,o+1);let s=a.rawHandler({HTML:a.getBlockContent(n)});wp.data.dispatch(\"core/block-editor\").replaceBlocks(n.clientId,s),wp.data.dispatch(\"core/block-editor\").removeBlock(t.clientId)})(f())}},(0,n.__)(\"Use this content\",\"hostinger-ai-assistant\")))):(0,e.createElement)(\"div\",{className:\"hostinger-ai-block\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row\"},(0,e.createElement)(o,null)),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row-heading\"},(0,n.__)(\"What content do you want AI to create today?\",\"hostinger-ai-assistant\")),(0,e.createElement)(r,{label:(0,n.__)(\"Main topic\",\"hostinger-ai-assistant\"),placeholder:(0,n.__)(\"Write an article about ...\",\"hostinger-ai-assistant\"),value:t.attributes.content,onChange:e=>t.setAttributes({content:e})}),t.attributes.content?E:w),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row-heading\"},(0,n.__)(\"Personalize your content\",\"hostinger-ai-assistant\")),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__personalization-options\"},(0,e.createElement)(d,{className:\"\",options:b,defaultValue:b[1],onSelect:e=>{t.setAttributes({tone:e.value})},placeholder:(0,n.__)(\"Tone of voice\",\"hostinger-ai-assistant\")}),(0,e.createElement)(d,{className:\"\",options:u,defaultValue:u[0],onSelect:e=>{t.setAttributes({content_length:e.value})},placeholder:(0,n.__)(\"Content length\",\"hostinger-ai-assistant\")}))),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__row hostinger-ai-block__row--is-footer\"},(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__checkbox-wrap\"},(0,e.createElement)(m,{value:t.attributes.create_image,onChange:e=>t.setAttributes({create_image:!e})}),(0,e.createElement)(\"span\",{className:\"hostinger-ai-block__checkbox-label\"},(0,n.__)(\"Add an image inside my content\",\"hostinger-ai-assistant\"))),(0,e.createElement)(\"div\",{className:\"hostinger-ai-block__button-wrap\"},(0,e.createElement)(\"button\",{disabled:a||!t.attributes.content,className:\"hostinger-block-button hostinger-block-button--is-normal hostinger-block-button--is-primary\",onClick:()=>(()=>{s(!0);let e=new FormData;e.append(\"action\",\"hts_get_content_from_description\"),e.append(\"voice_tone\",t.attributes.tone),e.append(\"content_length\",t.attributes.content_length),e.append(\"description\",t.attributes.content),e.append(\"nonce\",hst_ai_data.nonce),e.append(\"post_type\",wp.data.select(\"core/editor\").getCurrentPostType()),e.append(\"location\",\"ai_assistant_block\"),e.append(\"correlation_id\",k),fetch(hst_ai_data.ajax_url,{method:\"POST\",body:e}).then(e=>e.json()).then(e=>{e.success?(L(\"preview\"),h(e)):alert((0,n.__)(\"There was an error with your request. Please try again.\",\"hostinger-ai-assistant\")),s(!1)})})()},(0,e.createElement)(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"24\",height:\"24\",viewBox:\"0 0 24 24\",fill:\"none\"},(0,e.createElement)(\"path\",{d:\"M18.4206 4.89146L18.1317 5.54483L18.4206 4.89146L17.4962 4.48255L18.4164 4.08436C18.656 3.98069 18.8484 3.7915 18.956 3.55368L19.3 2.79381L19.6439 3.55368L20.3272 3.24441L19.6439 3.55368C19.7516 3.7915 19.9439 3.98069 20.1835 4.08436L21.1038 4.48255L20.1793 4.89146L20.4757 5.56147L20.1793 4.89146C19.937 4.99864 19.7441 5.1935 19.6395 5.43695L19.3 6.2264L18.9605 5.43694C18.8558 5.1935 18.663 4.99864 18.4206 4.89146ZM19.7099 1.88809C19.7098 1.88842 19.7096 1.88875 19.7095 1.88908L19.7099 1.88809L19.3 1.70253L19.7099 1.88809ZM6.22953 13.4948L5.92303 14.1794L6.22953 13.4948L2.83523 11.975L6.22983 10.455C6.45937 10.3523 6.64438 10.1705 6.75123 9.94287L6.10565 9.63984L6.75124 9.94286L8.32865 6.58228L9.92509 9.94682C10.032 10.1721 10.2155 10.3519 10.4428 10.4542L13.8223 11.975L10.4431 13.4956C10.2152 13.5982 10.0312 13.7788 9.92451 14.0049L8.32865 17.3854L6.7518 14.0089C6.64509 13.7804 6.4597 13.5979 6.22953 13.4948ZM19.6429 20.3998L19.3 21.1653L18.9571 20.3998C18.8498 20.1603 18.6567 19.9696 18.4158 19.8654L17.5136 19.475L18.4129 19.0859C18.6599 18.979 18.8565 18.7813 18.962 18.5335L19.3 17.7396L19.638 18.5336C19.7434 18.7813 19.94 18.979 20.1871 19.0859L21.0863 19.475L20.1841 19.8654C19.9433 19.9696 19.7501 20.1603 19.6429 20.3998Z\",stroke:\"white\",\"stroke-width\":\"1.5\"})),(0,n.__)(\"Create content\",\"hostinger-ai-assistant\")))))},save:()=>null})})()})();"},{"base":"plugins","rel":"hostinger-ai-assistant/gutenberg-block/dist/index.css","ext":"css","size":11677,"mtime":1756373563,"type":"text","content":".hostinger-textarea{position:relative}.hostinger-textarea label{background:#fff;color:var(--gray);font-size:12px;font-style:normal;font-weight:400;left:8px;line-height:20px;padding:0 8px;position:absolute;top:-9px}.hostinger-textarea textarea{border:1px solid #dadce0;border-radius:4px;height:48px;padding:12px 16px;transition:height .25s ease-out;width:100%}.hostinger-textarea--active textarea{height:125px}\n.hostinger-tags{display:flex;flex-wrap:wrap;gap:16px;padding:12px 0 0}.hostinger-tags__item{background:var(--light);border:1px solid var(--gray-light-border);border-radius:24px;color:var(--primary);font-size:14px;font-style:normal;font-weight:400;line-height:30px;padding:0 10px}.hostinger-tags__item:hover{cursor:pointer}\n.hostinger-progress-bar__wrap{align-items:flex-start;display:flex;flex-direction:row;gap:8px;height:16px;padding:0;width:100%}.hostinger-progress-bar__wrap--is-poor .hostinger-progress-bar__step:first-child{background-color:var(--danger)}.hostinger-progress-bar__wrap--is-average .hostinger-progress-bar__step:first-child,.hostinger-progress-bar__wrap--is-average .hostinger-progress-bar__step:nth-child(2){background-color:var(--warning)}.hostinger-progress-bar__wrap--is-good .hostinger-progress-bar__step:first-child,.hostinger-progress-bar__wrap--is-good .hostinger-progress-bar__step:nth-child(2),.hostinger-progress-bar__wrap--is-good .hostinger-progress-bar__step:nth-child(3){background-color:var(--success)}.hostinger-progress-bar__step{background-color:var(--gray-light);flex-grow:1;height:16px}.hostinger-progress-bar__step:first-of-type{border-radius:4px 0 0 4px}.hostinger-progress-bar__step:last-of-type{border-radius:0 4px 4px 0}.hostinger-progress-bar__status{color:var(--gray);font-size:12px;line-height:30px}\n.list-item{cursor:pointer;display:flex;padding:12px 16px;text-align:left}.list-item span{flex-grow:1}.list-item:hover{background-color:var(--primary-dark-hover)}.list-item:hover.list-item--active{background-color:var(--primary-light)}.list-item:hover.list-item--disabled{background-color:var(--light)}.list-item--disabled{color:var(--gray);cursor:not-allowed}.list-item--active{background-color:var(--primary-light);color:var(--primary)}.list-item__append-text{display:flex;justify-content:flex-end}.list-item__icon,.list-item__image{height:-moz-fit-content;height:fit-content}.list-item__icon--left,.list-item__image--left{margin-right:8px}.list-item__icon--right,.list-item__icon__image,.list-item__image--right,.list-item__image__image{margin-left:8px}\n.list{background-color:var(--light);border-radius:8px;color:var(--text_gray);filter:drop-shadow(0 0 12px rgba(29,30,32,.16));font-size:14px;font-weight:400;line-height:24px;list-style:none;margin:0;min-width:calc(100% + 2px);overflow-y:auto;padding:0!important;z-index:var(--z-index-2)}.list::-webkit-scrollbar{width:6px}.list::-webkit-scrollbar-track{border-radius:4px;margin:8px}.list::-webkit-scrollbar-thumb{background:var(--gray-border);border:4px solid transparent;border-radius:4px}.list::-webkit-scrollbar-thumb:hover{background:var(--gray-border)}.list--no-match:hover{background-color:var(--light);color:var(--gray-dark);cursor:default}\n.hostinger-dropdown{background-color:var(--light);border:none;border-radius:8px;padding:0;width:100%;z-index:10}.hostinger-dropdown__container{flex-grow:1;position:relative}.hostinger-dropdown__list{margin-top:4px;max-height:250px;position:absolute;width:100%}.hostinger-dropdown__arrow-icon{color:var(--gray);display:flex;pointer-events:none;position:absolute;right:16px;top:50%;transform:translateY(-50%);transition:.3s}.hostinger-dropdown__arrow-icon--active svg{transform:rotate(180deg)}.hostinger-dropdown__arrow-icon svg{fill:var(--gray);height:24px;transition:.3s;width:24px}.hostinger-dropdown__field-label{background:var(--light);color:var(--gray);font-size:12px;font-style:normal;font-weight:400;left:-6px;line-height:20px;margin-bottom:0;max-width:calc(114% - 24px);overflow:hidden;padding:0 8px;pointer-events:none;position:absolute;text-overflow:ellipsis;top:3px;transform:translate(48px,12px) scale(1);transform:translate(13px,-11px) scale(.85);transform-origin:left top;transition:color .2s cubic-bezier(0,0,.2,1) 0ms,transform .2s cubic-bezier(0,0,.2,1) 0ms,max-width .2s cubic-bezier(0,0,.2,1) 0ms;white-space:nowrap;width:auto;z-index:var(--z-index-child-1)}.hostinger-dropdown__field-error{color:var(--danger);display:block;font-size:12px;line-height:18px;margin-top:4px;max-width:100%;padding-left:16px;padding-right:16px;text-align:left}.hostinger-dropdown__field-border-legend{display:block;float:unset;font-size:.85em;height:21px;max-width:.01px;overflow:hidden;padding:0;transition:max-width .1s cubic-bezier(0,0,.2,1) 50ms;visibility:hidden;white-space:nowrap;width:auto}.hostinger-dropdown__field-border-legend>span{display:inline-block;opacity:0;padding-left:5px;padding-right:5px;visibility:visible}.hostinger-dropdown__field-border{border:hidden!important;border:1px solid var(--gray-border)!important;border-radius:4px!important;inset:0!important;margin:0!important;min-width:0!important;padding:0 8px!important;pointer-events:none!important;position:absolute!important;text-align:left!important;z-index:var(--z-index-child-1)!important}.hostinger-dropdown-field{flex-grow:1;height:48px;position:relative;width:100%}.hostinger-dropdown-field__selected-value{border:none!important;box-shadow:none!important;font-size:14px;line-height:24px!important;padding:12px 16px;position:absolute;top:50%;transform:translateY(-50%);width:100%!important}.hostinger-dropdown-field__selected-value--no-options{color:var(--gray);cursor:default}.hostinger-dropdown-field__selected-value:active,.hostinger-dropdown-field__selected-value:focus,.hostinger-dropdown-field__selected-value:hover,.hostinger-dropdown-field__selected-value:visited{outline:none}.hostinger-dropdown-field::-moz-placeholder{color:var(--gray)}.hostinger-dropdown-field::placeholder{color:var(--gray)}\n.hostinger-checkbox,.hostinger-checkbox label{align-items:center;display:flex}.hostinger-checkbox label{background:var(--gray);background:currentColor;border:0;border-radius:1.25em;color:var(--gray);cursor:pointer;font-size:1.3rem;height:14px;margin-bottom:0;overflow:visible;position:relative;transition:all 2s;width:36px}.hostinger-checkbox span{align-items:center;background:var(--light);border:0;border-radius:50%;box-shadow:var(--shadow);color:currentColor;display:inline-flex;height:20px;justify-content:center;margin:-1px;opacity:1;overflow:hidden;transform:translate(0) scale(1);transition:all .15s;width:20px}.hostinger-checkbox--active label{background:var(--primary-light)}.hostinger-checkbox--active span{background:var(--primary);opacity:1;transform:translate(100%) scale(1)}.hostinger-checkbox input{height:0;margin-left:-999px;opacity:0;overflow:hidden;position:absolute;width:0}\n.skeleton-loader{background-color:var(--gray-1);overflow:hidden;position:relative;width:100%}.skeleton-loader:after{animation:AiSkeletonLoader-keyframes-wave 1.6s linear .5s infinite;background:linear-gradient(90deg,transparent,var(--gray-2));bottom:0;content:\"\";left:0;position:absolute;right:0;top:0;transform:translateX(-100%)}.skeleton-loader--circle{border-radius:50%}.skeleton-loader--rounded{border-radius:8px}.skeleton-loader--rounded-xs{border-radius:4px}@keyframes AiSkeletonLoader-keyframes-wave{0%{transform:translateX(-100%)}60%{transform:translateX(100%)}to{transform:translateX(100%)}}\n@font-face{font-family:DMSans;font-weight:400;src:url(fonts/DMSans-Regular.4ee96395.ttf)}@font-face{font-family:DMSans;font-weight:500;src:url(fonts/DMSans-Medium.15068053.ttf)}@font-face{font-family:DMSans;font-weight:700;src:url(fonts/DMSans-Bold.c423ce2d.ttf)}:root{--primary:#673de6;--primary-light:#ebe4ff;--primary-lightest:#673de614;--primary-dark:#5025d1;--primary-charts:#b39ef3;--white:#fff;--gray-1:hsla(0,0%,79%,.5);--gray-2:rgba(227,227,255,.5);--gray:#727586;--gray-light:#f2f3f6;--gray-light-border:#dadce0;--gray-dark:#36344d;--gray-border:#dad9da;--success:#00b090;--success-light:#def4f0;--success-dark:#008361;--info-light:#e0f8ff;--danger:#fc5185;--danger-light:#ffe8ef;--danger-dark:#d63163;--warning:#ffcd35;--warning-light:#fff8e2;--warning-dark:#fea419;--meteorite:#8c85ff;--meteorite-light:#d5dfff;--meteorite-gray:#dadce03d;--meteorite-dark:#2f1c6a;--light:#fff;--dark:#1d1e20;--white-blue:#f4f5ff;--primary-timer:#8564eb;--black-timer:#343434;--periwinkle:#c5cde9;--shadow:0 1px 4px rgba(0,0,0,.26);--text_gray:#727586;--primary-hover:var(--primary-light);--primary-dark-hover:hsla(220,9%,87%,.24)}.hostinger-ai-block{font-family:DMSans,sans-serif!important;margin:24px}.hostinger-ai-block__row{margin:0 0 24px}.hostinger-ai-block__row:first-of-type{margin:24px 0;padding:24px 0 0}.hostinger-ai-block__row:last-of-type{padding:0 0 24px}.hostinger-ai-block__row--is-footer{display:flex}.hostinger-ai-block__row-heading{color:var(--dark);font-size:16px;font-style:normal;font-weight:700;line-height:24px;margin-bottom:16px}.hostinger-ai-block__personalization-options{display:flex;gap:16px}.hostinger-ai-block__checkbox-wrap{display:flex}.hostinger-ai-block__checkbox-label{align-items:center;color:var(--dark);display:flex;font-size:14px;font-style:normal;font-weight:400;line-height:24px;margin-left:10px}.hostinger-ai-block__button-wrap{margin-left:auto}.hostinger-ai-block__preview_content,.hostinger-ai-block__preview_content img{margin-bottom:30px}.hostinger-ai-block__preview_content p{margin-bottom:20px}.hostinger-ai-block__preview_controls{align-items:flex-end;display:flex;justify-content:flex-end}.hostinger-ai-block__preview_controls button:first-of-type{margin-right:24px}.hostinger-ai-block button.hostinger-block-button{align-items:center;border-radius:4px;display:inline-flex;font-feature-settings:\"clig\" off,\"liga\" off;font-weight:700;justify-content:center;text-decoration:none!important}.hostinger-ai-block button.hostinger-block-button[disabled]{cursor:not-allowed;opacity:.7}.hostinger-ai-block button.hostinger-block-button--is-normal{font-size:14px;gap:8px;padding:8px 24px}.hostinger-ai-block button.hostinger-block-button--is-small{font-size:12px;gap:8px;padding:6px 16px}.hostinger-ai-block button.hostinger-block-button--is-big{font-size:14px;gap:12px;padding:12px 32px}.hostinger-ai-block button.hostinger-block-button--is-primary{background:#673de6;border:0;color:#fff}.hostinger-ai-block button.hostinger-block-button--is-primary:hover{background-image:linear-gradient(0deg,rgba(0,0,0,.05),rgba(0,0,0,.05))!important;color:#fff;cursor:pointer}.hostinger-ai-block button.hostinger-block-button--is-primary-outline{background:transparent;border:1px solid #dadce0;color:#673de6}.hostinger-ai-block button.hostinger-block-button--is-primary-outline:hover{background:#ebe4ff;cursor:pointer}.hostinger-ai-block button.hostinger-block-button--is-primary-transparent{background:transparent;border:0;color:#673de6}.hostinger-ai-block button.hostinger-block-button--is-disabled{position:relative}.hostinger-ai-block button.hostinger-block-button--is-disabled:hover{background:initial;cursor:not-allowed!important}.hostinger-ai-block button.hostinger-block-button--is-disabled:after{background:hsla(0,0%,100%,.7);border-radius:8px;bottom:0;content:\"\";height:100%;left:0;position:absolute;right:0;top:0;width:100%;z-index:100}.hostinger-ai-block__skeleton{padding:24px 0}.hostinger-ai-block__skeleton_heading,.hostinger-ai-block__skeleton_image,.hostinger-ai-block__skeleton_paragraph{margin-bottom:36px}.hostinger-ai-block__skeleton_heading .skeleton-loader,.hostinger-ai-block__skeleton_image .skeleton-loader,.hostinger-ai-block__skeleton_paragraph .skeleton-loader{margin-bottom:16px}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/README.txt","ext":"txt","size":4969,"mtime":1757312769,"type":"text","content":"=== Plugin Name ===\nTags: AI, AI assistant\nRequires PHP: 8.0\nTested up to: 6.8\nStable tag: 3.0.1\nRequires at least: 5.0\nLicense: GPLv2 or later\nLicense URI: http://www.gnu.org/licenses/gpl-2.0.html\n\n== Description ==\n\nHostinger AI: Effortlessly create engaging content using AI. Streamline content generation for blogs, articles, and more.\n\n== Installation ==\n\nThis section describes how to install the plugin and get it working.\n\n1. Upload `hostinger-ai-assistant.php` to the `/wp-content/plugins/` directory\n2. Activate the plugin through the 'Plugins' menu in WordPress\n\n== Screenshots ==\n\n== Changelog ==\n\n1.0.0\n* Initial release\n\n1.0.1\n* Text changes\n\n1.0.2\n* Text changes\n\n1.1.0\n* Added AI generated post featured image\n\n1.1.1\n- Preview domain fix\n\n1.1.2\n- Additional AI assistant buttons\n\n1.1.3\n- Bug fixes\n\n1.2.0\n- Allow direct post publish\n- Bug fixes\n- Improved error handling\n\n1.2.2\n- Bug fixes\n\n1.2.3\n- Bugfix\n\n1.3.0\n- Added content generation for other post types\n- Added content tone and length selection\n\n1.3.1\n- Style changes\n\n1.4.0\n- Added translations\n\n1.4.1\n- Bugfix\n\n1.4.2\n- Add additional request header\n\n1.4.3\n- Bugfix\n\n1.5.0\n- Add seo meta keywords and description\n\n1.5.1\n- Add additional translations\n\n1.6.0\n- Multiple Tone of voice selection\n\n1.6.1\n- Added focus keywords\n\n1.6.2\n- Bugfix, improvements\n\n1.6.3\n- Text changes, translations\n\n1.6.4\n- Font changes\n\n1.6.5\n- Fix seo metadata\n\n1.6.6\n- Fixes\n\n1.6.7\n- Seo optimized AI images\n- Added translations\n- Adjusted assets loading\n\n1.6.8\n- Fixed assets load on subfolder installations\n\n1.6.9\n- Css fixes\n- Internal services improvements\n- Text changes\n\n1.7.0\n- Added AI product generation\n\n1.7.1\n- Added long text content generation\n\n1.7.2\n- Added AI image into content generation\n\n1.7.3\n- Implemented chatbot\n\n1.7.4\n- Style changes\n\n1.7.5\n- Adjusted internal services\n\n1.7.6\n- Fixed loading issues\n\n1.7.7\n- Added chatbot amplitude events\n\n1.7.8\n- Added Gutenberg block for AI creation\n\n1.7.9\n- Previous version revert\n\n1.8.0\n- Increased minimum PHP version\n\n1.8.1\n- Chatbot improvements\n\n1.8.2\n- Security fix\n\n1.8.3\n- Rename plugin\n\n2.0.0\n- Added menu management package\n\n2.0.1\n- Added surveys and amplitude packages\n\n2.0.2\n- Fixed hPanel url\n\n2.0.3\n- Change labels\n- FR locale fix\n- Fixed conflicts between packages\n\n2.0.4\n- Readme change\n\n2.0.5\n- Updated menu package\n\n2.0.6\n- Add All in One SEO compatibility\n- Additional AI content validation\n- Redirection to AI content creation\n\n2.0.7\n- Remove chatbot amplitude experiment\n\n2.0.8\n- Improved woocommerce AI product generation\n\n2.0.9\n- Update dependencies\n\n2.0.10\n- Surveys adjustments\n- Translations fix\n\n2.0.11\n- Added translations\n- Fixed arabic css styles\n\n2.0.12 (2024-07-31)\n- Scope hcomponents library styling\n\n2.0.13 (2024-08-19)\n- Add loading modal\n\n2.0.14 (2024-09-02)\n- Fixed translations in Gutenberg block\n\n2.0.15 (2024-09-08)\n- Fixed domain validation for chatbot\n\n2.0.16 (2024-09-11)\n- Packages update\n\n2.0.17 (2024-09-12)\n- Security update\n\n2.0.18 (2024-09-17)\n- Fixed AI Gutenberg block styles in site editor\n\n2.0.19 (2024-09-18)\n- Rename AI assistant\n\n2.0.20 (2024-10-04)\n- Fix chatbot position\n\n2.0.21 (2024-10-10)\n- Added new permissions for the Editor role.\n- Fixed issue where product titles were being overwritten.\n- Added a link to the AI Creator tutorial.\n\n2.0.22 (2024-10-16)\n- Align admin bar menu items\n- Update amplitude package\n\n2.0.23 (2024-10-25)\n- Adjust survey logic\n\n2.0.24 (2024-11-12)\n- Change preview domain url\n- Updated amplitude package\n\n2.0.25 (2024-11-20)\n- Translation load fix\n\n2.0.26 (2024-12-06)\n- Update packages\n\n2.0.27 (2024-12-16)\n- Update packages\n\n2.0.28 (2025-01-08)\n- Added preview website link in navbar\n\n2.0.29 (2025-01-14)\n- Changed updates environment\n- Added translations\n\n2.0.30 (2025-01-24)\n- Adapted plugin to new temporary domains\n\n2.0.31 (2025-02-11)\n- Added translations\n- Fixed updates\n\n2.0.32 (2025-02-21)\n- Update menu package\n- Added translations\n\n2.0.33 (2025-03-25)\n- More relevant images\n- Improved internal requests\n- Updated hcomponents library\n\n2.0.34 (2025-04-07)\n- Remove Hardcoded references\n\n2.0.35 (2025-04-15)\n- Add preview and site edit links\n\n2.0.36 (2025-04-30)\n- Add correlation id\n\n2.0.37 (2025-05-26)\n- Add AI block to recently used blocks\n- Fix Jetpack autoloader issues\n\n2.0.38 (2025-06-12)\n- Remove unnecessary word capitalization in AI Content dropdown\n- Tweak CSAT logic\n- Bump Hostinger WP Surveys to v1.1.12\n- Boot WP Surveys in the plugin\n\n2.0.39 (2025-06-19)\n- Renamed featured image label\n- Updated translations\n- Fixed updates\n\n2.0.40 (2025-07-03)\n- Updated dependencies\n- Fixed chip button not centered\n\n2.0.41 (2025-07-17)\n- Fixed assets version load\n\n2.0.42 (2025-07-28)\n- Updated translations\n- Fixed Submit button freeze issue\n\n3.0.0 (2025-08-08)\n- Added MCP functionality\n- Updated translations\n- Removed unused spacing\n\n3.0.1 (2025-08-21)\n- Change menu registration priority\r\n- Update translations\r\n- Handle chatbot timeouts better\r\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/hostinger-ai-assistant-admin.js","ext":"js","size":213603,"mtime":1757312769},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/118.js.LICENSE.txt","ext":"txt","size":163,"mtime":1757312769,"type":"text","content":"/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/hostinger-woo-requests.js.LICENSE.txt","ext":"txt","size":382,"mtime":1757312769,"type":"text","content":"/*!\n * jQuery JavaScript Library v3.7.1\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-08-28T13:37Z\n */\n\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/118.js","ext":"js","size":6104,"mtime":1757312769,"type":"text","content":"/*! For license information please see 118.js.LICENSE.txt */\n\"use strict\";(self.webpackChunk=self.webpackChunk||[]).push([[118,705],{45:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(798),o=n.n(r)()(function(t){return t[1]});o.push([t.id,\".base-modal__title-container[data-v-4f3e8ec0]{align-items:center;display:flex;justify-content:flex-start;margin-bottom:4px}.base-modal__title-container--centered[data-v-4f3e8ec0]{justify-content:center}.base-modal__title[data-v-4f3e8ec0]{color:var(--neutral--600);font-size:20px;font-weight:700;margin:0 0 10px}.base-modal__subtitle[data-v-4f3e8ec0]{color:var(--neutral--300);font-size:14px;margin-bottom:24px;margin-top:4px}.base-modal__subtitle--centered[data-v-4f3e8ec0]{text-align:center}\",\"\"]);const a=o},118:(t,e,n)=>{n.r(e),n.d(e,{default:()=>_});var r=n(726),o=n(705),a=n(77),i=n(647);function c(){var t,e,n=\"function\"==typeof Symbol?Symbol:{},r=n.iterator||\"@@iterator\",o=n.toStringTag||\"@@toStringTag\";function a(n,r,o,a){var c=r&&r.prototype instanceof l?r:l,s=Object.create(c.prototype);return u(s,\"_invoke\",function(n,r,o){var a,c,u,l=0,s=o||[],f=!1,d={p:0,n:0,v:t,a:p,f:p.bind(t,4),d:function(e,n){return a=e,c=0,u=t,d.n=n,i}};function p(n,r){for(c=n,u=r,e=0;!f&&l&&!o&&e<s.length;e++){var o,a=s[e],p=d.p,v=a[2];n>3?(o=v===r)&&(u=a[(c=a[4])?5:(c=3,3)],a[4]=a[5]=t):a[0]<=p&&((o=n<2&&p<a[1])?(c=0,d.v=r,d.n=a[1]):p<v&&(o=n<3||a[0]>r||r>v)&&(a[4]=n,a[5]=r,d.n=v,c=0))}if(o||n>1)return i;throw f=!0,r}return function(o,s,v){if(l>1)throw TypeError(\"Generator is already running\");for(f&&1===s&&p(s,v),c=s,u=v;(e=c<2?t:u)||!f;){a||(c?c<3?(c>1&&(d.n=-1),p(c,u)):d.n=u:d.v=u);try{if(l=2,a){if(c||(o=\"next\"),e=a[o]){if(!(e=e.call(a,u)))throw TypeError(\"iterator result is not an object\");if(!e.done)return e;u=e.value,c<2&&(c=0)}else 1===c&&(e=a.return)&&e.call(a),c<2&&(u=TypeError(\"The iterator does not provide a '\"+o+\"' method\"),c=1);a=t}else if((e=(f=d.n<0)?u:n.call(r,d))!==i)break}catch(e){a=t,c=1,u=e}finally{l=1}}return{value:e,done:f}}}(n,o,a),!0),s}var i={};function l(){}function s(){}function f(){}e=Object.getPrototypeOf;var d=[][r]?e(e([][r]())):(u(e={},r,function(){return this}),e),p=f.prototype=l.prototype=Object.create(d);function v(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,f):(t.__proto__=f,u(t,o,\"GeneratorFunction\")),t.prototype=Object.create(p),t}return s.prototype=f,u(p,\"constructor\",f),u(f,\"constructor\",s),s.displayName=\"GeneratorFunction\",u(f,o,\"GeneratorFunction\"),u(p),u(p,o,\"Generator\"),u(p,r,function(){return this}),u(p,\"toString\",function(){return\"[object Generator]\"}),(c=function(){return{w:a,m:v}})()}function u(t,e,n,r){var o=Object.defineProperty;try{o({},\"\",{})}catch(t){o=0}u=function(t,e,n,r){if(e)o?o(t,e,{value:n,enumerable:!r,configurable:!r,writable:!r}):t[e]=n;else{var a=function(e,n){u(t,e,function(t){return this._invoke(e,n,t)})};a(\"next\",0),a(\"throw\",1),a(\"return\",2)}},u(t,e,n,r)}function l(t,e,n,r,o,a,i){try{var c=t[a](i),u=c.value}catch(t){return void n(t)}c.done?e(u):Promise.resolve(u).then(r,o)}function s(t){return function(){var e=this,n=arguments;return new Promise(function(r,o){var a=t.apply(e,n);function i(t){l(a,r,o,i,c,\"next\",t)}function c(t){l(a,r,o,i,c,\"throw\",t)}i(void 0)})}}var f={class:\"buttons-wrap\"};const d=(0,r.pM)({__name:\"McpPluginChoice\",props:{data:{}},setup:function(t){var e=(0,i.hS)().closeModal,n=t,u=function(){var t=s(c().m(function t(){return c().w(function(t){for(;;)switch(t.n){case 0:if(!n.data.onConfirmAction){t.n=1;break}return t.n=1,n.data.onConfirmAction();case 1:e();case 2:return t.a(2)}},t)}));return function(){return t.apply(this,arguments)}}(),l=function(){var t=s(c().m(function t(){return c().w(function(t){for(;;)switch(t.n){case 0:if(!n.data.onCancelAction){t.n=1;break}return t.n=1,n.data.onCancelAction();case 1:e();case 2:return t.a(2)}},t)}));return function(){return t.apply(this,arguments)}}();return function(t,e){var n=(0,r.g2)(\"HButton\");return(0,r.uX)(),(0,r.Wv)(o.default,{title:(0,r.R1)(a.T)(\"mcp-modal.title\"),subtitle:(0,r.R1)(a.T)(\"mcp-modal.subtitle\")},{default:(0,r.k6)(function(){return[(0,r.Lk)(\"div\",f,[(0,r.bF)(n,{variant:\"text\",disabled:t.data.isLoading,class:\"\",onClick:l},{default:(0,r.k6)(function(){return[(0,r.eW)((0,r.v_)((0,r.R1)(a.T)(\"mcp-modal.deny\")),1)]}),_:1},8,[\"disabled\"]),(0,r.bF)(n,{color:\"primary\",isLoading:t.data.isLoading,onClick:u},{default:(0,r.k6)(function(){return[(0,r.eW)((0,r.v_)((0,r.R1)(a.T)(\"mcp-modal.accept\")),1)]}),_:1},8,[\"isLoading\"])])]}),_:1},8,[\"title\",\"subtitle\"])}}});var p=n(100),v=n.n(p),b=n(213),m={insert:\"head\",singleton:!1};v()(b.A,m);b.A.locals;const _=(0,n(262).A)(d,[[\"__scopeId\",\"data-v-ec22e054\"]])},213:(t,e,n)=>{n.d(e,{A:()=>a});var r=n(798),o=n.n(r)()(function(t){return t[1]});o.push([t.id,\".buttons-wrap[data-v-ec22e054]{display:flex;justify-content:flex-end}.buttons-wrap button[data-v-ec22e054]{margin-right:15px}.buttons-wrap button[data-v-ec22e054]:last-of-type{margin-right:0}button[data-v-ec22e054]:after{display:none}button[data-v-ec22e054]:disabled{opacity:.5}\",\"\"]);const a=o},705:(t,e,n)=>{n.r(e),n.d(e,{default:()=>d});var r=n(726),o={class:\"base-modal\"},a={key:1,class:\"base-modal__title\"},i=[\"innerHTML\"];const c=(0,r.pM)({__name:\"BaseModal\",props:{title:{},subtitle:{},titleIcon:{},titleAlignment:{default:\"left\"}},setup:function(t){return function(t,e){var n=(0,r.g2)(\"HIcon\");return(0,r.uX)(),(0,r.CE)(\"div\",o,[(0,r.Lk)(\"span\",{class:(0,r.C4)([\"base-modal__title-container\",{\"base-modal__title-container--centered\":\"centered\"===t.titleAlignment}])},[t.titleIcon?((0,r.uX)(),(0,r.Wv)(n,{key:0,class:\"h-mr-8\",name:t.titleIcon.name,color:t.titleIcon.color},null,8,[\"name\",\"color\"])):(0,r.Q3)(\"\",!0),t.title?((0,r.uX)(),(0,r.CE)(\"h2\",a,(0,r.v_)(t.title),1)):(0,r.Q3)(\"\",!0)],2),t.subtitle?((0,r.uX)(),(0,r.CE)(\"p\",{key:0,class:(0,r.C4)([\"base-modal__subtitle\",{\"base-modal__subtitle--centered\":\"centered\"===t.titleAlignment}]),innerHTML:t.subtitle},null,10,i)):(0,r.Q3)(\"\",!0),(0,r.RG)(t.$slots,\"default\")])}}});var u=n(100),l=n.n(u),s=n(45),f={insert:\"head\",singleton:!1};l()(s.A,f);s.A.locals;const d=(0,n(262).A)(c,[[\"__scopeId\",\"data-v-4f3e8ec0\"]])}}]);"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/hostinger-chatbot.js","ext":"js","size":1008762,"mtime":1757312769},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/hostinger-chatbot.js.LICENSE.txt","ext":"txt","size":2166,"mtime":1757312769,"type":"text","content":"/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <http://feross.org>\n * @license  MIT\n */\n\n/*!\n * XRegExp 5.1.2\n * <xregexp.com>\n * Steven Levithan (c) 2007-present MIT License\n */\n\n/*!\n * XRegExp Unicode Categories 5.1.2\n * <xregexp.com>\n * Steven Levithan (c) 2010-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\n\n/*!\n * XRegExp Unicode Properties 5.1.2\n * <xregexp.com>\n * Steven Levithan (c) 2012-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\n\n/*!\n * XRegExp Unicode Scripts 5.1.2\n * <xregexp.com>\n * Steven Levithan (c) 2010-present MIT License\n * Unicode data by Mathias Bynens <mathiasbynens.be>\n */\n\n/*!\n * jQuery JavaScript Library v3.7.1\n * https://jquery.com/\n *\n * Copyright OpenJS Foundation and other contributors\n * Released under the MIT license\n * https://jquery.org/license\n *\n * Date: 2023-08-28T13:37Z\n */\n\n/*!\n * pinia v2.3.1\n * (c) 2025 Eduardo San Martin Morote\n * @license MIT\n */\n\n/*! #__NO_SIDE_EFFECTS__ */\n\n/*! @license DOMPurify 3.2.4 | (c) Cure53 and other contributors | Released under the Apache license 2.0 and Mozilla Public License 2.0 | github.com/cure53/DOMPurify/blob/3.2.4/LICENSE */\n\n/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */\n\n/*! js-cookie v3.0.5 | MIT */\n\n/*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/babel/babel/blob/main/packages/babel-helpers/LICENSE */\n\n/**\n * @license\n * Lodash <https://lodash.com/>\n * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/**\n* @vue/runtime-core v3.5.17\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\n/**\n* @vue/runtime-dom v3.5.17\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n\n/**\n* @vue/shared v3.5.17\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/705.js","ext":"js","size":1755,"mtime":1757312769,"type":"text","content":"\"use strict\";(self.webpackChunk=self.webpackChunk||[]).push([[705],{45:(e,t,a)=>{a.d(t,{A:()=>s});var n=a(798),l=a.n(n)()(function(e){return e[1]});l.push([e.id,\".base-modal__title-container[data-v-4f3e8ec0]{align-items:center;display:flex;justify-content:flex-start;margin-bottom:4px}.base-modal__title-container--centered[data-v-4f3e8ec0]{justify-content:center}.base-modal__title[data-v-4f3e8ec0]{color:var(--neutral--600);font-size:20px;font-weight:700;margin:0 0 10px}.base-modal__subtitle[data-v-4f3e8ec0]{color:var(--neutral--300);font-size:14px;margin-bottom:24px;margin-top:4px}.base-modal__subtitle--centered[data-v-4f3e8ec0]{text-align:center}\",\"\"]);const s=l},705:(e,t,a)=>{a.r(t),a.d(t,{default:()=>m});var n=a(726),l={class:\"base-modal\"},s={key:1,class:\"base-modal__title\"},i=[\"innerHTML\"];const o=(0,n.pM)({__name:\"BaseModal\",props:{title:{},subtitle:{},titleIcon:{},titleAlignment:{default:\"left\"}},setup:function(e){return function(e,t){var a=(0,n.g2)(\"HIcon\");return(0,n.uX)(),(0,n.CE)(\"div\",l,[(0,n.Lk)(\"span\",{class:(0,n.C4)([\"base-modal__title-container\",{\"base-modal__title-container--centered\":\"centered\"===e.titleAlignment}])},[e.titleIcon?((0,n.uX)(),(0,n.Wv)(a,{key:0,class:\"h-mr-8\",name:e.titleIcon.name,color:e.titleIcon.color},null,8,[\"name\",\"color\"])):(0,n.Q3)(\"\",!0),e.title?((0,n.uX)(),(0,n.CE)(\"h2\",s,(0,n.v_)(e.title),1)):(0,n.Q3)(\"\",!0)],2),e.subtitle?((0,n.uX)(),(0,n.CE)(\"p\",{key:0,class:(0,n.C4)([\"base-modal__subtitle\",{\"base-modal__subtitle--centered\":\"centered\"===e.titleAlignment}]),innerHTML:e.subtitle},null,10,i)):(0,n.Q3)(\"\",!0),(0,n.RG)(e.$slots,\"default\")])}}});var c=a(100),r=a.n(c),d=a(45),u={insert:\"head\",singleton:!1};r()(d.A,u);d.A.locals;const m=(0,a(262).A)(o,[[\"__scopeId\",\"data-v-4f3e8ec0\"]])}}]);"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/js/hostinger-woo-requests.js","ext":"js","size":91878,"mtime":1757312769,"type":"text","content":"/*! For license information please see hostinger-woo-requests.js.LICENSE.txt */\n(()=>{var e={304:()=>{document.addEventListener(\"DOMContentLoaded\",function(){var e=document.getElementById(\"hts_product_description\"),t=document.getElementById(\"hts-woo-product-content-submit\");e&&t&&e.addEventListener(\"input\",function(){e.value.length<10?t.classList.add(\"disabled\"):t.classList.remove(\"disabled\")})})},692:function(e,t){var n;!function(t,n){\"use strict\";\"object\"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error(\"jQuery requires a window with a document\");return n(e)}:n(t)}(\"undefined\"!=typeof window?window:this,function(r,o){\"use strict\";var i=[],a=Object.getPrototypeOf,s=i.slice,u=i.flat?function(e){return i.flat.call(e)}:function(e){return i.concat.apply([],e)},c=i.push,l=i.indexOf,f={},p=f.toString,d=f.hasOwnProperty,h=d.toString,g=h.call(Object),v={},y=function(e){return\"function\"==typeof e&&\"number\"!=typeof e.nodeType&&\"function\"!=typeof e.item},m=function(e){return null!=e&&e===e.window},x=r.document,b={type:!0,src:!0,nonce:!0,noModule:!0};function w(e,t,n){var r,o,i=(n=n||x).createElement(\"script\");if(i.text=e,t)for(r in b)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function T(e){return null==e?e+\"\":\"object\"==typeof e||\"function\"==typeof e?f[p.call(e)]||\"object\":typeof e}var C=\"3.7.1\",E=/HTML$/i,S=function(e,t){return new S.fn.init(e,t)};function k(e){var t=!!e&&\"length\"in e&&e.length,n=T(e);return!y(e)&&!m(e)&&(\"array\"===n||0===t||\"number\"==typeof t&&t>0&&t-1 in e)}function j(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}S.fn=S.prototype={jquery:C,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=S.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return S.each(this,e)},map:function(e){return this.pushStack(S.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(S.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:i.sort,splice:i.splice},S.extend=S.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},s=1,u=arguments.length,c=!1;for(\"boolean\"==typeof a&&(c=a,a=arguments[s]||{},s++),\"object\"==typeof a||y(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(e=arguments[s]))for(t in e)r=e[t],\"__proto__\"!==t&&a!==r&&(c&&r&&(S.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||S.isPlainObject(n)?n:{},o=!1,a[t]=S.extend(c,i,r)):void 0!==r&&(a[t]=r));return a},S.extend({expando:\"jQuery\"+(C+Math.random()).replace(/\\D/g,\"\"),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||\"[object Object]\"!==p.call(e))&&(!(t=a(e))||\"function\"==typeof(n=d.call(t,\"constructor\")&&t.constructor)&&h.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t,n){w(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,r=0;if(k(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},text:function(e){var t,n=\"\",r=0,o=e.nodeType;if(!o)for(;t=e[r++];)n+=S.text(t);return 1===o||11===o?e.textContent:9===o?e.documentElement.textContent:3===o||4===o?e.nodeValue:n},makeArray:function(e,t){var n=t||[];return null!=e&&(k(Object(e))?S.merge(n,\"string\"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:l.call(t,e,n)},isXMLDoc:function(e){var t=e&&e.namespaceURI,n=e&&(e.ownerDocument||e).documentElement;return!E.test(t||n&&n.nodeName||\"HTML\")},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(k(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return u(a)},guid:1,support:v}),\"function\"==typeof Symbol&&(S.fn[Symbol.iterator]=i[Symbol.iterator]),S.each(\"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \"),function(e,t){f[\"[object \"+t+\"]\"]=t.toLowerCase()});var A=i.pop,D=i.sort,N=i.splice,L=\"[\\\\x20\\\\t\\\\r\\\\n\\\\f]\",q=new RegExp(\"^\"+L+\"+|((?:^|[^\\\\\\\\])(?:\\\\\\\\.)*)\"+L+\"+$\",\"g\");S.contains=function(e,t){var n=t&&t.parentNode;return e===n||!(!n||1!==n.nodeType||!(e.contains?e.contains(n):e.compareDocumentPosition&&16&e.compareDocumentPosition(n)))};var O=/([\\0-\\x1f\\x7f]|^-?\\d)|^-$|[^\\x80-\\uFFFF\\w-]/g;function H(e,t){return t?\"\\0\"===e?\"�\":e.slice(0,-1)+\"\\\\\"+e.charCodeAt(e.length-1).toString(16)+\" \":\"\\\\\"+e}S.escapeSelector=function(e){return(e+\"\").replace(O,H)};var P=x,M=c;!function(){var e,t,n,o,a,u,c,f,p,h,g=M,y=S.expando,m=0,x=0,b=ee(),w=ee(),T=ee(),C=ee(),E=function(e,t){return e===t&&(a=!0),0},k=\"checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped\",O=\"(?:\\\\\\\\[\\\\da-fA-F]{1,6}\"+L+\"?|\\\\\\\\[^\\\\r\\\\n\\\\f]|[\\\\w-]|[^\\0-\\\\x7f])+\",H=\"\\\\[\"+L+\"*(\"+O+\")(?:\"+L+\"*([*^$|!~]?=)\"+L+\"*(?:'((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\"|(\"+O+\"))|)\"+L+\"*\\\\]\",_=\":(\"+O+\")(?:\\\\((('((?:\\\\\\\\.|[^\\\\\\\\'])*)'|\\\"((?:\\\\\\\\.|[^\\\\\\\\\\\"])*)\\\")|((?:\\\\\\\\.|[^\\\\\\\\()[\\\\]]|\"+H+\")*)|.*)\\\\)|)\",R=new RegExp(L+\"+\",\"g\"),I=new RegExp(\"^\"+L+\"*,\"+L+\"*\"),F=new RegExp(\"^\"+L+\"*([>+~]|\"+L+\")\"+L+\"*\"),W=new RegExp(L+\"|>\"),$=new RegExp(_),B=new RegExp(\"^\"+O+\"$\"),z={ID:new RegExp(\"^#(\"+O+\")\"),CLASS:new RegExp(\"^\\\\.(\"+O+\")\"),TAG:new RegExp(\"^(\"+O+\"|[*])\"),ATTR:new RegExp(\"^\"+H),PSEUDO:new RegExp(\"^\"+_),CHILD:new RegExp(\"^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\\\(\"+L+\"*(even|odd|(([+-]|)(\\\\d*)n|)\"+L+\"*(?:([+-]|)\"+L+\"*(\\\\d+)|))\"+L+\"*\\\\)|)\",\"i\"),bool:new RegExp(\"^(?:\"+k+\")$\",\"i\"),needsContext:new RegExp(\"^\"+L+\"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\\\(\"+L+\"*((?:-\\\\d)?\\\\d*)\"+L+\"*\\\\)|)(?=[^-]|$)\",\"i\")},X=/^(?:input|select|textarea|button)$/i,U=/^h\\d$/i,G=/^(?:#([\\w-]+)|(\\w+)|\\.([\\w-]+))$/,V=/[+~]/,Y=new RegExp(\"\\\\\\\\[\\\\da-fA-F]{1,6}\"+L+\"?|\\\\\\\\([^\\\\r\\\\n\\\\f])\",\"g\"),Q=function(e,t){var n=\"0x\"+e.slice(1)-65536;return t||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},J=function(){ue()},K=pe(function(e){return!0===e.disabled&&j(e,\"fieldset\")},{dir:\"parentNode\",next:\"legend\"});try{g.apply(i=s.call(P.childNodes),P.childNodes),i[P.childNodes.length].nodeType}catch(e){g={apply:function(e,t){M.apply(e,s.call(t))},call:function(e){M.apply(e,s.call(arguments,1))}}}function Z(e,t,n,r){var o,i,a,s,c,l,d,h=t&&t.ownerDocument,m=t?t.nodeType:9;if(n=n||[],\"string\"!=typeof e||!e||1!==m&&9!==m&&11!==m)return n;if(!r&&(ue(t),t=t||u,f)){if(11!==m&&(c=G.exec(e)))if(o=c[1]){if(9===m){if(!(a=t.getElementById(o)))return n;if(a.id===o)return g.call(n,a),n}else if(h&&(a=h.getElementById(o))&&Z.contains(t,a)&&a.id===o)return g.call(n,a),n}else{if(c[2])return g.apply(n,t.getElementsByTagName(e)),n;if((o=c[3])&&t.getElementsByClassName)return g.apply(n,t.getElementsByClassName(o)),n}if(!(C[e+\" \"]||p&&p.test(e))){if(d=e,h=t,1===m&&(W.test(e)||F.test(e))){for((h=V.test(e)&&se(t.parentNode)||t)==t&&v.scope||((s=t.getAttribute(\"id\"))?s=S.escapeSelector(s):t.setAttribute(\"id\",s=y)),i=(l=le(e)).length;i--;)l[i]=(s?\"#\"+s:\":scope\")+\" \"+fe(l[i]);d=l.join(\",\")}try{return g.apply(n,h.querySelectorAll(d)),n}catch(t){C(e,!0)}finally{s===y&&t.removeAttribute(\"id\")}}}return me(e.replace(q,\"$1\"),t,n,r)}function ee(){var e=[];return function n(r,o){return e.push(r+\" \")>t.cacheLength&&delete n[e.shift()],n[r+\" \"]=o}}function te(e){return e[y]=!0,e}function ne(e){var t=u.createElement(\"fieldset\");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function re(e){return function(t){return j(t,\"input\")&&t.type===e}}function oe(e){return function(t){return(j(t,\"input\")||j(t,\"button\"))&&t.type===e}}function ie(e){return function(t){return\"form\"in t?t.parentNode&&!1===t.disabled?\"label\"in t?\"label\"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&K(t)===e:t.disabled===e:\"label\"in t&&t.disabled===e}}function ae(e){return te(function(t){return t=+t,te(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function se(e){return e&&void 0!==e.getElementsByTagName&&e}function ue(e){var n,r=e?e.ownerDocument||e:P;return r!=u&&9===r.nodeType&&r.documentElement?(c=(u=r).documentElement,f=!S.isXMLDoc(u),h=c.matches||c.webkitMatchesSelector||c.msMatchesSelector,c.msMatchesSelector&&P!=u&&(n=u.defaultView)&&n.top!==n&&n.addEventListener(\"unload\",J),v.getById=ne(function(e){return c.appendChild(e).id=S.expando,!u.getElementsByName||!u.getElementsByName(S.expando).length}),v.disconnectedMatch=ne(function(e){return h.call(e,\"*\")}),v.scope=ne(function(){return u.querySelectorAll(\":scope\")}),v.cssHas=ne(function(){try{return u.querySelector(\":has(*,:jqfake)\"),!1}catch(e){return!0}}),v.getById?(t.filter.ID=function(e){var t=e.replace(Y,Q);return function(e){return e.getAttribute(\"id\")===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n=t.getElementById(e);return n?[n]:[]}}):(t.filter.ID=function(e){var t=e.replace(Y,Q);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode(\"id\");return n&&n.value===t}},t.find.ID=function(e,t){if(void 0!==t.getElementById&&f){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode(\"id\"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode(\"id\"))&&n.value===e)return[i]}return[]}}),t.find.TAG=function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):t.querySelectorAll(e)},t.find.CLASS=function(e,t){if(void 0!==t.getElementsByClassName&&f)return t.getElementsByClassName(e)},p=[],ne(function(e){var t;c.appendChild(e).innerHTML=\"<a id='\"+y+\"' href='' disabled='disabled'></a><select id='\"+y+\"-\\r\\\\' disabled='disabled'><option selected=''></option></select>\",e.querySelectorAll(\"[selected]\").length||p.push(\"\\\\[\"+L+\"*(?:value|\"+k+\")\"),e.querySelectorAll(\"[id~=\"+y+\"-]\").length||p.push(\"~=\"),e.querySelectorAll(\"a#\"+y+\"+*\").length||p.push(\".#.+[+~]\"),e.querySelectorAll(\":checked\").length||p.push(\":checked\"),(t=u.createElement(\"input\")).setAttribute(\"type\",\"hidden\"),e.appendChild(t).setAttribute(\"name\",\"D\"),c.appendChild(e).disabled=!0,2!==e.querySelectorAll(\":disabled\").length&&p.push(\":enabled\",\":disabled\"),(t=u.createElement(\"input\")).setAttribute(\"name\",\"\"),e.appendChild(t),e.querySelectorAll(\"[name='']\").length||p.push(\"\\\\[\"+L+\"*name\"+L+\"*=\"+L+\"*(?:''|\\\"\\\")\")}),v.cssHas||p.push(\":has\"),p=p.length&&new RegExp(p.join(\"|\")),E=function(e,t){if(e===t)return a=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!v.sortDetached&&t.compareDocumentPosition(e)===n?e===u||e.ownerDocument==P&&Z.contains(P,e)?-1:t===u||t.ownerDocument==P&&Z.contains(P,t)?1:o?l.call(o,e)-l.call(o,t):0:4&n?-1:1)},u):u}for(e in Z.matches=function(e,t){return Z(e,null,null,t)},Z.matchesSelector=function(e,t){if(ue(e),f&&!C[t+\" \"]&&(!p||!p.test(t)))try{var n=h.call(e,t);if(n||v.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){C(t,!0)}return Z(t,u,null,[e]).length>0},Z.contains=function(e,t){return(e.ownerDocument||e)!=u&&ue(e),S.contains(e,t)},Z.attr=function(e,n){(e.ownerDocument||e)!=u&&ue(e);var r=t.attrHandle[n.toLowerCase()],o=r&&d.call(t.attrHandle,n.toLowerCase())?r(e,n,!f):void 0;return void 0!==o?o:e.getAttribute(n)},Z.error=function(e){throw new Error(\"Syntax error, unrecognized expression: \"+e)},S.uniqueSort=function(e){var t,n=[],r=0,i=0;if(a=!v.sortStable,o=!v.sortStable&&s.call(e,0),D.call(e,E),a){for(;t=e[i++];)t===e[i]&&(r=n.push(i));for(;r--;)N.call(e,n[r],1)}return o=null,e},S.fn.uniqueSort=function(){return this.pushStack(S.uniqueSort(s.apply(this)))},t=S.expr={cacheLength:50,createPseudo:te,match:z,attrHandle:{},find:{},relative:{\">\":{dir:\"parentNode\",first:!0},\" \":{dir:\"parentNode\"},\"+\":{dir:\"previousSibling\",first:!0},\"~\":{dir:\"previousSibling\"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(Y,Q),e[3]=(e[3]||e[4]||e[5]||\"\").replace(Y,Q),\"~=\"===e[2]&&(e[3]=\" \"+e[3]+\" \"),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),\"nth\"===e[1].slice(0,3)?(e[3]||Z.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*(\"even\"===e[3]||\"odd\"===e[3])),e[5]=+(e[7]+e[8]||\"odd\"===e[3])):e[3]&&Z.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return z.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||\"\":n&&$.test(n)&&(t=le(n,!0))&&(t=n.indexOf(\")\",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(Y,Q).toLowerCase();return\"*\"===e?function(){return!0}:function(e){return j(e,t)}},CLASS:function(e){var t=b[e+\" \"];return t||(t=new RegExp(\"(^|\"+L+\")\"+e+\"(\"+L+\"|$)\"))&&b(e,function(e){return t.test(\"string\"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute(\"class\")||\"\")})},ATTR:function(e,t,n){return function(r){var o=Z.attr(r,e);return null==o?\"!=\"===t:!t||(o+=\"\",\"=\"===t?o===n:\"!=\"===t?o!==n:\"^=\"===t?n&&0===o.indexOf(n):\"*=\"===t?n&&o.indexOf(n)>-1:\"$=\"===t?n&&o.slice(-n.length)===n:\"~=\"===t?(\" \"+o.replace(R,\" \")+\" \").indexOf(n)>-1:\"|=\"===t&&(o===n||o.slice(0,n.length+1)===n+\"-\"))}},CHILD:function(e,t,n,r,o){var i=\"nth\"!==e.slice(0,3),a=\"last\"!==e.slice(-4),s=\"of-type\"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,u){var c,l,f,p,d,h=i!==a?\"nextSibling\":\"previousSibling\",g=t.parentNode,v=s&&t.nodeName.toLowerCase(),x=!u&&!s,b=!1;if(g){if(i){for(;h;){for(f=t;f=f[h];)if(s?j(f,v):1===f.nodeType)return!1;d=h=\"only\"===e&&!d&&\"nextSibling\"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&x){for(b=(p=(c=(l=g[y]||(g[y]={}))[e]||[])[0]===m&&c[1])&&c[2],f=p&&g.childNodes[p];f=++p&&f&&f[h]||(b=p=0)||d.pop();)if(1===f.nodeType&&++b&&f===t){l[e]=[m,p,b];break}}else if(x&&(b=p=(c=(l=t[y]||(t[y]={}))[e]||[])[0]===m&&c[1]),!1===b)for(;(f=++p&&f&&f[h]||(b=p=0)||d.pop())&&(!(s?j(f,v):1===f.nodeType)||!++b||(x&&((l=f[y]||(f[y]={}))[e]=[m,b]),f!==t)););return(b-=o)===r||b%r===0&&b/r>=0}}},PSEUDO:function(e,n){var r,o=t.pseudos[e]||t.setFilters[e.toLowerCase()]||Z.error(\"unsupported pseudo: \"+e);return o[y]?o(n):o.length>1?(r=[e,e,\"\",n],t.setFilters.hasOwnProperty(e.toLowerCase())?te(function(e,t){for(var r,i=o(e,n),a=i.length;a--;)e[r=l.call(e,i[a])]=!(t[r]=i[a])}):function(e){return o(e,0,r)}):o}},pseudos:{not:te(function(e){var t=[],n=[],r=ye(e.replace(q,\"$1\"));return r[y]?te(function(e,t,n,o){for(var i,a=r(e,null,o,[]),s=e.length;s--;)(i=a[s])&&(e[s]=!(t[s]=i))}):function(e,o,i){return t[0]=e,r(t,null,i,n),t[0]=null,!n.pop()}}),has:te(function(e){return function(t){return Z(e,t).length>0}}),contains:te(function(e){return e=e.replace(Y,Q),function(t){return(t.textContent||S.text(t)).indexOf(e)>-1}}),lang:te(function(e){return B.test(e||\"\")||Z.error(\"unsupported lang: \"+e),e=e.replace(Y,Q).toLowerCase(),function(t){var n;do{if(n=f?t.lang:t.getAttribute(\"xml:lang\")||t.getAttribute(\"lang\"))return(n=n.toLowerCase())===e||0===n.indexOf(e+\"-\")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(e){var t=r.location&&r.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===c},focus:function(e){return e===function(){try{return u.activeElement}catch(e){}}()&&u.hasFocus()&&!!(e.type||e.href||~e.tabIndex)},enabled:ie(!1),disabled:ie(!0),checked:function(e){return j(e,\"input\")&&!!e.checked||j(e,\"option\")&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!t.pseudos.empty(e)},header:function(e){return U.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){return j(e,\"input\")&&\"button\"===e.type||j(e,\"button\")},text:function(e){var t;return j(e,\"input\")&&\"text\"===e.type&&(null==(t=e.getAttribute(\"type\"))||\"text\"===t.toLowerCase())},first:ae(function(){return[0]}),last:ae(function(e,t){return[t-1]}),eq:ae(function(e,t,n){return[n<0?n+t:n]}),even:ae(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:ae(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:ae(function(e,t,n){var r;for(r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:ae(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}},t.pseudos.nth=t.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})t.pseudos[e]=re(e);for(e in{submit:!0,reset:!0})t.pseudos[e]=oe(e);function ce(){}function le(e,n){var r,o,i,a,s,u,c,l=w[e+\" \"];if(l)return n?0:l.slice(0);for(s=e,u=[],c=t.preFilter;s;){for(a in r&&!(o=I.exec(s))||(o&&(s=s.slice(o[0].length)||s),u.push(i=[])),r=!1,(o=F.exec(s))&&(r=o.shift(),i.push({value:r,type:o[0].replace(q,\" \")}),s=s.slice(r.length)),t.filter)!(o=z[a].exec(s))||c[a]&&!(o=c[a](o))||(r=o.shift(),i.push({value:r,type:a,matches:o}),s=s.slice(r.length));if(!r)break}return n?s.length:s?Z.error(e):w(e,u).slice(0)}function fe(e){for(var t=0,n=e.length,r=\"\";t<n;t++)r+=e[t].value;return r}function pe(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&\"parentNode\"===i,s=x++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,u){var c,l,f=[m,s];if(u){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,u))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(l=t[y]||(t[y]={}),o&&j(t,o))t=t[r]||t;else{if((c=l[i])&&c[0]===m&&c[1]===s)return f[2]=c[2];if(l[i]=f,f[2]=e(t,n,u))return!0}return!1}}function de(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function he(e,t,n,r,o){for(var i,a=[],s=0,u=e.length,c=null!=t;s<u;s++)(i=e[s])&&(n&&!n(i,r,o)||(a.push(i),c&&t.push(s)));return a}function ge(e,t,n,r,o,i){return r&&!r[y]&&(r=ge(r)),o&&!o[y]&&(o=ge(o,i)),te(function(i,a,s,u){var c,f,p,d,h=[],v=[],y=a.length,m=i||function(e,t,n){for(var r=0,o=t.length;r<o;r++)Z(e,t[r],n);return n}(t||\"*\",s.nodeType?[s]:s,[]),x=!e||!i&&t?m:he(m,h,e,s,u);if(n?n(x,d=o||(i?e:y||r)?[]:a,s,u):d=x,r)for(c=he(d,v),r(c,[],s,u),f=c.length;f--;)(p=c[f])&&(d[v[f]]=!(x[v[f]]=p));if(i){if(o||e){if(o){for(c=[],f=d.length;f--;)(p=d[f])&&c.push(x[f]=p);o(null,d=[],c,u)}for(f=d.length;f--;)(p=d[f])&&(c=o?l.call(i,p):h[f])>-1&&(i[c]=!(a[c]=p))}}else d=he(d===a?d.splice(y,d.length):d),o?o(null,a,d,u):g.apply(a,d)})}function ve(e){for(var r,o,i,a=e.length,s=t.relative[e[0].type],u=s||t.relative[\" \"],c=s?1:0,f=pe(function(e){return e===r},u,!0),p=pe(function(e){return l.call(r,e)>-1},u,!0),d=[function(e,t,o){var i=!s&&(o||t!=n)||((r=t).nodeType?f(e,t,o):p(e,t,o));return r=null,i}];c<a;c++)if(o=t.relative[e[c].type])d=[pe(de(d),o)];else{if((o=t.filter[e[c].type].apply(null,e[c].matches))[y]){for(i=++c;i<a&&!t.relative[e[i].type];i++);return ge(c>1&&de(d),c>1&&fe(e.slice(0,c-1).concat({value:\" \"===e[c-2].type?\"*\":\"\"})).replace(q,\"$1\"),o,c<i&&ve(e.slice(c,i)),i<a&&ve(e=e.slice(i)),i<a&&fe(e))}d.push(o)}return de(d)}function ye(e,r){var o,i=[],a=[],s=T[e+\" \"];if(!s){for(r||(r=le(e)),o=r.length;o--;)(s=ve(r[o]))[y]?i.push(s):a.push(s);s=T(e,function(e,r){var o=r.length>0,i=e.length>0,a=function(a,s,c,l,p){var d,h,v,y=0,x=\"0\",b=a&&[],w=[],T=n,C=a||i&&t.find.TAG(\"*\",p),E=m+=null==T?1:Math.random()||.1,k=C.length;for(p&&(n=s==u||s||p);x!==k&&null!=(d=C[x]);x++){if(i&&d){for(h=0,s||d.ownerDocument==u||(ue(d),c=!f);v=e[h++];)if(v(d,s||u,c)){g.call(l,d);break}p&&(m=E)}o&&((d=!v&&d)&&y--,a&&b.push(d))}if(y+=x,o&&x!==y){for(h=0;v=r[h++];)v(b,w,s,c);if(a){if(y>0)for(;x--;)b[x]||w[x]||(w[x]=A.call(l));w=he(w)}g.apply(l,w),p&&!a&&w.length>0&&y+r.length>1&&S.uniqueSort(l)}return p&&(m=E,n=T),b};return o?te(a):a}(a,i)),s.selector=e}return s}function me(e,n,r,o){var i,a,s,u,c,l=\"function\"==typeof e&&e,p=!o&&le(e=l.selector||e);if(r=r||[],1===p.length){if((a=p[0]=p[0].slice(0)).length>2&&\"ID\"===(s=a[0]).type&&9===n.nodeType&&f&&t.relative[a[1].type]){if(!(n=(t.find.ID(s.matches[0].replace(Y,Q),n)||[])[0]))return r;l&&(n=n.parentNode),e=e.slice(a.shift().value.length)}for(i=z.needsContext.test(e)?0:a.length;i--&&(s=a[i],!t.relative[u=s.type]);)if((c=t.find[u])&&(o=c(s.matches[0].replace(Y,Q),V.test(a[0].type)&&se(n.parentNode)||n))){if(a.splice(i,1),!(e=o.length&&fe(a)))return g.apply(r,o),r;break}}return(l||ye(e,p))(o,n,!f,r,!n||V.test(e)&&se(n.parentNode)||n),r}ce.prototype=t.filters=t.pseudos,t.setFilters=new ce,v.sortStable=y.split(\"\").sort(E).join(\"\")===y,ue(),v.sortDetached=ne(function(e){return 1&e.compareDocumentPosition(u.createElement(\"fieldset\"))}),S.find=Z,S.expr[\":\"]=S.expr.pseudos,S.unique=S.uniqueSort,Z.compile=ye,Z.select=me,Z.setDocument=ue,Z.tokenize=le,Z.escape=S.escapeSelector,Z.getText=S.text,Z.isXML=S.isXMLDoc,Z.selectors=S.expr,Z.support=S.support,Z.uniqueSort=S.uniqueSort}();var _=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&S(e).is(n))break;r.push(e)}return r},R=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},I=S.expr.match.needsContext,F=/^<([a-z][^\\/\\0>:\\x20\\t\\r\\n\\f]*)[\\x20\\t\\r\\n\\f]*\\/?>(?:<\\/\\1>|)$/i;function W(e,t,n){return y(t)?S.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?S.grep(e,function(e){return e===t!==n}):\"string\"!=typeof t?S.grep(e,function(e){return l.call(t,e)>-1!==n}):S.filter(t,e,n)}S.filter=function(e,t,n){var r=t[0];return n&&(e=\":not(\"+e+\")\"),1===t.length&&1===r.nodeType?S.find.matchesSelector(r,e)?[r]:[]:S.find.matches(e,S.grep(t,function(e){return 1===e.nodeType}))},S.fn.extend({find:function(e){var t,n,r=this.length,o=this;if(\"string\"!=typeof e)return this.pushStack(S(e).filter(function(){for(t=0;t<r;t++)if(S.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)S.find(e,o[t],n);return r>1?S.uniqueSort(n):n},filter:function(e){return this.pushStack(W(this,e||[],!1))},not:function(e){return this.pushStack(W(this,e||[],!0))},is:function(e){return!!W(this,\"string\"==typeof e&&I.test(e)?S(e):e||[],!1).length}});var $,B=/^(?:\\s*(<[\\w\\W]+>)[^>]*|#([\\w-]+))$/;(S.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||$,\"string\"==typeof e){if(!(r=\"<\"===e[0]&&\">\"===e[e.length-1]&&e.length>=3?[null,e,null]:B.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof S?t[0]:t,S.merge(this,S.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:x,!0)),F.test(r[1])&&S.isPlainObject(t))for(r in t)y(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=x.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(S):S.makeArray(e,this)}).prototype=S.fn,$=S(x);var z=/^(?:parents|prev(?:Until|All))/,X={children:!0,contents:!0,next:!0,prev:!0};function U(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}S.fn.extend({has:function(e){var t=S(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(S.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a=\"string\"!=typeof e&&S(e);if(!I.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?S.uniqueSort(i):i)},index:function(e){return e?\"string\"==typeof e?l.call(S(e),this[0]):l.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),S.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return _(e,\"parentNode\")},parentsUntil:function(e,t,n){return _(e,\"parentNode\",n)},next:function(e){return U(e,\"nextSibling\")},prev:function(e){return U(e,\"previousSibling\")},nextAll:function(e){return _(e,\"nextSibling\")},prevAll:function(e){return _(e,\"previousSibling\")},nextUntil:function(e,t,n){return _(e,\"nextSibling\",n)},prevUntil:function(e,t,n){return _(e,\"previousSibling\",n)},siblings:function(e){return R((e.parentNode||{}).firstChild,e)},children:function(e){return R(e.firstChild)},contents:function(e){return null!=e.contentDocument&&a(e.contentDocument)?e.contentDocument:(j(e,\"template\")&&(e=e.content||e),S.merge([],e.childNodes))}},function(e,t){S.fn[e]=function(n,r){var o=S.map(this,t,n);return\"Until\"!==e.slice(-5)&&(r=n),r&&\"string\"==typeof r&&(o=S.filter(r,o)),this.length>1&&(X[e]||S.uniqueSort(o),z.test(e)&&o.reverse()),this.pushStack(o)}});var G=/[^\\x20\\t\\r\\n\\f]+/g;function V(e){return e}function Y(e){throw e}function Q(e,t,n,r){var o;try{e&&y(o=e.promise)?o.call(e).done(t).fail(n):e&&y(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}S.Callbacks=function(e){e=\"string\"==typeof e?function(e){var t={};return S.each(e.match(G)||[],function(e,n){t[n]=!0}),t}(e):S.extend({},e);var t,n,r,o,i=[],a=[],s=-1,u=function(){for(o=o||e.once,r=t=!0;a.length;s=-1)for(n=a.shift();++s<i.length;)!1===i[s].apply(n[0],n[1])&&e.stopOnFalse&&(s=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:\"\")},c={add:function(){return i&&(n&&!t&&(s=i.length-1,a.push(n)),function t(n){S.each(n,function(n,r){y(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&\"string\"!==T(r)&&t(r)})}(arguments),n&&!t&&u()),this},remove:function(){return S.each(arguments,function(e,t){for(var n;(n=S.inArray(t,i,n))>-1;)i.splice(n,1),n<=s&&s--}),this},has:function(e){return e?S.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=a=[],i=n=\"\",this},disabled:function(){return!i},lock:function(){return o=a=[],n||t||(i=n=\"\"),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],a.push(n),t||u()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},S.extend({Deferred:function(e){var t=[[\"notify\",\"progress\",S.Callbacks(\"memory\"),S.Callbacks(\"memory\"),2],[\"resolve\",\"done\",S.Callbacks(\"once memory\"),S.Callbacks(\"once memory\"),0,\"resolved\"],[\"reject\",\"fail\",S.Callbacks(\"once memory\"),S.Callbacks(\"once memory\"),1,\"rejected\"]],n=\"pending\",o={state:function(){return n},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return S.Deferred(function(n){S.each(t,function(t,r){var o=y(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+\"With\"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,n,o){var i=0;function a(e,t,n,o){return function(){var s=this,u=arguments,c=function(){var r,c;if(!(e<i)){if((r=n.apply(s,u))===t.promise())throw new TypeError(\"Thenable self-resolution\");c=r&&(\"object\"==typeof r||\"function\"==typeof r)&&r.then,y(c)?o?c.call(r,a(i,t,V,o),a(i,t,Y,o)):(i++,c.call(r,a(i,t,V,o),a(i,t,Y,o),a(i,t,V,t.notifyWith))):(n!==V&&(s=void 0,u=[r]),(o||t.resolveWith)(s,u))}},l=o?c:function(){try{c()}catch(r){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(r,l.error),e+1>=i&&(n!==Y&&(s=void 0,u=[r]),t.rejectWith(s,u))}};e?l():(S.Deferred.getErrorHook?l.error=S.Deferred.getErrorHook():S.Deferred.getStackHook&&(l.error=S.Deferred.getStackHook()),r.setTimeout(l))}}return S.Deferred(function(r){t[0][3].add(a(0,r,y(o)?o:V,r.notifyWith)),t[1][3].add(a(0,r,y(e)?e:V)),t[2][3].add(a(0,r,y(n)?n:Y))}).promise()},promise:function(e){return null!=e?S.extend(e,o):o}},i={};return S.each(t,function(e,r){var a=r[2],s=r[5];o[r[1]]=a.add,s&&a.add(function(){n=s},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(r[3].fire),i[r[0]]=function(){return i[r[0]+\"With\"](this===i?void 0:this,arguments),this},i[r[0]+\"With\"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=s.call(arguments),i=S.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?s.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(Q(e,i.done(a(n)).resolve,i.reject,!t),\"pending\"===i.state()||y(o[n]&&o[n].then)))return i.then();for(;n--;)Q(o[n],a(n),i.reject);return i.promise()}});var J=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(e,t){r.console&&r.console.warn&&e&&J.test(e.name)&&r.console.warn(\"jQuery.Deferred exception: \"+e.message,e.stack,t)},S.readyException=function(e){r.setTimeout(function(){throw e})};var K=S.Deferred();function Z(){x.removeEventListener(\"DOMContentLoaded\",Z),r.removeEventListener(\"load\",Z),S.ready()}S.fn.ready=function(e){return K.then(e).catch(function(e){S.readyException(e)}),this},S.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==e&&--S.readyWait>0||K.resolveWith(x,[S]))}}),S.ready.then=K.then,\"complete\"===x.readyState||\"loading\"!==x.readyState&&!x.documentElement.doScroll?r.setTimeout(S.ready):(x.addEventListener(\"DOMContentLoaded\",Z),r.addEventListener(\"load\",Z));var ee=function(e,t,n,r,o,i,a){var s=0,u=e.length,c=null==n;if(\"object\"===T(n))for(s in o=!0,n)ee(e,t,s,n[s],!0,i,a);else if(void 0!==r&&(o=!0,y(r)||(a=!0),c&&(a?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(S(e),n)})),t))for(;s<u;s++)t(e[s],n,a?r:r.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):u?t(e[0],n):i},te=/^-ms-/,ne=/-([a-z])/g;function re(e,t){return t.toUpperCase()}function oe(e){return e.replace(te,\"ms-\").replace(ne,re)}var ie=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function ae(){this.expando=S.expando+ae.uid++}ae.uid=1,ae.prototype={cache:function(e){var t=e[this.expando];return t||(t={},ie(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if(\"string\"==typeof t)o[oe(t)]=n;else for(r in t)o[oe(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][oe(t)]},access:function(e,t,n){return void 0===t||t&&\"string\"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){n=(t=Array.isArray(t)?t.map(oe):(t=oe(t))in r?[t]:t.match(G)||[]).length;for(;n--;)delete r[t[n]]}(void 0===t||S.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!S.isEmptyObject(t)}};var se=new ae,ue=new ae,ce=/^(?:\\{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/,le=/[A-Z]/g;function fe(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r=\"data-\"+t.replace(le,\"-$&\").toLowerCase(),\"string\"==typeof(n=e.getAttribute(r))){try{n=function(e){return\"true\"===e||\"false\"!==e&&(\"null\"===e?null:e===+e+\"\"?+e:ce.test(e)?JSON.parse(e):e)}(n)}catch(e){}ue.set(e,t,n)}else n=void 0;return n}S.extend({hasData:function(e){return ue.hasData(e)||se.hasData(e)},data:function(e,t,n){return ue.access(e,t,n)},removeData:function(e,t){ue.remove(e,t)},_data:function(e,t,n){return se.access(e,t,n)},_removeData:function(e,t){se.remove(e,t)}}),S.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=ue.get(i),1===i.nodeType&&!se.get(i,\"hasDataAttrs\"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf(\"data-\")&&(r=oe(r.slice(5)),fe(i,r,o[r]));se.set(i,\"hasDataAttrs\",!0)}return o}return\"object\"==typeof e?this.each(function(){ue.set(this,e)}):ee(this,function(t){var n;if(i&&void 0===t)return void 0!==(n=ue.get(i,e))||void 0!==(n=fe(i,e))?n:void 0;this.each(function(){ue.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){ue.remove(this,e)})}}),S.extend({queue:function(e,t,n){var r;if(e)return t=(t||\"fx\")+\"queue\",r=se.get(e,t),n&&(!r||Array.isArray(n)?r=se.access(e,t,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||\"fx\";var n=S.queue(e,t),r=n.length,o=n.shift(),i=S._queueHooks(e,t);\"inprogress\"===o&&(o=n.shift(),r--),o&&(\"fx\"===t&&n.unshift(\"inprogress\"),delete i.stop,o.call(e,function(){S.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+\"queueHooks\";return se.get(e,n)||se.access(e,n,{empty:S.Callbacks(\"once memory\").add(function(){se.remove(e,[t+\"queue\",n])})})}}),S.fn.extend({queue:function(e,t){var n=2;return\"string\"!=typeof e&&(t=e,e=\"fx\",n--),arguments.length<n?S.queue(this[0],e):void 0===t?this:this.each(function(){var n=S.queue(this,e,t);S._queueHooks(this,e),\"fx\"===e&&\"inprogress\"!==n[0]&&S.dequeue(this,e)})},dequeue:function(e){return this.each(function(){S.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||\"fx\",[])},promise:function(e,t){var n,r=1,o=S.Deferred(),i=this,a=this.length,s=function(){--r||o.resolveWith(i,[i])};for(\"string\"!=typeof e&&(t=e,e=void 0),e=e||\"fx\";a--;)(n=se.get(i[a],e+\"queueHooks\"))&&n.empty&&(r++,n.empty.add(s));return s(),o.promise(t)}});var pe=/[+-]?(?:\\d*\\.|)\\d+(?:[eE][+-]?\\d+|)/.source,de=new RegExp(\"^(?:([+-])=|)(\"+pe+\")([a-z%]*)$\",\"i\"),he=[\"Top\",\"Right\",\"Bottom\",\"Left\"],ge=x.documentElement,ve=function(e){return S.contains(e.ownerDocument,e)},ye={composed:!0};ge.getRootNode&&(ve=function(e){return S.contains(e.ownerDocument,e)||e.getRootNode(ye)===e.ownerDocument});var me=function(e,t){return\"none\"===(e=t||e).style.display||\"\"===e.style.display&&ve(e)&&\"none\"===S.css(e,\"display\")};function xe(e,t,n,r){var o,i,a=20,s=r?function(){return r.cur()}:function(){return S.css(e,t,\"\")},u=s(),c=n&&n[3]||(S.cssNumber[t]?\"\":\"px\"),l=e.nodeType&&(S.cssNumber[t]||\"px\"!==c&&+u)&&de.exec(S.css(e,t));if(l&&l[3]!==c){for(u/=2,c=c||l[3],l=+u||1;a--;)S.style(e,t,l+c),(1-i)*(1-(i=s()/u||.5))<=0&&(a=0),l/=i;l*=2,S.style(e,t,l+c),n=n||[]}return n&&(l=+l||+u||0,o=n[1]?l+(n[1]+1)*n[2]:+n[2],r&&(r.unit=c,r.start=l,r.end=o)),o}var be={};function we(e){var t,n=e.ownerDocument,r=e.nodeName,o=be[r];return o||(t=n.body.appendChild(n.createElement(r)),o=S.css(t,\"display\"),t.parentNode.removeChild(t),\"none\"===o&&(o=\"block\"),be[r]=o,o)}function Te(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?(\"none\"===n&&(o[i]=se.get(r,\"display\")||null,o[i]||(r.style.display=\"\")),\"\"===r.style.display&&me(r)&&(o[i]=we(r))):\"none\"!==n&&(o[i]=\"none\",se.set(r,\"display\",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}S.fn.extend({show:function(){return Te(this,!0)},hide:function(){return Te(this)},toggle:function(e){return\"boolean\"==typeof e?e?this.show():this.hide():this.each(function(){me(this)?S(this).show():S(this).hide()})}});var Ce,Ee,Se=/^(?:checkbox|radio)$/i,ke=/<([a-z][^\\/\\0>\\x20\\t\\r\\n\\f]*)/i,je=/^$|^module$|\\/(?:java|ecma)script/i;Ce=x.createDocumentFragment().appendChild(x.createElement(\"div\")),(Ee=x.createElement(\"input\")).setAttribute(\"type\",\"radio\"),Ee.setAttribute(\"checked\",\"checked\"),Ee.setAttribute(\"name\",\"t\"),Ce.appendChild(Ee),v.checkClone=Ce.cloneNode(!0).cloneNode(!0).lastChild.checked,Ce.innerHTML=\"<textarea>x</textarea>\",v.noCloneChecked=!!Ce.cloneNode(!0).lastChild.defaultValue,Ce.innerHTML=\"<option></option>\",v.option=!!Ce.lastChild;var Ae={thead:[1,\"<table>\",\"</table>\"],col:[2,\"<table><colgroup>\",\"</colgroup></table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],_default:[0,\"\",\"\"]};function De(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||\"*\"):void 0!==e.querySelectorAll?e.querySelectorAll(t||\"*\"):[],void 0===t||t&&j(e,t)?S.merge([e],n):n}function Ne(e,t){for(var n=0,r=e.length;n<r;n++)se.set(e[n],\"globalEval\",!t||se.get(t[n],\"globalEval\"))}Ae.tbody=Ae.tfoot=Ae.colgroup=Ae.caption=Ae.thead,Ae.th=Ae.td,v.option||(Ae.optgroup=Ae.option=[1,\"<select multiple='multiple'>\",\"</select>\"]);var Le=/<|&#?\\w+;/;function qe(e,t,n,r,o){for(var i,a,s,u,c,l,f=t.createDocumentFragment(),p=[],d=0,h=e.length;d<h;d++)if((i=e[d])||0===i)if(\"object\"===T(i))S.merge(p,i.nodeType?[i]:i);else if(Le.test(i)){for(a=a||f.appendChild(t.createElement(\"div\")),s=(ke.exec(i)||[\"\",\"\"])[1].toLowerCase(),u=Ae[s]||Ae._default,a.innerHTML=u[1]+S.htmlPrefilter(i)+u[2],l=u[0];l--;)a=a.lastChild;S.merge(p,a.childNodes),(a=f.firstChild).textContent=\"\"}else p.push(t.createTextNode(i));for(f.textContent=\"\",d=0;i=p[d++];)if(r&&S.inArray(i,r)>-1)o&&o.push(i);else if(c=ve(i),a=De(f.appendChild(i),\"script\"),c&&Ne(a),n)for(l=0;i=a[l++];)je.test(i.type||\"\")&&n.push(i);return f}var Oe=/^([^.]*)(?:\\.(.+)|)/;function He(){return!0}function Pe(){return!1}function Me(e,t,n,r,o,i){var a,s;if(\"object\"==typeof t){for(s in\"string\"!=typeof n&&(r=r||n,n=void 0),t)Me(e,s,n,r,t[s],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&(\"string\"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=Pe;else if(!o)return e;return 1===i&&(a=o,o=function(e){return S().off(e),a.apply(this,arguments)},o.guid=a.guid||(a.guid=S.guid++)),e.each(function(){S.event.add(this,t,o,r,n)})}function _e(e,t,n){n?(se.set(e,t,!1),S.event.add(e,t,{namespace:!1,handler:function(e){var n,r=se.get(this,t);if(1&e.isTrigger&&this[t]){if(r)(S.event.special[t]||{}).delegateType&&e.stopPropagation();else if(r=s.call(arguments),se.set(this,t,r),this[t](),n=se.get(this,t),se.set(this,t,!1),r!==n)return e.stopImmediatePropagation(),e.preventDefault(),n}else r&&(se.set(this,t,S.event.trigger(r[0],r.slice(1),this)),e.stopPropagation(),e.isImmediatePropagationStopped=He)}})):void 0===se.get(e,t)&&S.event.add(e,t,He)}S.event={global:{},add:function(e,t,n,r,o){var i,a,s,u,c,l,f,p,d,h,g,v=se.get(e);if(ie(e))for(n.handler&&(n=(i=n).handler,o=i.selector),o&&S.find.matchesSelector(ge,o),n.guid||(n.guid=S.guid++),(u=v.events)||(u=v.events=Object.create(null)),(a=v.handle)||(a=v.handle=function(t){return void 0!==S&&S.event.triggered!==t.type?S.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||\"\").match(G)||[\"\"]).length;c--;)d=g=(s=Oe.exec(t[c])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d&&(f=S.event.special[d]||{},d=(o?f.delegateType:f.bindType)||d,f=S.event.special[d]||{},l=S.extend({type:d,origType:g,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&S.expr.match.needsContext.test(o),namespace:h.join(\".\")},i),(p=u[d])||((p=u[d]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(d,a)),f.add&&(f.add.call(e,l),l.handler.guid||(l.handler.guid=n.guid)),o?p.splice(p.delegateCount++,0,l):p.push(l),S.event.global[d]=!0)},remove:function(e,t,n,r,o){var i,a,s,u,c,l,f,p,d,h,g,v=se.hasData(e)&&se.get(e);if(v&&(u=v.events)){for(c=(t=(t||\"\").match(G)||[\"\"]).length;c--;)if(d=g=(s=Oe.exec(t[c])||[])[1],h=(s[2]||\"\").split(\".\").sort(),d){for(f=S.event.special[d]||{},p=u[d=(r?f.delegateType:f.bindType)||d]||[],s=s[2]&&new RegExp(\"(^|\\\\.)\"+h.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"),a=i=p.length;i--;)l=p[i],!o&&g!==l.origType||n&&n.guid!==l.guid||s&&!s.test(l.namespace)||r&&r!==l.selector&&(\"**\"!==r||!l.selector)||(p.splice(i,1),l.selector&&p.delegateCount--,f.remove&&f.remove.call(e,l));a&&!p.length&&(f.teardown&&!1!==f.teardown.call(e,h,v.handle)||S.removeEvent(e,d,v.handle),delete u[d])}else for(d in u)S.event.remove(e,d+t[c],n,r,!0);S.isEmptyObject(u)&&se.remove(e,\"handle events\")}},dispatch:function(e){var t,n,r,o,i,a,s=new Array(arguments.length),u=S.event.fix(e),c=(se.get(this,\"events\")||Object.create(null))[u.type]||[],l=S.event.special[u.type]||{};for(s[0]=u,t=1;t<arguments.length;t++)s[t]=arguments[t];if(u.delegateTarget=this,!l.preDispatch||!1!==l.preDispatch.call(this,u)){for(a=S.event.handlers.call(this,u,c),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((S.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return l.postDispatch&&l.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,s=[],u=t.delegateCount,c=e.target;if(u&&c.nodeType&&!(\"click\"===e.type&&e.button>=1))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&(\"click\"!==e.type||!0!==c.disabled)){for(i=[],a={},n=0;n<u;n++)void 0===a[o=(r=t[n]).selector+\" \"]&&(a[o]=r.needsContext?S(o,this).index(c)>-1:S.find(o,this,null,[c]).length),a[o]&&i.push(r);i.length&&s.push({elem:c,handlers:i})}return c=this,u<t.length&&s.push({elem:c,handlers:t.slice(u)}),s},addProp:function(e,t){Object.defineProperty(S.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[S.expando]?e:new S.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return Se.test(t.type)&&t.click&&j(t,\"input\")&&_e(t,\"click\",!0),!1},trigger:function(e){var t=this||e;return Se.test(t.type)&&t.click&&j(t,\"input\")&&_e(t,\"click\"),!0},_default:function(e){var t=e.target;return Se.test(t.type)&&t.click&&j(t,\"input\")&&se.get(t,\"click\")||j(t,\"a\")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},S.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},S.Event=function(e,t){if(!(this instanceof S.Event))return new S.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?He:Pe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&S.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Pe,isPropagationStopped:Pe,isImmediatePropagationStopped:Pe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=He,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=He,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=He,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:\"focusin\",blur:\"focusout\"},function(e,t){function n(e){if(x.documentMode){var n=se.get(this,\"handle\"),r=S.event.fix(e);r.type=\"focusin\"===e.type?\"focus\":\"blur\",r.isSimulated=!0,n(e),r.target===r.currentTarget&&n(r)}else S.event.simulate(t,e.target,S.event.fix(e))}S.event.special[e]={setup:function(){var r;if(_e(this,e,!0),!x.documentMode)return!1;(r=se.get(this,t))||this.addEventListener(t,n),se.set(this,t,(r||0)+1)},trigger:function(){return _e(this,e),!0},teardown:function(){var e;if(!x.documentMode)return!1;(e=se.get(this,t)-1)?se.set(this,t,e):(this.removeEventListener(t,n),se.remove(this,t))},_default:function(t){return se.get(t.target,e)},delegateType:t},S.event.special[t]={setup:function(){var r=this.ownerDocument||this.document||this,o=x.documentMode?this:r,i=se.get(o,t);i||(x.documentMode?this.addEventListener(t,n):r.addEventListener(e,n,!0)),se.set(o,t,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,o=x.documentMode?this:r,i=se.get(o,t)-1;i?se.set(o,t,i):(x.documentMode?this.removeEventListener(t,n):r.removeEventListener(e,n,!0),se.remove(o,t))}}}),S.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\",pointerenter:\"pointerover\",pointerleave:\"pointerout\"},function(e,t){S.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||S.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),S.fn.extend({on:function(e,t,n,r){return Me(this,e,t,n,r)},one:function(e,t,n,r){return Me(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,S(e.delegateTarget).off(r.namespace?r.origType+\".\"+r.namespace:r.origType,r.selector,r.handler),this;if(\"object\"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&\"function\"!=typeof t||(n=t,t=void 0),!1===n&&(n=Pe),this.each(function(){S.event.remove(this,e,n,t)})}});var Re=/<script|<style|<link/i,Ie=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Fe=/^\\s*<!\\[CDATA\\[|\\]\\]>\\s*$/g;function We(e,t){return j(e,\"table\")&&j(11!==t.nodeType?t:t.firstChild,\"tr\")&&S(e).children(\"tbody\")[0]||e}function $e(e){return e.type=(null!==e.getAttribute(\"type\"))+\"/\"+e.type,e}function Be(e){return\"true/\"===(e.type||\"\").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute(\"type\"),e}function ze(e,t){var n,r,o,i,a,s;if(1===t.nodeType){if(se.hasData(e)&&(s=se.get(e).events))for(o in se.remove(t,\"handle events\"),s)for(n=0,r=s[o].length;n<r;n++)S.event.add(t,o,s[o][n]);ue.hasData(e)&&(i=ue.access(e),a=S.extend({},i),ue.set(t,a))}}function Xe(e,t){var n=t.nodeName.toLowerCase();\"input\"===n&&Se.test(e.type)?t.checked=e.checked:\"input\"!==n&&\"textarea\"!==n||(t.defaultValue=e.defaultValue)}function Ue(e,t,n,r){t=u(t);var o,i,a,s,c,l,f=0,p=e.length,d=p-1,h=t[0],g=y(h);if(g||p>1&&\"string\"==typeof h&&!v.checkClone&&Ie.test(h))return e.each(function(o){var i=e.eq(o);g&&(t[0]=h.call(this,o,i.html())),Ue(i,t,n,r)});if(p&&(i=(o=qe(t,e[0].ownerDocument,!1,e,r)).firstChild,1===o.childNodes.length&&(o=i),i||r)){for(s=(a=S.map(De(o,\"script\"),$e)).length;f<p;f++)c=o,f!==d&&(c=S.clone(c,!0,!0),s&&S.merge(a,De(c,\"script\"))),n.call(e[f],c,f);if(s)for(l=a[a.length-1].ownerDocument,S.map(a,Be),f=0;f<s;f++)c=a[f],je.test(c.type||\"\")&&!se.access(c,\"globalEval\")&&S.contains(l,c)&&(c.src&&\"module\"!==(c.type||\"\").toLowerCase()?S._evalUrl&&!c.noModule&&S._evalUrl(c.src,{nonce:c.nonce||c.getAttribute(\"nonce\")},l):w(c.textContent.replace(Fe,\"\"),c,l))}return e}function Ge(e,t,n){for(var r,o=t?S.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||S.cleanData(De(r)),r.parentNode&&(n&&ve(r)&&Ne(De(r,\"script\")),r.parentNode.removeChild(r));return e}S.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var r,o,i,a,s=e.cloneNode(!0),u=ve(e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||S.isXMLDoc(e)))for(a=De(s),r=0,o=(i=De(e)).length;r<o;r++)Xe(i[r],a[r]);if(t)if(n)for(i=i||De(e),a=a||De(s),r=0,o=i.length;r<o;r++)ze(i[r],a[r]);else ze(e,s);return(a=De(s,\"script\")).length>0&&Ne(a,!u&&De(e,\"script\")),s},cleanData:function(e){for(var t,n,r,o=S.event.special,i=0;void 0!==(n=e[i]);i++)if(ie(n)){if(t=n[se.expando]){if(t.events)for(r in t.events)o[r]?S.event.remove(n,r):S.removeEvent(n,r,t.handle);n[se.expando]=void 0}n[ue.expando]&&(n[ue.expando]=void 0)}}}),S.fn.extend({detach:function(e){return Ge(this,e,!0)},remove:function(e){return Ge(this,e)},text:function(e){return ee(this,function(e){return void 0===e?S.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ue(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||We(this,e).appendChild(e)})},prepend:function(){return Ue(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=We(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return Ue(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ue(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(S.cleanData(De(e,!1)),e.textContent=\"\");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return S.clone(this,e,t)})},html:function(e){return ee(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if(\"string\"==typeof e&&!Re.test(e)&&!Ae[(ke.exec(e)||[\"\",\"\"])[1].toLowerCase()]){e=S.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(S.cleanData(De(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return Ue(this,arguments,function(t){var n=this.parentNode;S.inArray(this,e)<0&&(S.cleanData(De(this)),n&&n.replaceChild(t,this))},e)}}),S.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(e,t){S.fn[e]=function(e){for(var n,r=[],o=S(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),S(o[a])[t](n),c.apply(r,n.get());return this.pushStack(r)}});var Ve=new RegExp(\"^(\"+pe+\")(?!px)[a-z%]+$\",\"i\"),Ye=/^--/,Qe=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=r),t.getComputedStyle(e)},Je=function(e,t,n){var r,o,i={};for(o in t)i[o]=e.style[o],e.style[o]=t[o];for(o in r=n.call(e),t)e.style[o]=i[o];return r},Ke=new RegExp(he.join(\"|\"),\"i\");function Ze(e,t,n){var r,o,i,a,s=Ye.test(t),u=e.style;return(n=n||Qe(e))&&(a=n.getPropertyValue(t)||n[t],s&&a&&(a=a.replace(q,\"$1\")||void 0),\"\"!==a||ve(e)||(a=S.style(e,t)),!v.pixelBoxStyles()&&Ve.test(a)&&Ke.test(t)&&(r=u.width,o=u.minWidth,i=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=o,u.maxWidth=i)),void 0!==a?a+\"\":a}function et(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(l){c.style.cssText=\"position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0\",l.style.cssText=\"position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%\",ge.appendChild(c).appendChild(l);var e=r.getComputedStyle(l);n=\"1%\"!==e.top,u=12===t(e.marginLeft),l.style.right=\"60%\",a=36===t(e.right),o=36===t(e.width),l.style.position=\"absolute\",i=12===t(l.offsetWidth/3),ge.removeChild(c),l=null}}function t(e){return Math.round(parseFloat(e))}var n,o,i,a,s,u,c=x.createElement(\"div\"),l=x.createElement(\"div\");l.style&&(l.style.backgroundClip=\"content-box\",l.cloneNode(!0).style.backgroundClip=\"\",v.clearCloneStyle=\"content-box\"===l.style.backgroundClip,S.extend(v,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),n},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i},reliableTrDimensions:function(){var e,t,n,o;return null==s&&(e=x.createElement(\"table\"),t=x.createElement(\"tr\"),n=x.createElement(\"div\"),e.style.cssText=\"position:absolute;left:-11111px;border-collapse:separate\",t.style.cssText=\"box-sizing:content-box;border:1px solid\",t.style.height=\"1px\",n.style.height=\"9px\",n.style.display=\"block\",ge.appendChild(e).appendChild(t).appendChild(n),o=r.getComputedStyle(t),s=parseInt(o.height,10)+parseInt(o.borderTopWidth,10)+parseInt(o.borderBottomWidth,10)===t.offsetHeight,ge.removeChild(e)),s}}))}();var tt=[\"Webkit\",\"Moz\",\"ms\"],nt=x.createElement(\"div\").style,rt={};function ot(e){var t=S.cssProps[e]||rt[e];return t||(e in nt?e:rt[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=tt.length;n--;)if((e=tt[n]+t)in nt)return e}(e)||e)}var it=/^(none|table(?!-c[ea]).+)/,at={position:\"absolute\",visibility:\"hidden\",display:\"block\"},st={letterSpacing:\"0\",fontWeight:\"400\"};function ut(e,t,n){var r=de.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||\"px\"):t}function ct(e,t,n,r,o,i){var a=\"width\"===t?1:0,s=0,u=0,c=0;if(n===(r?\"border\":\"content\"))return 0;for(;a<4;a+=2)\"margin\"===n&&(c+=S.css(e,n+he[a],!0,o)),r?(\"content\"===n&&(u-=S.css(e,\"padding\"+he[a],!0,o)),\"margin\"!==n&&(u-=S.css(e,\"border\"+he[a]+\"Width\",!0,o))):(u+=S.css(e,\"padding\"+he[a],!0,o),\"padding\"!==n?u+=S.css(e,\"border\"+he[a]+\"Width\",!0,o):s+=S.css(e,\"border\"+he[a]+\"Width\",!0,o));return!r&&i>=0&&(u+=Math.max(0,Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-i-u-s-.5))||0),u+c}function lt(e,t,n){var r=Qe(e),o=(!v.boxSizingReliable()||n)&&\"border-box\"===S.css(e,\"boxSizing\",!1,r),i=o,a=Ze(e,t,r),s=\"offset\"+t[0].toUpperCase()+t.slice(1);if(Ve.test(a)){if(!n)return a;a=\"auto\"}return(!v.boxSizingReliable()&&o||!v.reliableTrDimensions()&&j(e,\"tr\")||\"auto\"===a||!parseFloat(a)&&\"inline\"===S.css(e,\"display\",!1,r))&&e.getClientRects().length&&(o=\"border-box\"===S.css(e,\"boxSizing\",!1,r),(i=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+ct(e,t,n||(o?\"border\":\"content\"),i,r,a)+\"px\"}function ft(e,t,n,r,o){return new ft.prototype.init(e,t,n,r,o)}S.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=Ze(e,\"opacity\");return\"\"===n?\"1\":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,s=oe(t),u=Ye.test(t),c=e.style;if(u||(t=ot(s)),a=S.cssHooks[t]||S.cssHooks[s],void 0===n)return a&&\"get\"in a&&void 0!==(o=a.get(e,!1,r))?o:c[t];\"string\"===(i=typeof n)&&(o=de.exec(n))&&o[1]&&(n=xe(e,t,o),i=\"number\"),null!=n&&n==n&&(\"number\"!==i||u||(n+=o&&o[3]||(S.cssNumber[s]?\"\":\"px\")),v.clearCloneStyle||\"\"!==n||0!==t.indexOf(\"background\")||(c[t]=\"inherit\"),a&&\"set\"in a&&void 0===(n=a.set(e,n,r))||(u?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,r){var o,i,a,s=oe(t);return Ye.test(t)||(t=ot(s)),(a=S.cssHooks[t]||S.cssHooks[s])&&\"get\"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=Ze(e,t,r)),\"normal\"===o&&t in st&&(o=st[t]),\"\"===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),S.each([\"height\",\"width\"],function(e,t){S.cssHooks[t]={get:function(e,n,r){if(n)return!it.test(S.css(e,\"display\"))||e.getClientRects().length&&e.getBoundingClientRect().width?lt(e,t,r):Je(e,at,function(){return lt(e,t,r)})},set:function(e,n,r){var o,i=Qe(e),a=!v.scrollboxSize()&&\"absolute\"===i.position,s=(a||r)&&\"border-box\"===S.css(e,\"boxSizing\",!1,i),u=r?ct(e,t,r,s,i):0;return s&&a&&(u-=Math.ceil(e[\"offset\"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-ct(e,t,\"border\",!1,i)-.5)),u&&(o=de.exec(n))&&\"px\"!==(o[3]||\"px\")&&(e.style[t]=n,n=S.css(e,t)),ut(0,n,u)}}}),S.cssHooks.marginLeft=et(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(Ze(e,\"marginLeft\"))||e.getBoundingClientRect().left-Je(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+\"px\"}),S.each({margin:\"\",padding:\"\",border:\"Width\"},function(e,t){S.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i=\"string\"==typeof n?n.split(\" \"):[n];r<4;r++)o[e+he[r]+t]=i[r]||i[r-2]||i[0];return o}},\"margin\"!==e&&(S.cssHooks[e+t].set=ut)}),S.fn.extend({css:function(e,t){return ee(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=Qe(e),o=t.length;a<o;a++)i[t[a]]=S.css(e,t[a],!1,r);return i}return void 0!==n?S.style(e,t,n):S.css(e,t)},e,t,arguments.length>1)}}),S.Tween=ft,ft.prototype={constructor:ft,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||S.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(S.cssNumber[n]?\"\":\"px\")},cur:function(){var e=ft.propHooks[this.prop];return e&&e.get?e.get(this):ft.propHooks._default.get(this)},run:function(e){var t,n=ft.propHooks[this.prop];return this.options.duration?this.pos=t=S.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):ft.propHooks._default.set(this),this}},ft.prototype.init.prototype=ft.prototype,ft.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=S.css(e.elem,e.prop,\"\"))&&\"auto\"!==t?t:0},set:function(e){S.fx.step[e.prop]?S.fx.step[e.prop](e):1!==e.elem.nodeType||!S.cssHooks[e.prop]&&null==e.elem.style[ot(e.prop)]?e.elem[e.prop]=e.now:S.style(e.elem,e.prop,e.now+e.unit)}}},ft.propHooks.scrollTop=ft.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},S.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:\"swing\"},S.fx=ft.prototype.init,S.fx.step={};var pt,dt,ht=/^(?:toggle|show|hide)$/,gt=/queueHooks$/;function vt(){dt&&(!1===x.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(vt):r.setTimeout(vt,S.fx.interval),S.fx.tick())}function yt(){return r.setTimeout(function(){pt=void 0}),pt=Date.now()}function mt(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)o[\"margin\"+(n=he[r])]=o[\"padding\"+n]=e;return t&&(o.opacity=o.width=e),o}function xt(e,t,n){for(var r,o=(bt.tweeners[t]||[]).concat(bt.tweeners[\"*\"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function bt(e,t,n){var r,o,i=0,a=bt.prefilters.length,s=S.Deferred().always(function(){delete u.elem}),u=function(){if(o)return!1;for(var t=pt||yt(),n=Math.max(0,c.startTime+c.duration-t),r=1-(n/c.duration||0),i=0,a=c.tweens.length;i<a;i++)c.tweens[i].run(r);return s.notifyWith(e,[c,r,n]),r<1&&a?n:(a||s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c]),!1)},c=s.promise({elem:e,props:S.extend({},t),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:t,originalOptions:n,startTime:pt||yt(),duration:n.duration,tweens:[],createTween:function(t,n){var r=S.Tween(e,c.opts,t,n,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(r),r},stop:function(t){var n=0,r=t?c.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)c.tweens[n].run(1);return t?(s.notifyWith(e,[c,1,0]),s.resolveWith(e,[c,t])):s.rejectWith(e,[c,t]),this}}),l=c.props;for(!function(e,t){var n,r,o,i,a;for(n in e)if(o=t[r=oe(n)],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=S.cssHooks[r])&&\"expand\"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(l,c.opts.specialEasing);i<a;i++)if(r=bt.prefilters[i].call(c,e,l,c.opts))return y(r.stop)&&(S._queueHooks(c.elem,c.opts.queue).stop=r.stop.bind(r)),r;return S.map(l,xt,c),y(c.opts.start)&&c.opts.start.call(e,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),S.fx.timer(S.extend(u,{elem:e,anim:c,queue:c.opts.queue})),c}S.Animation=S.extend(bt,{tweeners:{\"*\":[function(e,t){var n=this.createTween(e,t);return xe(n.elem,e,de.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=[\"*\"]):e=e.match(G);for(var n,r=0,o=e.length;r<o;r++)n=e[r],bt.tweeners[n]=bt.tweeners[n]||[],bt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,s,u,c,l,f=\"width\"in t||\"height\"in t,p=this,d={},h=e.style,g=e.nodeType&&me(e),v=se.get(e,\"fxshow\");for(r in n.queue||(null==(a=S._queueHooks(e,\"fx\")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,p.always(function(){p.always(function(){a.unqueued--,S.queue(e,\"fx\").length||a.empty.fire()})})),t)if(o=t[r],ht.test(o)){if(delete t[r],i=i||\"toggle\"===o,o===(g?\"hide\":\"show\")){if(\"show\"!==o||!v||void 0===v[r])continue;g=!0}d[r]=v&&v[r]||S.style(e,r)}if((u=!S.isEmptyObject(t))||!S.isEmptyObject(d))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(c=v&&v.display)&&(c=se.get(e,\"display\")),\"none\"===(l=S.css(e,\"display\"))&&(c?l=c:(Te([e],!0),c=e.style.display||c,l=S.css(e,\"display\"),Te([e]))),(\"inline\"===l||\"inline-block\"===l&&null!=c)&&\"none\"===S.css(e,\"float\")&&(u||(p.done(function(){h.display=c}),null==c&&(l=h.display,c=\"none\"===l?\"\":l)),h.display=\"inline-block\")),n.overflow&&(h.overflow=\"hidden\",p.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),u=!1,d)u||(v?\"hidden\"in v&&(g=v.hidden):v=se.access(e,\"fxshow\",{display:c}),i&&(v.hidden=!g),g&&Te([e],!0),p.done(function(){for(r in g||Te([e]),se.remove(e,\"fxshow\"),d)S.style(e,r,d[r])})),u=xt(g?v[r]:0,r,p),r in v||(v[r]=u.start,g&&(u.end=u.start,u.start=0))}],prefilter:function(e,t){t?bt.prefilters.unshift(e):bt.prefilters.push(e)}}),S.speed=function(e,t,n){var r=e&&\"object\"==typeof e?S.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return S.fx.off?r.duration=0:\"number\"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue=\"fx\"),r.old=r.complete,r.complete=function(){y(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(e,t,n,r){return this.filter(me).css(\"opacity\",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=S.isEmptyObject(e),i=S.speed(t,n,r),a=function(){var t=bt(this,S.extend({},e),i);(o||se.get(this,\"finish\"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return\"string\"!=typeof e&&(n=t,t=e,e=void 0),t&&this.queue(e||\"fx\",[]),this.each(function(){var t=!0,o=null!=e&&e+\"queueHooks\",i=S.timers,a=se.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&gt.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||S.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||\"fx\"),this.each(function(){var t,n=se.get(this),r=n[e+\"queue\"],o=n[e+\"queueHooks\"],i=S.timers,a=r?r.length:0;for(n.finish=!0,S.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),S.each([\"toggle\",\"show\",\"hide\"],function(e,t){var n=S.fn[t];S.fn[t]=function(e,r,o){return null==e||\"boolean\"==typeof e?n.apply(this,arguments):this.animate(mt(t,!0),e,r,o)}}),S.each({slideDown:mt(\"show\"),slideUp:mt(\"hide\"),slideToggle:mt(\"toggle\"),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"},fadeToggle:{opacity:\"toggle\"}},function(e,t){S.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),S.timers=[],S.fx.tick=function(){var e,t=0,n=S.timers;for(pt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||S.fx.stop(),pt=void 0},S.fx.timer=function(e){S.timers.push(e),S.fx.start()},S.fx.interval=13,S.fx.start=function(){dt||(dt=!0,vt())},S.fx.stop=function(){dt=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(e,t){return e=S.fx&&S.fx.speeds[e]||e,t=t||\"fx\",this.queue(t,function(t,n){var o=r.setTimeout(t,e);n.stop=function(){r.clearTimeout(o)}})},function(){var e=x.createElement(\"input\"),t=x.createElement(\"select\").appendChild(x.createElement(\"option\"));e.type=\"checkbox\",v.checkOn=\"\"!==e.value,v.optSelected=t.selected,(e=x.createElement(\"input\")).value=\"t\",e.type=\"radio\",v.radioValue=\"t\"===e.value}();var wt,Tt=S.expr.attrHandle;S.fn.extend({attr:function(e,t){return ee(this,S.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){S.removeAttr(this,e)})}}),S.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?S.prop(e,t,n):(1===i&&S.isXMLDoc(e)||(o=S.attrHooks[t.toLowerCase()]||(S.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void S.removeAttr(e,t):o&&\"set\"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+\"\"),n):o&&\"get\"in o&&null!==(r=o.get(e,t))?r:null==(r=S.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&\"radio\"===t&&j(e,\"input\")){var n=e.value;return e.setAttribute(\"type\",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(G);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?S.removeAttr(e,n):e.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\\w+/g),function(e,t){var n=Tt[t]||S.find.attr;Tt[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=Tt[a],Tt[a]=o,o=null!=n(e,t,r)?a:null,Tt[a]=i),o}});var Ct=/^(?:input|select|textarea|button)$/i,Et=/^(?:a|area)$/i;function St(e){return(e.match(G)||[]).join(\" \")}function kt(e){return e.getAttribute&&e.getAttribute(\"class\")||\"\"}function jt(e){return Array.isArray(e)?e:\"string\"==typeof e&&e.match(G)||[]}S.fn.extend({prop:function(e,t){return ee(this,S.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[S.propFix[e]||e]})}}),S.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&S.isXMLDoc(e)||(t=S.propFix[t]||t,o=S.propHooks[t]),void 0!==n?o&&\"set\"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&\"get\"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=S.find.attr(e,\"tabindex\");return t?parseInt(t,10):Ct.test(e.nodeName)||Et.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:\"htmlFor\",class:\"className\"}}),v.optSelected||(S.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),S.each([\"tabIndex\",\"readOnly\",\"maxLength\",\"cellSpacing\",\"cellPadding\",\"rowSpan\",\"colSpan\",\"useMap\",\"frameBorder\",\"contentEditable\"],function(){S.propFix[this.toLowerCase()]=this}),S.fn.extend({addClass:function(e){var t,n,r,o,i,a;return y(e)?this.each(function(t){S(this).addClass(e.call(this,t,kt(this)))}):(t=jt(e)).length?this.each(function(){if(r=kt(this),n=1===this.nodeType&&\" \"+St(r)+\" \"){for(i=0;i<t.length;i++)o=t[i],n.indexOf(\" \"+o+\" \")<0&&(n+=o+\" \");a=St(n),r!==a&&this.setAttribute(\"class\",a)}}):this},removeClass:function(e){var t,n,r,o,i,a;return y(e)?this.each(function(t){S(this).removeClass(e.call(this,t,kt(this)))}):arguments.length?(t=jt(e)).length?this.each(function(){if(r=kt(this),n=1===this.nodeType&&\" \"+St(r)+\" \"){for(i=0;i<t.length;i++)for(o=t[i];n.indexOf(\" \"+o+\" \")>-1;)n=n.replace(\" \"+o+\" \",\" \");a=St(n),r!==a&&this.setAttribute(\"class\",a)}}):this:this.attr(\"class\",\"\")},toggleClass:function(e,t){var n,r,o,i,a=typeof e,s=\"string\"===a||Array.isArray(e);return y(e)?this.each(function(n){S(this).toggleClass(e.call(this,n,kt(this),t),t)}):\"boolean\"==typeof t&&s?t?this.addClass(e):this.removeClass(e):(n=jt(e),this.each(function(){if(s)for(i=S(this),o=0;o<n.length;o++)r=n[o],i.hasClass(r)?i.removeClass(r):i.addClass(r);else void 0!==e&&\"boolean\"!==a||((r=kt(this))&&se.set(this,\"__className__\",r),this.setAttribute&&this.setAttribute(\"class\",r||!1===e?\"\":se.get(this,\"__className__\")||\"\"))}))},hasClass:function(e){var t,n,r=0;for(t=\" \"+e+\" \";n=this[r++];)if(1===n.nodeType&&(\" \"+St(kt(n))+\" \").indexOf(t)>-1)return!0;return!1}});var At=/\\r/g;S.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=y(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,S(this).val()):e)?o=\"\":\"number\"==typeof o?o+=\"\":Array.isArray(o)&&(o=S.map(o,function(e){return null==e?\"\":e+\"\"})),(t=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&\"set\"in t&&void 0!==t.set(this,o,\"value\")||(this.value=o))})):o?(t=S.valHooks[o.type]||S.valHooks[o.nodeName.toLowerCase()])&&\"get\"in t&&void 0!==(n=t.get(o,\"value\"))?n:\"string\"==typeof(n=o.value)?n.replace(At,\"\"):null==n?\"\":n:void 0}}),S.extend({valHooks:{option:{get:function(e){var t=S.find.attr(e,\"value\");return null!=t?t:St(S.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a=\"select-one\"===e.type,s=a?null:[],u=a?i+1:o.length;for(r=i<0?u:a?i:0;r<u;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!j(n.parentNode,\"optgroup\"))){if(t=S(n).val(),a)return t;s.push(t)}return s},set:function(e,t){for(var n,r,o=e.options,i=S.makeArray(t),a=o.length;a--;)((r=o[a]).selected=S.inArray(S.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),S.each([\"radio\",\"checkbox\"],function(){S.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=S.inArray(S(e).val(),t)>-1}},v.checkOn||(S.valHooks[this].get=function(e){return null===e.getAttribute(\"value\")?\"on\":e.value})});var Dt=r.location,Nt={guid:Date.now()},Lt=/\\?/;S.parseXML=function(e){var t,n;if(!e||\"string\"!=typeof e)return null;try{t=(new r.DOMParser).parseFromString(e,\"text/xml\")}catch(e){}return n=t&&t.getElementsByTagName(\"parsererror\")[0],t&&!n||S.error(\"Invalid XML: \"+(n?S.map(n.childNodes,function(e){return e.textContent}).join(\"\\n\"):e)),t};var qt=/^(?:focusinfocus|focusoutblur)$/,Ot=function(e){e.stopPropagation()};S.extend(S.event,{trigger:function(e,t,n,o){var i,a,s,u,c,l,f,p,h=[n||x],g=d.call(e,\"type\")?e.type:e,v=d.call(e,\"namespace\")?e.namespace.split(\".\"):[];if(a=p=s=n=n||x,3!==n.nodeType&&8!==n.nodeType&&!qt.test(g+S.event.triggered)&&(g.indexOf(\".\")>-1&&(v=g.split(\".\"),g=v.shift(),v.sort()),c=g.indexOf(\":\")<0&&\"on\"+g,(e=e[S.expando]?e:new S.Event(g,\"object\"==typeof e&&e)).isTrigger=o?2:3,e.namespace=v.join(\".\"),e.rnamespace=e.namespace?new RegExp(\"(^|\\\\.)\"+v.join(\"\\\\.(?:.*\\\\.|)\")+\"(\\\\.|$)\"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:S.makeArray(t,[e]),f=S.event.special[g]||{},o||!f.trigger||!1!==f.trigger.apply(n,t))){if(!o&&!f.noBubble&&!m(n)){for(u=f.delegateType||g,qt.test(u+g)||(a=a.parentNode);a;a=a.parentNode)h.push(a),s=a;s===(n.ownerDocument||x)&&h.push(s.defaultView||s.parentWindow||r)}for(i=0;(a=h[i++])&&!e.isPropagationStopped();)p=a,e.type=i>1?u:f.bindType||g,(l=(se.get(a,\"events\")||Object.create(null))[e.type]&&se.get(a,\"handle\"))&&l.apply(a,t),(l=c&&a[c])&&l.apply&&ie(a)&&(e.result=l.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(h.pop(),t)||!ie(n)||c&&y(n[g])&&!m(n)&&((s=n[c])&&(n[c]=null),S.event.triggered=g,e.isPropagationStopped()&&p.addEventListener(g,Ot),n[g](),e.isPropagationStopped()&&p.removeEventListener(g,Ot),S.event.triggered=void 0,s&&(n[c]=s)),e.result}},simulate:function(e,t,n){var r=S.extend(new S.Event,n,{type:e,isSimulated:!0});S.event.trigger(r,null,t)}}),S.fn.extend({trigger:function(e,t){return this.each(function(){S.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return S.event.trigger(e,t,n,!0)}});var Ht=/\\[\\]$/,Pt=/\\r?\\n/g,Mt=/^(?:submit|button|image|reset|file)$/i,_t=/^(?:input|select|textarea|keygen)/i;function Rt(e,t,n,r){var o;if(Array.isArray(t))S.each(t,function(t,o){n||Ht.test(e)?r(e,o):Rt(e+\"[\"+(\"object\"==typeof o&&null!=o?t:\"\")+\"]\",o,n,r)});else if(n||\"object\"!==T(t))r(e,t);else for(o in t)Rt(e+\"[\"+o+\"]\",t[o],n,r)}S.param=function(e,t){var n,r=[],o=function(e,t){var n=y(t)?t():t;r[r.length]=encodeURIComponent(e)+\"=\"+encodeURIComponent(null==n?\"\":n)};if(null==e)return\"\";if(Array.isArray(e)||e.jquery&&!S.isPlainObject(e))S.each(e,function(){o(this.name,this.value)});else for(n in e)Rt(n,e[n],t,o);return r.join(\"&\")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=S.prop(this,\"elements\");return e?S.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!S(this).is(\":disabled\")&&_t.test(this.nodeName)&&!Mt.test(e)&&(this.checked||!Se.test(e))}).map(function(e,t){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,function(e){return{name:t.name,value:e.replace(Pt,\"\\r\\n\")}}):{name:t.name,value:n.replace(Pt,\"\\r\\n\")}}).get()}});var It=/%20/g,Ft=/#.*$/,Wt=/([?&])_=[^&]*/,$t=/^(.*?):[ \\t]*([^\\r\\n]*)$/gm,Bt=/^(?:GET|HEAD)$/,zt=/^\\/\\//,Xt={},Ut={},Gt=\"*/\".concat(\"*\"),Vt=x.createElement(\"a\");function Yt(e){return function(t,n){\"string\"!=typeof t&&(n=t,t=\"*\");var r,o=0,i=t.toLowerCase().match(G)||[];if(y(n))for(;r=i[o++];)\"+\"===r[0]?(r=r.slice(1)||\"*\",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Qt(e,t,n,r){var o={},i=e===Ut;function a(s){var u;return o[s]=!0,S.each(e[s]||[],function(e,s){var c=s(t,n,r);return\"string\"!=typeof c||i||o[c]?i?!(u=c):void 0:(t.dataTypes.unshift(c),a(c),!1)}),u}return a(t.dataTypes[0])||!o[\"*\"]&&a(\"*\")}function Jt(e,t){var n,r,o=S.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&S.extend(!0,e,r),e}Vt.href=Dt.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Dt.href,type:\"GET\",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Dt.protocol),global:!0,processData:!0,async:!0,contentType:\"application/x-www-form-urlencoded; charset=UTF-8\",accepts:{\"*\":Gt,text:\"text/plain\",html:\"text/html\",xml:\"application/xml, text/xml\",json:\"application/json, text/javascript\"},contents:{xml:/\\bxml\\b/,html:/\\bhtml/,json:/\\bjson\\b/},responseFields:{xml:\"responseXML\",text:\"responseText\",json:\"responseJSON\"},converters:{\"* text\":String,\"text html\":!0,\"text json\":JSON.parse,\"text xml\":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Jt(Jt(e,S.ajaxSettings),t):Jt(S.ajaxSettings,e)},ajaxPrefilter:Yt(Xt),ajaxTransport:Yt(Ut),ajax:function(e,t){\"object\"==typeof e&&(t=e,e=void 0),t=t||{};var n,o,i,a,s,u,c,l,f,p,d=S.ajaxSetup({},t),h=d.context||d,g=d.context&&(h.nodeType||h.jquery)?S(h):S.event,v=S.Deferred(),y=S.Callbacks(\"once memory\"),m=d.statusCode||{},b={},w={},T=\"canceled\",C={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=$t.exec(i);)a[t[1].toLowerCase()+\" \"]=(a[t[1].toLowerCase()+\" \"]||[]).concat(t[2]);t=a[e.toLowerCase()+\" \"]}return null==t?null:t.join(\", \")},getAllResponseHeaders:function(){return c?i:null},setRequestHeader:function(e,t){return null==c&&(e=w[e.toLowerCase()]=w[e.toLowerCase()]||e,b[e]=t),this},overrideMimeType:function(e){return null==c&&(d.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)C.always(e[C.status]);else for(t in e)m[t]=[m[t],e[t]];return this},abort:function(e){var t=e||T;return n&&n.abort(t),E(0,t),this}};if(v.promise(C),d.url=((e||d.url||Dt.href)+\"\").replace(zt,Dt.protocol+\"//\"),d.type=t.method||t.type||d.method||d.type,d.dataTypes=(d.dataType||\"*\").toLowerCase().match(G)||[\"\"],null==d.crossDomain){u=x.createElement(\"a\");try{u.href=d.url,u.href=u.href,d.crossDomain=Vt.protocol+\"//\"+Vt.host!=u.protocol+\"//\"+u.host}catch(e){d.crossDomain=!0}}if(d.data&&d.processData&&\"string\"!=typeof d.data&&(d.data=S.param(d.data,d.traditional)),Qt(Xt,d,t,C),c)return C;for(f in(l=S.event&&d.global)&&0===S.active++&&S.event.trigger(\"ajaxStart\"),d.type=d.type.toUpperCase(),d.hasContent=!Bt.test(d.type),o=d.url.replace(Ft,\"\"),d.hasContent?d.data&&d.processData&&0===(d.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&(d.data=d.data.replace(It,\"+\")):(p=d.url.slice(o.length),d.data&&(d.processData||\"string\"==typeof d.data)&&(o+=(Lt.test(o)?\"&\":\"?\")+d.data,delete d.data),!1===d.cache&&(o=o.replace(Wt,\"$1\"),p=(Lt.test(o)?\"&\":\"?\")+\"_=\"+Nt.guid+++p),d.url=o+p),d.ifModified&&(S.lastModified[o]&&C.setRequestHeader(\"If-Modified-Since\",S.lastModified[o]),S.etag[o]&&C.setRequestHeader(\"If-None-Match\",S.etag[o])),(d.data&&d.hasContent&&!1!==d.contentType||t.contentType)&&C.setRequestHeader(\"Content-Type\",d.contentType),C.setRequestHeader(\"Accept\",d.dataTypes[0]&&d.accepts[d.dataTypes[0]]?d.accepts[d.dataTypes[0]]+(\"*\"!==d.dataTypes[0]?\", \"+Gt+\"; q=0.01\":\"\"):d.accepts[\"*\"]),d.headers)C.setRequestHeader(f,d.headers[f]);if(d.beforeSend&&(!1===d.beforeSend.call(h,C,d)||c))return C.abort();if(T=\"abort\",y.add(d.complete),C.done(d.success),C.fail(d.error),n=Qt(Ut,d,t,C)){if(C.readyState=1,l&&g.trigger(\"ajaxSend\",[C,d]),c)return C;d.async&&d.timeout>0&&(s=r.setTimeout(function(){C.abort(\"timeout\")},d.timeout));try{c=!1,n.send(b,E)}catch(e){if(c)throw e;E(-1,e)}}else E(-1,\"No Transport\");function E(e,t,a,u){var f,p,x,b,w,T=t;c||(c=!0,s&&r.clearTimeout(s),n=void 0,i=u||\"\",C.readyState=e>0?4:0,f=e>=200&&e<300||304===e,a&&(b=function(e,t,n){for(var r,o,i,a,s=e.contents,u=e.dataTypes;\"*\"===u[0];)u.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader(\"Content-Type\"));if(r)for(o in s)if(s[o]&&s[o].test(r)){u.unshift(o);break}if(u[0]in n)i=u[0];else{for(o in n){if(!u[0]||e.converters[o+\" \"+u[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==u[0]&&u.unshift(i),n[i]}(d,C,a)),!f&&S.inArray(\"script\",d.dataTypes)>-1&&S.inArray(\"json\",d.dataTypes)<0&&(d.converters[\"text script\"]=function(){}),b=function(e,t,n,r){var o,i,a,s,u,c={},l=e.dataTypes.slice();if(l[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(i=l.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!u&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),u=i,i=l.shift())if(\"*\"===i)i=u;else if(\"*\"!==u&&u!==i){if(!(a=c[u+\" \"+i]||c[\"* \"+i]))for(o in c)if((s=o.split(\" \"))[1]===i&&(a=c[u+\" \"+s[0]]||c[\"* \"+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(i=s[0],l.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:\"parsererror\",error:a?e:\"No conversion from \"+u+\" to \"+i}}}return{state:\"success\",data:t}}(d,b,C,f),f?(d.ifModified&&((w=C.getResponseHeader(\"Last-Modified\"))&&(S.lastModified[o]=w),(w=C.getResponseHeader(\"etag\"))&&(S.etag[o]=w)),204===e||\"HEAD\"===d.type?T=\"nocontent\":304===e?T=\"notmodified\":(T=b.state,p=b.data,f=!(x=b.error))):(x=T,!e&&T||(T=\"error\",e<0&&(e=0))),C.status=e,C.statusText=(t||T)+\"\",f?v.resolveWith(h,[p,T,C]):v.rejectWith(h,[C,T,x]),C.statusCode(m),m=void 0,l&&g.trigger(f?\"ajaxSuccess\":\"ajaxError\",[C,d,f?p:x]),y.fireWith(h,[C,T]),l&&(g.trigger(\"ajaxComplete\",[C,d]),--S.active||S.event.trigger(\"ajaxStop\")))}return C},getJSON:function(e,t,n){return S.get(e,t,n,\"json\")},getScript:function(e,t){return S.get(e,void 0,t,\"script\")}}),S.each([\"get\",\"post\"],function(e,t){S[t]=function(e,n,r,o){return y(n)&&(o=o||r,r=n,n=void 0),S.ajax(S.extend({url:e,type:t,dataType:o,data:n,success:r},S.isPlainObject(e)&&e))}}),S.ajaxPrefilter(function(e){var t;for(t in e.headers)\"content-type\"===t.toLowerCase()&&(e.contentType=e.headers[t]||\"\")}),S._evalUrl=function(e,t,n){return S.ajax({url:e,type:\"GET\",dataType:\"script\",cache:!0,async:!1,global:!1,converters:{\"text script\":function(){}},dataFilter:function(e){S.globalEval(e,t,n)}})},S.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=S(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){S(this).wrapInner(e.call(this,t))}):this.each(function(){var t=S(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){S(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not(\"body\").each(function(){S(this).replaceWith(this.childNodes)}),this}}),S.expr.pseudos.hidden=function(e){return!S.expr.pseudos.visible(e)},S.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(e){}};var Kt={0:200,1223:204},Zt=S.ajaxSettings.xhr();v.cors=!!Zt&&\"withCredentials\"in Zt,v.ajax=Zt=!!Zt,S.ajaxTransport(function(e){var t,n;if(v.cors||Zt&&!e.crossDomain)return{send:function(o,i){var a,s=e.xhr();if(s.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)s[a]=e.xhrFields[a];for(a in e.mimeType&&s.overrideMimeType&&s.overrideMimeType(e.mimeType),e.crossDomain||o[\"X-Requested-With\"]||(o[\"X-Requested-With\"]=\"XMLHttpRequest\"),o)s.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,\"abort\"===e?s.abort():\"error\"===e?\"number\"!=typeof s.status?i(0,\"error\"):i(s.status,s.statusText):i(Kt[s.status]||s.status,s.statusText,\"text\"!==(s.responseType||\"text\")||\"string\"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=t(),n=s.onerror=s.ontimeout=t(\"error\"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout(function(){t&&n()})},t=t(\"abort\");try{s.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),S.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),S.ajaxSetup({accepts:{script:\"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript\"},contents:{script:/\\b(?:java|ecma)script\\b/},converters:{\"text script\":function(e){return S.globalEval(e),e}}}),S.ajaxPrefilter(\"script\",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type=\"GET\")}),S.ajaxTransport(\"script\",function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=S(\"<script>\").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on(\"load error\",n=function(e){t.remove(),n=null,e&&o(\"error\"===e.type?404:200,e.type)}),x.head.appendChild(t[0])},abort:function(){n&&n()}}});var en,tn=[],nn=/(=)\\?(?=&|$)|\\?\\?/;S.ajaxSetup({jsonp:\"callback\",jsonpCallback:function(){var e=tn.pop()||S.expando+\"_\"+Nt.guid++;return this[e]=!0,e}}),S.ajaxPrefilter(\"json jsonp\",function(e,t,n){var o,i,a,s=!1!==e.jsonp&&(nn.test(e.url)?\"url\":\"string\"==typeof e.data&&0===(e.contentType||\"\").indexOf(\"application/x-www-form-urlencoded\")&&nn.test(e.data)&&\"data\");if(s||\"jsonp\"===e.dataTypes[0])return o=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,s?e[s]=e[s].replace(nn,\"$1\"+o):!1!==e.jsonp&&(e.url+=(Lt.test(e.url)?\"&\":\"?\")+e.jsonp+\"=\"+o),e.converters[\"script json\"]=function(){return a||S.error(o+\" was not called\"),a[0]},e.dataTypes[0]=\"json\",i=r[o],r[o]=function(){a=arguments},n.always(function(){void 0===i?S(r).removeProp(o):r[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,tn.push(o)),a&&y(i)&&i(a[0]),a=i=void 0}),\"script\"}),v.createHTMLDocument=((en=x.implementation.createHTMLDocument(\"\").body).innerHTML=\"<form></form><form></form>\",2===en.childNodes.length),S.parseHTML=function(e,t,n){return\"string\"!=typeof e?[]:(\"boolean\"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((r=(t=x.implementation.createHTMLDocument(\"\")).createElement(\"base\")).href=x.location.href,t.head.appendChild(r)):t=x),i=!n&&[],(o=F.exec(e))?[t.createElement(o[1])]:(o=qe([e],t,i),i&&i.length&&S(i).remove(),S.merge([],o.childNodes)));var r,o,i},S.fn.load=function(e,t,n){var r,o,i,a=this,s=e.indexOf(\" \");return s>-1&&(r=St(e.slice(s)),e=e.slice(0,s)),y(t)?(n=t,t=void 0):t&&\"object\"==typeof t&&(o=\"POST\"),a.length>0&&S.ajax({url:e,type:o||\"GET\",dataType:\"html\",data:t}).done(function(e){i=arguments,a.html(r?S(\"<div>\").append(S.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},S.expr.pseudos.animated=function(e){return S.grep(S.timers,function(t){return e===t.elem}).length},S.offset={setOffset:function(e,t,n){var r,o,i,a,s,u,c=S.css(e,\"position\"),l=S(e),f={};\"static\"===c&&(e.style.position=\"relative\"),s=l.offset(),i=S.css(e,\"top\"),u=S.css(e,\"left\"),(\"absolute\"===c||\"fixed\"===c)&&(i+u).indexOf(\"auto\")>-1?(a=(r=l.position()).top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(u)||0),y(t)&&(t=t.call(e,n,S.extend({},s))),null!=t.top&&(f.top=t.top-s.top+a),null!=t.left&&(f.left=t.left-s.left+o),\"using\"in t?t.using.call(e,f):l.css(f)}},S.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){S.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if(\"fixed\"===S.css(r,\"position\"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&\"static\"===S.css(e,\"position\");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=S(e).offset()).top+=S.css(e,\"borderTopWidth\",!0),o.left+=S.css(e,\"borderLeftWidth\",!0))}return{top:t.top-o.top-S.css(r,\"marginTop\",!0),left:t.left-o.left-S.css(r,\"marginLeft\",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&\"static\"===S.css(e,\"position\");)e=e.offsetParent;return e||ge})}}),S.each({scrollLeft:\"pageXOffset\",scrollTop:\"pageYOffset\"},function(e,t){var n=\"pageYOffset\"===t;S.fn[e]=function(r){return ee(this,function(e,r,o){var i;if(m(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),S.each([\"top\",\"left\"],function(e,t){S.cssHooks[t]=et(v.pixelPosition,function(e,n){if(n)return n=Ze(e,t),Ve.test(n)?S(e).position()[t]+\"px\":n})}),S.each({Height:\"height\",Width:\"width\"},function(e,t){S.each({padding:\"inner\"+e,content:t,\"\":\"outer\"+e},function(n,r){S.fn[r]=function(o,i){var a=arguments.length&&(n||\"boolean\"!=typeof o),s=n||(!0===o||!0===i?\"margin\":\"border\");return ee(this,function(t,n,o){var i;return m(t)?0===r.indexOf(\"outer\")?t[\"inner\"+e]:t.document.documentElement[\"client\"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body[\"scroll\"+e],i[\"scroll\"+e],t.body[\"offset\"+e],i[\"offset\"+e],i[\"client\"+e])):void 0===o?S.css(t,n,s):S.style(t,n,o,s)},t,a?o:void 0,a)}})}),S.each([\"ajaxStart\",\"ajaxStop\",\"ajaxComplete\",\"ajaxError\",\"ajaxSuccess\",\"ajaxSend\"],function(e,t){S.fn[t]=function(e){return this.on(t,e)}}),S.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,\"**\"):this.off(t,e||\"**\",n)},hover:function(e,t){return this.on(\"mouseenter\",e).on(\"mouseleave\",t||e)}}),S.each(\"blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu\".split(\" \"),function(e,t){S.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}});var rn=/^[\\s\\uFEFF\\xA0]+|([^\\s\\uFEFF\\xA0])[\\s\\uFEFF\\xA0]+$/g;S.proxy=function(e,t){var n,r,o;if(\"string\"==typeof t&&(n=e[t],t=e,e=n),y(e))return r=s.call(arguments,2),o=function(){return e.apply(t||this,r.concat(s.call(arguments)))},o.guid=e.guid=e.guid||S.guid++,o},S.holdReady=function(e){e?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=j,S.isFunction=y,S.isWindow=m,S.camelCase=oe,S.type=T,S.now=Date.now,S.isNumeric=function(e){var t=S.type(e);return(\"number\"===t||\"string\"===t)&&!isNaN(e-parseFloat(e))},S.trim=function(e){return null==e?\"\":(e+\"\").replace(rn,\"$1\")},void 0===(n=function(){return S}.apply(t,[]))||(e.exports=n);var on=r.jQuery,an=r.$;return S.noConflict=function(e){return r.$===S&&(r.$=an),e&&r.jQuery===S&&(r.jQuery=on),S},void 0===o&&(r.jQuery=r.$=S),S})}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{\"use strict\";var e=n(692),t=n.n(e);n(304);function r(){var e,t,n=\"function\"==typeof Symbol?Symbol:{},i=n.iterator||\"@@iterator\",a=n.toStringTag||\"@@toStringTag\";function s(n,r,i,a){var s=r&&r.prototype instanceof c?r:c,l=Object.create(s.prototype);return o(l,\"_invoke\",function(n,r,o){var i,a,s,c=0,l=o||[],f=!1,p={p:0,n:0,v:e,a:d,f:d.bind(e,4),d:function(t,n){return i=t,a=0,s=e,p.n=n,u}};function d(n,r){for(a=n,s=r,t=0;!f&&c&&!o&&t<l.length;t++){var o,i=l[t],d=p.p,h=i[2];n>3?(o=h===r)&&(s=i[(a=i[4])?5:(a=3,3)],i[4]=i[5]=e):i[0]<=d&&((o=n<2&&d<i[1])?(a=0,p.v=r,p.n=i[1]):d<h&&(o=n<3||i[0]>r||r>h)&&(i[4]=n,i[5]=r,p.n=h,a=0))}if(o||n>1)return u;throw f=!0,r}return function(o,l,h){if(c>1)throw TypeError(\"Generator is already running\");for(f&&1===l&&d(l,h),a=l,s=h;(t=a<2?e:s)||!f;){i||(a?a<3?(a>1&&(p.n=-1),d(a,s)):p.n=s:p.v=s);try{if(c=2,i){if(a||(o=\"next\"),t=i[o]){if(!(t=t.call(i,s)))throw TypeError(\"iterator result is not an object\");if(!t.done)return t;s=t.value,a<2&&(a=0)}else 1===a&&(t=i.return)&&t.call(i),a<2&&(s=TypeError(\"The iterator does not provide a '\"+o+\"' method\"),a=1);i=e}else if((t=(f=p.n<0)?s:n.call(r,p))!==u)break}catch(t){i=e,a=1,s=t}finally{c=1}}return{value:t,done:f}}}(n,i,a),!0),l}var u={};function c(){}function l(){}function f(){}t=Object.getPrototypeOf;var p=[][i]?t(t([][i]())):(o(t={},i,function(){return this}),t),d=f.prototype=c.prototype=Object.create(p);function h(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,f):(e.__proto__=f,o(e,a,\"GeneratorFunction\")),e.prototype=Object.create(d),e}return l.prototype=f,o(d,\"constructor\",f),o(f,\"constructor\",l),l.displayName=\"GeneratorFunction\",o(f,a,\"GeneratorFunction\"),o(d),o(d,a,\"Generator\"),o(d,i,function(){return this}),o(d,\"toString\",function(){return\"[object Generator]\"}),(r=function(){return{w:s,m:h}})()}function o(e,t,n,r){var i=Object.defineProperty;try{i({},\"\",{})}catch(e){i=0}o=function(e,t,n,r){if(t)i?i(e,t,{value:n,enumerable:!r,configurable:!r,writable:!r}):e[t]=n;else{var a=function(t,n){o(e,t,function(e){return this._invoke(t,n,e)})};a(\"next\",0),a(\"throw\",1),a(\"return\",2)}},o(e,t,n,r)}function i(e,t,n,r,o,i,a){try{var s=e[i](a),u=s.value}catch(e){return void n(e)}s.done?t(u):Promise.resolve(u).then(r,o)}t()(document).ready(function(){function e(){return n.apply(this,arguments)}function n(){var e;return e=r().m(function e(){var n,i,a,s,u;return r().w(function(e){for(;;)switch(e.n){case 0:try{n=ajaxurl,i=t()(\"#hts_product_description\").val(),a=t()(\"#generate_content_nonce\").val(),s=t()(\"#product_tone_and_mood\").val(),u=t()(\"#product_description_length\").val(),t().ajax({url:n,type:\"POST\",data:{action:\"hts_get_content_from_description\",post_type:\"product\",voice_tone:s,content_length:u,description:i,location:\"woocommerce_ui\",nonce:a},success:function(e){if(t()(\".hts-ai-product-generation\").removeClass(\"hts-active\"),t()(\"#hts-woo-product-content-submit\").removeClass(\"disabled\"),e.data.title){t()(\"#post-body-content #title-prompt-text\").addClass(\"screen-reader-text\");var r=t()(\"#post-body-content #title\");\"\"===r.val().trim()&&r.val(e.data.title)}if(e.data.content){o(n,a);var i=document.getElementById(\"content_ifr\"),s=i.contentDocument||i.contentWindow.document;if(i&&s){var u=s.getElementById(\"tinymce\");u&&(u.innerHTML=\"\")}window.parent.send_to_editor(e.data.content),window.parent.tb_remove()}e.success||t()(\".hts-ai-product-generation #hts-response\").html(\"<b>\".concat(e.data,\"</b>\"))},error:function(e,n,r){t()(\".hts-ai-product-generation\").removeClass(\"hts-active\"),t()(\"#hts-woo-product-content-submit\").removeClass(\"disabled\"),console.error(\"Error:\",r)}})}catch(e){console.error(e)}case 1:return e.a(2)}},e)}),n=function(){var t=this,n=arguments;return new Promise(function(r,o){var a=e.apply(t,n);function s(e){i(a,r,o,s,u,\"next\",e)}function u(e){i(a,r,o,s,u,\"throw\",e)}s(void 0)})},n.apply(this,arguments)}function o(e,n){var r,o=null!==(r=t()(\"#post_ID\").val())&&void 0!==r?r:1;t().ajax({url:e,type:\"POST\",data:{action:\"hts_woo_product_description_create\",nonce:n,post_id:o},success:function(e){},error:function(e,t,n){console.error(\"Error:\",n)}})}t()(\"#hts-woo-product-content-submit\").click(function(n){n.preventDefault(),t()(\".hts-ai-product-generation\").addClass(\"hts-active\"),t()(this).addClass(\"disabled\"),t()(\".hts-ai-product-generation #hts-response\").empty(),setTimeout(e,200)})})})()})();"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/img/hostinger-logo.svg","ext":"svg","size":7158,"mtime":1757312769,"type":"text","content":"<svg width=\"151\" height=\"30\" viewBox=\"0 0 151 30\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"logotype\">\n<path id=\"symbol\" fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M0.000249566 14.046V0.000497794L7.08916 3.78046V10.1086L16.4735 10.1132L23.6774 14.046H0.000249566ZM18.3925 8.95058V0L25.6725 3.6859V13.1797L18.3925 8.95058ZM18.3924 26.1177V19.8441L8.93577 19.8375C8.9446 19.8793 1.6123 15.8418 1.6123 15.8418L25.6725 15.9547V30L18.3924 26.1177ZM0 26.1177L0.000252212 16.9393L7.08916 21.0683V29.8033L0 26.1177Z\" fill=\"#673DE6\"/>\n<g id=\"logotype_2\">\n<path d=\"M116.894 12.0328C117.478 11.3075 118.425 10.9449 119.735 10.9449C120.325 10.9449 120.868 11.0196 121.368 11.1695C121.866 11.3196 122.308 11.4961 122.693 11.6998L123.505 9.45211C123.408 9.39226 123.25 9.30802 123.027 9.20013C122.805 9.092 122.522 8.98713 122.179 8.88554C121.836 8.78344 121.427 8.69366 120.953 8.61545C120.477 8.53774 119.945 8.49826 119.356 8.49826C118.49 8.49826 117.676 8.64261 116.912 8.93055C116.149 9.21824 115.485 9.64072 114.919 10.1982C114.354 10.7555 113.909 11.4365 113.585 12.2395C113.26 13.043 113.098 13.9661 113.098 15.0095C113.098 16.0406 113.244 16.958 113.54 17.7607C113.834 18.5639 114.252 19.2416 114.793 19.7929C115.334 20.3446 115.986 20.7638 116.75 21.052C117.513 21.3395 118.364 21.4835 119.302 21.4835C120.396 21.4835 121.316 21.4081 122.062 21.2585C122.808 21.1088 123.348 20.9683 123.685 20.8362V14.6678H120.871V19.0017C120.703 19.0379 120.508 19.0618 120.285 19.0736C120.063 19.0855 119.795 19.0915 119.482 19.0915C118.905 19.0915 118.4 18.9927 117.968 18.795C117.535 18.5971 117.174 18.3182 116.885 17.9583C116.597 17.5985 116.38 17.17 116.236 16.6728C116.092 16.1754 116.02 15.6204 116.02 15.0095C116.02 13.7501 116.311 12.7583 116.894 12.0328Z\" fill=\"#673DE6\"/>\n<path d=\"M72.1964 19.0106C71.9379 19.077 71.6102 19.1097 71.2135 19.1097C70.42 19.1097 69.7494 19.0287 69.2026 18.8665C68.6551 18.705 68.195 18.5225 67.8228 18.3183L67.0288 20.5481C67.1973 20.6444 67.4046 20.746 67.651 20.8542C67.8977 20.962 68.1925 21.0639 68.535 21.1597C68.8778 21.2555 69.2715 21.3362 69.7164 21.4026C70.1613 21.4685 70.6604 21.5017 71.2135 21.5017C72.8607 21.5017 74.0933 21.1808 74.9109 20.5391C75.7286 19.8978 76.1377 18.9955 76.1377 17.8324C76.1377 17.2334 76.0592 16.7241 75.9034 16.3042C75.7468 15.8845 75.5092 15.5186 75.1909 15.207C74.8721 14.8954 74.4721 14.6226 73.9914 14.3887C73.5101 14.1548 72.9449 13.9182 72.296 13.678C71.983 13.5701 71.6972 13.4655 71.4392 13.3634C71.1805 13.2618 70.952 13.1476 70.7535 13.0219C70.5552 12.8959 70.4016 12.7551 70.2937 12.5992C70.1855 12.4438 70.131 12.2516 70.131 12.0235C70.131 11.6403 70.2786 11.3554 70.5731 11.1695C70.8677 10.9839 71.3517 10.8904 72.0254 10.8904C72.6264 10.8904 73.1404 10.9598 73.5674 11.0973C73.9939 11.2354 74.3818 11.3943 74.7309 11.5741L75.5422 9.36215C75.1455 9.14638 74.6403 8.94821 74.0274 8.76841C73.4141 8.58885 72.6864 8.49832 71.8448 8.49832C71.1351 8.49832 70.498 8.58584 69.9328 8.75936C69.3676 8.93363 68.8869 9.18184 68.4901 9.50574C68.0931 9.82989 67.7867 10.2222 67.5701 10.6839C67.3537 11.1454 67.2455 11.6639 67.2455 12.2396C67.2455 12.8152 67.3476 13.3036 67.5521 13.7049C67.7564 14.107 68.0213 14.4488 68.3456 14.7304C68.6702 15.0123 69.0369 15.2462 69.4458 15.4318C69.8546 15.6174 70.2634 15.7826 70.6725 15.926C71.6102 16.2383 72.2715 16.5287 72.6564 16.7988C73.041 17.0682 73.2337 17.4074 73.2337 17.8148C73.2337 18.0067 73.2037 18.1807 73.1434 18.3364C73.0831 18.4923 72.9747 18.6271 72.8186 18.7405C72.6625 18.8552 72.4549 18.9449 72.1964 19.0106Z\" fill=\"#673DE6\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M64.138 15.0094C64.138 16.0762 63.9784 17.0147 63.6603 17.8234C63.3413 18.6329 62.9052 19.3104 62.3524 19.8556C61.7993 20.4016 61.1407 20.812 60.3773 21.0876C59.6138 21.3637 58.7929 21.5015 57.9155 21.5015C57.0615 21.5015 56.2562 21.3637 55.4985 21.0876C54.7409 20.812 54.0793 20.4016 53.5144 19.8556C52.9489 19.3104 52.5045 18.6329 52.1797 17.8234C51.8551 17.0147 51.6924 16.0762 51.6924 15.0094C51.6924 13.9421 51.8609 13.0039 52.1976 12.1948C52.534 11.3853 52.9882 10.7048 53.5595 10.1534C54.1303 9.60187 54.7918 9.18844 55.5437 8.91257C56.2947 8.63644 57.0857 8.49838 57.9155 8.49838C58.7689 8.49838 59.5745 8.63644 60.3324 8.91257C61.0898 9.18844 61.7511 9.60187 62.3163 10.1534C62.8812 10.7048 63.3264 11.3853 63.651 12.1948C63.9758 13.0039 64.138 13.9421 64.138 15.0094ZM54.5959 15.0094C54.5959 15.6205 54.6708 16.172 54.8212 16.6636C54.9715 17.1555 55.1881 17.578 55.4709 17.9316C55.7528 18.2856 56.0989 18.558 56.5079 18.7496C56.9165 18.942 57.3854 19.0381 57.9148 19.0381C58.4316 19.0381 58.8977 18.942 59.3128 18.7496C59.7272 18.558 60.0762 18.2856 60.3585 17.9316C60.6409 17.578 60.8578 17.1555 61.0082 16.6636C61.1585 16.172 61.2336 15.6205 61.2336 15.0094C61.2336 14.3975 61.1585 13.843 61.0082 13.3454C60.8578 12.8479 60.6409 12.4227 60.3585 12.0686C60.0762 11.715 59.7272 11.4419 59.3128 11.2506C58.8977 11.0587 58.4316 10.9629 57.9148 10.9629C57.3854 10.9629 56.9165 11.0617 56.5079 11.2594C56.0989 11.4573 55.7528 11.7331 55.4709 12.087C55.1881 12.4405 54.9715 12.866 54.8212 13.3635C54.6708 13.8614 54.5959 14.4099 54.5959 15.0094Z\" fill=\"#673DE6\"/>\n<path d=\"M45.2125 8.78665H48.0264V21.2496H45.2125V15.9623H40.4868V21.2496H37.6729V8.78665H40.4868V13.5521H45.2125V8.78665Z\" fill=\"#673DE6\"/>\n<path d=\"M88.5337 8.78677V11.1788H84.7639V21.2497H81.9502V11.1788H78.1802V8.78677H88.5337Z\" fill=\"#673DE6\"/>\n<path d=\"M94.4726 21.25H91.6587V8.78677H94.4726V21.25Z\" fill=\"#673DE6\"/>\n<path d=\"M107.068 21.2497C106.263 19.8231 105.391 18.4146 104.453 17.0234C103.515 15.6325 102.517 14.3198 101.459 13.0848V21.2497H98.6812V8.78677H100.972C101.368 9.1821 101.807 9.6677 102.289 10.2433C102.77 10.819 103.259 11.4336 103.758 12.0869C104.257 12.7403 104.753 13.4177 105.246 14.1189C105.739 14.8202 106.202 15.4944 106.635 16.142V8.78677H109.431V21.2497H107.068Z\" fill=\"#673DE6\"/>\n<path d=\"M127.623 21.2497V8.78677H136.064V11.1426H130.436V13.5882H135.433V15.8905H130.436V18.8939H136.479V21.2497H127.623Z\" fill=\"#673DE6\"/>\n<path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M147.846 9.64072C146.848 8.97506 145.412 8.64261 143.536 8.64261C143.019 8.64261 142.432 8.6665 141.777 8.71478C141.122 8.76231 140.488 8.84681 139.875 8.96601V21.2497H142.688V16.6992H144.077C144.318 16.9874 144.56 17.308 144.801 17.6621C145.042 18.0157 145.288 18.3899 145.534 18.7857C145.782 19.1815 146.023 19.5894 146.259 20.0089C146.494 20.4286 146.726 20.842 146.956 21.2497H150.101C149.885 20.7942 149.65 20.3298 149.398 19.8557C149.146 19.3825 148.884 18.927 148.613 18.4895C148.343 18.0519 148.069 17.6322 147.792 17.2303C147.516 16.8287 147.252 16.4721 146.999 16.16C147.757 15.8487 148.337 15.4197 148.739 14.8745C149.143 14.329 149.344 13.6181 149.344 12.7432C149.344 11.3402 148.844 10.3061 147.846 9.64072ZM143.147 11.0525C143.31 11.0407 143.493 11.0347 143.697 11.0347C144.599 11.0347 145.281 11.1637 145.744 11.4209C146.207 11.6794 146.438 12.1135 146.438 12.7251C146.438 13.3608 146.21 13.8107 145.753 14.074C145.296 14.3381 144.539 14.4693 143.481 14.4693H142.687V11.0885C142.832 11.0769 142.985 11.0648 143.147 11.0525Z\" fill=\"#673DE6\"/>\n</g>\n</g>\n</svg>\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/img/loading-modal-icon.svg","ext":"svg","size":3466,"mtime":1757312769,"type":"text","content":"<svg width=\"120\" height=\"105\" viewBox=\"0 0 120 105\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n<g id=\"Frame 39637\">\n<rect width=\"120\" height=\"104\" fill=\"white\"/>\n<g id=\"Group 39620\">\n<g id=\"Group 39619\">\n<path id=\"Rectangle 25867\" d=\"M29 26C29 23.7909 30.7909 22 33 22H72.3431C73.404 22 74.4214 22.4214 75.1716 23.1716L89.8284 37.8284C90.5786 38.5786 91 39.596 91 40.6569V59V100C91 102.209 89.2091 104 87 104H33C30.7909 104 29 102.209 29 100V26Z\" stroke=\"#D5DFFF\"/>\n<path id=\"Vector\" d=\"M53.4197 57.8814C53.0067 56.8341 51.5245 56.8341 51.1115 57.8814L48.9542 63.3512C48.8281 63.671 48.575 63.9241 48.2553 64.0502L42.7855 66.2074C41.7382 66.6205 41.7382 68.1026 42.7855 68.5157L48.2553 70.6729C48.575 70.799 48.8281 71.0521 48.9542 71.3719L51.1115 76.8417C51.5245 77.889 53.0067 77.889 53.4197 76.8417L55.577 71.3719C55.7031 71.0521 55.9562 70.799 56.2759 70.6729L61.7457 68.5157C62.793 68.1026 62.793 66.6205 61.7457 66.2074L56.2759 64.0502C55.9562 63.9241 55.7031 63.671 55.577 63.3512L53.4197 57.8814Z\" fill=\"#8259FF\"/>\n<path id=\"Vector_2\" d=\"M70.2339 50.4971C69.9725 49.8343 69.0346 49.8343 68.7732 50.4971L67.408 53.9586C67.3282 54.1609 67.168 54.3211 66.9656 54.4009L63.5042 55.7661C62.8414 56.0275 62.8414 56.9654 63.5042 57.2268L66.9656 58.592C67.168 58.6718 67.3282 58.832 67.408 59.0344L68.7732 62.4958C69.0346 63.1586 69.9725 63.1586 70.2339 62.4958L71.5991 59.0344C71.6789 58.832 71.8391 58.6718 72.0414 58.592L75.5029 57.2268C76.1657 56.9654 76.1657 56.0275 75.5029 55.7661L72.0414 54.4009C71.8391 54.3211 71.6789 54.1609 71.5991 53.9586L70.2339 50.4971Z\" fill=\"#B39EF3\"/>\n<path id=\"Vector_3\" d=\"M70.0059 73.44C69.8249 72.9809 69.1751 72.9809 68.9941 73.44L68.0484 75.8377C67.9931 75.9779 67.8822 76.0889 67.742 76.1441L65.3443 77.0898C64.8852 77.2708 64.8852 77.9206 65.3443 78.1016L67.742 79.0473C67.8822 79.1026 67.9931 79.2135 68.0484 79.3537L68.9941 81.7514C69.1751 82.2105 69.8249 82.2105 70.0059 81.7514L70.9516 79.3537C71.0068 79.2135 71.1178 79.1026 71.258 79.0473L73.6557 78.1016C74.1148 77.9206 74.1148 77.2708 73.6557 77.0898L71.258 76.1441C71.1178 76.0889 71.0068 75.9779 70.9516 75.8377L70.0059 73.44Z\" fill=\"#EBE4FF\"/>\n<path id=\"Vector_4\" d=\"M9.9192 54.2035C9.46655 54.0069 9.00713 54.4663 9.20372 54.919L10.2305 57.2831C10.2905 57.4213 10.2905 57.5782 10.2305 57.7164L9.20372 60.0805C9.00713 60.5332 9.46655 60.9926 9.91921 60.796L12.2833 59.7692C12.4215 59.7092 12.5784 59.7092 12.7166 59.7692L15.0807 60.796C15.5334 60.9926 15.9928 60.5332 15.7962 60.0805L14.7695 57.7164C14.7094 57.5782 14.7094 57.4213 14.7695 57.2831L15.7962 54.919C15.9928 54.4663 15.5334 54.0069 15.0808 54.2035L12.7166 55.2303C12.5784 55.2903 12.4215 55.2903 12.2833 55.2303L9.9192 54.2035Z\" fill=\"#D5DFFF\"/>\n<path id=\"Vector_5\" d=\"M112.006 70.3443C111.825 69.8852 111.175 69.8852 110.994 70.3443L110.048 72.742C109.993 72.8822 109.882 72.9932 109.742 73.0484L107.344 73.9941C106.885 74.1751 106.885 74.8249 107.344 75.0059L109.742 75.9516C109.882 76.0068 109.993 76.1178 110.048 76.258L110.994 78.6557C111.175 79.1148 111.825 79.1148 112.006 78.6557L112.952 76.258C113.007 76.1178 113.118 76.0068 113.258 75.9516L115.656 75.0059C116.115 74.8249 116.115 74.1751 115.656 73.9941L113.258 73.0484C113.118 72.9932 113.007 72.8822 112.952 72.742L112.006 70.3443Z\" fill=\"#D5DFFF\"/>\n</g>\n<path id=\"Vector 548\" d=\"M72 22.5V36.5C72 38.7091 73.7909 40.5 76 40.5H91\" stroke=\"#D5DFFF\"/>\n</g>\n<circle id=\"Ellipse 3066\" cx=\"102\" cy=\"86\" r=\"2\" fill=\"#D5DFFF\"/>\n</g>\n</svg>\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/css/woo-styles.css","ext":"css","size":1702,"mtime":1757312769,"type":"text","content":"#custom_product_metabox{margin-top:20px}.hts-ai-product-generation .hts-supported-by-hostinger{display:flex;justify-content:flex-end;margin-top:10px}.hts-ai-product-generation .hts-supported-by-hostinger .hts-wrapper{align-items:center;display:flex}.hts-ai-product-generation .hts-supported-by-hostinger .hts-wrapper span{margin-right:5px}.hts-ai-product-generation .hts-label{color:#1d1e20;display:block;font-weight:700;margin-bottom:5px;margin-top:10px}.hts-ai-product-generation #hts_product_description{width:100%}.hts-ai-product-generation .hts-selections{display:flex;justify-content:flex-start}@media(max-width:900px){.hts-ai-product-generation .hts-selections{flex-wrap:wrap}}.hts-ai-product-generation .hts-selections .hts-selection{max-width:320px;width:100%}.hts-ai-product-generation .hts-selections .hts-selection:first-child{margin-right:30px}@media(max-width:900px){.hts-ai-product-generation .hts-selections .hts-selection:first-child{margin-right:0}.hts-ai-product-generation .hts-selections .hts-selection{max-width:100%}}.hts-ai-product-generation .hts-selections .hts-selection select{width:100%}.hts-ai-product-generation .hts-submit{margin-top:10px;width:100%}.hts-ai-product-generation .hts-submit .hts-wrapper{display:flex;justify-content:flex-end}.hts-ai-product-generation .hts-submit .hts-wrapper #hts-publishing-action{display:none}.hts-ai-product-generation .hts-submit .button{display:inline-block;height:32px}.hts-ai-product-generation .hts-submit #publishing-action{display:inline-block;float:none;text-align:left}.hts-ai-product-generation.hts-active #hts-publishing-action{display:block!important}#side-sortables .hts-ai-product-generation .hts-label{min-height:37px}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/assets/css/hostinger-ai-assistant-admin.css","ext":"css","size":53475,"mtime":1757312769,"type":"text","content":"@keyframes button-loading-spinner{0%{transform:rotate(0turn)}to{transform:rotate(1turn)}}.hts-primary-btn{background:#673de6;border-radius:4px;color:#fff;flex-grow:0;transition:.3s}.hts-primary-btn:hover{background-color:#5025d1;color:#fff}.hts-secondary-btn{background:#fff;border:1px solid #dadce0;border-radius:8px;color:#673de6;flex-grow:0;transition:.3s}.hts-secondary-btn:hover{background-color:#ebe4ff}.hts-btn{cursor:pointer;font-weight:700;padding:8px 24px;position:relative;text-decoration:none}.hts-btn.button--loading,.hts-btn.hts-disabled{pointer-events:none}.hts-btn.button--loading:after{animation:button-loading-spinner 1s ease infinite;border:2px solid #f2f3f6;border-radius:50%;border-top-color:#727586;bottom:0;content:\"\";height:20px;left:0;margin:auto;position:absolute;right:0;top:0;width:20px}.hts-btn.button--loading .button__text{visibility:hidden}.hts-btn.hts-disabled{background-color:#727586;cursor:auto}.post-type-post .hts-ai-notice{background:none;border:0;display:inline-block;margin:0;padding:0}.tippy-box{background-color:#727586;border-radius:4px;color:#fff;font-family:DMSans,sans-serif;font-size:14px;font-weight:400;max-width:200px;padding:6px 10px;text-align:center}.edit-post-header__toolbar .edit-post-header__center #hostinger_add_new_ai_post{margin-right:auto}[dir=rtl] .hsr-onboarding-navbar__wrapper{direction:ltr}.hts-external-featured-image-preview{border:1px solid #ddd;height:auto;margin-top:10px;max-width:100%}@font-face{font-family:DMSans;font-weight:400;src:url(../fonts/DMSans-Regular.ttf)}@font-face{font-family:DMSans;font-weight:500;src:url(../fonts/DMSans-Medium.ttf)}@font-face{font-family:DMSans;font-weight:700;src:url(../fonts/DMSans-Bold.ttf)}.hostinger_page_hostinger-ai-assistant .w-full,.toplevel_page_hostinger .w-full,[class*=_page_hostinger-ai-assistant] .w-full{width:100%!important}.hostinger_page_hostinger-ai-assistant .select-container,.toplevel_page_hostinger .select-container,[class*=_page_hostinger-ai-assistant] .select-container{width:100%}.hostinger_page_hostinger-ai-assistant .select2-results__options,.toplevel_page_hostinger .select2-results__options,[class*=_page_hostinger-ai-assistant] .select2-results__options{box-shadow:0 8px 24px hsla(210,8%,62%,.2)}.hostinger_page_hostinger-ai-assistant .select2-selection__choice,.toplevel_page_hostinger .select2-selection__choice,[class*=_page_hostinger-ai-assistant] .select2-selection__choice{background-color:rgba(103,61,230,.08)!important;border:none!important;border-radius:3px;color:#673de6!important;margin:5px!important;padding:2px 6px}.hostinger_page_hostinger-ai-assistant .select2-selection.select2-selection--multiple,.toplevel_page_hostinger .select2-selection.select2-selection--multiple,[class*=_page_hostinger-ai-assistant] .select2-selection.select2-selection--multiple{padding:8px 12px}.hostinger_page_hostinger-ai-assistant .select2-selection__rendered,.toplevel_page_hostinger .select2-selection__rendered,[class*=_page_hostinger-ai-assistant] .select2-selection__rendered{padding:0!important}.hostinger_page_hostinger-ai-assistant .select2-selection__choice,.toplevel_page_hostinger .select2-selection__choice,[class*=_page_hostinger-ai-assistant] .select2-selection__choice{border:1px solid #dadce0;border-radius:20px!important;padding:5px 35px 5px 15px!important}.hostinger_page_hostinger-ai-assistant .select2-search__field,.toplevel_page_hostinger .select2-search__field,[class*=_page_hostinger-ai-assistant] .select2-search__field{height:30px!important;margin:0}.hostinger_page_hostinger-ai-assistant .select2-search__field,.hostinger_page_hostinger-ai-assistant .select2-selection__choice__display,.toplevel_page_hostinger .select2-search__field,.toplevel_page_hostinger .select2-selection__choice__display,[class*=_page_hostinger-ai-assistant] .select2-search__field,[class*=_page_hostinger-ai-assistant] .select2-selection__choice__display{font-family:DMSans,sans-serif;letter-spacing:.5px}.hostinger_page_hostinger-ai-assistant .select2-selection__choice__remove,.toplevel_page_hostinger .select2-selection__choice__remove,[class*=_page_hostinger-ai-assistant] .select2-selection__choice__remove{align-items:center!important;border:2px solid #673de6!important;border-radius:100%!important;color:#673de6!important;cursor:pointer;display:flex!important;font-weight:400!important;height:22px;justify-content:center!important;left:auto!important;right:10px!important;top:4px!important;width:22px}.hostinger_page_hostinger-ai-assistant .select2-selection__choice__remove span,.toplevel_page_hostinger .select2-selection__choice__remove span,[class*=_page_hostinger-ai-assistant] .select2-selection__choice__remove span{font-family:sans-serif;font-size:20px;position:absolute;top:-4px}.hostinger_page_hostinger-ai-assistant .select2-container .select2-selection--multiple,.hostinger_page_hostinger-ai-assistant .select2-container .select2-selection--single,.toplevel_page_hostinger .select2-container .select2-selection--multiple,.toplevel_page_hostinger .select2-container .select2-selection--single,[class*=_page_hostinger-ai-assistant] .select2-container .select2-selection--multiple,[class*=_page_hostinger-ai-assistant] .select2-container .select2-selection--single{border-color:#dadce0!important;border-width:1px}.hostinger_page_hostinger-ai-assistant .select2-container-active .select2-selection--multiple,.hostinger_page_hostinger-ai-assistant .select2-container-active .select2-selection--single,.toplevel_page_hostinger .select2-container-active .select2-selection--multiple,.toplevel_page_hostinger .select2-container-active .select2-selection--single,[class*=_page_hostinger-ai-assistant] .select2-container-active .select2-selection--multiple,[class*=_page_hostinger-ai-assistant] .select2-container-active .select2-selection--single{border-color:#673de6}.hostinger_page_hostinger-ai-assistant .select2-container--default .select2-results>.select2-results__options,.toplevel_page_hostinger .select2-container--default .select2-results>.select2-results__options,[class*=_page_hostinger-ai-assistant] .select2-container--default .select2-results>.select2-results__options{max-height:500px}.hostinger_page_hostinger-ai-assistant .select2-results__option,.toplevel_page_hostinger .select2-results__option,[class*=_page_hostinger-ai-assistant] .select2-results__option{line-height:45px;padding:0 15px 0 10px}.hostinger_page_hostinger-ai-assistant .select2-results__option--highlighted,.hostinger_page_hostinger-ai-assistant .select2-results__option--selected,.toplevel_page_hostinger .select2-results__option--highlighted,.toplevel_page_hostinger .select2-results__option--selected,[class*=_page_hostinger-ai-assistant] .select2-results__option--highlighted,[class*=_page_hostinger-ai-assistant] .select2-results__option--selected{background-color:rgba(103,61,230,.08)!important;color:#673de6!important}.hostinger_page_hostinger-ai-assistant .select2-results__option--highlighted,.toplevel_page_hostinger .select2-results__option--highlighted,[class*=_page_hostinger-ai-assistant] .select2-results__option--highlighted{background-color:hsla(220,9%,87%,.239)!important;color:#36344d!important}.hostinger_page_hostinger-ai-assistant .select2-container--open .select2-dropdown--above,.hostinger_page_hostinger-ai-assistant .select2-container--open .select2-dropdown--below,.toplevel_page_hostinger .select2-container--open .select2-dropdown--above,.toplevel_page_hostinger .select2-container--open .select2-dropdown--below,[class*=_page_hostinger-ai-assistant] .select2-container--open .select2-dropdown--above,[class*=_page_hostinger-ai-assistant] .select2-container--open .select2-dropdown--below{border:none!important}.hostinger_page_hostinger-ai-assistant .select2-selection__choice:hover,.toplevel_page_hostinger .select2-selection__choice:hover,[class*=_page_hostinger-ai-assistant] .select2-selection__choice:hover{background-color:#0056b3}.hostinger_page_hostinger-ai-assistant .select2-container--default.select2-container--focus .select2-selection--multiple,.toplevel_page_hostinger .select2-container--default.select2-container--focus .select2-selection--multiple,[class*=_page_hostinger-ai-assistant] .select2-container--default.select2-container--focus .select2-selection--multiple{border:2px solid #673de6!important}.hostinger_page_hostinger-ai-assistant .select2-results__option,.toplevel_page_hostinger .select2-results__option,[class*=_page_hostinger-ai-assistant] .select2-results__option{margin-bottom:0}.hostinger_page_hostinger-ai-assistant .select2-results__option .wrap,.toplevel_page_hostinger .select2-results__option .wrap,[class*=_page_hostinger-ai-assistant] .select2-results__option .wrap{display:flex;font-size:14px;margin:0}.hostinger_page_hostinger-ai-assistant .select2-results__option .wrap:before,.toplevel_page_hostinger .select2-results__option .wrap:before,[class*=_page_hostinger-ai-assistant] .select2-results__option .wrap:before{color:#999;content:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='1' y='1' width='18' height='18' rx='3' fill='%23F2F3F6' stroke='%23727586' stroke-width='2'/%3E%3C/svg%3E\");font-size:20px;margin-top:5px;padding-right:10px}.hostinger_page_hostinger-ai-assistant .select2-results__option--selected .wrap:before,.toplevel_page_hostinger .select2-results__option--selected .wrap:before,[class*=_page_hostinger-ai-assistant] .select2-results__option--selected .wrap:before{content:url(\"data:image/svg+xml;charset=utf-8,%3Csvg width='24' height='24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Crect x='3' y='3' width='18' height='18' rx='3' fill='%23673DE6' stroke='%23673DE6' stroke-width='2'/%3E%3Cpath stroke='%23fff' stroke-width='2' d='m5.707 11.293 5 5M9.293 16.293l9-9'/%3E%3C/svg%3E\")}.hostinger_page_hostinger-ai-assistant #select2-hts-voice-container,.toplevel_page_hostinger #select2-hts-voice-container,[class*=_page_hostinger-ai-assistant] #select2-hts-voice-container{display:flex;text-transform:capitalize}.hostinger_page_hostinger-ai-assistant .select2-multiple,.hostinger_page_hostinger-ai-assistant .select2-multiple2,.toplevel_page_hostinger .select2-multiple,.toplevel_page_hostinger .select2-multiple2,[class*=_page_hostinger-ai-assistant] .select2-multiple,[class*=_page_hostinger-ai-assistant] .select2-multiple2{width:50%}.hostinger_page_hostinger-ai-assistant .hts-inputs-wrapper .select2-dropdown--below,.toplevel_page_hostinger .hts-inputs-wrapper .select2-dropdown--below,[class*=_page_hostinger-ai-assistant] .hts-inputs-wrapper .select2-dropdown--below{display:block!important}.hostinger_page_hostinger-ai-assistant .select2-selection,.toplevel_page_hostinger .select2-selection,[class*=_page_hostinger-ai-assistant] .select2-selection{min-height:46px}.hostinger_page_hostinger-ai-assistant .select2-container--default .select2-selection--single .select2-selection__rendered,.toplevel_page_hostinger .select2-container--default .select2-selection--single .select2-selection__rendered,[class*=_page_hostinger-ai-assistant] .select2-container--default .select2-selection--single .select2-selection__rendered{align-items:center;display:flex;height:100%;padding-left:15px!important}.hostinger_page_hostinger-ai-assistant .select2-selection__clear,.toplevel_page_hostinger .select2-selection__clear,[class*=_page_hostinger-ai-assistant] .select2-selection__clear{display:none}.hostinger_page_hostinger-ai-assistant .hts-voice-wrapper .select2-container,.toplevel_page_hostinger .hts-voice-wrapper .select2-container,[class*=_page_hostinger-ai-assistant] .hts-voice-wrapper .select2-container{width:100%!important}.hostinger_page_hostinger-ai-assistant .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow b,.toplevel_page_hostinger .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow b,[class*=_page_hostinger-ai-assistant] .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow b{border-color:#737686 transparent transparent;border-width:5px 5px 0}.hostinger_page_hostinger-ai-assistant .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow,.toplevel_page_hostinger .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow,[class*=_page_hostinger-ai-assistant] .hts-voice-wrapper .select2-container--default .select2-selection--single .select2-selection__arrow{right:10px;top:10px}.hostinger_page_hostinger-ai-assistant .hts-voice-wrapper [dir=rtl].select2-container--default .select2-selection--single .select2-selection__arrow,.toplevel_page_hostinger .hts-voice-wrapper [dir=rtl].select2-container--default .select2-selection--single .select2-selection__arrow,[class*=_page_hostinger-ai-assistant] .hts-voice-wrapper [dir=rtl].select2-container--default .select2-selection--single .select2-selection__arrow{left:10px;right:auto;top:10px}.hostinger_page_hostinger-ai-assistant .select2-container--open .select2-selection--single,.toplevel_page_hostinger .select2-container--open .select2-selection--single,[class*=_page_hostinger-ai-assistant] .select2-container--open .select2-selection--single{border:2px solid #673de6!important;border-radius:4px!important}.hostinger_page_hostinger-ai-assistant #select2-hts-voice-container,.toplevel_page_hostinger #select2-hts-voice-container,[class*=_page_hostinger-ai-assistant] #select2-hts-voice-container{color:#727586}.hostinger_page_hostinger-ai-assistant #select2-hts-voice-results,.toplevel_page_hostinger #select2-hts-voice-results,[class*=_page_hostinger-ai-assistant] #select2-hts-voice-results{max-height:320px;overflow-y:auto}.hostinger_page_hostinger-ai-assistant #select2-hts-voice-results .select2-results__option,.toplevel_page_hostinger #select2-hts-voice-results .select2-results__option,[class*=_page_hostinger-ai-assistant] #select2-hts-voice-results .select2-results__option{color:#727586!important;padding:2px 8px}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2,.toplevel_page_hostinger .hts-focus-keywords .select2,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2{margin-bottom:5px}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2 textarea.select2-search__field,.toplevel_page_hostinger .hts-focus-keywords .select2 textarea.select2-search__field,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2 textarea.select2-search__field{color:#727586;font-size:14px;line-height:28px;margin:0!important}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2 textarea.select2-search__field::-moz-placeholder,.toplevel_page_hostinger .hts-focus-keywords .select2 textarea.select2-search__field::-moz-placeholder,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2 textarea.select2-search__field::-moz-placeholder{color:#727586;font-family:DMSans,sans-serif}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2 textarea.select2-search__field::placeholder,.toplevel_page_hostinger .hts-focus-keywords .select2 textarea.select2-search__field::placeholder,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2 textarea.select2-search__field::placeholder{color:#727586;font-family:DMSans,sans-serif}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2 .select2-selection.select2-selection--multiple,.toplevel_page_hostinger .hts-focus-keywords .select2 .select2-selection.select2-selection--multiple,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2 .select2-selection.select2-selection--multiple{border-radius:4px!important;font-size:14px;padding:8px 12px 7px}.hostinger_page_hostinger-ai-assistant .hts-focus-keywords .select2 .select2-selection__choice,.toplevel_page_hostinger .hts-focus-keywords .select2 .select2-selection__choice,[class*=_page_hostinger-ai-assistant] .hts-focus-keywords .select2 .select2-selection__choice{margin:0 10px}.select2-container{box-sizing:border-box;display:inline-block;margin:0;position:relative;vertical-align:middle}.select2-container .select2-selection--single{box-sizing:border-box;cursor:pointer;display:block;height:28px;-moz-user-select:none;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--single .select2-selection__rendered{display:block;overflow:hidden;padding-left:8px;padding-right:20px;text-overflow:ellipsis;white-space:nowrap}.select2-container .select2-selection--single .select2-selection__clear{background-color:transparent;border:none;font-size:1em}.select2-container[dir=rtl] .select2-selection--single .select2-selection__rendered{padding-left:20px;padding-right:8px}.select2-container .select2-selection--multiple{box-sizing:border-box;cursor:pointer;display:block;min-height:32px;-moz-user-select:none;user-select:none;-webkit-user-select:none}.select2-container .select2-selection--multiple .select2-selection__rendered{display:inline;list-style:none;padding:0}.select2-container .select2-selection--multiple .select2-selection__clear{background-color:transparent;border:none;font-size:1em}.select2-container .select2-search--inline .select2-search__field{border:none;box-sizing:border-box;font-family:sans-serif;font-size:100%;height:18px;margin-left:5px;margin-top:5px;max-width:100%;overflow:hidden;padding:0;resize:none;vertical-align:bottom;word-break:keep-all}.select2-container .select2-search--inline .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-dropdown{background-color:#fff;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:block;left:-100000px;position:absolute;width:100%;z-index:1051}.select2-results{display:block}.select2-results__options{list-style:none;margin:0;padding:0}.select2-results__option{padding:6px;-moz-user-select:none;user-select:none;-webkit-user-select:none}.select2-results__option--selectable{cursor:pointer}.select2-container--open .select2-dropdown{left:0}.select2-container--open .select2-dropdown--above{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--open .select2-dropdown--below{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-search--dropdown{display:block;padding:4px}.select2-search--dropdown .select2-search__field{box-sizing:border-box;padding:4px;width:100%}.select2-search--dropdown .select2-search__field::-webkit-search-cancel-button{-webkit-appearance:none}.select2-search--dropdown.select2-search--hide{display:none}.select2-close-mask{background-color:#fff;border:0;display:block;filter:alpha(opacity=0);height:auto;left:0;margin:0;min-height:100%;min-width:100%;opacity:0;padding:0;position:fixed;top:0;width:auto;z-index:99}.select2-hidden-accessible{clip:rect(0 0 0 0)!important;border:0!important;clip-path:inset(50%)!important;height:1px!important;overflow:hidden!important;padding:0!important;position:absolute!important;white-space:nowrap!important;width:1px!important}.select2-container--default .select2-selection--single{background-color:#fff;border:1px solid #aaa;border-radius:4px}.select2-container--default .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--default .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:700;height:26px;margin-right:20px;padding-right:0}.select2-container--default .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--default .select2-selection--single .select2-selection__arrow{height:26px;position:absolute;right:1px;top:1px;width:20px}.select2-container--default .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent;border-style:solid;border-width:5px 4px 0;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--default[dir=rtl] .select2-selection--single .select2-selection__clear{float:left}.select2-container--default[dir=rtl] .select2-selection--single .select2-selection__arrow{left:1px;right:auto}.select2-container--default.select2-container--disabled .select2-selection--single{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection--single .select2-selection__clear{display:none}.select2-container--default.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888;border-width:0 4px 5px}.select2-container--default .select2-selection--multiple{background-color:#fff;border:1px solid #aaa;border-radius:4px;cursor:text;padding-bottom:5px;padding-right:5px;position:relative}.select2-container--default .select2-selection--multiple.select2-selection--clearable{padding-right:25px}.select2-container--default .select2-selection--multiple .select2-selection__clear{cursor:pointer;font-weight:700;height:20px;margin-right:10px;margin-top:5px;padding:1px;position:absolute;right:0}.select2-container--default .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;box-sizing:border-box;display:inline-block;margin-left:5px;margin-top:5px;max-width:100%;overflow:hidden;padding:0 0 0 20px;position:relative;text-overflow:ellipsis;vertical-align:bottom;white-space:nowrap}.select2-container--default .select2-selection--multiple .select2-selection__choice__display{cursor:default;padding-left:2px;padding-right:5px}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove{background-color:transparent;border:none;border-bottom-left-radius:4px;border-right:1px solid #aaa;border-top-left-radius:4px;color:#999;cursor:pointer;font-size:1em;font-weight:700;left:0;padding:0 4px;position:absolute;top:0}.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:focus,.select2-container--default .select2-selection--multiple .select2-selection__choice__remove:hover{background-color:#f1f1f1;color:#333;outline:none}.select2-container--default[dir=rtl] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--default[dir=rtl] .select2-selection--multiple .select2-selection__choice__display{padding-left:5px;padding-right:2px}.select2-container--default[dir=rtl] .select2-selection--multiple .select2-selection__choice__remove{border-bottom-left-radius:0;border-bottom-right-radius:4px;border-left:1px solid #aaa;border-right:none;border-top-left-radius:0;border-top-right-radius:4px}.select2-container--default[dir=rtl] .select2-selection--multiple .select2-selection__clear{float:left;margin-left:10px;margin-right:auto}.select2-container--default.select2-container--focus .select2-selection--multiple{border:1px solid #000;outline:0}.select2-container--default.select2-container--disabled .select2-selection--multiple{background-color:#eee;cursor:default}.select2-container--default.select2-container--disabled .select2-selection__choice__remove{display:none}.select2-container--default.select2-container--open.select2-container--above .select2-selection--multiple,.select2-container--default.select2-container--open.select2-container--above .select2-selection--single{border-top-left-radius:0;border-top-right-radius:0}.select2-container--default.select2-container--open.select2-container--below .select2-selection--multiple,.select2-container--default.select2-container--open.select2-container--below .select2-selection--single{border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--default .select2-search--dropdown .select2-search__field{border:1px solid #aaa}.select2-container--default .select2-search--inline .select2-search__field{-webkit-appearance:textfield;background:transparent;border:none;box-shadow:none;outline:0}.select2-container--default .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--default .select2-results__option .select2-results__option{padding-left:1em}.select2-container--default .select2-results__option .select2-results__option .select2-results__group{padding-left:0}.select2-container--default .select2-results__option .select2-results__option .select2-results__option{margin-left:-1em;padding-left:2em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-2em;padding-left:3em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-3em;padding-left:4em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-4em;padding-left:5em}.select2-container--default .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option .select2-results__option{margin-left:-5em;padding-left:6em}.select2-container--default .select2-results__option--group{padding:0}.select2-container--default .select2-results__option--disabled{color:#999}.select2-container--default .select2-results__option--selected{background-color:#ddd}.select2-container--default .select2-results__option--highlighted.select2-results__option--selectable{background-color:#5897fb;color:#fff}.select2-container--default .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic .select2-selection--single{background-color:#f7f7f7;background-image:linear-gradient(180deg,#fff 50%,#eee);background-repeat:repeat-x;border:1px solid #aaa;border-radius:4px;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFFFFFFF\",endColorstr=\"#FFEEEEEE\",GradientType=0);outline:0}.select2-container--classic .select2-selection--single:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--single .select2-selection__rendered{color:#444;line-height:28px}.select2-container--classic .select2-selection--single .select2-selection__clear{cursor:pointer;float:right;font-weight:700;height:26px;margin-right:20px}.select2-container--classic .select2-selection--single .select2-selection__placeholder{color:#999}.select2-container--classic .select2-selection--single .select2-selection__arrow{background-color:#ddd;background-image:linear-gradient(180deg,#eee 50%,#ccc);background-repeat:repeat-x;border:none;border-bottom-right-radius:4px;border-left:1px solid #aaa;border-top-right-radius:4px;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFEEEEEE\",endColorstr=\"#FFCCCCCC\",GradientType=0);height:26px;position:absolute;right:1px;top:1px;width:20px}.select2-container--classic .select2-selection--single .select2-selection__arrow b{border-color:#888 transparent transparent;border-style:solid;border-width:5px 4px 0;height:0;left:50%;margin-left:-4px;margin-top:-2px;position:absolute;top:50%;width:0}.select2-container--classic[dir=rtl] .select2-selection--single .select2-selection__clear{float:left}.select2-container--classic[dir=rtl] .select2-selection--single .select2-selection__arrow{border:none;border-radius:0;border-bottom-left-radius:4px;border-right:1px solid #aaa;border-top-left-radius:4px;left:1px;right:auto}.select2-container--classic.select2-container--open .select2-selection--single{border:1px solid #5897fb}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow{background:transparent;border:none}.select2-container--classic.select2-container--open .select2-selection--single .select2-selection__arrow b{border-color:transparent transparent #888;border-width:0 4px 5px}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--single{background-image:linear-gradient(180deg,#fff 0,#eee 50%);background-repeat:repeat-x;border-top:none;border-top-left-radius:0;border-top-right-radius:0;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFFFFFFF\",endColorstr=\"#FFEEEEEE\",GradientType=0)}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--single{background-image:linear-gradient(180deg,#eee 50%,#fff);background-repeat:repeat-x;border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0;filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\"#FFEEEEEE\",endColorstr=\"#FFFFFFFF\",GradientType=0)}.select2-container--classic .select2-selection--multiple{background-color:#fff;border:1px solid #aaa;border-radius:4px;cursor:text;outline:0;padding-bottom:5px;padding-right:5px}.select2-container--classic .select2-selection--multiple:focus{border:1px solid #5897fb}.select2-container--classic .select2-selection--multiple .select2-selection__clear{display:none}.select2-container--classic .select2-selection--multiple .select2-selection__choice{background-color:#e4e4e4;border:1px solid #aaa;border-radius:4px;display:inline-block;margin-left:5px;margin-top:5px;padding:0}.select2-container--classic .select2-selection--multiple .select2-selection__choice__display{cursor:default;padding-left:2px;padding-right:5px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove{background-color:transparent;border:none;border-bottom-left-radius:4px;border-top-left-radius:4px;color:#888;cursor:pointer;font-size:1em;font-weight:700;padding:0 4px}.select2-container--classic .select2-selection--multiple .select2-selection__choice__remove:hover{color:#555;outline:none}.select2-container--classic[dir=rtl] .select2-selection--multiple .select2-selection__choice{margin-left:5px;margin-right:auto}.select2-container--classic[dir=rtl] .select2-selection--multiple .select2-selection__choice__display{padding-left:5px;padding-right:2px}.select2-container--classic[dir=rtl] .select2-selection--multiple .select2-selection__choice__remove{border-bottom-left-radius:0;border-bottom-right-radius:4px;border-top-left-radius:0;border-top-right-radius:4px}.select2-container--classic.select2-container--open .select2-selection--multiple{border:1px solid #5897fb}.select2-container--classic.select2-container--open.select2-container--above .select2-selection--multiple{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.select2-container--classic.select2-container--open.select2-container--below .select2-selection--multiple{border-bottom:none;border-bottom-left-radius:0;border-bottom-right-radius:0}.select2-container--classic .select2-search--dropdown .select2-search__field{border:1px solid #aaa;outline:0}.select2-container--classic .select2-search--inline .select2-search__field{box-shadow:none;outline:0}.select2-container--classic .select2-dropdown{background-color:#fff;border:1px solid transparent}.select2-container--classic .select2-dropdown--above{border-bottom:none}.select2-container--classic .select2-dropdown--below{border-top:none}.select2-container--classic .select2-results>.select2-results__options{max-height:200px;overflow-y:auto}.select2-container--classic .select2-results__option--group{padding:0}.select2-container--classic .select2-results__option--disabled{color:grey}.select2-container--classic .select2-results__option--highlighted.select2-results__option--selectable{background-color:#3875d7;color:#fff}.select2-container--classic .select2-results__group{cursor:default;display:block;padding:6px}.select2-container--classic.select2-container--open .select2-dropdown{border-color:#5897fb}#hts-loader-response-container .hts-data-container{margin-bottom:25px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper{border:1px solid #dadce0;border-radius:8px;margin-top:20px;padding-top:0}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper .description{border-bottom:1px solid #dadce0;padding:0 20px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper .description h3{font-size:16px;line-height:24px;margin:0;padding:14px 0}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper .form-inputs{padding:0 20px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .form-inputs{display:flex;flex-wrap:wrap}@media(min-width:735px){#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .image-container{margin-right:20px}}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .image-container img{width:100%}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container{padding-top:10px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container div{margin-bottom:8px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container span{color:#727586;display:block;font-size:14px;line-height:24px;margin-bottom:5px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container input[type=checkbox]{-webkit-appearance:none;background:none;border:2px solid #673de6;border-radius:3px;cursor:pointer;height:20px;line-height:0;margin:0 5px 0 0;outline:0;padding:0!important;position:relative;vertical-align:text-top;width:20px}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container input[type=checkbox]:focus{box-shadow:none}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container input[type=checkbox]:hover{opacity:1}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container input[type=checkbox]:checked{background-color:#673de6;opacity:1}#hts-loader-response-container .hts-data-container .hts-metadata-wrapper.hts-ai-image .checkbox-container input[type=checkbox]:before{border:solid #fff;border-width:0 2px 2px 0;content:\"\";height:10px;margin:-1px -1px 0;position:absolute;right:50%;top:50%;transform:rotate(45deg) translate(-50%,-50%);width:4px;z-index:2}#hts-loader-response-container .hts-data-container #hts-seo-keywords{border-color:#dadce0}#hts-loader-response-container .hts-data-container .hts-content-data{background-color:#f2f3f6;border-radius:25px;display:inline-block;padding:6px 12px 6px 15px}#hts-loader-response-container .hts-data-container .hts-content-data .hts-data-type{display:inline-block;font-family:DMSans,sans-serif;font-size:12px;font-weight:100;line-height:20px;text-transform:capitalize}#hts-loader-response-container .hts-data-container .hts-content-data .hts-data-type:after{background-color:#727586;border-radius:100%;content:\"\";display:inline-block;height:5px;margin-left:10px;margin-right:5px;vertical-align:middle;width:5px}#hts-loader-response-container .hts-data-container .hts-content-data .hts-data-type:last-child:after{display:none}#hts-loader-response-container .hts-data-container .description{align-items:center;display:flex;margin-bottom:20px}#hts-loader-response-container .hts-data-container .description #hts-description-tip,#hts-loader-response-container .hts-data-container .description #hts-keywords-tip{cursor:pointer;font-size:20px;margin-left:5px}#hts-loader-response-container .hts-data-container .description p{color:#727586}#hts-loader-response-container .hts-data-container .description h3{font-size:16px;font-weight:700;line-height:24px}#hts-loader-response-container .hts-data-container .form-inputs{margin-bottom:20px}#hts-loader-response-container .hts-data-container .form-inputs .field-description{margin-bottom:10px;text-align:left}#hts-loader-response-container .hts-data-container .form-inputs .field-description p{color:#727586!important;font-size:12px!important;font-weight:400!important;line-height:12px!important;margin-left:12px!important;margin-top:4px!important;padding-right:10px!important}#hts-loader-response-container .hts-data-container .form-inputs .form-textarea textarea{border:1px solid #dadce0;border-radius:4px;color:#727586;font-size:14px;min-height:125px;padding:10px 17px;resize:none;width:100%}#hts-loader-response-container .hts-data-container .form-inputs .form-textarea textarea:focus{border:1px solid #673de6}#hts-loader-response-container .hts-data-container .form-inputs .form-textarea label{display:none}.hts-seo-dropdown{display:none!important}.hts-inputs-wrapper{display:flex;gap:10px;margin-bottom:20px}@media(max-width:700px){.hts-inputs-wrapper{flex-direction:column}}.hts-inputs-wrapper .hts-input-item{max-width:50%}@media(max-width:700px){.hts-inputs-wrapper .hts-input-item{margin-bottom:10px;max-width:100%}}.hts-inputs-wrapper .container{border-radius:4px;display:block;position:relative;width:100%}.hts-inputs-wrapper .setting-description{background-color:#fff;left:6px;line-height:1;max-width:300px;padding:0 8px;position:absolute;top:-10px;z-index:10}.hts-inputs-wrapper .setting-description .setting-description-text{color:#727586}.hts-inputs-wrapper .setting-description .setting-description-text span{font-size:12px;font-weight:400;line-height:20px;margin:0}.hts-inputs-wrapper .setting-description.active .setting-description-text{color:#673de6}.hts-inputs-wrapper .wrapper-dropdown{align-items:center;background:#fff;border:1px solid #dadce0;border-radius:4px;color:#727586;cursor:pointer;display:flex;justify-content:space-between;min-height:44px;padding:0;position:relative;text-align:left;-webkit-user-select:none;-moz-user-select:none;user-select:none;width:100%!important}.hts-inputs-wrapper .scrollable-menu{height:auto;max-height:200px;overflow-x:hidden}.hts-inputs-wrapper .hts-arrow{margin-left:10px;margin-right:10px}.hts-inputs-wrapper .selected-display{margin-left:14px;text-transform:capitalize}.hts-inputs-wrapper .selected-display .hts-select-description{display:none}.hts-inputs-wrapper .selected-display:before{margin-right:8px}.hts-inputs-wrapper svg{transition:all .3s}.hts-inputs-wrapper .wrapper-dropdown:before{border-color:#fff transparent;border-style:solid;border-width:6px 6px 0;margin-top:-2px}.hts-inputs-wrapper .rotated{transform:rotate(-180deg)}.hts-inputs-wrapper .wrapper-dropdown .dropdown{background:inherit;box-shadow:0 8px 24px hsla(210,8%,62%,.2);left:0;list-style:none;margin:0;opacity:0;padding:0;position:absolute;right:0;top:104%;transform-origin:top;transition:.3s;-webkit-user-select:none;-moz-user-select:none;user-select:none;visibility:hidden;z-index:99}.hts-inputs-wrapper .wrapper-dropdown .dropdown li{align-items:center;display:flex;line-height:45px;margin-bottom:0;overflow:hidden;padding:0 15px 0 10px}.hts-inputs-wrapper .wrapper-dropdown .dropdown li .hts-select-icon{line-height:1;margin-right:6px}.hts-inputs-wrapper .wrapper-dropdown .dropdown li span{display:block;line-height:1;margin:15px 0 10px}.hts-inputs-wrapper .wrapper-dropdown .dropdown li .hts-select-description p{color:#727586;font-size:12px;font-weight:400;line-height:20px;margin-bottom:10px}.hts-inputs-wrapper .wrapper-dropdown .dropdown li:before{margin-right:5px}.hts-inputs-wrapper .hts-content-length .dropdown li{align-items:flex-start;display:flex;flex-direction:column;line-height:1}.hts-inputs-wrapper .wrapper-dropdown .dropdown li:last-child{border-bottom:none}.hts-inputs-wrapper .wrapper-dropdown .dropdown li:hover{background-color:hsla(220,9%,87%,.239);color:#36344d}.hts-inputs-wrapper .wrapper-dropdown .dropdown li.active{background-color:rgba(103,61,230,.08);color:#673de6}.hts-inputs-wrapper .wrapper-dropdown.active{border:2px solid #673de6;position:absolute}.hts-inputs-wrapper .wrapper-dropdown.active .dropdown{border-radius:4px;opacity:1;visibility:visible}.hts-inputs-wrapper .hts-input-description{text-align:left}.hts-inputs-wrapper .hts-input-description p{color:#727586;font-size:12px;font-weight:400;line-height:12px;margin-left:12px;margin-top:4px;padding-right:10px}.hts-ai-assistant-tab{align-items:center;display:flex}.hts-ai-assistant-tab svg{margin-right:5px}.hts-ai-assistant-tab svg path{fill:#727586}.hts-ai-assistant-tab.hsr-active{color:#673de6}.hts-ai-assistant-tab.hsr-active svg path{fill:#673de6}.hts-ai-assistant{display:flex;flex-direction:column;justify-content:center;margin-top:32px;text-align:center;width:100%}@media(max-width:782px){.hts-ai-assistant{box-sizing:border-box;padding-right:10px}}.hts-ai-assistant .wrapper{margin:auto;max-width:730px;width:100%}.hts-ai-assistant .hts-heading{display:flex;flex-direction:column}.hts-ai-assistant .hts-heading h2{font-size:24px;font-weight:700;line-height:32px}.hts-ai-assistant .hts-heading h3{color:#673de6;font-size:20px;font-weight:700}.hts-ai-assistant .hts-ai-tab-head{align-items:center;display:flex;flex-wrap:wrap;justify-content:space-between}.hts-ai-assistant .hts-ai-tab-head .hts-ai-tutorials .hts-button-wrapper{display:flex;gap:10px}@media(max-width:400px){.hts-ai-assistant .hts-ai-tab-head .hts-ai-tutorials .hts-button-wrapper{flex-wrap:wrap}.hts-ai-assistant .hts-ai-tab-head .hts-ai-tutorials .hts-button-wrapper a{justify-content:center;width:100%}}@media(max-width:600px){.hts-ai-assistant .hts-ai-tab-head .hts-ai-tutorials{margin-top:10px;width:100%}}@media(max-width:400px){.hts-ai-assistant .hts-ai-tab-head{justify-content:center}.hts-ai-assistant .hts-ai-tab-head .hts-heading{margin-bottom:15px;width:100%}}.hts-ai-assistant .hts-ai-tab-head .hts-btn{align-items:center;display:flex;font-family:DM Sans,sans-serif;font-size:12px;padding:6px 16px}.hts-ai-assistant .hts-ai-tab-head .hts-btn svg{margin-left:7px}.hts-ai-assistant .hts-ai-tab-head .hts-btn svg.reverse{margin-left:0;margin-right:7px}.hts-ai-assistant .hts-ai-tab-head .hts-btn:active,.hts-ai-assistant .hts-ai-tab-head .hts-btn:focus,.hts-ai-assistant .hts-ai-tab-head .hts-btn:hover{box-shadow:none;color:#673de6}.hts-ai-assistant .hts-container{background-color:#fff;border:1px solid #dadce0;border-radius:8px;margin-top:25px;padding:40px;text-align:left}@media(max-width:700px){.hts-ai-assistant .hts-container{padding:20px}}.hts-ai-assistant .hts-container .wrapper{position:relative}.hts-ai-assistant .hts-container .hts-description{margin-bottom:20px}.hts-ai-assistant .hts-container .hts-description p{color:#727586}.hts-ai-assistant .hts-container .hts-description h3{font-size:16px;font-weight:700;line-height:24px}.hts-ai-assistant .hts-container .hts-input-textarea textarea{border:1px solid #dadce0;border-radius:4px;color:#727586;font-size:14px;height:120px;padding:10px 17px;resize:none;width:100%}.hts-ai-assistant .hts-container .hts-input-textarea textarea:focus{border:1px solid #673de6}.hts-ai-assistant .hts-container .hts-input-textarea .hts-label{display:none}.hts-ai-assistant .hts-container .progress-bar-wrapper{margin-top:3px}.hts-ai-assistant .hts-container .progress-bar-wrapper .progress-bar{align-items:flex-start;display:flex;flex-direction:row;gap:8px;height:16px;padding:0;width:100%}.hts-ai-assistant .hts-container .progress-bar-wrapper .progress-bar .progress-bar-step{background-color:#f2f3f6;flex-grow:1;height:16px}.hts-ai-assistant .hts-container .progress-bar-wrapper .progress-bar .progress-bar-step:first-of-type{border-radius:4px 0 0 4px}.hts-ai-assistant .hts-container .progress-bar-wrapper .progress-bar .progress-bar-step:last-of-type{border-radius:0 4px 4px 0}.hts-ai-assistant .hts-container #hts-input-message{color:#727586;font-size:12px;min-height:24px}.hts-ai-assistant .hts-container .hts-submit-button{align-items:center;display:flex;justify-content:center;margin:15px 0 0 auto;padding-right:29px;width:240px}.hts-ai-assistant .hts-container .hts-submit-button svg{margin-right:5px}.hts-ai-assistant .hts-container .hts-submit-button svg path{fill:#fff}@media(max-width:676px){.hts-ai-assistant .hts-container .hts-submit-button{box-sizing:border-box;padding:8px 5px 8px 0;width:100%}}.hts-ai-assistant .hts-container .hts-focus-keywords{margin-top:24px}.hts-ai-assistant .hts-container .hts-focus-keywords .select2-container--default{min-height:50px}.hts-ai-assistant .hts-container .hts-focus-keywords .hts-description{display:flex;margin-bottom:5px}.hts-ai-assistant .hts-container .hts-focus-keywords .hts-description span{color:#727586;font-size:12px;line-height:24px;margin-left:10px}.hts-ai-assistant .hts-container .hts-focus-keywords .hts-input-description{color:#727586;font-size:12px;line-height:20px;margin-bottom:10px}.hts-ai-assistant .hts-container.active .hts-input-textarea .hts-label{background-color:#fff;color:#673de6;display:block;left:10px;line-height:20px;padding:0 8px;position:absolute;top:-9px}.hts-ai-assistant .hts-container.hts-poor .progress-bar-step:first-child{background-color:#fc5185}.hts-ai-assistant .hts-container.hts-average .progress-bar-step:first-child,.hts-ai-assistant .hts-container.hts-average .progress-bar-step:nth-child(2){background-color:#ffcd35}.hts-ai-assistant .hts-container.hts-good .progress-bar-step:first-child,.hts-ai-assistant .hts-container.hts-good .progress-bar-step:nth-child(2),.hts-ai-assistant .hts-container.hts-good .progress-bar-step:nth-child(3){background-color:#00b090}.hts-ai-assistant .hts-ai-assistant-result .hts-loader-wrapper{background-color:#fff;border:1px solid #dadce0;border-radius:8px;display:none;justify-content:center;padding:40px;text-align:center}.hts-ai-assistant .hts-ai-assistant-result .hts-loader-container{background-color:#ebe4ff;border:1px solid #f2f3f6;display:none;height:8px;margin:40px auto 0;max-width:280px;position:relative;width:100%}.hts-ai-assistant .hts-ai-assistant-result .hts-loader-progress{animation:loading-animation 5s infinite;background-color:#673de6;border-radius:50px;height:100%;transition:width .2s ease-in-out;width:0}@keyframes loading-animation{0%{width:0}to{width:100%}}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container{background-color:#fff;border:1px solid #dadce0;border-radius:8px;display:none;font-size:14px;text-align:left}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-response-content{padding:20px 40px 40px}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-response-content img{max-height:400px;max-width:320px;-o-object-fit:cover;object-fit:cover}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-response-content .hts-error-msg{color:#fc5185}@media(max-width:700px){.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-response-content{padding:20px}}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content{align-items:center;background:#fff;border-top:1px solid #dadce0;display:flex;justify-content:space-between;padding:17px 13px}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-btn-wrapper{display:flex}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-btn-wrapper .hts-secondary-btn{margin-right:10px}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-btn-wrapper .hts-secondary-btn.button--loading:after{border:2px solid #f2f3f6;border-top-color:#1d1e20}@media(max-width:500px){.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-btn-wrapper{justify-content:flex-end;margin-top:10px;width:100%}}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-words{color:#727586;display:flex}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content .hts-words .hts-separator{margin:0 3px}@media(max-width:500px){.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container .hts-bottom-content{flex-wrap:wrap;justify-content:flex-end}}.hts-ai-assistant .hts-ai-assistant-result #hts-loader-response-container p{color:#727586;font-size:14px;line-height:24px;margin-bottom:5px}.hts-ai-assistant .hts-existing-content-popup{background-color:#fff;border:1px solid #dadce0;border-radius:8px;display:none;margin:10px auto;max-width:600px;padding:40px;text-align:left}.hts-ai-assistant .hts-existing-content-popup h3{font-size:20px;font-weight:700;line-height:32px}.hts-ai-assistant .hts-existing-content-popup p{color:#727586;font-size:14px;line-height:24px;margin:15px 0 20px}.hts-ai-assistant .hts-existing-content-popup .hts-popup-buttons{display:flex;font-size:14px;font-weight:700;justify-content:space-between;margin-left:auto;max-width:300px}.hts-ai-assistant .hts-existing-content-popup .hts-popup-buttons .hts-cancel{align-items:center;color:#fc5185;cursor:pointer;display:flex;justify-content:center;transition:.3s}.hts-ai-assistant .hts-existing-content-popup .hts-popup-buttons .hts-cancel:hover{opacity:.8}.hts-ai-assistant h1,.hts-ai-assistant h2,.hts-ai-assistant h3,.hts-ai-assistant h4{margin:0;padding:0}.hts-ai-assistant.hts-create-content .hts-container{border-bottom:1px solid #dadce0;border-bottom-left-radius:0;border-bottom-right-radius:0}.hts-ai-assistant.hts-create-content #hts-loader-response-container{border-top:none;border-top-left-radius:0;border-top-right-radius:0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h1,.hts-ai-assistant.hts-create-content #hts-loader-response-container h2,.hts-ai-assistant.hts-create-content #hts-loader-response-container h3,.hts-ai-assistant.hts-create-content #hts-loader-response-container h4,.hts-ai-assistant.hts-create-content #hts-loader-response-container h5,.hts-ai-assistant.hts-create-content #hts-loader-response-container h6{font-weight:700;line-height:1.3}.hts-ai-assistant.hts-create-content #hts-loader-response-container h1{font-size:2em;margin:.67em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h2{font-size:1.5em;margin:.75em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h3{font-size:1.17em;margin:.83em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h4{font-size:1em;margin:1.33em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h5{font-size:.83em;margin:1.67em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container h6{font-size:.67em;margin:2.33em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container p{margin:1em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container ol,.hts-ai-assistant.hts-create-content #hts-loader-response-container ul{list-style:initial;margin:1em 0;padding:0 0 0 2em}.hts-ai-assistant.hts-create-content #hts-loader-response-container li{margin:.5em 0}.hts-ai-assistant.hts-create-content #hts-loader-response-container blockquote{border-left:4px solid #ccc;color:#777;margin:1em 0;padding:0 1em}.hts-ai-assistant.hts-create-content #hts-loader-response-container code{background-color:#f8f8f8;border-radius:4px;font-family:Courier New,monospace;padding:.2em .4em}.hts-ai-assistant.hts-create-content #hts-loader-response-container b,.hts-ai-assistant.hts-create-content #hts-loader-response-container strong{font-weight:700}.hts-ai-assistant.hts-create-content #hts-loader-response-container em,.hts-ai-assistant.hts-create-content #hts-loader-response-container i{font-style:italic}.hts-ai-assistant.hts-create-content #hts-loader-response-container u{text-decoration:underline}.hts-ai-assistant.hts-create-content #hts-loader-response-container del,.hts-ai-assistant.hts-create-content #hts-loader-response-container s,.hts-ai-assistant.hts-create-content #hts-loader-response-container strike{text-decoration:line-through}.hts-ai-assistant.hts-create-content #hts-loader-response-container sup{font-size:smaller;vertical-align:super}.hts-ai-assistant.hts-create-content #hts-loader-response-container sub{font-size:smaller;vertical-align:sub}.hts-ai-assistant.hts-create-content #hts-loader-response-container pre{font-family:Courier New,monospace;margin:1em 0;overflow:auto;white-space:pre}.hts-ai-assistant.hts-create-content .hts-loader-wrapper{border-top:none;border-top-left-radius:0;border-top-right-radius:0}@media(max-width:960px){body.auto-fold .hts-loader-modal{left:36px}}@media(max-width:782px){body.auto-fold .hts-loader-modal{left:0}}.hts-loader-modal{background-color:#000;background-color:rgba(0,0,0,.7);display:none;height:100%;left:160px;overflow:auto;position:fixed;top:0;width:100%;z-index:10}.hts-loader-modal__content{align-items:center;background:#fff;border:1px solid #dadce0;border-radius:16px;box-shadow:0 0 12px 0 rgba(29,30,32,.16);display:flex;flex-direction:column;justify-content:center;margin:auto;padding:24px 40px;width:600px}@media(max-width:960px){.hts-loader-modal__content{width:450px}}@media(max-width:600px){.hts-loader-modal__content{margin:auto 15px;width:100%}}.hts-loader-modal__image-wrap{margin-bottom:28px}.hts-loader-modal__title{color:#1d1e20;font-size:24px;font-style:normal;font-weight:700;line-height:32px;margin-bottom:4px;text-align:center}.hts-loader-modal__description{color:#727586;font-size:14px;font-style:normal;font-weight:400;line-height:24px;text-align:center}.hts-loader-modal__loader-wrap{margin:16px 0}.hts-loader-modal__loader{animation:modalLoader 1.5s linear infinite;aspect-ratio:1;border:5px solid #673de6;border-radius:50%;border-right-color:#ebe4ff;width:24px}@keyframes modalLoader{to{transform:rotate(1turn)}}*{color:inherit}*,:after,:before{margin:0;padding:0}html{height:100%;scroll-behavior:smooth}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-loader.php","ext":"php","size":5251,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Register all actions and filters for the plugin\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n */\n\n/**\n * Register all actions and filters for the plugin.\n *\n * Maintain a list of all hooks that are registered throughout\n * the plugin, and register them with the WordPress API. Call the\n * run function to execute the list of actions and filters.\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant_Loader {\n\n    /**\n     * The array of actions registered with WordPress.\n     *\n     * @since    1.0.0\n     * @access   protected\n     * @var      array    $actions    The actions registered with WordPress to fire when the plugin loads.\n     */\n    protected $actions;\n\n    /**\n     * The array of filters registered with WordPress.\n     *\n     * @since    1.0.0\n     * @access   protected\n     * @var      array    $filters    The filters registered with WordPress to fire when the plugin loads.\n     */\n    protected $filters;\n\n    /**\n     * Initialize the collections used to maintain the actions and filters.\n     *\n     * @since    1.0.0\n     */\n    public function __construct() {\n\n        $this->actions = array();\n        $this->filters = array();\n    }\n\n    /**\n     * Add a new action to the collection to be registered with WordPress.\n     *\n     * @since    1.0.0\n     * @param    string               $hook             The name of the WordPress action that is being registered.\n     * @param    object               $component        A reference to the instance of the object on which the action is defined.\n     * @param    string               $callback         The name of the function definition on the $component.\n     * @param    int                  $priority         Optional. The priority at which the function should be fired. Default is 10.\n     * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1.\n     */\n    public function add_action( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {\n        $this->actions = $this->add( $this->actions, $hook, $component, $callback, $priority, $accepted_args );\n    }\n\n    /**\n     * Add a new filter to the collection to be registered with WordPress.\n     *\n     * @since    1.0.0\n     * @param    string               $hook             The name of the WordPress filter that is being registered.\n     * @param    object               $component        A reference to the instance of the object on which the filter is defined.\n     * @param    string               $callback         The name of the function definition on the $component.\n     * @param    int                  $priority         Optional. The priority at which the function should be fired. Default is 10.\n     * @param    int                  $accepted_args    Optional. The number of arguments that should be passed to the $callback. Default is 1\n     */\n    public function add_filter( $hook, $component, $callback, $priority = 10, $accepted_args = 1 ) {\n        $this->filters = $this->add( $this->filters, $hook, $component, $callback, $priority, $accepted_args );\n    }\n\n    /**\n     * A utility function that is used to register the actions and hooks into a single\n     * collection.\n     *\n     * @since    1.0.0\n     * @access   private\n     * @param    array                $hooks            The collection of hooks that is being registered (that is, actions or filters).\n     * @param    string               $hook             The name of the WordPress filter that is being registered.\n     * @param    object               $component        A reference to the instance of the object on which the filter is defined.\n     * @param    string               $callback         The name of the function definition on the $component.\n     * @param    int                  $priority         The priority at which the function should be fired.\n     * @param    int                  $accepted_args    The number of arguments that should be passed to the $callback.\n     * @return   array                                  The collection of actions and filters registered with WordPress.\n     */\n    private function add( $hooks, $hook, $component, $callback, $priority, $accepted_args ) {\n\n        $hooks[] = array(\n            'hook'          => $hook,\n            'component'     => $component,\n            'callback'      => $callback,\n            'priority'      => $priority,\n            'accepted_args' => $accepted_args,\n        );\n\n        return $hooks;\n    }\n\n    /**\n     * Register the filters and actions with WordPress.\n     *\n     * @since    1.0.0\n     */\n    public function run() {\n\n        foreach ( $this->filters as $hook ) {\n            add_filter( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );\n        }\n\n        foreach ( $this->actions as $hook ) {\n            add_action( $hook['hook'], array( $hook['component'], $hook['callback'] ), $hook['priority'], $hook['accepted_args'] );\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-surveys.php","ext":"php","size":2678,"mtime":1757312769,"type":"text","content":"<?php\n\nuse Hostinger\\Surveys\\SurveyManager;\nuse Hostinger\\WpHelper\\Utils as Helper;\n\nclass Surveys {\n    public const AI_SURVEY_ID       = 'ai_plugin_survey';\n    public const AI_SURVEY_LOCATION = 'wordpress_ai_plugin';\n    public const AI_SURVEY_PRIORITY = 70;\n    public const DAY_IN_SECONDS     = 86400;\n    private SurveyManager $survey_manager;\n\n    public function __construct( SurveyManager $survey_manager ) {\n        $this->survey_manager = $survey_manager;\n    }\n\n    public function init() {\n        add_filter( 'hostinger_add_surveys', array( $this, 'create_surveys' ) );\n    }\n\n    public function create_surveys( $surveys ) {\n        if ( $this->is_content_generation_survey_enabled() ) {\n            $score_question   = esc_html__( 'How would you rate your experience using our AI Assistant plugin for content generation? (Scale 1-10)', 'hostinger-ai-assistant' );\n            $comment_question = esc_html__( 'Do you have any comments/suggestions to improve our AI tools?', 'hostinger-ai-assistant' );\n            $ai_survey        = SurveyManager::addSurvey( self::AI_SURVEY_ID, $score_question, $comment_question, self::AI_SURVEY_LOCATION, self::AI_SURVEY_PRIORITY );\n            $surveys[]        = $ai_survey;\n        }\n\n        return $surveys;\n    }\n\n    public function is_content_generation_survey_enabled(): bool {\n        if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n            return false;\n        }\n\n        $helper                  = new Helper();\n        $not_completed           = $this->survey_manager->isSurveyNotCompleted( self::AI_SURVEY_ID );\n        $content_published       = get_option( 'hostinger_content_published', '' );\n        $is_client_eligible      = $this->survey_manager->isClientEligible();\n        $is_hostinger_admin_page = $helper->isThisPage( 'hostinger-ai-assistant' );\n        $is_survey_hidden        = $this->survey_manager->isSurveyHidden();\n\n        if ( ! $is_hostinger_admin_page || $is_survey_hidden || ! $this->is_within_creation_date_limit() ) {\n            return false;\n        }\n\n        return $not_completed && $content_published && $is_client_eligible;\n    }\n\n    private function is_within_creation_date_limit(): bool {\n        $oldest_user = get_users(\n            array(\n                'number'  => 1,\n                'orderby' => 'registered',\n                'order'   => 'ASC',\n                'fields'  => array( 'user_registered' ),\n            )\n        );\n\n        $oldest_user_date = isset( $oldest_user[0]->user_registered ) ? strtotime( $oldest_user[0]->user_registered ) : false;\n\n        return $oldest_user_date && ( time() - $oldest_user_date ) <= ( 7 * self::DAY_IN_SECONDS );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/seo/class-hostinger-ai-assistant-seo.php","ext":"php","size":7351,"mtime":1757312769,"type":"text","content":"<?php\n/**\n * The file that defines all related to SEO\n *\n * @link       https://hostinger.com\n * @since      1.3.1\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\nclass Hostinger_Ai_Assistant_Seo {\n    const YOAST_SEO_PLUGIN_SLUG      = 'yoast';\n    const RANK_MATH_SEO_PLUGIN_SLUG  = 'rank-math';\n    const ALL_IN_ONE_SEO_PLUGIN_SLUG = 'all-in-one-seo-pack';\n    private Hostinger_Ai_Assistant_Helper $helper;\n\n    public function __construct() {\n        $this->helper = new Hostinger_Ai_Assistant_Helper();\n        add_action( 'wp_head', array( $this, 'print_seo_meta_tags' ) );\n    }\n\n    public function add_seo_meta_data( string $keywords, string $description, int $post_id ): void {\n        $title = get_the_title( $post_id );\n        update_post_meta( $post_id, 'hostinger_ai_assistant_seo_keywords', $keywords );\n        update_post_meta( $post_id, 'hostinger_ai_assistant_seo_description', $description );\n        update_post_meta( $post_id, 'hostinger_ai_assistant_seo_title', $title );\n\n        $this->add_seo_meta_tags( $post_id );\n    }\n\n    public function add_seo_meta_tags( $post_id ): void {\n        $seo_meta              = $this->get_seo_meta( $post_id );\n        $yoast_seo_active      = $this->is_yoast_seo_active();\n        $rank_math_seo_active  = $this->is_rank_math_seo_active();\n        $all_in_one_seo_active = $this->is_all_in_one_seo_active();\n\n        if ( $yoast_seo_active && ! $seo_meta['yoast_seo_tags_created'] ) {\n            $this->add_seo_tags_for_plugin( $post_id, $seo_meta, self::YOAST_SEO_PLUGIN_SLUG );\n        } elseif ( $rank_math_seo_active && ! $seo_meta['rank_seo_tags_created'] ) {\n            $this->add_seo_tags_for_plugin( $post_id, $seo_meta, self::RANK_MATH_SEO_PLUGIN_SLUG );\n        } elseif ( $all_in_one_seo_active && ! $seo_meta['all_in_one_seo_tags_created'] ) {\n            $this->add_seo_tags_for_plugin( $post_id, $seo_meta, self::ALL_IN_ONE_SEO_PLUGIN_SLUG );\n        }\n    }\n\n    public function print_seo_meta_tags(): void {\n        $post_id  = get_the_ID();\n        $seo_meta = $this->get_seo_meta( $post_id );\n\n        if ( ! $this->is_seo_plugin_active() ) {\n            $this->output_meta_tags( $seo_meta['keywords'], $seo_meta['description'], $seo_meta['title'] );\n        }\n    }\n\n    private function get_seo_meta( int $post_id ): array {\n        return array(\n            'keywords'                    => get_post_meta( $post_id, 'hostinger_ai_assistant_seo_keywords', true ),\n            'description'                 => get_post_meta( $post_id, 'hostinger_ai_assistant_seo_description', true ),\n            'title'                       => get_post_meta( $post_id, 'hostinger_ai_assistant_seo_title', true ),\n            'yoast_seo_tags_created'      => get_post_meta( $post_id, 'hts_yoast_seo_tags_created', true ),\n            'rank_seo_tags_created'       => get_post_meta( $post_id, 'hts_rank_seo_tags_created', true ),\n            'all_in_one_seo_tags_created' => get_post_meta( $post_id, 'hts_all_in_one_seo_tags_created', true ),\n        );\n    }\n\n    private function add_seo_tags_for_plugin( int $post_id, array $seo_meta, string $plugin ): void {\n        if ( $plugin === self::YOAST_SEO_PLUGIN_SLUG ) {\n            $this->add_yoast_meta_tags( $post_id, $seo_meta['description'], $this->get_single_keyword( $seo_meta['keywords'] ), $seo_meta['title'] );\n            update_post_meta( $post_id, 'hts_yoast_seo_tags_created', true );\n        } elseif ( $plugin === self::RANK_MATH_SEO_PLUGIN_SLUG ) {\n            $this->add_rank_math_meta_tags( $post_id, $seo_meta['description'], $this->get_keywords( $seo_meta['keywords'], 4 ), $seo_meta['title'] );\n            update_post_meta( $post_id, 'hts_rank_seo_tags_created', true );\n        } elseif ( $plugin === self::ALL_IN_ONE_SEO_PLUGIN_SLUG ) {\n            $this->all_in_one_meta_tags( $post_id, $seo_meta['description'], $this->get_single_keyword( $seo_meta['keywords'] ), $seo_meta['title'] );\n            update_post_meta( $post_id, 'hts_all_in_one_seo_tags_created', true );\n        }\n    }\n\n    private function is_seo_plugin_active(): bool {\n        return $this->is_yoast_seo_active() || $this->is_rank_math_seo_active() || $this->is_all_in_one_seo_active();\n    }\n\n    public function add_yoast_meta_tags( int $post_id, string $meta_description, string $keyword, string $meta_title ): void {\n        if ( $meta_title ) {\n            update_post_meta( $post_id, '_yoast_wpseo_title', $meta_title );\n        }\n\n        if ( $meta_description ) {\n            update_post_meta( $post_id, '_yoast_wpseo_metadesc', $meta_description );\n        }\n        if ( $keyword ) {\n            update_post_meta( $post_id, '_yoast_wpseo_focuskw', $keyword );\n        }\n    }\n\n    public function add_rank_math_meta_tags( int $post_id, string $meta_description, string $keyword, string $meta_title ): void {\n        if ( $meta_description ) {\n            update_post_meta( $post_id, 'rank_math_description', $meta_description );\n        }\n        if ( $keyword ) {\n            update_post_meta( $post_id, 'rank_math_focus_keyword', $keyword );\n        }\n        if ( $meta_title ) {\n            update_post_meta( $post_id, 'rank_math_title', $meta_title );\n        }\n    }\n\n    public function all_in_one_meta_tags( int $post_id, string $meta_description, string $keyword, string $meta_title ): void {\n        $data = array();\n\n        if ( $meta_description ) {\n            $data['description'] = '#post_excerpt ' . $meta_description;\n        }\n\n        if ( $meta_title ) {\n            $data['title'] = $meta_title;\n        }\n\n        if ( class_exists( \\AIOSEO\\Plugin\\Common\\Models\\Post::class ) ) {\n            \\AIOSEO\\Plugin\\Common\\Models\\Post::savePost( $post_id, $data );\n        }\n    }\n\n    private function output_meta_tags( string $seo_keywords, string $seo_description, string $seo_title = '' ): void {\n        if ( ! empty( $seo_keywords ) ) {\n            echo '<meta name=\"keywords\" content=\"' . esc_attr( $seo_keywords ) . '\" />' . \"\\n\";\n        }\n        if ( ! empty( $seo_description ) ) {\n            echo '<meta name=\"description\" content=\"' . esc_attr( $seo_description ) . '\" />' . \"\\n\";\n        }\n\n        if ( ! empty( $seo_title ) ) {\n            echo '<meta name=\"title\" content=\"' . esc_attr( $seo_title ) . '\" />' . \"\\n\";\n        }\n    }\n\n    private function get_single_keyword( string $keywords ): string {\n        $keywords = explode( ',', $keywords );\n        if ( ! empty( $keywords ) ) {\n            return trim( $keywords[0] );\n        } else {\n            return '';\n        }\n    }\n\n    private function get_keywords( string $keywords, int $max_count = 1 ): string {\n        $keywords = explode( ',', $keywords );\n        $keywords = array_slice( $keywords, 0, $max_count );\n        $keywords = array_map( 'trim', $keywords );\n        $keywords = array_filter( $keywords );\n\n        return implode( ', ', $keywords );\n    }\n\n    private function is_yoast_seo_active(): bool {\n        return $this->helper->is_plugin_active( 'wp-seo' );\n    }\n\n    private function is_rank_math_seo_active(): bool {\n        return $this->helper->is_plugin_active( 'rank-math' );\n    }\n\n    private function is_all_in_one_seo_active(): bool {\n        return $this->helper->is_plugin_active( 'all_in_one_seo_pack' );\n    }\n}\n\n$seo = new Hostinger_Ai_Assistant_Seo();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/woocommerce/class-hostinger-ai-assistant-product-ai-metabox.php","ext":"php","size":12234,"mtime":1757312769,"type":"text","content":"<?php\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n}\n\nclass Hostinger_Ai_Assistant_Product_Ai_Metabox {\n    public function __construct() {\n        add_action( 'add_meta_boxes', array( $this, 'add_custom_product_metabox' ) );\n        add_action( 'edit_form_after_title', array( $this, 'move_custom_metabox' ) );\n    }\n\n    public function move_custom_metabox(): void {\n        global $post, $wp_meta_boxes;\n        if ( $post && $post->post_type === 'product' ) {\n            do_meta_boxes( get_current_screen(), 'advanced', $post );\n            unset( $wp_meta_boxes[ get_post_type( $post ) ]['advanced'] );\n        }\n    }\n\n    public function add_custom_product_metabox(): void {\n        add_meta_box(\n            'custom_product_metabox',\n            __( 'Create product with AI', 'hostinger-ai-assistant' ),\n            array( $this, 'render_custom_product_metabox' ),\n            'product',\n            'advanced',\n            'high'\n        );\n    }\n\n    public function render_custom_product_metabox(): void {\n        ob_start();\n        ?>\n        <div class=\"hts-ai-product-generation\">\n            <div class=\"hts-supported-by-hostinger\">\n                <div class=\"hts-wrapper\">\n                    <span><?php echo esc_html__( 'Powered by', 'hostinger-ai-assistant' ); ?></span>\n                    <svg width=\"101\" height=\"20\" viewBox=\"0 0 101 20\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\"\n                                clip-rule=\"evenodd\"\n                                d=\"M0.000166377 9.36401V0.000331863L4.72611 2.5203V6.73909L10.9823 6.74211L15.7849 9.36401H0.000166377ZM12.2616 5.96706V0L17.115 2.45727V8.78646L12.2616 5.96706ZM12.2616 17.4118V13.2294L5.95718 13.225C5.96307 13.2529 1.07487 10.5612 1.07487 10.5612L17.115 10.6365V20L12.2616 17.4118ZM0 17.4118L0.000168141 11.2928L4.72611 14.0455V19.8689L0 17.4118Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M77.9292 8.02186C78.3181 7.53835 78.9497 7.29659 79.823 7.29659C80.2161 7.29659 80.5786 7.34639 80.9115 7.44631C81.244 7.5464 81.5385 7.66409 81.7953 7.79988L82.3364 6.30141C82.272 6.26151 82.1662 6.20535 82.0177 6.13343C81.8694 6.06134 81.681 5.99143 81.4523 5.9237C81.2238 5.85563 80.9514 5.79578 80.6348 5.74364C80.318 5.69183 79.9634 5.66551 79.5706 5.66551C78.9934 5.66551 78.4503 5.76174 77.9413 5.95371C77.4322 6.1455 76.9895 6.42715 76.6127 6.79884C76.2355 7.17035 75.9393 7.62435 75.723 8.15966C75.5065 8.69531 75.3982 9.31076 75.3982 10.0063C75.3982 10.6937 75.4961 11.3053 75.6928 11.8405C75.8892 12.3759 76.1679 12.8278 76.5283 13.1952C76.8891 13.5631 77.3239 13.8426 77.8332 14.0347C78.342 14.2263 78.9093 14.3224 79.5345 14.3224C80.264 14.3224 80.8774 14.2721 81.3743 14.1723C81.8715 14.0726 82.232 13.9789 82.4566 13.8908V9.77851H80.5806V12.6678C80.4685 12.692 80.3382 12.7079 80.19 12.7158C80.0416 12.7236 79.863 12.7277 79.6547 12.7277C79.2698 12.7277 78.9334 12.6618 78.6448 12.53C78.3561 12.3981 78.1159 12.2121 77.9232 11.9722C77.731 11.7323 77.5867 11.4466 77.4904 11.1152C77.3942 10.7836 77.3463 10.4136 77.3463 10.0063C77.3463 9.16675 77.5405 8.50553 77.9292 8.02186Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M48.1307 12.6737C47.9583 12.718 47.7399 12.7398 47.4754 12.7398C46.9465 12.7398 46.4994 12.6858 46.1348 12.5777C45.7698 12.47 45.4631 12.3483 45.2149 12.2122L44.6856 13.6987C44.7979 13.763 44.9362 13.8307 45.1004 13.9028C45.2649 13.9747 45.4614 14.0426 45.6898 14.1065C45.9183 14.1704 46.1807 14.2242 46.4773 14.2684C46.7739 14.3124 47.1067 14.3345 47.4754 14.3345C48.5736 14.3345 49.3953 14.1206 49.9404 13.6927C50.4855 13.2652 50.7582 12.6637 50.7582 11.8883C50.7582 11.4889 50.7059 11.1494 50.602 10.8695C50.4976 10.5896 50.3392 10.3457 50.127 10.138C49.9145 9.93027 49.6478 9.74837 49.3273 9.59246C49.0065 9.43654 48.6297 9.27878 48.1971 9.11867C47.9884 9.04675 47.7979 8.97701 47.6259 8.90894C47.4534 8.84121 47.3011 8.7651 47.1687 8.68127C47.0366 8.59728 46.9342 8.50339 46.8622 8.39945C46.7901 8.29584 46.7538 8.16775 46.7538 8.01569C46.7538 7.76019 46.8521 7.57024 47.0485 7.44635C47.2449 7.32262 47.5676 7.26025 48.0167 7.26025C48.4174 7.26025 48.76 7.30653 49.0447 7.39823C49.329 7.49027 49.5876 7.59623 49.8203 7.7161L50.3612 6.24144C50.0967 6.09759 49.76 5.96548 49.3514 5.84561C48.9425 5.72591 48.4574 5.66555 47.8963 5.66555C47.4231 5.66555 46.9984 5.7239 46.6216 5.83958C46.2448 5.95576 45.9243 6.12123 45.6598 6.33717C45.3952 6.55327 45.1909 6.8148 45.0465 7.12261C44.9022 7.43025 44.8301 7.77595 44.8301 8.15971C44.8301 8.54346 44.8982 8.86904 45.0345 9.13661C45.1707 9.40469 45.3473 9.63252 45.5635 9.82029C45.7799 10.0082 46.0244 10.1641 46.2969 10.2879C46.5695 10.4116 46.842 10.5217 47.1148 10.6173C47.7399 10.8255 48.1808 11.0192 48.4374 11.1992C48.6938 11.3788 48.8222 11.6049 48.8222 11.8765C48.8222 12.0045 48.8022 12.1205 48.762 12.2243C48.7219 12.3282 48.6496 12.4181 48.5455 12.4937C48.4414 12.5701 48.303 12.63 48.1307 12.6737Z\"\n                                fill=\"#673DE6\"/>\n                        <path fill-rule=\"evenodd\"\n                                clip-rule=\"evenodd\"\n                                d=\"M42.7584 10.0063C42.7584 10.7174 42.652 11.3431 42.44 11.8823C42.2273 12.422 41.9366 12.8736 41.568 13.2371C41.1993 13.601 40.7602 13.8747 40.2513 14.0584C39.7423 14.2425 39.195 14.3344 38.6101 14.3344C38.0407 14.3344 37.5039 14.2425 36.9988 14.0584C36.4937 13.8747 36.0526 13.601 35.676 13.2371C35.299 12.8736 35.0028 12.422 34.7862 11.8823C34.5698 11.3431 34.4613 10.7174 34.4613 10.0063C34.4613 9.29475 34.5737 8.66924 34.7981 8.1299C35.0224 7.59023 35.3253 7.13657 35.7061 6.76891C36.0866 6.40125 36.5276 6.12563 37.0289 5.94172C37.5296 5.75763 38.0569 5.66559 38.6101 5.66559C39.179 5.66559 39.7161 5.75763 40.2214 5.94172C40.7263 6.12563 41.1671 6.40125 41.544 6.76891C41.9206 7.13657 42.2174 7.59023 42.4338 8.1299C42.6503 8.66924 42.7584 9.29475 42.7584 10.0063ZM36.397 10.0063C36.397 10.4137 36.447 10.7813 36.5472 11.1091C36.6474 11.437 36.7918 11.7187 36.9803 11.9544C37.1683 12.1904 37.399 12.372 37.6717 12.4997C37.9441 12.628 38.2567 12.692 38.6096 12.692C38.9541 12.692 39.2649 12.628 39.5416 12.4997C39.8179 12.372 40.0506 12.1904 40.2387 11.9544C40.427 11.7187 40.5717 11.437 40.6719 11.1091C40.7721 10.7813 40.8222 10.4137 40.8222 10.0063C40.8222 9.59837 40.7721 9.2287 40.6719 8.89691C40.5717 8.5653 40.427 8.2818 40.2387 8.04575C40.0506 7.81003 39.8179 7.62796 39.5416 7.50038C39.2649 7.37246 38.9541 7.30858 38.6096 7.30858C38.2567 7.30858 37.9441 7.37447 37.6717 7.50624C37.399 7.63819 37.1683 7.8221 36.9803 8.05799C36.7918 8.2937 36.6474 8.57737 36.5472 8.90899C36.447 9.24094 36.397 9.60658 36.397 10.0063Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M30.1414 5.85777H32.0174V14.1664H30.1414V10.6415H26.9909V14.1664H25.115V5.85777H26.9909V9.03477H30.1414V5.85777Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M59.0222 5.85785V7.45256H56.509V14.1665H54.6332V7.45256H52.1199V5.85785H59.0222Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M62.9815 14.1667H61.1056V5.85785H62.9815V14.1667Z\" fill=\"#673DE6\"/>\n                        <path d=\"M71.3787 14.1665C70.8417 13.2154 70.2606 12.2764 69.6351 11.3489C69.0096 10.4217 68.3443 9.54653 67.6391 8.72319V14.1665H65.7872V5.85785H67.3143C67.5786 6.1214 67.8713 6.44514 68.1921 6.82889C68.5128 7.21265 68.8391 7.62239 69.172 8.05795C69.5046 8.49351 69.8354 8.94516 70.1641 9.41257C70.4926 9.88015 70.8013 10.3296 71.09 10.7613V5.85785H72.9539V14.1665H71.3787Z\"\n                                fill=\"#673DE6\"/>\n                        <path d=\"M85.0815 14.1665V5.85785H90.709V7.42841H86.9572V9.05883H90.2881V10.5937H86.9572V12.5959H90.9857V14.1665H85.0815Z\"\n                                fill=\"#673DE6\"/>\n                        <path fill-rule=\"evenodd\"\n                                clip-rule=\"evenodd\"\n                                d=\"M98.564 6.42715C97.8987 5.98338 96.941 5.76174 95.6903 5.76174C95.3455 5.76174 94.9547 5.77767 94.5179 5.80986C94.0811 5.84155 93.6582 5.89788 93.2494 5.97734V14.1665H95.125V11.1328H96.0512C96.2117 11.3249 96.3728 11.5387 96.5341 11.7747C96.6946 12.0105 96.8582 12.2599 97.0227 12.5238C97.188 12.7877 97.3485 13.0596 97.5056 13.3393C97.6621 13.6191 97.8172 13.8947 97.9702 14.1665H100.067C99.923 13.8628 99.7666 13.5532 99.5984 13.2372C99.4301 12.9216 99.2556 12.618 99.0753 12.3263C98.8949 12.0346 98.7123 11.7548 98.5281 11.4869C98.3438 11.2191 98.1676 10.9814 97.9991 10.7734C98.5042 10.5658 98.8911 10.2798 99.1594 9.91632C99.4281 9.55268 99.5623 9.07873 99.5623 8.49547C99.5623 7.56014 99.2294 6.87076 98.564 6.42715ZM95.4312 7.36835C95.5396 7.36047 95.6615 7.35645 95.7978 7.35645C96.399 7.35645 96.8537 7.44245 97.1623 7.61396C97.471 7.7863 97.6253 8.07567 97.6253 8.4834C97.6253 8.90722 97.4731 9.20715 97.1684 9.38268C96.8639 9.55872 96.3588 9.64623 95.6538 9.64623H95.1246V7.39232C95.2209 7.38461 95.3233 7.37656 95.4312 7.36835Z\"\n                                fill=\"#673DE6\"/>\n                    </svg>\n                </div>\n            </div>\n            <form>\n                <label class=\"hts-label\"\n                        for=\"hts_product_description\"> <?php echo esc_html__( 'Describe your product in short', 'hostinger-ai-assistant' ); ?> </label>\n                <textarea id=\"hts_product_description\"\n                            name=\"hts_product_description\"\n                            value=\"\"></textarea>\n                <div class=\"hts-selections\">\n                    <div class=\"hts-selection\">\n                        <label class=\"hts-label\"\n                                for=\"product_description_length\"> <?php _e( 'Content length', 'hostinger-ai-assistant' ); ?> </label>\n                        <select id=\"product_description_length\" name=\"product_description_length\">\n                            <option value=\"short\"><?php echo esc_html__( 'Short', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"medium\"><?php echo esc_html__( 'Medium', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"long\"><?php echo esc_html__( 'Long', 'hostinger-ai-assistant' ); ?></option>\n                        </select>\n                    </div>\n                    <div class=\"hts-selection\">\n                        <label class=\"hts-label\"\n                                for=\"product_tone_and_mood\"> <?php _e( 'Tone of voice', 'hostinger-ai-assistant' ); ?> </label>\n                        <select id=\"product_tone_and_mood\" name=\"product_tone_and_mood\">\n                            <option value=\"neutral\"><?php echo esc_html__( 'Neutral', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"formal\"><?php echo esc_html__( 'Formal', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"trustworthy\"><?php echo esc_html__( 'Trustworthy', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"friendly\"><?php echo esc_html__( 'Friendly', 'hostinger-ai-assistant' ); ?></option>\n                            <option value=\"witty\"><?php echo esc_html__( 'Witty', 'hostinger-ai-assistant' ); ?></option>\n                        </select>\n                    </div>\n                </div>\n                <?php wp_nonce_field( 'generate_content', 'generate_content_nonce' ); ?>\n                <div class=\"hts-submit\">\n                    <div class=\"hts-wrapper\">\n                        <div id=\"hts-publishing-action\">\n                            <span class=\"spinner is-active\"></span>\n                        </div>\n                        <input type=\"submit\" id=\"hts-woo-product-content-submit\"\n                                class=\"button button-primary button-large disabled\"\n                                value=\"<?php echo esc_html__( 'Create product with AI', ' hostinger-ai-assistant' ); ?>\">\n                    </div>\n                </div>\n            </form>\n            <div id=\"hts-response\"></div>\n        </div>\n        <?php\n\n        echo ob_get_clean();\n    }\n}\n\nnew Hostinger_Ai_Assistant_Product_Ai_Metabox();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-deactivator.php","ext":"php","size":697,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Fired during plugin deactivation\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n */\n\n/**\n * Fired during plugin deactivation.\n *\n * This class defines all code necessary to run during the plugin's deactivation.\n *\n * @since      1.0.0\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant_Deactivator {\n\n    /**\n     * Short Description. (use period)\n     *\n     * Long Description.\n     *\n     * @since    1.0.0\n     */\n    public static function deactivate() {\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/content/class-hostinger-ai-assistant-content-generation.php","ext":"php","size":14830,"mtime":1757312769,"type":"text","content":"<?php\n\nuse Alley\\WP\\Block_Converter\\Block_Converter;\nuse Hostinger\\WpHelper\\Config;\nuse Hostinger\\WpHelper\\Utils as Helper;\nuse Hostinger\\WpHelper\\Constants;\nuse Hostinger\\WpHelper\\Requests\\Client;\nuse Hostinger\\Amplitude\\AmplitudeManager;\n\nclass Hostinger_Ai_Assistant_Content_Generation {\n\n    private Hostinger_Ai_Assistant_Errors $error_handler;\n    private Hostinger_Ai_Assistant_Helper $helper;\n    private Hostinger_Ai_Assistant_Amplitude $amplitude;\n\n    private const ALLOWED_LENGTHS = array(\n        'default' => array(\n            'short'  => array(\n                'min' => 150,\n                'max' => 300,\n            ),\n            'medium' => array(\n                'min' => 600,\n                'max' => 1200,\n            ),\n            'long'   => array(\n                'min' => 1500,\n                'max' => 2600,\n            ),\n        ),\n        'product' => array(\n            'short'  => array(\n                'min' => 75,\n                'max' => 150,\n            ),\n            'medium' => array(\n                'min' => 300,\n                'max' => 600,\n            ),\n            'long'   => array(\n                'min' => 750,\n                'max' => 1300,\n            ),\n        ),\n    );\n\n    public function __construct() {\n        $this->error_handler = new Hostinger_Ai_Assistant_Errors();\n        $this->helper        = new Hostinger_Ai_Assistant_Helper();\n        $helper              = new Helper();\n        $config              = new Config();\n        $client              = new Client(\n            $config->getConfigValue( 'base_rest_uri', Constants::HOSTINGER_REST_URI ),\n            array(\n                Config::TOKEN_HEADER  => $helper->getApiToken(),\n                Config::DOMAIN_HEADER => $helper->getHostInfo(),\n            )\n        );\n\n        $amplitude_manager = new AmplitudeManager( $helper, $config, $client );\n        $this->amplitude   = new Hostinger_Ai_Assistant_Amplitude( $amplitude_manager );\n    }\n\n    public function get_or_create_category( string $category ): int {\n        $category_id = category_exists( $category );\n        if ( ! $category_id ) {\n            $category_data = array(\n                'cat_name'             => $category,\n                'category_description' => '',\n                'category_nicename'    => sanitize_title( $category ),\n            );\n            $category_id   = wp_insert_category( $category_data );\n        }\n\n        return $category_id;\n    }\n\n    public function get_or_create_tags( string $tags ): array {\n        $tags_array = explode( ',', $tags );\n        $tags_ids   = array();\n        foreach ( $tags_array as $tag_name ) {\n            $tag = term_exists( $tag_name, 'post_tag' );\n            if ( ! $tag ) {\n                $tag_data = array(\n                    'slug' => sanitize_title( $tag_name ),\n                    'name' => $tag_name,\n                );\n                $tag_id   = wp_insert_term( $tag_data['name'], 'post_tag', $tag_data );\n                if ( is_wp_error( $tag_id ) ) {\n                    error_log( 'Failed tag create ' . print_r( $tag_id, true ) );\n                }\n                $tag_id = $tag_id['term_id'];\n            } else {\n                $tag_id = $tag['term_id'];\n            }\n            $tags_ids[] = (int) $tag_id;\n        }\n\n        return $tags_ids;\n    }\n\n    public function create_post( string $post_type, string $title, string $content, int $category_id, array $tags_ids, string $correlation_id, string $post_status = 'draft' ): int {\n        $post_data = array(\n            'post_title'    => $title,\n            'post_content'  => $content,\n            'post_status'   => $post_status,\n            'post_category' => array( $category_id ),\n            'tags_input'    => $tags_ids,\n            'post_type'     => $post_type,\n        );\n\n        $post_id = wp_insert_post( $post_data );\n\n        update_post_meta( $post_id, 'hts_correlation_id', $correlation_id );\n\n        // Save meta field when content generated by AI.\n        update_post_meta( $post_id, 'hostinger_ai_generated', true );\n\n        $this->amplitude->ai_content_saved( $post_type, $post_id, 'ai_assistant_ui', array( 'correlation_id' => $correlation_id ) );\n\n        if ( $post_status === 'publish' ) {\n            $correlation_id = get_post_meta( $post_id, 'hts_correlation_id', true );\n            $this->amplitude->ai_content_published( $post_type, $post_id, 'ai_assistant_ui', array( 'correlation_id' => $correlation_id ) );\n            delete_post_meta( $post_id, 'hts_correlation_id' );\n        }\n\n        return $post_id;\n    }\n\n    public function get_public_post_types(): array {\n        $post_types                        = get_post_types(\n            array(\n                'public' => true,\n            )\n        );\n        $post_types_with_content_and_title = array();\n\n        foreach ( $post_types as $post_type ) {\n            if ( post_type_supports( $post_type, 'editor' ) && post_type_supports( $post_type, 'title' ) ) {\n                $post_types_with_content_and_title[] = $post_type;\n            }\n        }\n\n        return $post_types_with_content_and_title;\n    }\n\n    public function process_post_action( string $action ): void {\n        $error_msg    = $this->error_handler->get_error_message( 'action_failed' );\n        $server_error = $this->error_handler->get_error_message( 'server_error' );\n\n        try {\n            // Extract and validate input data.\n            $post_data = $this->get_post_data( $action );\n\n            // Process the post content with images if needed.\n            $post_data = $this->process_post_content_with_images( $post_data );\n\n            // Create the post.\n            $post_id = $this->create_post_with_metadata( $post_data, $action );\n\n            // Send response to the client.\n            $this->send_response( $post_id, $action, $error_msg );\n        } catch ( Exception $exception ) {\n            $this->helper->ajax_error_message( 'Error: ' . $exception->getMessage(), $server_error );\n        }\n    }\n\n    /**\n     * Get and validate post data from the request\n     */\n    private function get_post_data( string $action ): array {\n        $nonce           = isset( $_POST['nonce'] ) ? sanitize_text_field( $_POST['nonce'] ) : '';\n        $correlation_id  = isset( $_POST['correlation_id'] ) ? sanitize_text_field( $_POST['correlation_id'] ) : '';\n        $title           = isset( $_POST['title'] ) ? sanitize_text_field( $_POST['title'] ) : '';\n        $thumbnail_image = isset( $_POST['thumbnail_image'] ) ? filter_var( $_POST['thumbnail_image'], FILTER_VALIDATE_BOOLEAN ) : false;\n        $content_image   = isset( $_POST['content_image'] ) ? filter_var( $_POST['content_image'], FILTER_VALIDATE_BOOLEAN ) : false;\n        $content         = isset( $_POST['content'] ) ? wp_kses_post( $this->helper->sanitize_html_string( $_POST['content'] ) ) : '';\n        $image_url       = isset( $_POST['image_url'] ) ? sanitize_text_field( $_POST['image_url'] ) : '';\n        $category        = isset( $_POST['category'] ) ? sanitize_text_field( $_POST['category'] ) : '';\n        $tags            = isset( $_POST['tags'] ) ? sanitize_text_field( $_POST['tags'] ) : '';\n        $post_type       = isset( $_POST['post_type'] ) ? sanitize_text_field( $_POST['post_type'] ) : '';\n        $seo_keywords    = isset( $_POST['seo_keywords'] ) ? sanitize_text_field( $_POST['seo_keywords'] ) : '';\n        $seo_description = isset( $_POST['seo_description'] ) ? sanitize_text_field( $_POST['seo_description'] ) : '';\n        $post_type       = $this->validate_post_type( $post_type );\n\n        // Verify nonce.\n        if ( ! wp_verify_nonce( $nonce, ( $action === 'create' ) ? 'create_post' : 'publish_post' ) ) {\n            $error_msg = $this->error_handler->get_error_message( 'action_failed' );\n            $this->helper->ajax_error_message( $error_msg, $error_msg );\n            exit;\n        }\n\n        return array(\n            'title'           => $title,\n            'content'         => $content,\n            'post_type'       => $post_type,\n            'category'        => $category,\n            'tags'            => $tags,\n            'thumbnail_image' => $thumbnail_image,\n            'content_image'   => $content_image,\n            'image_url'       => $image_url,\n            'seo_keywords'    => $seo_keywords,\n            'seo_description' => $seo_description,\n            'correlation_id'  => $correlation_id,\n        );\n    }\n\n    /**\n     * Process taxonomy data - categories and tags\n     */\n    private function process_taxonomies( array $post_data ): array {\n        $category_id = 0;\n        $tags_ids    = array();\n\n        if ( $this->helper->has_taxonomy_for_post_type( $post_data['post_type'], 'category' ) ) {\n            $category_id = $this->get_or_create_category( $post_data['category'] );\n        }\n\n        if ( $this->helper->has_taxonomy_for_post_type( $post_data['post_type'], 'post_tag' ) ) {\n            $tags_ids = $this->get_or_create_tags( $post_data['tags'] );\n        }\n\n        $post_data['category_id'] = $category_id;\n        $post_data['tags_ids']    = $tags_ids;\n\n        return $post_data;\n    }\n\n    /**\n     * Process post content with images if needed\n     */\n    private function process_post_content_with_images( array $post_data ): array {\n        $image                       = '';\n        $external_featured_image_url = '';\n\n        // Process taxonomy data.\n        $post_data = $this->process_taxonomies( $post_data );\n\n        // Handle featured and content images.\n        if ( $this->helper->post_type_supports_featured_image( $post_data['post_type'] )\n            && ( $post_data['thumbnail_image'] || $post_data['content_image'] ) ) {\n            if ( ! empty( $post_data['image_url'] ) ) {\n                $external_featured_image_url = $post_data['image_url'];\n\n                // If content image is requested, prepare image based on editor type.\n                if ( $post_data['content_image'] ) {\n                    $image = $this->format_content_image( $external_featured_image_url, $post_data['title'], $post_data['post_type'] );\n                }\n            }\n        }\n\n        // Add image to content if needed.\n        if ( ! empty( $image ) && $post_data['content_image'] ) {\n            $post_data['content'] = $this->add_image_to_content( $image, $post_data['content'], $post_data['post_type'] );\n        }\n\n        $post_data['external_featured_image_url'] = $external_featured_image_url;\n\n        return $post_data;\n    }\n\n    /**\n     * Format content image based on editor type\n     */\n    private function format_content_image( string $image_url, string $title, string $post_type ): string {\n        if ( use_block_editor_for_post_type( $post_type ) ) {\n            // For Gutenberg/Block Editor sites.\n            return sprintf(\n                '<!-- wp:image {\"sizeSlug\":\"large\",\"className\":\"hts-content-image\"} -->\n<figure class=\"wp-block-image size-large hts-content-image\"><img src=\"%s\" alt=\"%s\"/></figure>\n<!-- /wp:image -->',\n                esc_url( $image_url ),\n                esc_attr( $title )\n            );\n        } else {\n            // For Classic Editor sites.\n            return sprintf( '<p><img src=\"%s\" alt=\"%s\" class=\"hts-content-image size-large wp-image-0\" /></p>', esc_url( $image_url ), esc_attr( $title ) );\n        }\n    }\n\n    /**\n     * Add image to content\n     */\n    private function add_image_to_content( string $image, string $content, string $post_type ): string {\n        // Add the image to the beginning of the content.\n        $content = $image . $content;\n\n        // Skip Block_Converter for non-block editor sites or if we've already formatted the content as blocks.\n        if ( ! use_block_editor_for_post_type( $post_type ) || strpos( $content, '<!-- wp:' ) === 0 ) {\n            // Don't convert to blocks, use content as is.\n            return $content;\n        } else {\n            // For Gutenberg sites where content isn't already in block format.\n            $converter = new Block_Converter( $content );\n\n            return $converter->convert();\n        }\n    }\n\n    /**\n     * Create the post with all metadata\n     */\n    private function create_post_with_metadata( array $post_data, string $action ): int {\n        $seo = new Hostinger_Ai_Assistant_Seo();\n\n        // Create the post.\n        $post_status = ( $action === 'create' ) ? '' : 'publish';\n        $post_id     = $this->create_post(\n            $post_data['post_type'],\n            $post_data['title'],\n            $post_data['content'],\n            $post_data['category_id'] ?? 0,\n            $post_data['tags_ids'] ?? array(),\n            $post_data['correlation_id'] ?? '',\n            $post_status\n        );\n\n        // Add the external featured image URL if available and thumbnail is requested.\n        if ( ! empty( $post_data['external_featured_image_url'] ) && $post_data['thumbnail_image'] ) {\n            update_post_meta( $post_id, '_thumbnail_ext_url', $post_data['external_featured_image_url'] );\n            update_post_meta( $post_id, '_thumbnail_is_external', true );\n        }\n\n        // Add SEO metadata.\n        $seo->add_seo_meta_data( $post_data['seo_keywords'], $post_data['seo_description'], $post_id );\n\n        return $post_id;\n    }\n\n    /**\n     * Send response back to the client\n     */\n    private function send_response( int $post_id, string $action, string $error_msg ): void {\n        if ( $post_id ) {\n            if ( $action === 'create' ) {\n                $editor_url = 'post.php?action=edit&post=' . $post_id;\n                wp_send_json_success( $editor_url );\n            } else {\n                $post_link = get_permalink( $post_id );\n                wp_send_json_success( $post_link );\n            }\n        } else {\n            wp_send_json_error( $error_msg );\n        }\n    }\n\n    public function validate_post_type( $post_type ): string {\n        $allowed_post_types = array( 'post', 'product', 'page' );\n\n        return in_array( $post_type, $allowed_post_types, true ) ? $post_type : 'page';\n    }\n\n    public function map_post_type( string $post_type ): string {\n        switch ( $post_type ) {\n            case 'post':\n                return 'blog_post';\n            case 'product':\n                return 'product_description';\n            default:\n                return $post_type;\n        }\n    }\n\n    public function validate_content_length( $content_length, $is_product = false ): string {\n        $allowed_lengths = $is_product ? self::ALLOWED_LENGTHS['product'] : self::ALLOWED_LENGTHS['default'];\n\n        if ( ! isset( $allowed_lengths[ $content_length ] ) ) {\n            $content_length = 'short';\n        }\n\n        $length_range = $allowed_lengths[ $content_length ];\n\n        return $length_range['min'] . '-' . $length_range['max'];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/content/class-hostinger-ai-assistant-content-filters.php","ext":"php","size":6636,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The file that defines all content filters\n *\n * @link       https://hostinger.com\n * @since      1.1.2\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\nclass Hostinger_Ai_Assistant_Content_Filters {\n\n    private Hostinger_Ai_Assistant_Helper $helper;\n\n    public function __construct() {\n        $this->helper = new Hostinger_Ai_Assistant_Helper();\n\n        if ( $this->helper->is_preview_domain() ) {\n            add_action(\n                'wp_get_attachment_url',\n                array(\n                    $this,\n                    'replace_media_attachment_url_with_wp_get_attachment_url',\n                ),\n                10,\n                2\n            );\n        }\n\n        add_filter( 'wp_kses_allowed_html', array( $this, 'custom_kses_allowed_html' ) );\n\n        // Setup external featured image support.\n        add_action( 'after_setup_theme', array( $this, 'external_featured_image_setup' ) );\n\n        // Override the post thumbnail HTML with our external URL.\n        add_filter( 'post_thumbnail_html', array( $this, 'external_featured_image_html' ), 10, 5 );\n\n        // Save external featured image URL.\n        add_action( 'save_post', array( $this, 'save_external_featured_image' ) );\n    }\n\n    /**\n     * Setup support for external featured images\n     */\n    public function external_featured_image_setup() {\n        if ( ! current_theme_supports( 'post-thumbnails' ) ) {\n            add_theme_support( 'post-thumbnails' );\n        }\n\n        add_action( 'add_meta_boxes', array( $this, 'add_external_featured_image_meta_box' ) );\n    }\n\n    /**\n     * Replace featured image HTML with external image when applicable\n     */\n    public function external_featured_image_html( $html, $post_id, $thumbnail_id, $size, $attr ) {\n        $external_url = get_post_meta( $post_id, '_thumbnail_ext_url', true );\n\n        if ( ! empty( $external_url ) ) {\n            $attr = wp_parse_args(\n                $attr,\n                array(\n                    'src'   => $external_url,\n                    'alt'   => get_the_title( $post_id ),\n                    'class' => 'external-featured-image wp-post-image',\n                )\n            );\n\n            $html = '<img';\n            foreach ( $attr as $name => $value ) {\n                $html .= ' ' . $name . '=\"' . esc_attr( $value ) . '\"';\n            }\n            $html .= ' />';\n        }\n\n        return $html;\n    }\n\n    /**\n     * Add meta box to manage external featured image\n     */\n    public function add_external_featured_image_meta_box() {\n        add_meta_box(\n            'external_featured_image',\n            __( 'External Featured Image', 'hostinger-ai-assistant' ),\n            array(\n                $this,\n                'external_featured_image_meta_box_callback',\n            ),\n            null,\n            'side',\n            'low'\n        );\n    }\n\n    /**\n     * Meta box HTML\n     */\n    public function external_featured_image_meta_box_callback( $post ) {\n        wp_nonce_field( 'external_featured_image_nonce', 'external_featured_image_nonce' );\n        $external_url = get_post_meta( $post->ID, '_thumbnail_ext_url', true );\n        ?>\n        <p>\n            <label for=\"external_featured_image_url\"><?php _e( 'Image URL:', 'hostinger-ai-assistant' ); ?></label>\n            <input type=\"url\" id=\"external_featured_image_url\" name=\"external_featured_image_url\"\n                    value=\"\n                    <?php\n                    echo esc_attr( $external_url );\n                    ?>\n                    \" style=\"width:100%\">\n        </p>\n        <?php\n        if ( ! empty( $external_url ) ) :\n            ?>\n            <img src=\"\n            <?php\n            echo esc_url( $external_url );\n            ?>\n            \" class=\"hts-external-featured-image-preview\">\n            <?php\n        endif;\n        ?>\n        <?php\n    }\n\n    /**\n     * Save the external featured image URL\n     */\n    public function save_external_featured_image( $post_id ) {\n        if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE ) {\n            return;\n        }\n        if ( ! isset( $_POST['external_featured_image_nonce'] ) ) {\n            return;\n        }\n        if ( ! wp_verify_nonce( $_POST['external_featured_image_nonce'], 'external_featured_image_nonce' ) ) {\n            return;\n        }\n        if ( ! current_user_can( 'edit_post', $post_id ) ) {\n            return;\n        }\n\n        $url = isset( $_POST['external_featured_image_url'] ) ? esc_url_raw( $_POST['external_featured_image_url'] ) : '';\n        if ( ! empty( $url ) ) {\n            update_post_meta( $post_id, '_thumbnail_ext_url', $url );\n        } else {\n            delete_post_meta( $post_id, '_thumbnail_ext_url' );\n        }\n    }\n\n    public function replace_media_attachment_url_with_wp_get_attachment_url( $url, $post_id ) {\n        $parsed_url = parse_url( $url );\n\n        return $_SERVER['HTTP_ORIGIN'] . $parsed_url['path'];\n    }\n\n    public function custom_kses_allowed_html( $allowed_html ) {\n        // Allow links with additional attributes.\n        if ( ! isset( $allowed_html['a'] ) || ! is_array( $allowed_html['a'] ) ) {\n            $allowed_html['a'] = array();\n        }\n\n        $allowed_html['a'] = array_merge(\n            $allowed_html['a'],\n            array(\n                'href'   => true,\n                'title'  => true,\n                'target' => true,\n            )\n        );\n\n        // Allow images with necessary attributes.\n        if ( ! isset( $allowed_html['img'] ) || ! is_array( $allowed_html['img'] ) ) {\n            $allowed_html['img'] = array();\n        }\n\n        $allowed_html['img'] = array_merge(\n            $allowed_html['img'],\n            array(\n                'src'     => true,\n                'srcset'  => true,\n                'alt'     => true,\n                'title'   => true,\n                'class'   => true,\n                'width'   => true,\n                'height'  => true,\n                'loading' => true,\n                'sizes'   => true,\n                'style'   => true,\n            )\n        );\n\n        // Allow div containers which might wrap images.\n        if ( ! isset( $allowed_html['div'] ) || ! is_array( $allowed_html['div'] ) ) {\n            $allowed_html['div'] = array();\n        }\n\n        $allowed_html['div'] = array_merge(\n            $allowed_html['div'],\n            array(\n                'class' => true,\n                'id'    => true,\n                'style' => true,\n            )\n        );\n\n        return $allowed_html;\n    }\n}\n\n$filters = new Hostinger_Ai_Assistant_Content_Filters();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/requests/class-hostinger-ai-assistant-requests.php","ext":"php","size":9806,"mtime":1757312769,"type":"text","content":"<?php\n\nuse Alley\\WP\\Block_Converter\\Block_Converter;\nuse Hostinger\\Amplitude\\AmplitudeManager;\nuse Hostinger\\WpHelper\\Config;\nuse Hostinger\\WpHelper\\Constants;\nuse Hostinger\\WpHelper\\Requests\\Client;\nuse Hostinger\\WpHelper\\Utils as Helper;\n\nclass Hostinger_Ai_Assistant_Requests {\n    private const GENERATE_CONTENT_ACTION = '/v3/wordpress/plugin/generate-content';\n    private const GET_CONTENT_IMAGES_URLS = '/v3/wordpress/plugin/search-images';\n    private const WOO_DESCRIPTION_CREATED = 'hts_woo_product_description_created';\n\n    private Hostinger_Ai_Assistant_Requests_Client $client;\n    private Hostinger_Ai_Assistant_Amplitude $amplitude;\n    private Hostinger_Ai_Assistant_Content_Generation $generate_content;\n    private Hostinger_Ai_Assistant_Config $config_handler;\n    private Hostinger_Ai_Assistant_Errors $error_handler;\n    private Hostinger_Ai_Assistant_Helper $helper;\n\n    public function __construct() {\n        $this->helper         = new Hostinger_Ai_Assistant_Helper();\n        $this->config_handler = new Hostinger_Ai_Assistant_Config();\n        $this->error_handler  = new Hostinger_Ai_Assistant_Errors();\n        $this->client         = new Hostinger_Ai_Assistant_Requests_Client(\n            $this->config_handler->get_config_value( 'base_rest_uri', HOSTINGER_AI_ASSISTANT_REST_URI ),\n            array(\n                Hostinger_Ai_Assistant_Config::TOKEN_HEADER  => $this->helper::get_api_token(),\n                Hostinger_Ai_Assistant_Config::DOMAIN_HEADER => $this->helper->get_host_info(),\n            )\n        );\n\n        $helper = new Helper();\n        $config = new Config();\n        $client = new Client(\n            $config->getConfigValue( 'base_rest_uri', Constants::HOSTINGER_REST_URI ),\n            array(\n                Config::TOKEN_HEADER  => $helper->getApiToken(),\n                Config::DOMAIN_HEADER => $helper->getHostInfo(),\n            )\n        );\n\n        $amplitude_manager      = new AmplitudeManager( $helper, $config, $client );\n        $this->amplitude        = new Hostinger_Ai_Assistant_Amplitude( $amplitude_manager );\n        $this->generate_content = new Hostinger_Ai_Assistant_Content_Generation();\n\n        add_action( 'init', array( $this, 'define_ajax_events' ), 0 );\n    }\n\n    public function define_ajax_events(): void {\n        $events = array(\n            'get_content_from_description',\n            'redirect_to_post_editor_with_content',\n            'redirect_to_published_post',\n            'woo_product_description_create',\n            'upload_unsplash_image',\n        );\n\n        foreach ( $events as $event ) {\n            $ajax_event = 'hts_' . $event;\n            add_action( 'wp_ajax_' . $ajax_event, array( $this, $event ) );\n        }\n    }\n\n    public function woo_product_description_create(): void {\n        $nonce     = isset( $_POST['nonce'] ) ? sanitize_text_field( $_POST['nonce'] ) : '';\n        $post_id   = isset( $_POST['post_id'] ) ? sanitize_text_field( $_POST['post_id'] ) : 1;\n        $error_msg = $this->error_handler->get_error_message( 'action_failed' );\n        $post_type = get_post_type( $post_id ) ?? 'product';\n\n        if ( ! wp_verify_nonce( $nonce, 'generate_content' ) ) {\n            $this->helper->ajax_error_message( $error_msg, $error_msg );\n        }\n\n        $this->amplitude->ai_content_saved( $post_type, $post_id, 'woocommerce_ui' );\n        $existing_values   = get_option( self::WOO_DESCRIPTION_CREATED, array() );\n        $existing_values[] = $post_id;\n        update_option( self::WOO_DESCRIPTION_CREATED, $existing_values );\n    }\n\n    public function get_content_from_description(): void {\n        $error_msg         = $this->error_handler->get_error_message( 'action_failed' );\n        $unexpected_error  = $this->error_handler->get_error_message( 'unexpected_error' );\n        $server_error      = $this->error_handler->get_error_message( 'server_error' );\n        $empty_description = $this->error_handler->get_error_message( 'empty_description' );\n\n        try {\n            $nonce          = isset( $_POST['nonce'] ) ? sanitize_text_field( $_POST['nonce'] ) : '';\n            $description    = isset( $_POST['description'] ) ? sanitize_text_field( $_POST['description'] ) : '';\n            $correlation_id = isset( $_POST['correlation_id'] ) ? sanitize_text_field( $_POST['correlation_id'] ) : '';\n            $post_type      = isset( $_POST['post_type'] ) ? sanitize_text_field( $_POST['post_type'] ) : 'blog_post';\n            $voice_tone     = isset( $_POST['voice_tone'] ) ? sanitize_text_field( $_POST['voice_tone'] ) : 'neutral';\n            $focus_keywords = isset( $_POST['focus_keywords'] ) ? sanitize_text_field( $_POST['focus_keywords'] ) : '';\n            $content_length = isset( $_POST['content_length'] ) ? sanitize_text_field( $_POST['content_length'] ) : '150-300';\n            $location       = isset( $_POST['location'] ) ? sanitize_text_field( $_POST['location'] ) : 'ai_assistant_ui';\n\n            if ( ! wp_verify_nonce( $nonce, 'generate_content' ) ) {\n                $this->helper->ajax_error_message( $error_msg, $error_msg );\n            }\n\n            if ( empty( $description ) ) {\n                $this->helper->ajax_error_message( $empty_description, $empty_description );\n            }\n\n            $validated_post_type      = $this->generate_content->validate_post_type( $post_type );\n            $post_type                = $this->generate_content->map_post_type( $validated_post_type );\n            $content_length_validated = $this->generate_content->validate_content_length( $content_length );\n\n            if ( $post_type === 'product_description' ) {\n                $content_length_validated = $this->generate_content->validate_content_length( $content_length, true );\n            }\n\n            $data = array(\n                'post_type'   => $post_type,\n                'tone'        => $voice_tone,\n                'length'      => $content_length_validated,\n                'description' => $description,\n            );\n\n            if ( ! empty( $focus_keywords ) ) {\n                $data['focus_keyword'] = $focus_keywords;\n            }\n\n            $response = $this->client->get( self::GENERATE_CONTENT_ACTION, $data, array( 'X-Correlation-ID' => $correlation_id ) );\n\n            $response_code = wp_remote_retrieve_response_code( $response );\n            $response_body = wp_remote_retrieve_body( $response );\n\n            if ( is_wp_error( $response ) || $response_code !== 200 ) {\n                $error_message = isset( json_decode( $response_body )->error->message )\n                    ? json_decode( $response_body )->error->message\n                    : $unexpected_error;\n                $this->helper->ajax_error_message( $error_message, $server_error );\n            } else {\n\n                $generated_content = reset( json_decode( $response['body'] )->data );\n\n                if ( isset( $generated_content->tags[0] ) && $generated_content->tags[0] !== '' ) {\n                    $ai_image_data = $this->get_ai_image_data( $description );\n                    if ( $ai_image_data->photo_image_url ) {\n                        $generated_content->image = $ai_image_data->photo_image_url;\n                    }\n                }\n\n                if ( ! empty( $generated_content->content ) ) {\n                    $converter = new Block_Converter( $generated_content->content );\n\n                    $generated_content->content_blocks = $converter->convert();\n                }\n\n                $this->amplitude->ai_content_created( $post_type, $location, array( 'correlation_id' => $correlation_id ) );\n\n                wp_send_json_success( $generated_content );\n            }\n        } catch ( Exception $exception ) {\n            $this->helper->ajax_error_message( 'Error: ' . $exception->getMessage(), $server_error );\n        }\n    }\n\n    public function redirect_to_post_editor_with_content(): void {\n        $this->generate_content->process_post_action( 'create' );\n    }\n\n    public function redirect_to_published_post(): void {\n        $this->generate_content->process_post_action( 'publish' );\n    }\n\n    public function get_ai_image_data( string $description ): object {\n        $unexpected_error = $this->error_handler->get_error_message( 'unexpected_error' );\n\n        if ( ! isset( $description ) || $description === '' ) {\n            $this->helper->ajax_error_message( $unexpected_error, $unexpected_error );\n        }\n\n        $domain = parse_url( get_site_url(), PHP_URL_HOST );\n\n        try {\n            $response = $this->client->post(\n                self::GET_CONTENT_IMAGES_URLS,\n                array(\n                    'domain'      => $domain,\n                    'description' => $description,\n                    'limit'       => 1,\n                )\n            );\n\n            $response_code = wp_remote_retrieve_response_code( $response );\n            $response_body = wp_remote_retrieve_body( $response );\n            $response_data = json_decode( $response_body )->data->list;\n\n            if ( empty( $response_data ) ) {\n                return new stdClass();\n            }\n\n            if ( is_wp_error( $response ) || $response_code !== 200 ) {\n                $error_message = isset( json_decode( $response_body )->error->message ) ? json_decode( $response_body )->error->message : $unexpected_error;\n                $this->helper->ajax_error_message( $error_message, $unexpected_error );\n            } else {\n                $response = reset( json_decode( $response_body )->data->list );\n\n                return $response;\n            }\n        } catch ( Exception $exception ) {\n            $this->helper->ajax_error_message( $exception->getMessage(), $unexpected_error );\n        }\n\n        return new stdClass();\n    }\n}\n\nnew Hostinger_Ai_Assistant_Requests();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/requests/class-hostinger-ai-assistant-requests-client.php","ext":"php","size":1256,"mtime":1757312769,"type":"text","content":"<?php\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n}\n\nclass Hostinger_Ai_Assistant_Requests_Client {\n    private string $api_url;\n    private array $default_headers;\n\n    public function __construct( $api_url, $default_headers = array() ) {\n        $this->api_url         = $api_url;\n        $this->default_headers = $default_headers;\n    }\n\n    public function get( $endpoint, $params = array(), $headers = array(), $timeout = 120 ) {\n        $url          = $this->api_url . $endpoint;\n        $request_args = array(\n            'method'  => 'GET',\n            'headers' => array_merge( $this->default_headers, $headers ),\n            'timeout' => $timeout,\n        );\n\n        if ( ! empty( $params ) ) {\n            $url = add_query_arg( $params, $url );\n        }\n\n        return wp_remote_get( $url, $request_args );\n    }\n\n    public function post( $endpoint, $params = array(), $headers = array(), $timeout = 120 ) {\n        $url          = $this->api_url . $endpoint;\n        $request_args = array(\n            'method'  => 'POST',\n            'timeout' => $timeout,\n            'headers' => array_merge( $this->default_headers, $headers ),\n            'body'    => $params,\n        );\n\n        return wp_remote_post( $url, $request_args );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-errors.php","ext":"php","size":1445,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Ai_Assistant_Errors {\n\n    private array $error_messages;\n\n    public function init_error_messages() {\n        if ( ! empty( $this->error_messages ) ) {\n            return;\n        }\n\n        $this->error_messages = array(\n            'action_failed'     => array(\n                'default' => __( 'Action Failed. Try again or contact support. Apologies.', 'hostinger-ai-assistant' ),\n            ),\n            'unexpected_error'  => array(\n                'default' => __( 'An unexpected error occurred. Please try again or contact support.', 'hostinger-ai-assistant' ),\n            ),\n            'server_error'      => array(\n                'default' => __( 'We apologize for the inconvenience. The AI content generation process encountered a server error. Please try again later.', 'hostinger-ai-assistant' ),\n            ),\n            'empty_description' => array(\n                'default' => __( 'Description is empty. Please provide a valid description.', 'hostinger-ai-assistant' ),\n            ),\n        );\n    }\n\n    public function get_error_message( string $error_code ) {\n        $this->init_error_messages();\n\n        if ( array_key_exists( $error_code, $this->error_messages ) ) {\n            $message_data = $this->error_messages[ $error_code ];\n\n            return $message_data['default'];\n        } else {\n            return __( 'Unknown error code.', 'hostinger-ai-assistant' );\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-i18n.php","ext":"php","size":1011,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Define the internationalization functionality\n *\n * Loads and defines the internationalization files for this plugin\n * so that it is ready for translation.\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n */\n\n/**\n * Define the internationalization functionality.\n *\n * Loads and defines the internationalization files for this plugin\n * so that it is ready for translation.\n *\n * @since      1.0.0\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant_I18n {\n\n\n    /**\n     * Load the plugin text domain for translation.\n     *\n     * @since    1.0.0\n     */\n    public function load_plugin_textdomain() {\n\n        load_plugin_textdomain(\n            'hostinger-ai-assistant',\n            false,\n            dirname( plugin_basename( __FILE__ ), 2 ) . '/languages/'\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-helper.php","ext":"php","size":5237,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Ai_Assistant_Helper {\n    public const HOMEPAGE_DISPLAY = 'page';\n\n    /**\n     *\n     * Check if plugin is active\n     *\n     * @since    1.0.0\n     * @access   public\n     */\n    public static function is_plugin_active( $plugin_slug ): bool {\n        $active_plugins = (array) get_option( 'active_plugins', array() );\n        foreach ( $active_plugins as $active_plugin ) {\n            if ( strpos( $active_plugin, $plugin_slug . '.php' ) !== false ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public static function get_api_token(): string {\n        $api_token  = '';\n        $token_file = HOSTINGER_AI_ASSISTANT_WP_AI_TOKEN;\n\n        if ( file_exists( $token_file ) && ! empty( file_get_contents( $token_file ) ) ) {\n\n            $api_token = file_get_contents( $token_file );\n        }\n\n        return $api_token;\n    }\n\n    /**\n     *\n     * Get the host info (domain, subdomain, subdirectory)\n     *\n     * @since    1.0.0\n     * @access   public\n     */\n\n    public function get_host_info(): string {\n        $host     = $_SERVER['HTTP_HOST'] ?? '';\n        $site_url = get_site_url();\n        $site_url = preg_replace( '#^https?://#', '', $site_url );\n\n        if ( ! empty( $site_url ) && ! empty( $host ) && strpos( $site_url, $host ) === 0 ) {\n            if ( $site_url === $host ) {\n                return $host;\n            } else {\n                return substr( $site_url, strlen( $host ) + 1 );\n            }\n        }\n\n        return $host;\n    }\n\n    public function ajax_error_message( string $message, string $display_error ): void {\n        error_log( 'Error: ' . $message );\n        if ( ! empty( $display_error ) ) {\n            wp_send_json_error( $display_error );\n        }\n    }\n\n    public function is_preview_domain(): bool {\n        if ( function_exists( 'getallheaders' ) ) {\n            $headers = getallheaders();\n        }\n\n        if ( isset( $headers['X-Preview-Indicator'] ) && $headers['X-Preview-Indicator'] ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function get_url_protocol(): string {\n        $protocol = isset( $_SERVER['HTTPS'] ) && $_SERVER['HTTPS'] === 'on' ? 'https://' : 'http://';\n\n        return $protocol;\n    }\n\n    public function overwrite_url_host( string $url, string $new_host ): string {\n        $parsed_url = parse_url( $url );\n\n        if ( $parsed_url === false || ! isset( $parsed_url['scheme'] ) || ! isset( $parsed_url['host'] ) ) {\n            error_log( 'Error: Invalid URL' );\n\n            return false;\n        }\n\n        $parsed_url['host'] = $new_host;\n\n        $modified_url = $parsed_url['scheme'] . '://';\n        if ( isset( $parsed_url['user'] ) && isset( $parsed_url['pass'] ) ) {\n            $modified_url .= $parsed_url['user'] . ':' . $parsed_url['pass'] . '@';\n        }\n        $modified_url .= $parsed_url['host'];\n        if ( isset( $parsed_url['port'] ) ) {\n            $modified_url .= ':' . $parsed_url['port'];\n        }\n        if ( isset( $parsed_url['path'] ) ) {\n            $modified_url .= $parsed_url['path'];\n        }\n        if ( isset( $parsed_url['query'] ) ) {\n            $modified_url .= '?' . $parsed_url['query'];\n        }\n        if ( isset( $parsed_url['fragment'] ) ) {\n            $modified_url .= '#' . $parsed_url['fragment'];\n        }\n\n        return $modified_url;\n    }\n\n    public function has_taxonomy_for_post_type( string $post_type, string $taxonomy_slug ): bool {\n        $taxonomy_object = get_taxonomy( $taxonomy_slug );\n\n        if ( ! $taxonomy_object ) {\n            return false;\n        }\n\n        return in_array( $post_type, $taxonomy_object->object_type, true );\n    }\n\n    public function post_type_supports_featured_image( string $post_type ): bool {\n        $post_type_object = get_post_type_object( $post_type );\n\n        if ( $post_type_object && post_type_supports( $post_type, 'thumbnail' ) ) {\n            return true;\n        }\n\n        return false;\n    }\n\n    public function sanitize_html_string( $html_string ) {\n        $cleaned_string = stripslashes( $html_string );\n        $cleaned_string = preg_replace( '/\\\\\\\\\\'/', \"'\", $cleaned_string ); // Replace escaped single quotes.\n\n        return $cleaned_string;\n    }\n\n    public function error_log( string $message ): void {\n        if ( defined( 'WP_DEBUG' ) && WP_DEBUG === true ) {\n            error_log( print_r( $message, true ) );\n        }\n    }\n\n    public function add_vue_instance(): void {\n        ob_start(); ?>\n        <div id=\"vue-app\"></div>\n        <?php\n        echo ob_get_clean();\n    }\n\n    public function get_edit_site_url(): string {\n        if ( wp_is_block_theme() ) {\n            return '';\n        }\n\n        $show_on_front = get_option( 'show_on_front' );\n        $front_page_id = get_option( 'page_on_front' );\n\n        if ( $show_on_front === self::HOMEPAGE_DISPLAY && $front_page_id ) {\n            return add_query_arg(\n                array(\n                    'post'   => $front_page_id,\n                    'action' => 'edit',\n                ),\n                admin_url( 'post.php' )\n            );\n        }\n\n        return '';\n    }\n}\n\n$hostiner_helper = new Hostinger_Ai_Assistant_Helper();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/index.php","ext":"php","size":28,"mtime":1757312769,"type":"text","content":"<?php // Silence is golden.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/chatbot/class-hostinger-ai-assistant-chatbot-endpoints.php","ext":"php","size":3031,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Ai_Assistant_Chatbot_Endpoints {\n    private Hostinger_Ai_Assistant_Helper $helper;\n    private Hostinger_Ai_Assistant_Config $config_handler;\n\n    public function init(): void {\n        add_action( 'rest_api_init', array( $this, 'register_rest_routes' ) );\n    }\n\n    public function website_data() {\n        $this->helper         = new Hostinger_Ai_Assistant_Helper();\n        $this->config_handler = new Hostinger_Ai_Assistant_Config();\n\n        $response_data = array(\n            'data' => array(\n                'domain'   => implode( ' ', str_split( $this->helper->get_host_info() ) ),\n                'token'    => Hostinger_Ai_Assistant_Helper::get_api_token(),\n                'metadata' => array(\n                    'environment_info'   => array(\n                        'wordpress_version' => get_bloginfo( 'version' ) ?? '',\n                        'is_multisite'      => is_multisite(),\n                        'wp_debug'          => defined( 'WP_DEBUG' ) && WP_DEBUG,\n                        'web_server'        => isset( $_SERVER['SERVER_SOFTWARE'] ) ? $_SERVER['SERVER_SOFTWARE'] : 'Unknown',\n                        'php_version'       => phpversion() ?? '',\n                    ),\n                    'site_settings'      => array(\n                        'website_url'   => get_site_url() ?? '',\n                        'site_title'    => get_bloginfo( 'name' ) ?? get_site_url(),\n                        'site_language' => get_locale() ?? '',\n                    ),\n                    'plugin_info'        => array(\n                        'active_plugins' => get_option( 'active_plugins', array() ),\n                    ),\n                    'theme_info'         => array(\n                        'active_theme' => wp_get_theme()->get( 'Name' ) ?? '',\n                    ),\n                    'rest_api_endpoints' => array(\n                        'base_rest_uri'   => $this->config_handler->get_config_value( 'base_rest_uri', HOSTINGER_AI_ASSISTANT_REST_URI ),\n                        'base_hpanel_uri' => $this->config_handler->get_config_value( 'base_hpanel_rest_uri', HOSTINGER_AI_ASSISTANT_HPANEL_REST_URI ),\n                    ),\n                ),\n            ),\n        );\n\n        $response = new \\WP_REST_Response( $response_data );\n\n        $response->set_headers( array( 'Cache-Control' => 'no-cache' ) );\n\n        $response->set_status( \\WP_Http::OK );\n\n        return rest_ensure_response( $response );\n    }\n\n    public function register_rest_routes(): void {\n        register_rest_route(\n            HOSTINGER_AI_ASSISTANT_REST_API_BASE,\n            '/website',\n            array(\n                'methods'             => 'GET',\n                'callback'            => array( $this, 'website_data' ),\n                'permission_callback' => array( $this, 'permission_check' ),\n            )\n        );\n    }\n\n    public function permission_check(): bool {\n\n        if ( ! is_user_logged_in() ) {\n            return false;\n        }\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-updates.php","ext":"php","size":1549,"mtime":1757312769,"type":"text","content":"<?php\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n}\n\nuse YahnisElsts\\PluginUpdateChecker\\v5\\PucFactory;\n\nclass Hostinger_Ai_Assistant_Updates {\n    private const DEFAULT_PLUGIN_UPDATE_URI = 'https://wp-update.hostinger.io/?action=get_metadata&slug=hostinger-ai-assistant';\n    private const CANARY_PLUGIN_UPDATE_URI  = 'https://wp-update-canary.hostinger.io/?action=get_metadata&slug=hostinger-ai-assistant';\n    private const STAGING_PLUGIN_UPDATE_URI = 'https://wp-update-stage.hostinger.io/?action=get_metadata&slug=hostinger-ai-assistant';\n\n    public function __construct() {\n        $this->updates();\n    }\n\n    /**\n     * @return string\n     */\n    private function get_plugin_update_uri(): string {\n        if ( isset( $_SERVER['H_STAGING'] ) && filter_var( $_SERVER['H_STAGING'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n            return self::STAGING_PLUGIN_UPDATE_URI;\n        }\n\n        if ( isset( $_SERVER['H_CANARY'] ) && filter_var( $_SERVER['H_CANARY'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n            return self::CANARY_PLUGIN_UPDATE_URI;\n        }\n\n        return self::DEFAULT_PLUGIN_UPDATE_URI;\n    }\n\n    /**\n     * @return void\n     */\n    public function updates(): void {\n        $plugin_updater_uri = $this->get_plugin_update_uri();\n\n        if ( class_exists( PucFactory::class ) ) {\n            $hts_update_checker = PucFactory::buildUpdateChecker( $plugin_updater_uri, HOSTINGER_AI_ASSISTANT_ABSPATH . 'hostinger-ai-assistant.php', 'hostinger-ai-assistant' );\n        }\n    }\n}\n\nnew Hostinger_Ai_Assistant_Updates();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant.php","ext":"php","size":11878,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The file that defines the core plugin class\n *\n * A class definition that includes attributes and functions used across both the\n * public-facing side of the site and the admin area.\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n */\n\nuse Hostinger\\Amplitude\\AmplitudeManager;\nuse Hostinger\\EasyOnboarding\\Amplitude\\Amplitude;\nuse Hostinger\\Surveys\\Rest as SurveysRest;\nuse Hostinger\\Surveys\\SurveyManager;\nuse Hostinger\\WpHelper\\Config;\nuse Hostinger\\WpHelper\\Constants;\nuse Hostinger\\WpHelper\\Requests\\Client;\nuse Hostinger\\WpHelper\\Utils as Helper;\n\n/**\n * The core plugin class.\n *\n * This is used to define internationalization, admin-specific hooks, and\n * public-facing site hooks.\n *\n * Also maintains the unique identifier of this plugin as well as the current\n * version of the plugin.\n *\n * @since      1.0.0\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant {\n\n    /**\n     * The loader that's responsible for maintaining and registering all hooks that power\n     * the plugin.\n     *\n     * @since    1.0.0\n     * @access   protected\n     * @var      Hostinger_Ai_Assistant_Loader $loader Maintains and registers all hooks for the plugin.\n     */\n    protected $loader;\n\n    /**\n     * The unique identifier of this plugin.\n     *\n     * @since    1.0.0\n     * @access   protected\n     * @var      string $plugin_name The string used to uniquely identify this plugin.\n     */\n    protected $plugin_name;\n\n    /**\n     * The current version of the plugin.\n     *\n     * @since    1.0.0\n     * @access   protected\n     * @var      string $version The current version of the plugin.\n     */\n    protected $version;\n\n    /**\n     * Define the core functionality of the plugin.\n     *\n     * Set the plugin name and the plugin version that can be used throughout the plugin.\n     * Load the dependencies, define the locale, and set the hooks for the admin area and\n     * the public-facing side of the site.\n     *\n     * @since    1.0.0\n     */\n    public function __construct() {\n        if ( defined( 'HOSTINGER_AI_ASSISTANT_VERSION' ) ) {\n            $this->version = HOSTINGER_AI_ASSISTANT_VERSION;\n        } else {\n            $this->version = '1.0.0';\n        }\n        $this->plugin_name = 'hostinger-ai-assistant';\n\n        $this->load_dependencies();\n        $this->set_locale();\n        $this->define_admin_hooks();\n    }\n\n    /**\n     * Load the required dependencies for this plugin.\n     *\n     * Include the following files that make up the plugin:\n     *\n     * - Hostinger_Ai_Assistant_Loader. Orchestrates the hooks of the plugin.\n     * - Hostinger_Ai_Assistant_I18n. Defines internationalization functionality.\n     * - Hostinger_Ai_Assistant_Admin. Defines all hooks for the admin area.\n     *\n     * Create an instance of the loader which will be used to register the hooks\n     * with WordPress.\n     *\n     * @since    1.0.0\n     * @access   private\n     */\n    private function load_dependencies() {\n        /**\n         * The class responsible for config values.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-config.php';\n\n        /**\n         * The class responsible for errors.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-errors.php';\n\n        /**\n         * The class responsible for plugin updates.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-updates.php';\n\n        /**\n         * The class responsible for all helper functions.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-helper.php';\n\n        /**\n         * The class responsible requests client.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/requests/class-hostinger-ai-assistant-requests-client.php';\n\n        /**\n         * The class responsible for amplitude actions.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/amplitude/class-hostinger-ai-assistant-amplitude-actions.php';\n\n        /**\n         * The class responsible for amplitude events.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/amplitude/class-hostinger-ai-assistant-amplitude.php';\n\n        /**\n         * The class responsible for SEO.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/seo/class-hostinger-ai-assistant-seo.php';\n\n        /**\n         * The class responsible for content generation.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/content/class-hostinger-ai-assistant-content-generation.php';\n\n        /**\n         * The class responsible for content filters.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/content/class-hostinger-ai-assistant-content-filters.php';\n\n        /**\n         * The class responsible for frontend translations.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'admin/class-hostinger-ai-assistant-translations.php';\n\n        /**\n         * The class responsible for all admin notices.\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'admin/class-hostinger-ai-assistant-notices.php';\n\n        /**\n         * The class responsible for orchestrating the actions and filters of the\n         * core plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-loader.php';\n\n        /**\n         * The class responsible for defining internationalization functionality\n         * of the plugin.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-i18n.php';\n\n        /**\n         * The class responsible for defining all actions that occur in the admin area.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'admin/class-hostinger-ai-assistant-admin.php';\n\n        /**\n         * The class responsible for defining all redirects.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'admin/class-hostinger-ai-assistant-redirects.php';\n\n        /**\n         * The class responsible for all requests to AI Assistant API.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/requests/class-hostinger-ai-assistant-requests.php';\n\n        /**\n         * The class responsible for woocommerce ai metabox.\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/woocommerce/class-hostinger-ai-assistant-product-ai-metabox.php';\n\n        /**\n         * The class responsible chatbot endpoints.\n         */\n\n        require_once plugin_dir_path( __DIR__ ) . 'includes/chatbot/class-hostinger-ai-assistant-chatbot-endpoints.php';\n\n        /**\n         * The class responsible mcp endpoints.\n         */\n\n        require_once plugin_dir_path( __DIR__ ) . 'includes/mcp/class-hostinger-ai-assistant-mcp-endpoints.php';\n\n        /**\n         * The class responsible mcp hooks.\n         */\n\n        require_once plugin_dir_path( __DIR__ ) . 'includes/mcp/class-hostinger-ai-assistant-mcp-hooks.php';\n\n        /**\n         * The class responsible for loading Gutenberg blocks\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'admin/class-hostinger-ai-assistant-blocks.php';\n\n        /**\n         * The class responsible for loading Gutenberg blocks\n         */\n        require_once plugin_dir_path( __DIR__ ) . 'includes/class-hostinger-ai-assistant-surveys.php';\n\n        $this->loader = new Hostinger_Ai_Assistant_Loader();\n    }\n\n    /**\n     * Define the locale for this plugin for internationalization.\n     *\n     * Uses the Hostinger_Ai_Assistant_I18n class in order to set the domain and to register the hook\n     * with WordPress.\n     *\n     * @since    1.0.0\n     * @access   private\n     */\n    private function set_locale() {\n\n        $plugin_i18n = new Hostinger_Ai_Assistant_I18n();\n\n        $this->loader->add_action( 'plugins_loaded', $plugin_i18n, 'load_plugin_textdomain' );\n    }\n\n    /**\n     * Register all of the hooks related to the admin area functionality\n     * of the plugin.\n     *\n     * @since    1.0.0\n     * @access   private\n     */\n    private function define_admin_hooks() {\n\n        $plugin_admin   = new Hostinger_Ai_Assistant_Admin( $this->get_plugin_name(), $this->get_version() );\n        $helper_notices = new Hostinger_Ai_Assistant_Notices();\n        $helper         = new Hostinger_Ai_Assistant_Helper();\n        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_styles' );\n        $this->loader->add_action( 'admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts' );\n\n        $this->loader->add_filter( 'hostinger_menu_subpages', $plugin_admin, 'add_ai_assistant_menu_item', 40 );\n        $this->loader->add_filter( 'hostinger_admin_menu_bar_items', $plugin_admin, 'add_admin_bar_item', 100 );\n\n        if ( ! Hostinger_Ai_Assistant_Helper::get_api_token() ) {\n            $this->loader->add_action( 'admin_notices', $helper_notices, 'api_token_plugin_notice' );\n        }\n\n        $this->loader->add_action( 'admin_footer', $helper, 'add_vue_instance' );\n\n        if ( function_exists( 'register_block_type' ) && stripos( wp_get_theme()->get( 'Name' ), 'Hostinger AI theme' ) === false ) {\n            $blocks = new Hostinger_Ai_Assistant_Block();\n\n            $this->loader->add_action( 'init', $blocks, 'register_block' );\n\n            if ( is_admin() ) {\n                $this->loader->add_action( 'enqueue_block_assets', $blocks, 'enqueue_blocks' );\n            }\n        }\n\n        $helper = new Helper();\n        $config = new Config();\n        $client = new Client(\n            $config->getConfigValue( 'base_rest_uri', Constants::HOSTINGER_REST_URI ),\n            array(\n                Config::TOKEN_HEADER  => $helper->getApiToken(),\n                Config::DOMAIN_HEADER => $helper->getHostInfo(),\n            )\n        );\n\n        if ( class_exists( SurveyManager::class ) ) {\n            $surveys_rest   = new SurveysRest( $client );\n            $survey_manager = new SurveyManager( $helper, $config, $surveys_rest );\n            $surveys        = new Surveys( $survey_manager );\n            $surveys->init();\n        }\n\n        $amplitude_manager = new AmplitudeManager( $helper, $config, $client );\n        $amplitude_events  = new Hostinger_Ai_Assistant_Amplitude( $amplitude_manager );\n    }\n\n    /**\n     * Run the loader to execute all of the hooks with WordPress.\n     *\n     * @since    1.0.0\n     */\n    public function run() {\n        $this->loader->run();\n    }\n\n    /**\n     * The name of the plugin used to uniquely identify it within the context of\n     * WordPress and to define internationalization functionality.\n     *\n     * @return    string    The name of the plugin.\n     * @since     1.0.0\n     */\n    public function get_plugin_name() {\n        return $this->plugin_name;\n    }\n\n    /**\n     * The reference to the class that orchestrates the hooks with the plugin.\n     *\n     * @return    Hostinger_Ai_Assistant_Loader    Orchestrates the hooks of the plugin.\n     * @since     1.0.0\n     */\n    public function get_loader() {\n        return $this->loader;\n    }\n\n    /**\n     * Retrieve the version number of the plugin.\n     *\n     * @return    string    The version number of the plugin.\n     * @since     1.0.0\n     */\n    public function get_version() {\n        return $this->version;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-config.php","ext":"php","size":864,"mtime":1757312769,"type":"text","content":"<?php\n\nif ( ! defined( 'ABSPATH' ) ) {\n    exit;\n}\n\nclass Hostinger_Ai_Assistant_Config {\n    private array $config      = array();\n    public const TOKEN_HEADER  = 'X-Hpanel-Order-Token';\n    public const DOMAIN_HEADER = 'X-Hpanel-Domain';\n\n    public function __construct() {\n        $this->decode_config( HOSTINGER_AI_ASSISTANT_CONFIG_PATH );\n    }\n\n    private function decode_config( string $path ): void {\n        if ( file_exists( $path ) ) {\n            $config_content = file_get_contents( $path );\n            $this->config   = json_decode( $config_content, true );\n        }\n    }\n\n    public function get_config_value( string $key, $default_value ): string {\n        if ( $this->config && isset( $this->config[ $key ] ) && ! empty( $this->config[ $key ] ) ) {\n            return $this->config[ $key ];\n        }\n\n        return $default_value;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/class-hostinger-ai-assistant-activator.php","ext":"php","size":798,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Fired during plugin activation\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n */\n\n/**\n * Fired during plugin activation.\n *\n * This class defines all code necessary to run during the plugin's activation.\n *\n * @since      1.0.0\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/includes\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant_Activator {\n\n    /**\n     * Short Description. (use period)\n     *\n     * Long Description.\n     *\n     * @since    1.0.0\n     */\n    public static function activate() {\n        if ( has_action( 'litespeed_purge_all' ) ) {\n            do_action( 'litespeed_purge_all' );\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/mcp/class-hostinger-ai-assistant-mcp-hooks.php","ext":"php","size":690,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Ai_Assistant_Mcp_Hooks {\n    public function init(): void {\n        add_filter( 'woocommerce_rest_prepare_product_object', array( $this, 'filter_product_meta_fields' ), 10, 3 );\n    }\n\n    public function filter_product_meta_fields( $response, $post, $request ): WP_REST_Response {\n        if ( isset( $response->data['meta_data'] ) && is_array( $response->data['meta_data'] ) ) {\n            $response->data['meta_data'] = array_filter(\n                $response->data['meta_data'],\n                function ( $meta ) {\n                    return ! str_starts_with( $meta->key, '_uag' );\n                }\n            );\n        }\n\n        return $response;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/mcp/class-hostinger-ai-assistant-mcp-endpoints.php","ext":"php","size":5849,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Ai_Assistant_Mcp_Endpoints {\n    private const MCP_PLUGIN_SLUG = 'wordpress-mcp';\n\n    public function init(): void {\n        add_action( 'rest_api_init', array( $this, 'register_rest_routes' ) );\n    }\n\n    public function register_rest_routes(): void {\n        register_rest_route(\n            HOSTINGER_AI_ASSISTANT_REST_API_BASE,\n            '/toggle-mcp-plugin',\n            array(\n                'methods'             => 'POST',\n                'callback'            => array( $this, 'toggle_mcp_plugin' ),\n                'permission_callback' => array( $this, 'permission_check' ),\n                'args'                => array(\n                    'action' => array(\n                        'required'          => true,\n                        'validate_callback' => function ( $param ) {\n                            return in_array( $param, array( 'setup', 'deny' ), true );\n                        },\n                        'sanitize_callback' => 'sanitize_text_field',\n                        'description'       => 'The action to perform: setup or deny.',\n                        'type'              => 'string',\n                        'enum'              => array( 'setup', 'deny' ),\n                    ),\n                ),\n            )\n        );\n    }\n\n    public function toggle_mcp_plugin( WP_REST_Request $request ) {\n        $action = $request->get_param( 'action' );\n\n        switch ( $action ) {\n            case 'setup':\n                $result = $this->setup_mcp_plugin();\n                break;\n            default:\n            case 'deny':\n                $result = $this->deny_mcp_plugin();\n                break;\n        }\n\n        if ( is_wp_error( $result ) ) {\n            return $this->handle_wp_error( $result );\n        }\n\n        return $result;\n    }\n\n    public function setup_mcp_plugin() {\n        $install_plugin = $this->install_plugin( $this->get_plugin_update_url() );\n\n        if ( is_wp_error( $install_plugin ) ) {\n            return $this->handle_wp_error( $install_plugin );\n        }\n\n        $activation_result = $this->activate_plugin( self::MCP_PLUGIN_SLUG . '/' . self::MCP_PLUGIN_SLUG . '.php' );\n\n        if ( is_wp_error( $activation_result ) ) {\n            return $this->handle_wp_error( $activation_result );\n        }\n\n        $this->apply_initial_settings();\n\n        $response = new WP_REST_Response();\n        $response->set_headers( array( 'Cache-Control' => 'no-cache' ) );\n        $response->set_status( WP_Http::OK );\n\n        return rest_ensure_response( $response );\n    }\n\n    public function deny_mcp_plugin() {\n        include_once ABSPATH . 'wp-admin/includes/plugin.php';\n\n        $plugin_file = self::MCP_PLUGIN_SLUG . '/' . self::MCP_PLUGIN_SLUG . '.php';\n\n        if ( is_plugin_active( $plugin_file ) ) {\n            deactivate_plugins( $plugin_file );\n        }\n\n        update_option( 'hostinger_mcp_choice', 0 );\n\n        $response = new WP_REST_Response();\n        $response->set_headers( array( 'Cache-Control' => 'no-cache' ) );\n        $response->set_status( WP_Http::OK );\n\n        return rest_ensure_response( $response );\n    }\n\n    public function permission_check(): bool {\n        return is_user_logged_in();\n    }\n\n    protected function install_plugin( string $url ) {\n        require_once ABSPATH . 'wp-admin/includes/file.php';\n        include_once ABSPATH . 'wp-admin/includes/class-wp-upgrader.php';\n        include_once ABSPATH . 'wp-admin/includes/plugin-install.php';\n        include_once ABSPATH . 'wp-admin/includes/plugin.php';\n\n        $skin     = new WP_Ajax_Upgrader_Skin();\n        $upgrader = new Plugin_Upgrader( $skin );\n\n        return $upgrader->install( $url );\n    }\n\n    protected function activate_plugin( string $plugin_file ) {\n        return activate_plugin( $plugin_file );\n    }\n\n    protected function handle_wp_error( WP_Error $error ): WP_REST_Response {\n        if ( defined( 'WP_DEBUG' ) && true === WP_DEBUG ) {\n            error_log( 'Hostinger Ai Assistant: ' . print_r( $error->get_error_messages(), true ) );\n        }\n\n        $data = array(\n            'status'  => 'error',\n            'errors'  => $error->get_error_code(),\n            'message' => implode( ', ', $error->get_error_messages() ),\n        );\n\n        $response = new WP_REST_Response();\n        $response->set_data( $data );\n        $response->set_status( WP_Http::BAD_REQUEST );\n\n        return $response;\n    }\n\n    protected function apply_initial_settings(): void {\n        $settings = array(\n            'enabled'                    => true,\n            'features_adapter_enabled'   => false,\n            'enable_create_tools'        => true,\n            'enable_update_tools'        => true,\n            'enable_delete_tools'        => false,\n            'enable_rest_api_crud_tools' => false,\n        );\n\n        update_option( 'wordpress_mcp_settings', $settings );\n        update_option( 'hostinger_mcp_choice', 1 );\n\n        $tool_states = array(\n            'wp_update_general_settings' => false,\n            'wp_upload_media'            => false,\n        );\n\n        update_option( 'wordpress_mcp_tool_states', $tool_states );\n    }\n\n    protected function get_plugin_update_url(): string {\n        $domain = 'wp-update.hostinger.io';\n\n        if ( isset( $_SERVER['H_STAGING'] ) && filter_var( $_SERVER['H_STAGING'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n            $domain = 'wp-update-stage.hostinger.io';\n        }\n\n        if ( isset( $_SERVER['H_CANARY'] ) && filter_var( $_SERVER['H_CANARY'], FILTER_VALIDATE_BOOLEAN ) === true ) {\n            $domain = 'wp-update-canary.hostinger.io';\n        }\n\n        $query = array(\n            'action' => 'download',\n            'slug'   => self::MCP_PLUGIN_SLUG,\n        );\n\n        return 'https://' . $domain . '/?' . http_build_query( $query );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/amplitude/class-hostinger-ai-assistant-amplitude-actions.php","ext":"php","size":408,"mtime":1757312769,"type":"text","content":"<?php\n\ndefined( 'ABSPATH' ) || exit;\n\nclass Hostinger_Ai_Assistant_Amplitude_Actions {\n    public const AI_CONTENT_CREATE            = 'wordpress.ai_content.create';\n    public const AI_CONTENT_CREATED           = 'wordpress.ai_content.created';\n    public const AI_CONTENT_CREATED_PUBLISHED = 'wordpress.ai_content.published';\n    public const AI_PLUGIN_INSTALLED          = 'wordpress.plugin.installed';\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/includes/amplitude/class-hostinger-ai-assistant-amplitude.php","ext":"php","size":7305,"mtime":1757312769,"type":"text","content":"<?php\n\nuse Hostinger\\Amplitude\\AmplitudeManager;\n\nclass Hostinger_Ai_Assistant_Amplitude {\n    private const AMPLITUDE_ENDPOINT  = '/v3/wordpress/plugin/trigger-event';\n    private const PLUGIN_INSTALL_TYPE = 'hostinger_ai_plugin_installation_type';\n\n    private AmplitudeManager $amplitude_manager;\n\n    public function __construct(\n        AmplitudeManager $amplitude_manager\n    ) {\n        $this->amplitude_manager = $amplitude_manager;\n\n        add_action( 'transition_post_status', array( $this, 'track_published_post' ), 10, 3 );\n        add_action( 'transition_post_status', array( $this, 'track_published_post_updates' ), 10, 3 );\n        add_action( 'transition_post_status', array( $this, 'track_published_product' ), 10, 3 );\n        add_action( 'activate_hostinger_ai_assistant', array( $this, 'track_installed_plugin' ), 10, 3 );\n    }\n\n    public function ai_content_created( string $post_type, string $location = 'ai_assistant_ui', array $additional_properties = array() ): void {\n        $endpoint = self::AMPLITUDE_ENDPOINT;\n        $params   = array(\n            'action'       => Hostinger_Ai_Assistant_Amplitude_Actions::AI_CONTENT_CREATE,\n            'content_type' => $post_type,\n            'location'     => $location,\n        );\n\n        $headers = array();\n\n        if ( ! empty( $additional_properties['correlation_id'] ) ) {\n            $headers['x-correlation-id'] = $additional_properties['correlation_id'];\n        }\n\n        $this->amplitude_manager->sendRequest( $endpoint, $params, $headers );\n    }\n\n    public function ai_content_saved( string $post_type, int $post_id, string $location = 'ai_assistant_ui', array $additional_properties = array() ): void {\n        $endpoint = self::AMPLITUDE_ENDPOINT;\n        $params   = array(\n            'action'       => Hostinger_Ai_Assistant_Amplitude_Actions::AI_CONTENT_CREATED,\n            'content_type' => $post_type,\n            'content_id'   => $post_id,\n            'location'     => $location,\n        );\n\n        $headers = array();\n\n        if ( ! empty( $additional_properties['correlation_id'] ) ) {\n            $headers['x-correlation-id'] = $additional_properties['correlation_id'];\n        }\n\n        $this->amplitude_manager->sendRequest( $endpoint, $params, $headers );\n    }\n\n    public function ai_content_published( string $post_type, int $post_id, string $location = 'ai_assistant_ui', array $additional_properties = array() ): void {\n        $endpoint = self::AMPLITUDE_ENDPOINT;\n        $params   = array(\n            'action'       => Hostinger_Ai_Assistant_Amplitude_Actions::AI_CONTENT_CREATED_PUBLISHED,\n            'content_type' => $post_type,\n            'content_id'   => $post_id,\n            'location'     => $location,\n        );\n\n        $headers = array();\n\n        if ( ! empty( $additional_properties['correlation_id'] ) ) {\n            $headers['x-correlation-id'] = $additional_properties['correlation_id'];\n        }\n\n        update_option( 'hostinger_content_published', true );\n        $this->amplitude_manager->sendRequest( $endpoint, $params, $headers );\n    }\n\n    public function track_published_post( string $new_status, string $old_status, WP_Post $post ): void {\n\n        if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n            return;\n        }\n\n        $post_id                   = $post->ID;\n        $ai_content_generated      = get_post_meta( $post_id, 'hostinger_ai_generated', true );\n        static $is_action_executed = array();\n\n        if ( isset( $is_action_executed[ $post_id ] ) ) {\n            return;\n        }\n\n        if ( ( 'draft' === $old_status || 'auto-draft' === $old_status ) && $new_status === 'publish' ) {\n\n            if ( $ai_content_generated && ! wp_is_post_revision( $post_id ) ) {\n                $post_type      = get_post_type( $post_id );\n                $correlation_id = get_post_meta( $post_id, 'hts_correlation_id', true );\n                $this->ai_content_published( $post_type, $post_id, 'ai_assistant_ui', array( 'correlation_id' => $correlation_id ) );\n                delete_post_meta( $post_id, 'hts_correlation_id' );\n                $is_action_executed[ $post_id ] = true;\n            }\n        }\n    }\n\n    public function track_published_post_updates( string $new_status, string $old_status, WP_Post $post ): void {\n\n        if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n            return;\n        }\n\n        // Fix issue with hook running twice.\n        if ( ! empty( $_REQUEST['meta-box-loader'] ) ) {\n            return;\n        }\n\n        $post_id                   = $post->ID;\n        static $is_action_executed = array();\n\n        if ( isset( $is_action_executed[ $post_id ] ) ) {\n            return;\n        }\n\n        if ( $new_status === 'publish' ) {\n\n            $has_ai_block = has_block( 'hostinger-ai-plugin/block', $post );\n\n            if ( $has_ai_block && ! wp_is_post_revision( $post_id ) ) {\n                $post_type = get_post_type( $post_id );\n                $this->ai_content_published( $post_type, $post_id, 'ai_assistant_block' );\n                $is_action_executed[ $post_id ] = true;\n            }\n        }\n    }\n\n    public function track_published_product( string $new_status, string $old_status, WP_Post $post ): void {\n\n        if ( defined( 'DOING_AJAX' ) && DOING_AJAX ) {\n            return;\n        }\n\n        $post_id                   = $post->ID;\n        $ai_content_generated      = get_option( 'hts_woo_product_description_created', array() );\n        $location                  = 'woocommerce_ui';\n        static $is_action_executed = array();\n\n        if ( isset( $is_action_executed[ $post_id ] ) ) {\n            return;\n        }\n\n        if ( $post->post_type === 'product' && $new_status === 'publish' && $old_status !== 'publish' ) {\n\n            if ( in_array( $post_id, $ai_content_generated, true ) && ! wp_is_post_revision( $post_id ) ) {\n                $post_type = get_post_type( $post_id );\n                $this->ai_content_published( $post_type, $post_id, $location );\n                $index = array_search( $post_id, $ai_content_generated, true );\n\n                // If $post_id exists in $ai_content_generated, remove it.\n                if ( $index !== false ) {\n                    unset( $ai_content_generated[ $index ] );\n                    update_option( 'hts_woo_product_description_created', $ai_content_generated );\n                }\n\n                $is_action_executed[ $post_id ] = true;\n            }\n        }\n    }\n\n    public function track_installed_plugin(): void {\n        $endpoint                  = self::AMPLITUDE_ENDPOINT;\n        $plugin_install_type       = get_option( self::PLUGIN_INSTALL_TYPE, 'WordPress' );\n        static $is_action_executed = false;\n\n        if ( $is_action_executed ) {\n            return;\n        }\n\n        $params = array(\n            'action'         => Hostinger_Ai_Assistant_Amplitude_Actions::AI_PLUGIN_INSTALLED,\n            'location'       => $plugin_install_type,\n            'plugin_name'    => basename( plugin_dir_path( dirname( __DIR__, 1 ) ) ),\n            'plugin_version' => HOSTINGER_AI_ASSISTANT_VERSION,\n        );\n\n        $is_action_executed = true;\n        $this->amplitude_manager->sendRequest( $endpoint, $params );\n        delete_option( self::PLUGIN_INSTALL_TYPE );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/scripts/generate-hcomponents-scss.js","ext":"js","size":938,"mtime":1757312769,"type":"text","content":"const fs = require('fs');\nconst path = require('path');\n\nconst sourcePath = path.join(__dirname, '../node_modules/@hostinger/hcomponents/dist/style.css');\nconst targetDir = path.join(__dirname, '../vue-frontend/src/styles');\nconst targetPath = path.join(targetDir, 'hcomponents.scss');\n\n// Check if the target file already exists\nfs.access(targetPath, fs.constants.F_OK, (err) => {\n\n  // Read the content of the source file\n  fs.readFile(sourcePath, 'utf8', (err, data) => {\n    if (err) {\n      console.error('Error reading source file:', err);\n      return;\n    }\n\n    // Replace :root with *\n    const modifiedData = data.replace(/:root/g, '*');\n\n    // Write the modified content to the target file\n    fs.writeFile(targetPath, modifiedData, (err) => {\n      if (err) {\n        console.error('Error writing to target file:', err);\n      } else {\n        console.log('File copied and modified successfully');\n      }\n    });\n  });\n});\n"},{"base":"plugins","rel":"hostinger-ai-assistant/uninstall.php","ext":"php","size":1057,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Fired when the plugin is uninstalled.\n *\n * When populating this file, consider the following flow\n * of control:\n *\n * - This method should be static\n * - Check if the $_REQUEST content actually is the plugin name\n * - Run an admin referrer check to make sure it goes through authentication\n * - Verify the output of $_GET makes sense\n * - Repeat with other user roles. Best directly by using the links/query string parameters.\n * - Repeat things for multisite. Once for a single site in the network, once sitewide.\n *\n * This file may be updated more in future version of the Boilerplate; however, this is the\n * general skeleton and outline for how the file should work.\n *\n * For more information, see the following discussion:\n * https://github.com/tommcfarlin/WordPress-Plugin-Boilerplate/pull/123#issuecomment-28541913\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n */\n\n// If uninstall not called from WordPress, then exit.\nif ( ! defined( 'WP_UNINSTALL_PLUGIN' ) ) {\n    exit;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/index.php","ext":"php","size":28,"mtime":1757312769,"type":"text","content":"<?php // Silence is golden.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/class-hostinger-ai-assistant-blocks.php","ext":"php","size":2518,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The admin-specific functionality of the plugin.\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\n\nclass Hostinger_Ai_Assistant_Block {\n\n    public function register_block() {\n        register_block_type(\n            'hostinger-ai-plugin/block',\n            array(\n                'attributes'      => array(\n                    'content'        => array(\n                        'type' => 'string',\n                    ),\n                    'tone'           => array(\n                        'type' => 'string',\n                    ),\n                    'content_length' => array(\n                        'type' => 'string',\n                    ),\n                ),\n                'render_callback' => array(\n                    $this,\n                    'render_block',\n                ),\n                'editor_style'    => 'hostinger-ai-plugin-block-editor',\n                'editor_script'   => 'hostinger-ai-plugin-block',\n            )\n        );\n    }\n\n    public function enqueue_blocks() {\n        wp_enqueue_script(\n            'hostinger-ai-plugin-block',\n            HOSTINGER_AI_ASSISTANT_PLUGIN_URL . 'gutenberg-block/dist/index.js',\n            array( 'wp-blocks', 'wp-i18n', 'wp-element', 'wp-editor' ),\n            filemtime( HOSTINGER_AI_ASSISTANT_ABSPATH . 'gutenberg-block/dist/index.js' )\n        );\n\n        wp_set_script_translations( 'hostinger-ai-plugin-block', 'hostinger-ai-assistant', HOSTINGER_AI_ASSISTANT_ABSPATH . 'languages' );\n\n        $translations = new Hostinger_Frontend_Translations();\n\n        wp_localize_script(\n            'hostinger-ai-plugin-block',\n            'hst_ai_data',\n            array(\n                'plugin_url'   => HOSTINGER_AI_ASSISTANT_PLUGIN_URL,\n                'ajax_url'     => admin_url( 'admin-ajax.php' ),\n                'nonce'        => wp_create_nonce( 'generate_content' ),\n                'translations' => $translations->get_frontend_translations(),\n            )\n        );\n\n        wp_enqueue_style(\n            'hostinger-ai-plugin-block-editor',\n            HOSTINGER_AI_ASSISTANT_PLUGIN_URL . 'gutenberg-block/dist/index.css',\n            array( 'wp-edit-blocks' ),\n            filemtime( HOSTINGER_AI_ASSISTANT_ABSPATH . 'gutenberg-block/dist/index.css' )\n        );\n    }\n\n    /**\n     * We don't render anything\n     *\n     * @return string\n     */\n    public function render_block() {\n        return '';\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/class-hostinger-ai-assistant-notices.php","ext":"php","size":827,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The file that defines all admin notices\n *\n * A class definition that includes notices used across admin area.\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\n\nclass Hostinger_Ai_Assistant_Notices {\n\n    public function api_token_plugin_notice() {\n        ?>\n\n        <div class=\"notice notice-error is-dismissible hts-theme-settings hts-admin-notice\">\n            <p>\n                <strong><?php echo __( 'Attention:', 'hostinger-ai-assistant' ); ?></strong> <?php echo __( 'To unlock the exclusive features of <b>Hostinger AI</b>, you must possess a unique API token, which is exclusively provided to Hostinger clients', 'hostinger-ai-assistant' ); ?>\n            </p>\n        </div>\n\n        <?php\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/class-hostinger-ai-assistant-redirects.php","ext":"php","size":1032,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n *\n * The file that defines all redirects\n *\n * @link       https://hostinger.com\n * @since      1.1.2\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\n\nclass Hostinger_Ai_Assistant_Redirects {\n    private string $platform;\n    public const PLATFORM_CONTENT_CREATOR = 'ai-content-creator';\n\n    public function __construct() {\n\n        if ( ! isset( $_GET['platform'] ) ) {\n            return;\n        }\n\n        $this->platform = sanitize_text_field( $_GET['platform'] );\n        $this->login_redirect();\n    }\n\n    private function login_redirect(): void {\n        if ( $this->platform === self::PLATFORM_CONTENT_CREATOR ) {\n            add_action(\n                'init',\n                function () {\n                    $redirect_url = admin_url( 'admin.php?page=hostinger-ai-assistant' );\n                    wp_safe_redirect( $redirect_url );\n                    exit;\n                }\n            );\n        }\n    }\n}\n\n$redirects = new Hostinger_Ai_Assistant_Redirects();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/index.php","ext":"php","size":28,"mtime":1757312769,"type":"text","content":"<?php // Silence is golden.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/class-hostinger-ai-assistant-translations.php","ext":"php","size":6207,"mtime":1757312769,"type":"text","content":"<?php\n\nclass Hostinger_Frontend_Translations {\n    protected $frontend_translations;\n    protected $chatbot_translations;\n\n    public function __construct() {\n        $this->setup_translations();\n    }\n\n    public function get_frontend_translations(): array {\n        return $this->frontend_translations;\n    }\n\n    public function get_chatbot_translations(): array {\n        return $this->chatbot_translations;\n    }\n\n    protected function setup_translations(): void {\n        $this->frontend_translations = array(\n            'tones_selected'     => esc_html__( 'tones selected', 'hostinger-ai-assistant' ),\n            'voice_tones'        => array(\n                'neutral'     => esc_html__( 'Neutral', 'hostinger-ai-assistant' ),\n                'formal'      => esc_html__( 'Formal', 'hostinger-ai-assistant' ),\n                'trustworthy' => esc_html__( 'Trustworthy', 'hostinger-ai-assistant' ),\n                'friendly'    => esc_html__( 'Friendly', 'hostinger-ai-assistant' ),\n                'witty'       => esc_html__( 'Witty', 'hostinger-ai-assistant' ),\n            ),\n            'example_keywords'   => esc_html__( 'Example: website development, WordPress tutorial, ...', 'hostinger-ai-assistant' ),\n            'at_least_ten'       => esc_html__( 'Enter at least 10 characters', 'hostinger-ai-assistant' ),\n            'let_us_now_more'    => esc_html__( 'Let us now more about your post idea. Share more details for better results', 'hostinger-ai-assistant' ),\n            'youre_good'         => esc_html__( 'You\\'re good to go, but you can share more details for better results', 'hostinger-ai-assistant' ),\n            'add_new_with_ai'    => esc_html__( 'Create Post with AI', 'hostinger-ai-assistant' ),\n            'ai_generated_image' => esc_html__( 'AI-generated image', 'hostinger-ai-assistant' ),\n            'use_image_as'       => esc_html__( 'Use this image as:', 'hostinger-ai-assistant' ),\n            'set_as_featured'    => esc_html__( 'External featured image', 'hostinger-ai-assistant' ),\n            'set_as_content'     => esc_html__( 'Insert this image inside content', 'hostinger-ai-assistant' ),\n        );\n\n        /* translators: %s: MCP plugin name */\n        $mcp_subtitle    = __( 'To let Kodee manage your site on your behalf, we will install and pre-configure the %s for you. This allows Kodee to perform actions like creating pages or updating settings. You can revoke this permission at any time in your Hostinger Tools settings.', 'hostinger-ai-assistant' );\n        $mcp_plugin_name = '<b>' . __( 'WordPress MCP plugin', 'hostinger-ai-assistant' ) . '</b>';\n        $mcp_subtitle    = sprintf( $mcp_subtitle, $mcp_plugin_name );\n        $mcp_subtitle    = strip_tags( $mcp_subtitle, '<b>' );\n\n        $this->chatbot_translations = array(\n            'main'           => array(\n                'intro'                      => esc_html__( 'Hi, I\\'m Kodee, your personal AI assistant. You can ask me any questions you have regarding WordPress. I\\'m still learning, so sometimes can make mistakes. What questions do you have?', 'hostinger-ai-assistant' ),\n                'title'                      => esc_html__( 'Kodee', 'hostinger-ai-assistant' ),\n                'beta_badge'                 => esc_html__( 'Beta', 'hostinger-ai-assistant' ),\n                'tooltip_feedback'           => esc_html__( 'Leave feedback', 'hostinger-ai-assistant' ),\n                'tooltip_reset'              => esc_html__( 'Restart chatbot', 'hostinger-ai-assistant' ),\n                'tooltip_close'              => esc_html__( 'Close', 'hostinger-ai-assistant' ),\n                'question_input_placeholder' => esc_html__( 'Write your question', 'hostinger-ai-assistant' ),\n                'disclaimer'                 => esc_html__( 'AI may produce inaccurate information', 'hostinger-ai-assistant' ),\n                'button'                     => __( 'Ask AI', 'hostinger-ai-assistant' ),\n            ),\n            'modal_feedback' => array(\n                'title'               => esc_html__( 'Rate your experience using Kodee', 'hostinger-ai-assistant' ),\n                'question'            => esc_html__( 'Share Your Experience', 'hostinger-ai-assistant' ),\n                'score_poor'          => esc_html__( 'Poor', 'hostinger-ai-assistant' ),\n                'score_excellent'     => esc_html__( 'Excellent', 'hostinger-ai-assistant' ),\n                'comment_placeholder' => esc_html__( 'Write your feedback', 'hostinger-ai-assistant' ),\n                'confirm_button'      => esc_html__( 'Send', 'hostinger-ai-assistant' ),\n                'thanks_message'      => esc_html__( 'Thank you for your feedback', 'hostinger-ai-assistant' ),\n            ),\n            'modal_restart'  => array(\n                'title'          => esc_html__( 'Clear chat', 'hostinger-ai-assistant' ),\n                'description'    => esc_html__( 'Please note that all chat messages will be permanently deleted. This action cannot be undone. Proceeding will result in the removal of all messages from this chat session.', 'hostinger-ai-assistant' ),\n                'cancel_button'  => esc_html__( 'Cancel', 'hostinger-ai-assistant' ),\n                'confirm_button' => esc_html__( 'Clear chat' ),\n            ),\n            'error'          => array(\n                'unavailable'      => esc_html__( 'Sorry, the AI Chatbot is currently unavailable. Please try again later.', 'hostinger-ai-assistant' ),\n                'timeout'          => esc_html__( 'Sorry, the AI Chatbot request timed out. Please try again later.', 'hostinger-ai-assistant' ),\n                'unclear_question' => esc_html__( 'I\\'m sorry, I didn\\'t understand your question. Could you please rephrase it or ask something different?', 'hostinger-ai-assistant' ),\n            ),\n            'mcp-modal'      => array(\n                'title'    => esc_html__( 'Allow Kodee to manage your site', 'hostinger-ai-assistant' ),\n                'subtitle' => $mcp_subtitle,\n                'deny'     => esc_html__( 'No, thanks', 'hostinger-ai-assistant' ),\n                'accept'   => esc_html__( 'Grant Permission', 'hostinger-ai-assistant' ),\n            ),\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/partials/hostinger-ai-assistant-tab-view.php","ext":"php","size":20424,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * Provide a admin area view for ai assistant\n *\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin/partials\n */\n\n$content    = new Hostinger_Ai_Assistant_Content_Generation();\n$post_types = $content->get_public_post_types();\n$menu_icon  = get_post_type_object( $post_types[0] )->menu_icon ?? 'dashicons-admin-post';\n$helper     = new Hostinger_Ai_Assistant_Helper();\n\n?>\n<div class=\"hts-ai-assistant\">\n    <div class=\"wrapper\">\n        <div class=\"hts-ai-tab-head\">\n            <div class=\"hts-heading\">\n                <h2><?php echo __( 'AI Content Creator', 'hostinger-ai-assistant' ); ?></h2>\n            </div>\n            <div class=\"hts-ai-tutorials\">\n                <div class=\"hts-button-wrapper\">\n                <a href=\"https://www.hostinger.com/tutorials/how-to-use-hostinger-ai-plugin\" class=\"hts-btn hts-secondary-btn\" target=\"_blank\">\n                    <?php echo __( 'Open guide', 'hostinger-ai-assistant' ); ?>\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2.5 5.2478C2.5 3.72902 3.73122 2.4978 5.25 2.4978H6C6.41421 2.4978 6.75 2.83359 6.75 3.2478C6.75 3.66202 6.41421 3.9978 6 3.9978H5.25C4.55964 3.9978 4 4.55745 4 5.2478V10.6859C4 11.3763 4.55964 11.9359 5.25 11.9359H10.7508C11.4411 11.9359 12.0008 11.3763 12.0008 10.6859V10C12.0008 9.58579 12.3366 9.25 12.7508 9.25C13.165 9.25 13.5008 9.58579 13.5008 10V10.6859C13.5008 12.2047 12.2696 13.4359 10.7508 13.4359H5.25C3.73122 13.4359 2.5 12.2047 2.5 10.6859V5.2478ZM12 5.06077L8.03033 9.03044C7.73744 9.32333 7.26256 9.32333 6.96967 9.03044C6.67678 8.73754 6.67678 8.26267 6.96967 7.96977L10.9393 4.00011L9 4.0001C8.58579 4.0001 8.25 3.66432 8.25 3.2501C8.25 2.83589 8.58579 2.5001 9 2.5001L12.25 2.50011C12.9404 2.50011 13.5 3.05975 13.5 3.75011V7.0001C13.5 7.41432 13.1642 7.7501 12.75 7.7501C12.3358 7.7501 12 7.41432 12 7.0001V5.06077Z\" fill=\"#673DE6\"/>\n                    </svg>\n                </a>\n                <a href=\"<?php echo get_site_url(); ?>\" class=\"hts-btn hts-secondary-btn\" target=\"_blank\">\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"reverse\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.99998 6.23374C7.02266 6.23374 6.2304 7.02601 6.2304 8.00332C6.2304 8.98063 7.02266 9.7729 7.99998 9.7729C8.97729 9.7729 9.76956 8.98063 9.76956 8.00332C9.76956 7.02601 8.97729 6.23374 7.99998 6.23374ZM4.69123 8.00332C4.69123 6.17595 6.17261 4.69457 7.99998 4.69457C9.82735 4.69457 11.3087 6.17595 11.3087 8.00332C11.3087 9.83069 9.82735 11.3121 7.99998 11.3121C6.17261 11.3121 4.69123 9.83069 4.69123 8.00332Z\" fill=\"currentColor\"/>\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7.99508 3.92088C6.23615 3.92088 3.12832 4.78339 1.55391 7.93872C1.5343 7.97801 1.53407 8.02604 1.55433 8.06651C3.12861 11.2094 6.1426 12.0858 8.00495 12.0858C9.76389 12.0858 12.8717 11.2233 14.4461 8.06799C14.4657 8.0287 14.466 7.98067 14.4457 7.9402C12.8714 4.79726 9.85743 3.92088 7.99508 3.92088ZM0.176668 7.25152C2.09445 3.40802 5.86487 2.38171 7.99508 2.38171C10.2434 2.38171 13.909 3.43186 15.8219 7.25088C16.0585 7.72326 16.0598 8.28126 15.8234 8.75519C13.9056 12.5987 10.1352 13.625 8.00495 13.625C5.7566 13.625 2.09108 12.5749 0.178153 8.75583C-0.058457 8.28345 -0.0598124 7.72545 0.176668 7.25152Z\" fill=\"#673DE6\"/>\n                    </svg>\n                    <?php echo __( 'Preview site', 'hostinger-ai-assistant' ); ?>\n                </a>\n                <?php if ( $helper->get_edit_site_url() ) : ?>\n                <a href=\"<?php echo $helper->get_edit_site_url(); ?>\" class=\"hts-btn hts-secondary-btn\" target=\"_blank\">\n                    <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" class=\"reverse\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.85691 14.1816C6.85691 13.7674 7.14483 13.4316 7.5 13.4316H13.6069C13.9621 13.4316 14.25 13.7674 14.25 14.1816C14.25 14.5958 13.9621 14.9316 13.6069 14.9316H7.5C7.14483 14.9316 6.85691 14.5958 6.85691 14.1816Z\" fill=\"currentColor\"/>\n                        <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M4.29084 12.6658L13.0587 3.80312C13.0835 3.77806 13.1068 3.75446 13.1289 3.7321C13.1066 3.70997 13.083 3.68661 13.0579 3.66183L12.2098 2.82257C12.1847 2.79775 12.1611 2.77438 12.1387 2.75227C12.1165 2.77459 12.0932 2.7982 12.0683 2.82325L6.68596 8.25301L3.29957 11.6881C3.29328 11.6945 3.28738 11.7004 3.28183 11.7061C3.27962 11.7137 3.27728 11.7217 3.27478 11.7303L2.87798 13.0951L4.24799 12.6914C4.25676 12.6888 4.26497 12.6864 4.27271 12.6841C4.27839 12.6784 4.28441 12.6723 4.29084 12.6658ZM5.61974 7.19793L2.23046 10.6359C2.12466 10.7432 2.07176 10.7969 2.02795 10.857C1.98904 10.9104 1.95553 10.9675 1.9279 11.0275C1.89679 11.0951 1.87576 11.1674 1.8337 11.3121L1.24307 13.3436C1.05693 13.9838 0.963865 14.3039 1.04577 14.5217C1.11715 14.7115 1.26745 14.8611 1.45773 14.9316C1.67608 15.0125 1.99607 14.9182 2.63606 14.7296L4.67252 14.1295C4.81992 14.086 4.89362 14.0643 4.96229 14.0322C5.02327 14.0036 5.0812 13.969 5.13522 13.9288C5.19605 13.8836 5.25007 13.829 5.3581 13.7198L14.1259 4.85713C14.5195 4.45935 14.7162 4.26046 14.7891 4.03197C14.8533 3.83099 14.8521 3.61488 14.7859 3.41459C14.7105 3.1869 14.5117 2.99011 14.1139 2.59653L13.2658 1.75727C12.8677 1.36333 12.6687 1.16637 12.4399 1.09331C12.2386 1.02905 12.0222 1.03009 11.8216 1.09629C11.5935 1.17155 11.3964 1.37042 11.0021 1.76817L5.61974 7.19793ZM12.4708 2.43329L12.4689 2.43476L12.4708 2.43329ZM11.8055 2.43797L11.8035 2.43651L11.8055 2.43797ZM13.4478 4.06357L13.4463 4.06157L13.4478 4.06357ZM13.4428 3.39923L13.4443 3.39725L13.4428 3.39923Z\" fill=\"#673DE6\"/>\n                    </svg>\n                    </svg>\n                    <?php echo __( 'Edit site', 'hostinger-ai-assistant' ); ?>\n                </a>\n                <?php endif; ?>\n                </div>\n            </div>\n        </div>\n        <div class=\"hts-container\">\n            <div class=\"hts-description\">\n                <h3><?php echo __( 'What do you want to make today?', 'hostinger-ai-assistant' ); ?></h3>\n            </div>\n            <div class=\"hts-inputs-wrapper\">\n                <div class=\"hts-input-item\">\n                    <div class=\"container\">\n                        <div class=\"setting-description\">\n                            <div class=\"setting-description-text\">\n                                <span><?php echo __( 'Content Type', 'hostinger-ai-assistant' ); ?></span>\n                            </div>\n                        </div>\n                        <div class=\"wrapper-dropdown\" id=\"dropdown\">\n                            <?php if ( isset( $post_types[0] ) ) : ?>\n                                <span class=\"selected-display dashicons-before <?php echo $menu_icon; ?>\" id=\"hts-posttype\" data-value=\"<?php echo $post_types[0]; ?>\"><?php echo get_post_type_object( $post_types[0] )->label; ?></span>\n                            <?php endif; ?>\n                            <svg id=\"drp-arrow\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"hts-arrow transition-all ml-auto\">\n                                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 10L12 15L17 10H7Z\" fill=\"#727586\"/>\n                            </svg>\n                            <ul class=\"dropdown\">\n                                <?php\n                                $first_iteration = true;\n                                foreach ( $post_types as $post_type ) :\n                                    ?>\n                                    <li class=\"item dashicons-before\n                                    <?php\n                                    echo get_post_type_object( $post_type )->menu_icon . ' ';\n                                    if ( $first_iteration ) {\n                                        echo 'active';}\n                                    ?>\n                                    \" data-value=\"<?php echo $post_type; ?>\"><?php echo get_post_type_object( $post_type )->label; ?></li>\n                                    <?php\n                                    $first_iteration = false;\n                                endforeach;\n                                ?>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"hts-input-description\">\n                        <p><?php echo __( 'Choose the type of content that will be generated', 'hostinger-ai-assistant' ); ?></p>\n                    </div>\n                </div>\n                <div class=\"hts-input-item\">\n                    <div class=\"container\">\n                        <div class=\"setting-description\">\n                            <div class=\"setting-description-text\">\n                                <span><?php echo __( 'Tone of voice', 'hostinger-ai-assistant' ); ?></span>\n                            </div>\n                        </div>\n                        <div class=\"row hts-voice-wrapper\">\n                            <select name=\"sel-01\" id=\"hts-voice\" class=\"select2-multiple-voice\" multiple>\n                                <option value=\"neutral\"><?php echo __( 'Neutral', 'hostinger-ai-assistant' ); ?></option>\n                                <option value=\"formal\"><?php echo __( 'Formal', 'hostinger-ai-assistant' ); ?></option>\n                                <option value=\"trustworthy\"><?php echo __( 'Trustworthy', 'hostinger-ai-assistant' ); ?></option>\n                                <option value=\"friendly\"><?php echo __( 'Friendly', 'hostinger-ai-assistant' ); ?></option>\n                                <option value=\"witty\"><?php echo __( 'Witty', 'hostinger-ai-assistant' ); ?></option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"hts-input-description\">\n                        <p><?php echo __( 'Choose your desired emotional impact on readers', 'hostinger-ai-assistant' ); ?></p>\n                    </div>\n                </div>\n                <div class=\"hts-input-item hts-content-length\">\n                    <div class=\"container\">\n                        <div class=\"setting-description\">\n                            <div class=\"setting-description-text\">\n                                <span><?php echo __( 'Content length', 'hostinger-ai-assistant' ); ?></span>\n                            </div>\n                        </div>\n                        <div class=\"wrapper-dropdown\" id=\"dropdown\">\n                                <span class=\"selected-display\" id=\"hts-content-length\" data-value=\"short\"><?php echo __( 'Short', 'hostinger-ai-assistant' ); ?></span>\n                            <svg id=\"drp-arrow\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" class=\"hts-arrow transition-all ml-auto\">\n                                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M7 10L12 15L17 10H7Z\" fill=\"#727586\"/>\n                            </svg>\n                            <ul class=\"dropdown\">\n                                <li class=\"item active\" data-value=\"short\">\n                                    <span><?php echo __( 'Short', 'hostinger-ai-assistant' ); ?></span>\n                                    <div class=\"hts-select-description\">\n                                        <p><?php echo __( 'Usually used for video, infographics, or product descriptions', 'hostinger-ai-assistant' ); ?></p>\n                                    </div>\n                                </li>\n                                <li class=\"item\" data-value=\"medium\">\n                                    <span><?php echo __( 'Medium', 'hostinger-ai-assistant' ); ?></span>\n                                    <div class=\"hts-select-description\">\n                                        <p><?php echo __( 'Balances depth and readability, engaging audiences and driving leads.', 'hostinger-ai-assistant' ); ?></p>\n                                    </div>\n                                </li>\n                                <li class=\"item\" data-value=\"long\">\n                                    <span><?php echo __( 'Long', 'hostinger-ai-assistant' ); ?></span>\n                                    <div class=\"hts-select-description\">\n                                        <p><?php echo __( 'Usually used to make high-ranked articles that will generate more leads', 'hostinger-ai-assistant' ); ?></p>\n                                    </div>\n                                </li>\n                            </ul>\n                        </div>\n                    </div>\n                    <div class=\"hts-input-description\">\n                        <p><?php echo __( 'Choose the length of generated content', 'hostinger-ai-assistant' ); ?></p>\n                    </div>\n                </div>\n            </div>\n            <div class=\"hts-description\">\n                <h3><?php echo __( 'What is your content about?', 'hostinger-ai-assistant' ); ?></h3>\n            </div>\n            <div class=\"wrapper\">\n                <div class=\"hts-input-textarea\">\n                    <div class=\"hts-label\">\n                        <?php echo __( 'Content main idea', 'hostinger-ai-assistant' ); ?>\n                    </div>\n                    <textarea id=\"hts-ai-description-input\"><?php echo __( 'Let us know more about your content idea. For example: Article about how to use WordPress to dive into website development including tutorials how to use it in a simple way...', 'hostinger-ai-assistant' ); ?></textarea>\n                </div>\n            </div>\n            <div class=\"progress-bar-wrapper\">\n                <div class=\"progress-bar\">\n                    <div class=\"progress-bar-step\"></div>\n                    <div class=\"progress-bar-step\"></div>\n                    <div class=\"progress-bar-step\"></div>\n                </div>\n            </div>\n            <div id=\"hts-input-message\">\n                <?php echo __( 'Enter at least 10 characters', 'hostinger-ai-assistant' ); ?>\n            </div>\n            <div class=\"hts-focus-keywords\">\n                <div class=\"hts-description\">\n                    <h3><?php echo __( 'What are the focus keywords of your content?', 'hostinger-ai-assistant' ); ?></h3> <span><?php echo __( 'Optional', 'hostinger-ai-assistant' ); ?></span>\n                </div>\n                <div class=\"hts-input-description\">\n                    <?php echo __( 'If you skip this part, AI will automatically generate keyword suggestions after you generate the content', 'hostinger-ai-assistant' ); ?>\n                </div>\n                <select id=\"hts-focus-keywords\" multiple></select>\n                <div class=\"hts-input-description\">\n                    <?php echo __( 'Press Enter key to finalize a keyword', 'hostinger-ai-assistant' ); ?>\n                </div>\n            </div>\n            <a class=\"hts-submit-button hts-btn hts-primary-btn hts-disabled\" rel=\"noopener noreferrer\">\n                <?php wp_nonce_field( 'generate_content', 'generate_content_nonce' ); ?>\n                <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M19.3 8.12501L18.225 5.62501L15.625 4.47501L18.225 3.35001L19.3 0.975006L20.375 3.35001L22.975 4.47501L20.375 5.62501L19.3 8.12501ZM19.3 23L18.225 20.6L15.625 19.475L18.225 18.35L19.3 15.825L20.375 18.35L22.975 19.475L20.375 20.6L19.3 23ZM8.325 19.15L6.025 14.225L1 11.975L6.025 9.72501L8.325 4.82501L10.65 9.72501L15.65 11.975L10.65 14.225L8.325 19.15Z\"\n                            fill=\"#1D1E20\"/>\n                </svg>\n                <?php echo __( 'Create content', 'hostinger-ai-assistant' ); ?>\n            </a>\n        </div>\n        <div class=\"hts-ai-assistant-result\">\n            <div class=\"hts-loader-wrapper\">\n                <div class=\"hts-loader\">\n                    <svg width=\"36\" height=\"36\" viewBox=\"0 0 36 36\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M28.95 12.1874L27.3375 8.4374L23.4375 6.7124L27.3375 5.0249L28.95 1.4624L30.5625 5.0249L34.4625 6.7124L30.5625 8.4374L28.95 12.1874ZM28.95 34.4999L27.3375 30.8999L23.4375 29.2124L27.3375 27.5249L28.95 23.7374L30.5625 27.5249L34.4625 29.2124L30.5625 30.8999L28.95 34.4999ZM12.4875 28.7249L9.0375 21.3374L1.5 17.9624L9.0375 14.5874L12.4875 7.2374L15.975 14.5874L23.475 17.9624L15.975 21.3374L12.4875 28.7249Z\"\n                                fill=\"#2F1C6A\"/>\n                    </svg>\n                    <h3><?php echo __( 'Brewing content with magic', 'hostinger-ai-assistant' ); ?></h3>\n                </div>\n                <div class=\"hts-loader-container\">\n                    <div id=\"hts-loader-progress-bar\" class=\"hts-loader-progress\"></div>\n                </div>\n            </div>\n            <div id=\"hts-loader-response-container\">\n\n                <div class=\"hts-response-content\">\n                    <?php require_once 'hostinger-ai-assistant-seo-meta-view.php'; ?>\n                    <div class=\"hts-response-data\"></div>\n                </div>\n\n                <div class=\"hts-bottom-content\">\n                    <div class=\"hts-words\">\n                        <div id=\"hts-content-words\"><span></span> <?php echo __( 'words', 'hostinger-ai-assistant' ); ?></div>\n                        <span class=\"hts-separator\">|</span>\n                        <div id=\"hts-content-chars\"><span></span> <?php echo __( 'characters', 'hostinger-ai-assistant' ); ?>\n                        </div>\n                    </div>\n                    <div class=\"hts-btn-wrapper\">\n                    <div class=\"hts-btn hts-secondary-btn\" id=\"hts-edit-as-draft\">\n                        <?php wp_nonce_field( 'create_post', 'create_post_nonce' ); ?>\n                        <span class=\"button__text\">\n                            <?php echo __( 'Edit as a draft', 'hostinger-ai-assistant' ); ?>\n                        </span>\n                    </div>\n                    <div class=\"hts-btn hts-primary-btn\" id=\"hts-publish-post\">\n                        <?php wp_nonce_field( 'publish_post', 'publish_post_nonce' ); ?>\n                        <span class=\"button__text\">\n                            <?php echo __( 'Publish', 'hostinger-ai-assistant' ); ?>\n                        </span>\n                    </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div class=\"hts-existing-content-popup\">\n            <h3>\n                <?php echo __( 'Are you sure you want to replace your existing content with a new one ?', 'hostinger-ai-assistant' ); ?>\n            </h3>\n            <p>\n                <?php echo __( 'Clicking <b>Generate new content</b> will permanently delete your existing content and generate a new one on your recent inputs.', 'hostinger-ai-assistant' ); ?>\n            </p>\n            <div class=\"hts-popup-buttons\">\n                <div class=\"hts-cancel\">\n                    <?php echo __( 'Cancel', 'hostinger-ai-assistant' ); ?>\n                </div>\n                <div class=\"hts-btn hts-primary-btn hts-confirm-btn\">\n                    <?php echo __( 'Generate new content', 'hostinger-ai-assistant' ); ?>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<div class=\"hts-loader-modal\">\n    <div class=\"hts-loader-modal__content\">\n        <div class=\"hts-loader-modal__image-wrap\">\n            <img src=\"<?php echo HOSTINGER_AI_ASSISTANT_PLUGIN_URL . 'assets/img/loading-modal-icon.svg'; ?>\" alt=\"<?php echo esc_attr( __( 'Generating content...', 'hostinger-ai-assistant' ) ); ?>\">\n        </div>\n        <div class=\"hts-loader-modal__title\">\n            <?php echo __( 'Generating content...', 'hostinger-ai-assistant' ); ?>\n        </div>\n        <div class=\"hts-loader-modal__description\">\n            <?php echo __( 'This will only take a moment', 'hostinger-ai-assistant' ); ?>\n        </div>\n        <div class=\"hts-loader-modal__loader-wrap\">\n            <div class=\"hts-loader-modal__loader\"></div>\n        </div>\n    </div>\n</div>\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/partials/hostinger-ai-assistant-seo-meta-view.php","ext":"php","size":2993,"mtime":1757312769,"type":"text","content":"<div class=\"hts-data-container\">\n    <div class=\"hts-content-data\">\n        <div class=\"hts-data-type hts-post-type\"></div>\n        <div class=\"hts-data-type hts-tone-type\"></div>\n        <div class=\"hts-data-type hts-content-length\"></div>\n    </div>\n    <div class=\"hts-metadata-wrapper\">\n    <div class=\"description\">\n        <h3><?php echo esc_html__( 'Keywords', 'hostinger-ai-assistant' ); ?></h3>\n        <div id=\"hts-keywords-tip\" data-tippy-content=\"<?php echo esc_html__( 'SEO keywords improve web content visibility on search engines like Google by being relevant and naturally placed', 'hostinger-ai-assistant' ); ?>\">\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.99992 0.333252C3.31992 0.333252 0.333252 3.31992 0.333252 6.99992C0.333252 10.6799 3.31992 13.6666 6.99992 13.6666C10.6799 13.6666 13.6666 10.6799 13.6666 6.99992C13.6666 3.31992 10.6799 0.333252 6.99992 0.333252ZM7.66658 10.3333H6.33325V6.33325H7.66658V10.3333ZM7.66658 4.99992H6.33325V3.66658H7.66658V4.99992Z\" fill=\"#727586\"/>\n            </svg>\n        </div>\n    </div>\n    <div class=\"form-inputs\">\n        <div class=\"form-input\">\n            <div class=\"field\">\n                <div class=\"field-description\">\n                    <?php echo esc_html__( 'These keywords can help your article and website rank higher in search engines. You can input up to 5 keywords.', 'hostinger-ai-assistant' ); ?>\n                </div>\n                <select id=\"hts-seo-keywords\" multiple></select>\n            </div>\n        </div>\n    </div>\n    </div>\n    <div class=\"hts-metadata-wrapper\">\n    <div class=\"description\">\n        <h3><?php echo esc_html__( 'Meta description', 'hostinger-ai-assistant' ); ?></h3>\n        <div id=\"hts-description-tip\" data-tippy-content=\"<?php echo esc_html__( 'Meta descriptions offer concise page summaries in search results, aiding user understanding before clicking.', 'hostinger-ai-assistant' ); ?>\">\n            <svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                <path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M6.99992 0.333252C3.31992 0.333252 0.333252 3.31992 0.333252 6.99992C0.333252 10.6799 3.31992 13.6666 6.99992 13.6666C10.6799 13.6666 13.6666 10.6799 13.6666 6.99992C13.6666 3.31992 10.6799 0.333252 6.99992 0.333252ZM7.66658 10.3333H6.33325V6.33325H7.66658V10.3333ZM7.66658 4.99992H6.33325V3.66658H7.66658V4.99992Z\" fill=\"#727586\"/>\n            </svg>\n        </div>\n    </div>\n    <div class=\"form-inputs\">\n        <div class=\"form-textarea\">\n            <div class=\"field\">\n                <label for=\"hts-seo-meta-description\">\n                    <?php echo esc_html__( 'Description', 'hostinger-ai-assistant' ); ?>\n                </label>\n                <textarea id=\"hts-seo-meta-description\"></textarea>\n            </div>\n        </div>\n    </div>\n    </div>\n</div>\n"},{"base":"plugins","rel":"hostinger-ai-assistant/admin/class-hostinger-ai-assistant-admin.php","ext":"php","size":6971,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The admin-specific functionality of the plugin.\n *\n * @link       https://hostinger.com\n * @since      1.0.0\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n */\n\nuse Hostinger\\WpMenuManager\\Menus;\nuse Hostinger\\WpHelper\\Utils;\n\n/**\n * The admin-specific functionality of the plugin.\n *\n * Defines the plugin name, version, and two examples hooks for how to\n * enqueue the admin-specific stylesheet and JavaScript.\n *\n * @package    Hostinger_Ai_Assistant\n * @subpackage Hostinger_Ai_Assistant/admin\n * @author     Hostinger <info@hostinger.com>\n */\nclass Hostinger_Ai_Assistant_Admin {\n\n    /**\n     * The ID of this plugin.\n     *\n     * @since    1.0.0\n     * @access   private\n     * @var      string $plugin_name The ID of this plugin.\n     */\n    private string $plugin_name;\n\n    /**\n     * The version of this plugin.\n     *\n     * @since    1.0.0\n     * @access   private\n     * @var      string $version The current version of this plugin.\n     */\n    private string $version;\n\n    /**\n     * Initialize the class and set its properties.\n     *\n     * @param string $plugin_name The name of this plugin.\n     * @param string $version The version of this plugin.\n     *\n     * @since    1.0.0\n     */\n    public function __construct( string $plugin_name, string $version ) {\n        $this->plugin_name = $plugin_name;\n        $this->version     = $version;\n    }\n\n    /**\n     * Register the stylesheets for the admin area.\n     *\n     * @since    1.0.0\n     */\n    public function enqueue_styles(): void {\n\n        wp_enqueue_style( $this->plugin_name, HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/css/hostinger-ai-assistant-admin.css', array(), $this->version, 'all' );\n\n        if ( class_exists( 'WooCommerce' ) ) {\n            wp_enqueue_style( 'hostinger_ai_assistant_woo_styles', HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/css/woo-styles.css', array(), $this->version, 'all' );\n        }\n    }\n\n    /**\n     * Register the JavaScript for the admin area.\n     *\n     * @since    1.0.0\n     */\n    public function enqueue_scripts(): void {\n        $translations  = new Hostinger_Frontend_Translations();\n        $global_params = array_merge(\n            $translations->get_frontend_translations(),\n            array(\n                'tabUrl' => admin_url() . 'admin.php?page=hostinger-ai-assistant',\n            )\n        );\n\n        if ( $this->is_hostinger_menu_page() ) {\n            wp_enqueue_script(\n                $this->plugin_name,\n                HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/js/hostinger-ai-assistant-admin.js',\n                array(\n                    'jquery',\n                    'wp-i18n',\n                ),\n                $this->version,\n                false\n            );\n            wp_localize_script( $this->plugin_name, 'hostingerAiAssistant', $global_params );\n        }\n\n        if ( class_exists( 'WooCommerce' ) ) {\n            wp_enqueue_script(\n                'hostinger_ai_assistant_woo_requests',\n                HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/js/hostinger-woo-requests.js',\n                array(\n                    'jquery',\n                    'wp-i18n',\n                ),\n                $this->version,\n                false\n            );\n        }\n\n        wp_enqueue_script(\n            'hostinger_chatbot',\n            HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/js/hostinger-chatbot.js',\n            array(\n                'jquery',\n                'wp-i18n',\n            ),\n            $this->version,\n            array( 'strategy' => 'defer' ),\n            false\n        );\n\n        wp_add_inline_script( 'hostinger_chatbot', 'window.lodash = _.noConflict();', 'after' );\n\n        $user = wp_get_current_user();\n        wp_localize_script(\n            'hostinger_chatbot',\n            'hostingerChatbot',\n            array_merge(\n                $translations->get_chatbot_translations(),\n                array(\n                    'nonce'             => wp_create_nonce( 'wp_rest' ),\n                    'chatbot_uri'       => esc_url_raw( rest_url() ),\n                    'user_id'           => ! empty( $user->ID ) ? $user->ID : 0,\n                    'mcp_choice'        => get_option( 'hostinger_mcp_choice', '' ),\n                    'mcp_plugin_active' => is_plugin_active( 'wordpress-mcp/wordpress-mcp.php' ),\n                )\n            )\n        );\n    }\n\n    public function enqueue_custom_editor_assets(): void {\n        $translations  = new Hostinger_Frontend_Translations();\n        $global_params = array_merge(\n            $translations->get_frontend_translations(),\n            array(\n                'tabUrl' => admin_url() . 'admin.php?page=hostinger-ai-assistant',\n            )\n        );\n\n        wp_enqueue_script(\n            'custom-link-in-toolbar',\n            HOSTINGER_AI_ASSISTANT_ASSETS_URL . '/js/hostinger-buttons.js',\n            array(\n                'jquery',\n                'wp-blocks',\n                'wp-dom',\n                'wp-i18n',\n            ),\n            $this->version,\n            false\n        );\n        wp_set_script_translations( 'custom-link-in-toolbar', 'hostinger-ai-assistant' );\n        wp_localize_script( 'custom-link-in-toolbar', 'hostingerAiAssistant', $global_params );\n    }\n\n    public function add_ai_assistant_menu_item( $submenus ): array {\n        $submenus[] = array(\n            'page_title' => __( 'AI Content Creator', 'hostinger-ai-assistant' ),\n            'menu_title' => __( 'AI Content Creator', 'hostinger-ai-assistant' ),\n            'capability' => 'edit_posts',\n            'menu_slug'  => 'hostinger-ai-assistant',\n            'callback'   => array( $this, 'create_ai_assistant_tab_view' ),\n            'menu_order' => 10,\n        );\n\n        return $submenus;\n    }\n\n    public function add_admin_bar_item( array $menu_items ): array {\n        $menu_items[] = array(\n            'id'    => 'hostinger-ai-assistant-ai-content-creator',\n            'title' => esc_html__( 'AI Content Creator', 'hostinger-ai-assistant' ),\n            'href'  => admin_url( 'admin.php?page=hostinger-ai-assistant' ),\n        );\n\n        return $menu_items;\n    }\n\n    /**\n     * Add AI Assistant view\n     *\n     * @since    1.0.0\n     */\n    public function create_ai_assistant_tab_view(): void {\n        echo Menus::renderMenuNavigation();\n        include_once HOSTINGER_AI_ASSISTANT_ABSPATH . 'admin/partials/hostinger-ai-assistant-tab-view.php';\n    }\n\n    /**\n     * @return bool\n     */\n    private function is_hostinger_menu_page(): bool {\n        $admin_path = parse_url( admin_url(), PHP_URL_PATH );\n\n        $pages = array(\n            $admin_path . 'admin.php?page=' . Menus::MENU_SLUG,\n        );\n\n        $pages[] = $admin_path . 'admin.php?page=hostinger-ai-assistant';\n\n        $utils = new Utils();\n\n        foreach ( $pages as $page ) {\n            if ( $utils->isThisPage( $page ) ) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/hostinger-ai-assistant.php","ext":"php","size":6449,"mtime":1757312769,"type":"text","content":"<?php\n\n/**\n * The plugin bootstrap file\n *\n * This file is read by WordPress to generate the plugin information in the plugin\n * admin area. This file also includes all of the dependencies used by the plugin,\n * registers the activation and deactivation functions, and defines a function\n * that starts the plugin.\n *\n * @link              https://hostinger.com\n * @since             1.0.0\n * @package           Hostinger_AI\n *\n * @wordpress-plugin\n * Plugin Name:       Hostinger AI\n * Plugin URI:        https://hostinger.com\n * Description:       Hostinger AI plugin for WordPress.\n * Version: 3.0.1\n * Author:            Hostinger\n * Requires PHP:      8.0\n * Requires at least: 5.0\n * Tested up to:      6.5\n * Author URI:        https://hostinger.com\n * License:           GPL-2.0+\n * License URI:       http://www.gnu.org/licenses/gpl-2.0.txt\n * Text Domain:       hostinger-ai-assistant\n * Domain Path:       /languages\n */\n\nuse Hostinger\\Surveys\\Loader;\nuse Hostinger\\WpMenuManager\\Manager;\n\n// If this file is called directly, abort.\nif ( ! defined( 'WPINC' ) ) {\n    die;\n}\n\n/**\n * Currently plugin version.\n */\n\ndefine( 'HOSTINGER_AI_ASSISTANT_VERSION', '3.0.1' );\n\n/**\n * Plugin path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_ABSPATH' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_ABSPATH', plugin_dir_path( __FILE__ ) );\n}\n\n/**\n * Plugin file path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_PLUGIN_FILE' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_PLUGIN_FILE', __FILE__ );\n}\n\n/**\n * Plugin dir path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_PLUGIN_URL' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_PLUGIN_URL', plugin_dir_url( __FILE__ ) );\n}\n\n/**\n * Plugin assets path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_ASSETS_URL' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_ASSETS_URL', plugin_dir_url( __FILE__ ) . 'assets' );\n}\n\n/**\n * Hostinger config path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_CONFIG_PATH' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_CONFIG_PATH', ABSPATH . '/.private/config.json' );\n}\n/**\n * Hostinger api token path.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_WP_AI_TOKEN' ) ) {\n    $path             = explode( '/', __DIR__ );\n    $server_root_path = '/' . $path[1] . '/' . $path[2];\n    define( 'HOSTINGER_AI_ASSISTANT_WP_AI_TOKEN', $server_root_path . '/.api_token' );\n}\n\n/**\n * Hostinger default rest api url.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_REST_URI' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_REST_URI', 'https://rest-hosting.hostinger.com' );\n}\n\n/**\n * Hostinger default hpanel rest api url.\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_HPANEL_REST_URI' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_HPANEL_REST_URI', 'https://hpanel.hostinger.com/api/rest-hosting/' );\n}\n\n/**\n * Plugin Rest API base url\n */\n\nif ( ! defined( 'HOSTINGER_AI_ASSISTANT_REST_API_BASE' ) ) {\n    define( 'HOSTINGER_AI_ASSISTANT_REST_API_BASE', 'hostinger-ai-assistant/v1' );\n}\n\nif ( ! defined( 'HOSTINGER_AI_MINIMUM_PHP_VERSION' ) ) {\n    define( 'HOSTINGER_AI_MINIMUM_PHP_VERSION', '8.0' );\n}\n\nif ( ! version_compare( phpversion(), HOSTINGER_AI_MINIMUM_PHP_VERSION, '>=' ) ) {\n\n    add_action(\n        'admin_notices',\n        function () {\n            ?>\n        <div class=\"notice notice-error is-dismissible hts-theme-settings\">\n            <p>\n                <?php /* translators: %s: PHP version */ ?>\n                <strong><?php echo __( 'Attention:', 'hostinger-ai-assistant' ); ?></strong> <?php echo sprintf( __( 'The Hostinger AI plugin requires minimum PHP version of <b>%s</b>. ', 'hostinger-ai-assistant' ), HOSTINGER_AI_MINIMUM_PHP_VERSION ); ?>\n            </p>\n            <p>\n                <?php /* translators: %s: PHP version */ ?>\n                <?php echo sprintf( __( 'You are running <b>%s</b> PHP version.', 'hostinger-ai-assistant' ), phpversion() ); ?>\n            </p>\n        </div>\n            <?php\n        }\n    );\n\n    return;\n}\n\n/**\n * The code that runs during plugin activation.\n * This action is documented in includes/class-hostinger-ai-assistant-activator.php\n */\nfunction activate_hostinger_ai_assistant() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-hostinger-ai-assistant-activator.php';\n    Hostinger_Ai_Assistant_Activator::activate();\n    do_action( 'activate_hostinger_ai_assistant' );\n}\n\n/**\n * The code that runs during plugin deactivation.\n * This action is documented in includes/class-hostinger-ai-assistant-deactivator.php\n */\nfunction deactivate_hostinger_ai_assistant() {\n    require_once plugin_dir_path( __FILE__ ) . 'includes/class-hostinger-ai-assistant-deactivator.php';\n    Hostinger_Ai_Assistant_Deactivator::deactivate();\n}\n\nregister_activation_hook( __FILE__, 'activate_hostinger_ai_assistant' );\nregister_deactivation_hook( __FILE__, 'deactivate_hostinger_ai_assistant' );\n\nrequire_once HOSTINGER_AI_ASSISTANT_ABSPATH . 'vendor/autoload_packages.php';\n\n/**\n * The core plugin class that is used to define internationalization,\n * admin-specific hooks, and public-facing site hooks.\n */\nrequire plugin_dir_path( __FILE__ ) . 'includes/class-hostinger-ai-assistant.php';\n\n/**\n * Begins execution of the plugin.\n *\n * Since everything within the plugin is registered via hooks,\n * then kicking off the plugin from this point in the file does\n * not affect the page life cycle.\n *\n * @since    1.0.0\n */\nfunction run_hostinger_ai_assistant() {\n    $plugin  = new Hostinger_Ai_Assistant();\n    $chatbot = new Hostinger_Ai_Assistant_Chatbot_Endpoints();\n    $chatbot->init();\n    $plugin->run();\n\n    $mcp_endpoints = new Hostinger_Ai_Assistant_Mcp_Endpoints();\n    $mcp_endpoints->init();\n\n    $mcp_hooks = new Hostinger_Ai_Assistant_Mcp_Hooks();\n    $mcp_hooks->init();\n}\n\nif ( ! has_action( 'plugins_loaded', 'run_hostinger_ai_assistant' ) ) {\n    add_action( 'plugins_loaded', 'run_hostinger_ai_assistant' );\n}\n\nif ( ! function_exists( 'hostinger_load_menus' ) ) {\n    function hostinger_load_menus(): void {\n        $manager = Manager::getInstance();\n        $manager->boot();\n    }\n}\n\nif ( ! has_action( 'plugins_loaded', 'hostinger_load_menus' ) ) {\n    add_action( 'plugins_loaded', 'hostinger_load_menus' );\n}\n\nif ( ! function_exists( 'hostinger_add_surveys' ) ) {\n    function hostinger_add_surveys(): void {\n        $surveys = Loader::getInstance();\n        $surveys->boot();\n    }\n}\n\nif ( ! has_action( 'plugins_loaded', 'hostinger_add_surveys' ) ) {\n    add_action( 'plugins_loaded', 'hostinger_add_surveys' );\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/LICENSE.txt","ext":"txt","size":18091,"mtime":1757312769,"type":"text","content":"                    GNU GENERAL PUBLIC LICENSE\n                       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n                            NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License."},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/CarbonType.php","ext":"php","size":133,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nclass CarbonType extends DateTimeType implements CarbonDoctrineType\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/CarbonDoctrineType.php","ext":"php","size":396,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\n\ninterface CarbonDoctrineType\n{\n    public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform);\n\n    public function convertToPHPValue(mixed $value, AbstractPlatform $platform);\n\n    public function convertToDatabaseValue($value, AbstractPlatform $platform);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/DateTimeType.php","ext":"php","size":555,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nuse Carbon\\Carbon;\nuse DateTime;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Doctrine\\DBAL\\Types\\VarDateTimeType;\n\nclass DateTimeType extends VarDateTimeType implements CarbonDoctrineType\n{\n    /** @use CarbonTypeConverter<Carbon> */\n    use CarbonTypeConverter;\n\n    /**\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function convertToPHPValue(mixed $value, AbstractPlatform $platform): ?Carbon\n    {\n        return $this->doConvertToPHPValue($value);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/DateTimeDefaultPrecision.php","ext":"php","size":567,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nclass DateTimeDefaultPrecision\n{\n    private static $precision = 6;\n\n    /**\n     * Change the default Doctrine datetime and datetime_immutable precision.\n     *\n     * @param int $precision\n     */\n    public static function set(int $precision): void\n    {\n        self::$precision = $precision;\n    }\n\n    /**\n     * Get the default Doctrine datetime and datetime_immutable precision.\n     *\n     * @return int\n     */\n    public static function get(): int\n    {\n        return self::$precision;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/DateTimeImmutableType.php","ext":"php","size":783,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nuse Carbon\\CarbonImmutable;\nuse DateTimeImmutable;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Doctrine\\DBAL\\Types\\VarDateTimeImmutableType;\n\nclass DateTimeImmutableType extends VarDateTimeImmutableType implements CarbonDoctrineType\n{\n    /** @use CarbonTypeConverter<CarbonImmutable> */\n    use CarbonTypeConverter;\n\n    /**\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function convertToPHPValue(mixed $value, AbstractPlatform $platform): ?CarbonImmutable\n    {\n        return $this->doConvertToPHPValue($value);\n    }\n\n    /**\n     * @return class-string<CarbonImmutable>\n     */\n    protected function getCarbonClassName(): string\n    {\n        return CarbonImmutable::class;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/CarbonTypeConverter.php","ext":"php","size":3222,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nuse Carbon\\Carbon;\nuse Carbon\\CarbonInterface;\nuse DateTimeInterface;\nuse Doctrine\\DBAL\\Platforms\\AbstractPlatform;\nuse Doctrine\\DBAL\\Platforms\\DB2Platform;\nuse Doctrine\\DBAL\\Platforms\\OraclePlatform;\nuse Doctrine\\DBAL\\Platforms\\SQLitePlatform;\nuse Doctrine\\DBAL\\Platforms\\SQLServerPlatform;\nuse Doctrine\\DBAL\\Types\\Exception\\InvalidType;\nuse Doctrine\\DBAL\\Types\\Exception\\ValueNotConvertible;\nuse Exception;\n\n/**\n * @template T of CarbonInterface\n */\ntrait CarbonTypeConverter\n{\n    /**\n     * This property differentiates types installed by carbonphp/carbon-doctrine-types\n     * from the ones embedded previously in nesbot/carbon source directly.\n     *\n     * @readonly\n     */\n    public bool $external = true;\n\n    /**\n     * @return class-string<T>\n     */\n    protected function getCarbonClassName(): string\n    {\n        return Carbon::class;\n    }\n\n    public function getSQLDeclaration(array $fieldDeclaration, AbstractPlatform $platform): string\n    {\n        $precision = min(\n            $fieldDeclaration['precision'] ?? DateTimeDefaultPrecision::get(),\n            $this->getMaximumPrecision($platform),\n        );\n\n        $type = parent::getSQLDeclaration($fieldDeclaration, $platform);\n\n        if (!$precision) {\n            return $type;\n        }\n\n        if (str_contains($type, '(')) {\n            return preg_replace('/\\(\\d+\\)/', \"($precision)\", $type);\n        }\n\n        [$before, $after] = explode(' ', \"$type \");\n\n        return trim(\"$before($precision) $after\");\n    }\n\n    /**\n     * @SuppressWarnings(PHPMD.UnusedFormalParameter)\n     */\n    public function convertToDatabaseValue($value, AbstractPlatform $platform): ?string\n    {\n        if ($value === null) {\n            return $value;\n        }\n\n        if ($value instanceof DateTimeInterface) {\n            return $value->format('Y-m-d H:i:s.u');\n        }\n\n        throw InvalidType::new(\n            $value,\n            static::class,\n            ['null', 'DateTime', 'Carbon']\n        );\n    }\n\n    private function doConvertToPHPValue(mixed $value)\n    {\n        $class = $this->getCarbonClassName();\n\n        if ($value === null || is_a($value, $class)) {\n            return $value;\n        }\n\n        if ($value instanceof DateTimeInterface) {\n            return $class::instance($value);\n        }\n\n        $date = null;\n        $error = null;\n\n        try {\n            $date = $class::parse($value);\n        } catch (Exception $exception) {\n            $error = $exception;\n        }\n\n        if (!$date) {\n            throw ValueNotConvertible::new(\n                $value,\n                static::class,\n                'Y-m-d H:i:s.u or any format supported by '.$class.'::parse()',\n                $error\n            );\n        }\n\n        return $date;\n    }\n\n    private function getMaximumPrecision(AbstractPlatform $platform): int\n    {\n        if ($platform instanceof DB2Platform) {\n            return 12;\n        }\n\n        if ($platform instanceof OraclePlatform) {\n            return 9;\n        }\n\n        if ($platform instanceof SQLServerPlatform || $platform instanceof SQLitePlatform) {\n            return 3;\n        }\n\n        return 6;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/carbonphp/carbon-doctrine-types/src/Carbon/Doctrine/CarbonImmutableType.php","ext":"php","size":151,"mtime":1756373563,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Carbon\\Doctrine;\n\nclass CarbonImmutableType extends DateTimeImmutableType implements CarbonDoctrineType\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/CHANGELOG.md","ext":"md","size":39220,"mtime":1756373563,"type":"text","content":"### 2.10.0 (2024-11-12)\n\n  * Added `$fileOpenMode` to `StreamHandler` to define a custom fopen mode to open the log file (#1913)\n  * Fixed `StreamHandler` handling of write failures so that it now closes/reopens the stream and retries the write once before failing (#1882)\n  * Fixed `StreamHandler` error handler causing issues if a stream handler triggers an error (#1866)\n  * Fixed `JsonFormatter` handling of incomplete classes (#1834)\n  * Fixed `RotatingFileHandler` bug where rotation could sometimes not happen correctly (#1905)\n\n### 2.9.3 (2024-04-12)\n\n  * Fixed PHP 8.4 deprecation warnings (#1874)\n\n### 2.9.2 (2023-10-27)\n\n  * Fixed display_errors parsing in ErrorHandler which did not support string values (#1804)\n  * Fixed bug where the previous error handler would not be restored in some cases where StreamHandler fails (#1815)\n  * Fixed normalization error when normalizing incomplete classes (#1833)\n\n### 2.9.1 (2023-02-06)\n\n  * Fixed Logger not being serializable anymore (#1792)\n\n### 2.9.0 (2023-02-05)\n\n  * Deprecated FlowdockHandler & Formatter as the flowdock service was shutdown (#1748)\n  * Added support for enum context values in PsrLogMessageProcessor (#1773)\n  * Added graylog2/gelf-php 2.x support (#1747)\n  * Improved `BrowserConsoleHandler` logging to use more appropriate methods than just console.log in the browser (#1739)\n  * Fixed `WhatFailureGroupHandler` not catching errors happening inside `close()` (#1791)\n  * Fixed datetime field in `GoogleCloudLoggingFormatter` (#1758)\n  * Fixed infinite loop detection within Fibers (#1753)\n  * Fixed `AmqpHandler->setExtraAttributes` not working with buffering handler wrappers (#1781)\n\n### 2.8.0 (2022-07-24)\n\n  * Deprecated `CubeHandler` and `PHPConsoleHandler` as both projects are abandoned and those should not be used anymore (#1734)\n  * Added RFC 5424 level (`7` to `0`) support to `Logger::log` and `Logger::addRecord` to increase interoperability (#1723)\n  * Added support for `__toString` for objects which are not json serializable in `JsonFormatter` (#1733)\n  * Added `GoogleCloudLoggingFormatter` (#1719)\n  * Added support for Predis 2.x (#1732)\n  * Added `AmqpHandler->setExtraAttributes` to allow configuring attributes when using an AMQPExchange (#1724)\n  * Fixed serialization/unserialization of handlers to make sure private properties are included (#1727)\n  * Fixed allowInlineLineBreaks in LineFormatter causing issues with windows paths containing `\\n` or `\\r` sequences (#1720)\n  * Fixed max normalization depth not being taken into account when formatting exceptions with a deep chain of previous exceptions (#1726)\n  * Fixed PHP 8.2 deprecation warnings (#1722)\n  * Fixed rare race condition or filesystem issue where StreamHandler is unable to create the directory the log should go into yet it exists already (#1678)\n\n### 2.7.0 (2022-06-09)\n\n  * Added `$datetime` parameter to `Logger::addRecord` as low level API to allow logging into the past or future (#1682)\n  * Added `Logger::useLoggingLoopDetection` to allow disabling cyclic logging detection in concurrent frameworks (#1681)\n  * Fixed handling of fatal errors if callPrevious is disabled in ErrorHandler (#1670)\n  * Marked the reusable `Monolog\\Test\\TestCase` class as `@internal` to make sure PHPStorm does not show it above PHPUnit, you may still use it to test your own handlers/etc though (#1677)\n  * Fixed RotatingFileHandler issue when the date format contained slashes (#1671)\n\n### 2.6.0 (2022-05-10)\n\n  * Deprecated `SwiftMailerHandler`, use `SymfonyMailerHandler` instead\n  * Added `SymfonyMailerHandler` (#1663)\n  * Added ElasticSearch 8.x support to the ElasticsearchHandler (#1662)\n  * Added a way to filter/modify stack traces in LineFormatter (#1665)\n  * Fixed UdpSocket not being able to reopen/reconnect after close()\n  * Fixed infinite loops if a Handler is triggering logging while handling log records\n\n### 2.5.0 (2022-04-08)\n\n  * Added `callType` to IntrospectionProcessor (#1612)\n  * Fixed AsMonologProcessor syntax to be compatible with PHP 7.2 (#1651)\n\n### 2.4.0 (2022-03-14)\n\n  * Added [`Monolog\\LogRecord`](src/Monolog/LogRecord.php) interface that can be used to type-hint records like `array|\\Monolog\\LogRecord $record` to be forward compatible with the upcoming Monolog 3 changes\n  * Added `includeStacktraces` constructor params to LineFormatter & JsonFormatter (#1603)\n  * Added `persistent`, `timeout`, `writingTimeout`, `connectionTimeout`, `chunkSize` constructor params to SocketHandler and derivatives (#1600)\n  * Added `AsMonologProcessor` PHP attribute which can help autowiring / autoconfiguration of processors if frameworks / integrations decide to make use of it. This is useless when used purely with Monolog (#1637)\n  * Added support for keeping native BSON types as is in MongoDBFormatter (#1620)\n  * Added support for a `user_agent` key in WebProcessor, disabled by default but you can use it by configuring the $extraFields you want (#1613)\n  * Added support for username/userIcon in SlackWebhookHandler (#1617)\n  * Added extension points to BrowserConsoleHandler (#1593)\n  * Added record message/context/extra info to exceptions thrown when a StreamHandler cannot open its stream to avoid completely losing the data logged (#1630)\n  * Fixed error handler signature to accept a null $context which happens with internal PHP errors (#1614)\n  * Fixed a few setter methods not returning `self` (#1609)\n  * Fixed handling of records going over the max Telegram message length (#1616)\n\n### 2.3.5 (2021-10-01)\n\n  * Fixed regression in StreamHandler since 2.3.3 on systems with the memory_limit set to >=20GB (#1592)\n\n### 2.3.4 (2021-09-15)\n\n  * Fixed support for psr/log 3.x (#1589)\n\n### 2.3.3 (2021-09-14)\n\n  * Fixed memory usage when using StreamHandler and calling stream_get_contents on the resource you passed to it (#1578, #1577)\n  * Fixed support for psr/log 2.x (#1587)\n  * Fixed some type annotations\n\n### 2.3.2 (2021-07-23)\n\n  * Fixed compatibility with PHP 7.2 - 7.4 when experiencing PCRE errors (#1568)\n\n### 2.3.1 (2021-07-14)\n\n  * Fixed Utils::getClass handling of anonymous classes not being fully compatible with PHP 8 (#1563)\n  * Fixed some `@inheritDoc` annotations having the wrong case\n\n### 2.3.0 (2021-07-05)\n\n  * Added a ton of PHPStan type annotations as well as type aliases on Monolog\\Logger for Record, Level and LevelName that you can import (#1557)\n  * Added ability to customize date format when using JsonFormatter (#1561)\n  * Fixed FilterHandler not calling reset on its internal handler when reset() is called on it (#1531)\n  * Fixed SyslogUdpHandler not setting the timezone correctly on DateTimeImmutable instances (#1540)\n  * Fixed StreamHandler thread safety - chunk size set to 2GB now to avoid interlacing when doing concurrent writes (#1553)\n\n### 2.2.0 (2020-12-14)\n\n  * Added JSON_PARTIAL_OUTPUT_ON_ERROR to default json encoding flags, to avoid dropping entire context data or even records due to an invalid subset of it somewhere\n  * Added setDateFormat to NormalizerFormatter (and Line/Json formatters by extension) to allow changing this after object creation\n  * Added RedisPubSubHandler to log records to a Redis channel using PUBLISH\n  * Added support for Elastica 7, and deprecated the $type argument of ElasticaFormatter which is not in use anymore as of Elastica 7\n  * Added support for millisecond write timeouts in SocketHandler, you can now pass floats to setWritingTimeout, e.g. 0.2 is 200ms\n  * Added support for unix sockets in SyslogUdpHandler (set $port to 0 to make the $host a unix socket)\n  * Added handleBatch support for TelegramBotHandler\n  * Added RFC5424e extended date format including milliseconds to SyslogUdpHandler\n  * Added support for configuring handlers with numeric level values in strings (coming from e.g. env vars)\n  * Fixed Wildfire/FirePHP/ChromePHP handling of unicode characters\n  * Fixed PHP 8 issues in SyslogUdpHandler\n  * Fixed internal type error when mbstring is missing\n\n### 2.1.1 (2020-07-23)\n\n  * Fixed removing of json encoding options\n  * Fixed type hint of $level not accepting strings in SendGridHandler and OverflowHandler\n  * Fixed SwiftMailerHandler not accepting email templates with an empty subject\n  * Fixed array access on null in RavenHandler\n  * Fixed unique_id in WebProcessor not being disableable\n\n### 2.1.0 (2020-05-22)\n\n  * Added `JSON_INVALID_UTF8_SUBSTITUTE` to default json flags, so that invalid UTF8 characters now get converted to [�](https://en.wikipedia.org/wiki/Specials_(Unicode_block)#Replacement_character) instead of being converted from ISO-8859-15 to UTF8 as it was before, which was hardly a comprehensive solution\n  * Added `$ignoreEmptyContextAndExtra` option to JsonFormatter to skip empty context/extra entirely from the output\n  * Added `$parseMode`, `$disableWebPagePreview` and `$disableNotification` options to TelegramBotHandler\n  * Added tentative support for PHP 8\n  * NormalizerFormatter::addJsonEncodeOption and removeJsonEncodeOption are now public to allow modifying default json flags\n  * Fixed GitProcessor type error when there is no git repo present\n  * Fixed normalization of SoapFault objects containing deeply nested objects as \"detail\"\n  * Fixed support for relative paths in RotatingFileHandler\n\n### 2.0.2 (2019-12-20)\n\n  * Fixed ElasticsearchHandler swallowing exceptions details when failing to index log records\n  * Fixed normalization of SoapFault objects containing non-strings as \"detail\" in LineFormatter\n  * Fixed formatting of resources in JsonFormatter\n  * Fixed RedisHandler failing to use MULTI properly when passed a proxied Redis instance (e.g. in Symfony with lazy services)\n  * Fixed FilterHandler triggering a notice when handleBatch was filtering all records passed to it\n  * Fixed Turkish locale messing up the conversion of level names to their constant values\n\n### 2.0.1 (2019-11-13)\n\n  * Fixed normalization of Traversables to avoid traversing them as not all of them are rewindable\n  * Fixed setFormatter/getFormatter to forward to the nested handler in FilterHandler, FingersCrossedHandler, BufferHandler, OverflowHandler and SamplingHandler\n  * Fixed BrowserConsoleHandler formatting when using multiple styles\n  * Fixed normalization of exception codes to be always integers even for PDOException which have them as numeric strings\n  * Fixed normalization of SoapFault objects containing non-strings as \"detail\"\n  * Fixed json encoding across all handlers to always attempt recovery of non-UTF-8 strings instead of failing the whole encoding\n  * Fixed ChromePHPHandler to avoid sending more data than latest Chrome versions allow in headers (4KB down from 256KB).\n  * Fixed type error in BrowserConsoleHandler when the context array of log records was not associative.\n\n### 2.0.0 (2019-08-30)\n\n  * BC Break: This is a major release, see [UPGRADE.md](UPGRADE.md) for details if you are coming from a 1.x release\n  * BC Break: Logger methods log/debug/info/notice/warning/error/critical/alert/emergency now have explicit void return types\n  * Added FallbackGroupHandler which works like the WhatFailureGroupHandler but stops dispatching log records as soon as one handler accepted it\n  * Fixed support for UTF-8 when cutting strings to avoid cutting a multibyte-character in half\n  * Fixed normalizers handling of exception backtraces to avoid serializing arguments in some cases\n  * Fixed date timezone handling in SyslogUdpHandler\n\n### 2.0.0-beta2 (2019-07-06)\n\n  * BC Break: This is a major release, see [UPGRADE.md](UPGRADE.md) for details if you are coming from a 1.x release\n  * BC Break: PHP 7.2 is now the minimum required PHP version.\n  * BC Break: Removed SlackbotHandler, RavenHandler and HipChatHandler, see [UPGRADE.md](UPGRADE.md) for details\n  * Added OverflowHandler which will only flush log records to its nested handler when reaching a certain amount of logs (i.e. only pass through when things go really bad)\n  * Added TelegramBotHandler to log records to a [Telegram](https://core.telegram.org/bots/api) bot account\n  * Added support for JsonSerializable when normalizing exceptions\n  * Added support for RFC3164 (outdated BSD syslog protocol) to SyslogUdpHandler\n  * Added SoapFault details to formatted exceptions\n  * Fixed DeduplicationHandler silently failing to start when file could not be opened\n  * Fixed issue in GroupHandler and WhatFailureGroupHandler where setting multiple processors would duplicate records\n  * Fixed GelfFormatter losing some data when one attachment was too long\n  * Fixed issue in SignalHandler restarting syscalls functionality\n  * Improved performance of LogglyHandler when sending multiple logs in a single request\n\n### 2.0.0-beta1 (2018-12-08)\n\n  * BC Break: This is a major release, see [UPGRADE.md](UPGRADE.md) for details if you are coming from a 1.x release\n  * BC Break: PHP 7.1 is now the minimum required PHP version.\n  * BC Break: Quite a few interface changes, only relevant if you implemented your own handlers/processors/formatters\n  * BC Break: Removed non-PSR-3 methods to add records, all the `add*` (e.g. `addWarning`) methods as well as `emerg`, `crit`, `err` and `warn`\n  * BC Break: The record timezone is now set per Logger instance and not statically anymore\n  * BC Break: There is no more default handler configured on empty Logger instances\n  * BC Break: ElasticSearchHandler renamed to ElasticaHandler\n  * BC Break: Various handler-specific breaks, see [UPGRADE.md](UPGRADE.md) for details\n  * Added scalar type hints and return hints in all the places it was possible. Switched strict_types on for more reliability.\n  * Added DateTimeImmutable support, all record datetime are now immutable, and will toString/json serialize with the correct date format, including microseconds (unless disabled)\n  * Added timezone and microseconds to the default date format\n  * Added SendGridHandler to use the SendGrid API to send emails\n  * Added LogmaticHandler to use the Logmatic.io API to store log records\n  * Added SqsHandler to send log records to an AWS SQS queue\n  * Added ElasticsearchHandler to send records via the official ES library. Elastica users should now use ElasticaHandler instead of ElasticSearchHandler\n  * Added NoopHandler which is similar to the NullHandle but does not prevent the bubbling of log records to handlers further down the configuration, useful for temporarily disabling a handler in configuration files\n  * Added ProcessHandler to write log output to the STDIN of a given process\n  * Added HostnameProcessor that adds the machine's hostname to log records\n  * Added a `$dateFormat` option to the PsrLogMessageProcessor which lets you format DateTime instances nicely\n  * Added support for the PHP 7.x `mongodb` extension in the MongoDBHandler\n  * Fixed many minor issues in various handlers, and probably added a few regressions too\n\n### 1.26.1 (2021-05-28)\n\n  * Fixed PHP 8.1 deprecation warning\n\n### 1.26.0 (2020-12-14)\n\n  * Added $dateFormat and $removeUsedContextFields arguments to PsrLogMessageProcessor (backport from 2.x)\n\n### 1.25.5 (2020-07-23)\n\n  * Fixed array access on null in RavenHandler\n  * Fixed unique_id in WebProcessor not being disableable\n\n### 1.25.4 (2020-05-22)\n\n  * Fixed GitProcessor type error when there is no git repo present\n  * Fixed normalization of SoapFault objects containing deeply nested objects as \"detail\"\n  * Fixed support for relative paths in RotatingFileHandler\n\n### 1.25.3 (2019-12-20)\n\n  * Fixed formatting of resources in JsonFormatter\n  * Fixed RedisHandler failing to use MULTI properly when passed a proxied Redis instance (e.g. in Symfony with lazy services)\n  * Fixed FilterHandler triggering a notice when handleBatch was filtering all records passed to it\n  * Fixed Turkish locale messing up the conversion of level names to their constant values\n\n### 1.25.2 (2019-11-13)\n\n  * Fixed normalization of Traversables to avoid traversing them as not all of them are rewindable\n  * Fixed setFormatter/getFormatter to forward to the nested handler in FilterHandler, FingersCrossedHandler, BufferHandler and SamplingHandler\n  * Fixed BrowserConsoleHandler formatting when using multiple styles\n  * Fixed normalization of exception codes to be always integers even for PDOException which have them as numeric strings\n  * Fixed normalization of SoapFault objects containing non-strings as \"detail\"\n  * Fixed json encoding across all handlers to always attempt recovery of non-UTF-8 strings instead of failing the whole encoding\n\n### 1.25.1 (2019-09-06)\n\n  * Fixed forward-compatible interfaces to be compatible with Monolog 1.x too.\n\n### 1.25.0 (2019-09-06)\n\n  * Deprecated SlackbotHandler, use SlackWebhookHandler or SlackHandler instead\n  * Deprecated RavenHandler, use sentry/sentry 2.x and their Sentry\\Monolog\\Handler instead\n  * Deprecated HipChatHandler, migrate to Slack and use SlackWebhookHandler or SlackHandler instead\n  * Added forward-compatible interfaces and traits FormattableHandlerInterface, FormattableHandlerTrait, ProcessableHandlerInterface, ProcessableHandlerTrait. If you use modern PHP and want to make code compatible with Monolog 1 and 2 this can help. You will have to require at least Monolog 1.25 though.\n  * Added support for RFC3164 (outdated BSD syslog protocol) to SyslogUdpHandler\n  * Fixed issue in GroupHandler and WhatFailureGroupHandler where setting multiple processors would duplicate records\n  * Fixed issue in SignalHandler restarting syscalls functionality\n  * Fixed normalizers handling of exception backtraces to avoid serializing arguments in some cases\n  * Fixed ZendMonitorHandler to work with the latest Zend Server versions\n  * Fixed ChromePHPHandler to avoid sending more data than latest Chrome versions allow in headers (4KB down from 256KB).\n\n### 1.24.0 (2018-11-05)\n\n  * BC Notice: If you are extending any of the Monolog's Formatters' `normalize` method, make sure you add the new `$depth = 0` argument to your function signature to avoid strict PHP warnings.\n  * Added a `ResettableInterface` in order to reset/reset/clear/flush handlers and processors\n  * Added a `ProcessorInterface` as an optional way to label a class as being a processor (mostly useful for autowiring dependency containers)\n  * Added a way to log signals being received using Monolog\\SignalHandler\n  * Added ability to customize error handling at the Logger level using Logger::setExceptionHandler\n  * Added InsightOpsHandler to migrate users of the LogEntriesHandler\n  * Added protection to NormalizerFormatter against circular and very deep structures, it now stops normalizing at a depth of 9\n  * Added capture of stack traces to ErrorHandler when logging PHP errors\n  * Added RavenHandler support for a `contexts` context or extra key to forward that to Sentry's contexts\n  * Added forwarding of context info to FluentdFormatter\n  * Added SocketHandler::setChunkSize to override the default chunk size in case you must send large log lines to rsyslog for example\n  * Added ability to extend/override BrowserConsoleHandler\n  * Added SlackWebhookHandler::getWebhookUrl and SlackHandler::getToken to enable class extensibility\n  * Added SwiftMailerHandler::getSubjectFormatter to enable class extensibility\n  * Dropped official support for HHVM in test builds\n  * Fixed normalization of exception traces when call_user_func is used to avoid serializing objects and the data they contain\n  * Fixed naming of fields in Slack handler, all field names are now capitalized in all cases\n  * Fixed HipChatHandler bug where slack dropped messages randomly\n  * Fixed normalization of objects in Slack handlers\n  * Fixed support for PHP7's Throwable in NewRelicHandler\n  * Fixed race bug when StreamHandler sometimes incorrectly reported it failed to create a directory\n  * Fixed table row styling issues in HtmlFormatter\n  * Fixed RavenHandler dropping the message when logging exception\n  * Fixed WhatFailureGroupHandler skipping processors when using handleBatch\n    and implement it where possible\n  * Fixed display of anonymous class names\n\n### 1.23.0 (2017-06-19)\n\n  * Improved SyslogUdpHandler's support for RFC5424 and added optional `$ident` argument\n  * Fixed GelfHandler truncation to be per field and not per message\n  * Fixed compatibility issue with PHP <5.3.6\n  * Fixed support for headless Chrome in ChromePHPHandler\n  * Fixed support for latest Aws SDK in DynamoDbHandler\n  * Fixed support for SwiftMailer 6.0+ in SwiftMailerHandler\n\n### 1.22.1 (2017-03-13)\n\n  * Fixed lots of minor issues in the new Slack integrations\n  * Fixed support for allowInlineLineBreaks in LineFormatter when formatting exception backtraces\n\n### 1.22.0 (2016-11-26)\n\n  * Added SlackbotHandler and SlackWebhookHandler to set up Slack integration more easily\n  * Added MercurialProcessor to add mercurial revision and branch names to log records\n  * Added support for AWS SDK v3 in DynamoDbHandler\n  * Fixed fatal errors occurring when normalizing generators that have been fully consumed\n  * Fixed RollbarHandler to include a level (rollbar level), monolog_level (original name), channel and datetime (unix)\n  * Fixed RollbarHandler not flushing records automatically, calling close() explicitly is not necessary anymore\n  * Fixed SyslogUdpHandler to avoid sending empty frames\n  * Fixed a few PHP 7.0 and 7.1 compatibility issues\n\n### 1.21.0 (2016-07-29)\n\n  * Break: Reverted the addition of $context when the ErrorHandler handles regular php errors from 1.20.0 as it was causing issues\n  * Added support for more formats in RotatingFileHandler::setFilenameFormat as long as they have Y, m and d in order\n  * Added ability to format the main line of text the SlackHandler sends by explicitly setting a formatter on the handler\n  * Added information about SoapFault instances in NormalizerFormatter\n  * Added $handleOnlyReportedErrors option on ErrorHandler::registerErrorHandler (default true) to allow logging of all errors no matter the error_reporting level\n\n### 1.20.0 (2016-07-02)\n\n  * Added FingersCrossedHandler::activate() to manually trigger the handler regardless of the activation policy\n  * Added StreamHandler::getUrl to retrieve the stream's URL\n  * Added ability to override addRow/addTitle in HtmlFormatter\n  * Added the $context to context information when the ErrorHandler handles a regular php error\n  * Deprecated RotatingFileHandler::setFilenameFormat to only support 3 formats: Y, Y-m and Y-m-d\n  * Fixed WhatFailureGroupHandler to work with PHP7 throwables\n  * Fixed a few minor bugs\n\n### 1.19.0 (2016-04-12)\n\n  * Break: StreamHandler will not close streams automatically that it does not own. If you pass in a stream (not a path/url), then it will not close it for you. You can retrieve those using getStream() if needed\n  * Added DeduplicationHandler to remove duplicate records from notifications across multiple requests, useful for email or other notifications on errors\n  * Added ability to use `%message%` and other LineFormatter replacements in the subject line of emails sent with NativeMailHandler and SwiftMailerHandler\n  * Fixed HipChatHandler handling of long messages\n\n### 1.18.2 (2016-04-02)\n\n  * Fixed ElasticaFormatter to use more precise dates\n  * Fixed GelfMessageFormatter sending too long messages\n\n### 1.18.1 (2016-03-13)\n\n  * Fixed SlackHandler bug where slack dropped messages randomly\n  * Fixed RedisHandler issue when using with the PHPRedis extension\n  * Fixed AmqpHandler content-type being incorrectly set when using with the AMQP extension\n  * Fixed BrowserConsoleHandler regression\n\n### 1.18.0 (2016-03-01)\n\n  * Added optional reduction of timestamp precision via `Logger->useMicrosecondTimestamps(false)`, disabling it gets you a bit of performance boost but reduces the precision to the second instead of microsecond\n  * Added possibility to skip some extra stack frames in IntrospectionProcessor if you have some library wrapping Monolog that is always adding frames\n  * Added `Logger->withName` to clone a logger (keeping all handlers) with a new name\n  * Added FluentdFormatter for the Fluentd unix socket protocol\n  * Added HandlerWrapper base class to ease the creation of handler wrappers, just extend it and override as needed\n  * Added support for replacing context sub-keys using `%context.*%` in LineFormatter\n  * Added support for `payload` context value in RollbarHandler\n  * Added setRelease to RavenHandler to describe the application version, sent with every log\n  * Added support for `fingerprint` context value in RavenHandler\n  * Fixed JSON encoding errors that would gobble up the whole log record, we now handle those more gracefully by dropping chars as needed\n  * Fixed write timeouts in SocketHandler and derivatives, set to 10sec by default, lower it with `setWritingTimeout()`\n  * Fixed PHP7 compatibility with regard to Exception/Throwable handling in a few places\n\n### 1.17.2 (2015-10-14)\n\n  * Fixed ErrorHandler compatibility with non-Monolog PSR-3 loggers\n  * Fixed SlackHandler handling to use slack functionalities better\n  * Fixed SwiftMailerHandler bug when sending multiple emails they all had the same id\n  * Fixed 5.3 compatibility regression\n\n### 1.17.1 (2015-08-31)\n\n  * Fixed RollbarHandler triggering PHP notices\n\n### 1.17.0 (2015-08-30)\n\n  * Added support for `checksum` and `release` context/extra values in RavenHandler\n  * Added better support for exceptions in RollbarHandler\n  * Added UidProcessor::getUid\n  * Added support for showing the resource type in NormalizedFormatter\n  * Fixed IntrospectionProcessor triggering PHP notices\n\n### 1.16.0 (2015-08-09)\n\n  * Added IFTTTHandler to notify ifttt.com triggers\n  * Added Logger::setHandlers() to allow setting/replacing all handlers\n  * Added $capSize in RedisHandler to cap the log size\n  * Fixed StreamHandler creation of directory to only trigger when the first log write happens\n  * Fixed bug in the handling of curl failures\n  * Fixed duplicate logging of fatal errors when both error and fatal error handlers are registered in monolog's ErrorHandler\n  * Fixed missing fatal errors records with handlers that need to be closed to flush log records\n  * Fixed TagProcessor::addTags support for associative arrays\n\n### 1.15.0 (2015-07-12)\n\n  * Added addTags and setTags methods to change a TagProcessor\n  * Added automatic creation of directories if they are missing for a StreamHandler to open a log file\n  * Added retry functionality to Loggly, Cube and Mandrill handlers so they retry up to 5 times in case of network failure\n  * Fixed process exit code being incorrectly reset to 0 if ErrorHandler::registerExceptionHandler was used\n  * Fixed HTML/JS escaping in BrowserConsoleHandler\n  * Fixed JSON encoding errors being silently suppressed (PHP 5.5+ only)\n\n### 1.14.0 (2015-06-19)\n\n  * Added PHPConsoleHandler to send record to Chrome's PHP Console extension and library\n  * Added support for objects implementing __toString in the NormalizerFormatter\n  * Added support for HipChat's v2 API in HipChatHandler\n  * Added Logger::setTimezone() to initialize the timezone monolog should use in case date.timezone isn't correct for your app\n  * Added an option to send formatted message instead of the raw record on PushoverHandler via ->useFormattedMessage(true)\n  * Fixed curl errors being silently suppressed\n\n### 1.13.1 (2015-03-09)\n\n  * Fixed regression in HipChat requiring a new token to be created\n\n### 1.13.0 (2015-03-05)\n\n  * Added Registry::hasLogger to check for the presence of a logger instance\n  * Added context.user support to RavenHandler\n  * Added HipChat API v2 support in the HipChatHandler\n  * Added NativeMailerHandler::addParameter to pass params to the mail() process\n  * Added context data to SlackHandler when $includeContextAndExtra is true\n  * Added ability to customize the Swift_Message per-email in SwiftMailerHandler\n  * Fixed SwiftMailerHandler to lazily create message instances if a callback is provided\n  * Fixed serialization of INF and NaN values in Normalizer and LineFormatter\n\n### 1.12.0 (2014-12-29)\n\n  * Break: HandlerInterface::isHandling now receives a partial record containing only a level key. This was always the intent and does not break any Monolog handler but is strictly speaking a BC break and you should check if you relied on any other field in your own handlers.\n  * Added PsrHandler to forward records to another PSR-3 logger\n  * Added SamplingHandler to wrap around a handler and include only every Nth record\n  * Added MongoDBFormatter to support better storage with MongoDBHandler (it must be enabled manually for now)\n  * Added exception codes in the output of most formatters\n  * Added LineFormatter::includeStacktraces to enable exception stack traces in logs (uses more than one line)\n  * Added $useShortAttachment to SlackHandler to minify attachment size and $includeExtra to append extra data\n  * Added $host to HipChatHandler for users of private instances\n  * Added $transactionName to NewRelicHandler and support for a transaction_name context value\n  * Fixed MandrillHandler to avoid outputting API call responses\n  * Fixed some non-standard behaviors in SyslogUdpHandler\n\n### 1.11.0 (2014-09-30)\n\n  * Break: The NewRelicHandler extra and context data are now prefixed with extra_ and context_ to avoid clashes. Watch out if you have scripts reading those from the API and rely on names\n  * Added WhatFailureGroupHandler to suppress any exception coming from the wrapped handlers and avoid chain failures if a logging service fails\n  * Added MandrillHandler to send emails via the Mandrillapp.com API\n  * Added SlackHandler to log records to a Slack.com account\n  * Added FleepHookHandler to log records to a Fleep.io account\n  * Added LogglyHandler::addTag to allow adding tags to an existing handler\n  * Added $ignoreEmptyContextAndExtra to LineFormatter to avoid empty [] at the end\n  * Added $useLocking to StreamHandler and RotatingFileHandler to enable flock() while writing\n  * Added support for PhpAmqpLib in the AmqpHandler\n  * Added FingersCrossedHandler::clear and BufferHandler::clear to reset them between batches in long running jobs\n  * Added support for adding extra fields from $_SERVER in the WebProcessor\n  * Fixed support for non-string values in PrsLogMessageProcessor\n  * Fixed SwiftMailer messages being sent with the wrong date in long running scripts\n  * Fixed minor PHP 5.6 compatibility issues\n  * Fixed BufferHandler::close being called twice\n\n### 1.10.0 (2014-06-04)\n\n  * Added Logger::getHandlers() and Logger::getProcessors() methods\n  * Added $passthruLevel argument to FingersCrossedHandler to let it always pass some records through even if the trigger level is not reached\n  * Added support for extra data in NewRelicHandler\n  * Added $expandNewlines flag to the ErrorLogHandler to create multiple log entries when a message has multiple lines\n\n### 1.9.1 (2014-04-24)\n\n  * Fixed regression in RotatingFileHandler file permissions\n  * Fixed initialization of the BufferHandler to make sure it gets flushed after receiving records\n  * Fixed ChromePHPHandler and FirePHPHandler's activation strategies to be more conservative\n\n### 1.9.0 (2014-04-20)\n\n  * Added LogEntriesHandler to send logs to a LogEntries account\n  * Added $filePermissions to tweak file mode on StreamHandler and RotatingFileHandler\n  * Added $useFormatting flag to MemoryProcessor to make it send raw data in bytes\n  * Added support for table formatting in FirePHPHandler via the table context key\n  * Added a TagProcessor to add tags to records, and support for tags in RavenHandler\n  * Added $appendNewline flag to the JsonFormatter to enable using it when logging to files\n  * Added sound support to the PushoverHandler\n  * Fixed multi-threading support in StreamHandler\n  * Fixed empty headers issue when ChromePHPHandler received no records\n  * Fixed default format of the ErrorLogHandler\n\n### 1.8.0 (2014-03-23)\n\n  * Break: the LineFormatter now strips newlines by default because this was a bug, set $allowInlineLineBreaks to true if you need them\n  * Added BrowserConsoleHandler to send logs to any browser's console via console.log() injection in the output\n  * Added FilterHandler to filter records and only allow those of a given list of levels through to the wrapped handler\n  * Added FlowdockHandler to send logs to a Flowdock account\n  * Added RollbarHandler to send logs to a Rollbar account\n  * Added HtmlFormatter to send prettier log emails with colors for each log level\n  * Added GitProcessor to add the current branch/commit to extra record data\n  * Added a Monolog\\Registry class to allow easier global access to pre-configured loggers\n  * Added support for the new official graylog2/gelf-php lib for GelfHandler, upgrade if you can by replacing the mlehner/gelf-php requirement\n  * Added support for HHVM\n  * Added support for Loggly batch uploads\n  * Added support for tweaking the content type and encoding in NativeMailerHandler\n  * Added $skipClassesPartials to tweak the ignored classes in the IntrospectionProcessor\n  * Fixed batch request support in GelfHandler\n\n### 1.7.0 (2013-11-14)\n\n  * Added ElasticSearchHandler to send logs to an Elastic Search server\n  * Added DynamoDbHandler and ScalarFormatter to send logs to Amazon's Dynamo DB\n  * Added SyslogUdpHandler to send logs to a remote syslogd server\n  * Added LogglyHandler to send logs to a Loggly account\n  * Added $level to IntrospectionProcessor so it only adds backtraces when needed\n  * Added $version to LogstashFormatter to allow using the new v1 Logstash format\n  * Added $appName to NewRelicHandler\n  * Added configuration of Pushover notification retries/expiry\n  * Added $maxColumnWidth to NativeMailerHandler to change the 70 chars default\n  * Added chainability to most setters for all handlers\n  * Fixed RavenHandler batch processing so it takes the message from the record with highest priority\n  * Fixed HipChatHandler batch processing so it sends all messages at once\n  * Fixed issues with eAccelerator\n  * Fixed and improved many small things\n\n### 1.6.0 (2013-07-29)\n\n  * Added HipChatHandler to send logs to a HipChat chat room\n  * Added ErrorLogHandler to send logs to PHP's error_log function\n  * Added NewRelicHandler to send logs to NewRelic's service\n  * Added Monolog\\ErrorHandler helper class to register a Logger as exception/error/fatal handler\n  * Added ChannelLevelActivationStrategy for the FingersCrossedHandler to customize levels by channel\n  * Added stack traces output when normalizing exceptions (json output & co)\n  * Added Monolog\\Logger::API constant (currently 1)\n  * Added support for ChromePHP's v4.0 extension\n  * Added support for message priorities in PushoverHandler, see $highPriorityLevel and $emergencyLevel\n  * Added support for sending messages to multiple users at once with the PushoverHandler\n  * Fixed RavenHandler's support for batch sending of messages (when behind a Buffer or FingersCrossedHandler)\n  * Fixed normalization of Traversables with very large data sets, only the first 1000 items are shown now\n  * Fixed issue in RotatingFileHandler when an open_basedir restriction is active\n  * Fixed minor issues in RavenHandler and bumped the API to Raven 0.5.0\n  * Fixed SyslogHandler issue when many were used concurrently with different facilities\n\n### 1.5.0 (2013-04-23)\n\n  * Added ProcessIdProcessor to inject the PID in log records\n  * Added UidProcessor to inject a unique identifier to all log records of one request/run\n  * Added support for previous exceptions in the LineFormatter exception serialization\n  * Added Monolog\\Logger::getLevels() to get all available levels\n  * Fixed ChromePHPHandler so it avoids sending headers larger than Chrome can handle\n\n### 1.4.1 (2013-04-01)\n\n  * Fixed exception formatting in the LineFormatter to be more minimalistic\n  * Fixed RavenHandler's handling of context/extra data, requires Raven client >0.1.0\n  * Fixed log rotation in RotatingFileHandler to work with long running scripts spanning multiple days\n  * Fixed WebProcessor array access so it checks for data presence\n  * Fixed Buffer, Group and FingersCrossed handlers to make use of their processors\n\n### 1.4.0 (2013-02-13)\n\n  * Added RedisHandler to log to Redis via the Predis library or the phpredis extension\n  * Added ZendMonitorHandler to log to the Zend Server monitor\n  * Added the possibility to pass arrays of handlers and processors directly in the Logger constructor\n  * Added `$useSSL` option to the PushoverHandler which is enabled by default\n  * Fixed ChromePHPHandler and FirePHPHandler issue when multiple instances are used simultaneously\n  * Fixed header injection capability in the NativeMailHandler\n\n### 1.3.1 (2013-01-11)\n\n  * Fixed LogstashFormatter to be usable with stream handlers\n  * Fixed GelfMessageFormatter levels on Windows\n\n### 1.3.0 (2013-01-08)\n\n  * Added PSR-3 compliance, the `Monolog\\Logger` class is now an instance of `Psr\\Log\\LoggerInterface`\n  * Added PsrLogMessageProcessor that you can selectively enable for full PSR-3 compliance\n  * Added LogstashFormatter (combine with SocketHandler or StreamHandler to send logs to Logstash)\n  * Added PushoverHandler to send mobile notifications\n  * Added CouchDBHandler and DoctrineCouchDBHandler\n  * Added RavenHandler to send data to Sentry servers\n  * Added support for the new MongoClient class in MongoDBHandler\n  * Added microsecond precision to log records' timestamps\n  * Added `$flushOnOverflow` param to BufferHandler to flush by batches instead of losing\n    the oldest entries\n  * Fixed normalization of objects with cyclic references\n\n### 1.2.1 (2012-08-29)\n\n  * Added new $logopts arg to SyslogHandler to provide custom openlog options\n  * Fixed fatal error in SyslogHandler\n\n### 1.2.0 (2012-08-18)\n\n  * Added AmqpHandler (for use with AMQP servers)\n  * Added CubeHandler\n  * Added NativeMailerHandler::addHeader() to send custom headers in mails\n  * Added the possibility to specify more than one recipient in NativeMailerHandler\n  * Added the possibility to specify float timeouts in SocketHandler\n  * Added NOTICE and EMERGENCY levels to conform with RFC 5424\n  * Fixed the log records to use the php default timezone instead of UTC\n  * Fixed BufferHandler not being flushed properly on PHP fatal errors\n  * Fixed normalization of exotic resource types\n  * Fixed the default format of the SyslogHandler to avoid duplicating datetimes in syslog\n\n### 1.1.0 (2012-04-23)\n\n  * Added Monolog\\Logger::isHandling() to check if a handler will\n    handle the given log level\n  * Added ChromePHPHandler\n  * Added MongoDBHandler\n  * Added GelfHandler (for use with Graylog2 servers)\n  * Added SocketHandler (for use with syslog-ng for example)\n  * Added NormalizerFormatter\n  * Added the possibility to change the activation strategy of the FingersCrossedHandler\n  * Added possibility to show microseconds in logs\n  * Added `server` and `referer` to WebProcessor output\n\n### 1.0.2 (2011-10-24)\n\n  * Fixed bug in IE with large response headers and FirePHPHandler\n\n### 1.0.1 (2011-08-25)\n\n  * Added MemoryPeakUsageProcessor and MemoryUsageProcessor\n  * Added Monolog\\Logger::getName() to get a logger's channel name\n\n### 1.0.0 (2011-07-06)\n\n  * Added IntrospectionProcessor to get info from where the logger was called\n  * Fixed WebProcessor in CLI\n\n### 1.0.0-RC1 (2011-07-01)\n\n  * Initial release\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/UPGRADE.md","ext":"md","size":2911,"mtime":1756373563,"type":"text","content":"### 2.0.0\n\n- `Monolog\\Logger::API` can be used to distinguish between a Monolog `1` and `2`\n  install of Monolog when writing integration code.\n\n- Removed non-PSR-3 methods to add records, all the `add*` (e.g. `addWarning`)\n  methods as well as `emerg`, `crit`, `err` and `warn`.\n\n- DateTime are now formatted with a timezone and microseconds (unless disabled).\n  Various formatters and log output might be affected, which may mess with log parsing\n  in some cases.\n\n- The `datetime` in every record array is now a DateTimeImmutable, not that you\n  should have been modifying these anyway.\n\n- The timezone is now set per Logger instance and not statically, either\n  via ->setTimezone or passed in the constructor. Calls to Logger::setTimezone\n  should be converted.\n\n- `HandlerInterface` has been split off and two new interfaces now exist for\n  more granular controls: `ProcessableHandlerInterface` and\n  `FormattableHandlerInterface`. Handlers not extending `AbstractHandler`\n  should make sure to implement the relevant interfaces.\n\n- `HandlerInterface` now requires the `close` method to be implemented. This\n  only impacts you if you implement the interface yourself, but you can extend\n  the new `Monolog\\Handler\\Handler` base class too.\n\n- There is no more default handler configured on empty Logger instances, if\n  you were relying on that you will not get any output anymore, make sure to\n  configure the handler you need.\n\n#### LogglyFormatter\n\n- The records' `datetime` is not sent anymore. Only `timestamp` is sent to Loggly.\n\n#### AmqpHandler\n\n- Log levels are not shortened to 4 characters anymore. e.g. a warning record\n  will be sent using the `warning.channel` routing key instead of `warn.channel`\n  as in 1.x.\n- The exchange name does not default to 'log' anymore, and it is completely ignored\n  now for the AMQP extension users. Only PHPAmqpLib uses it if provided.\n\n#### RotatingFileHandler\n\n- The file name format must now contain `{date}` and the date format must be set\n  to one of the predefined FILE_PER_* constants to avoid issues with file rotation.\n  See `setFilenameFormat`.\n\n#### LogstashFormatter\n\n- Removed Logstash V0 support\n- Context/extra prefix has been removed in favor of letting users configure the exact key being sent\n- Context/extra data are now sent as an object instead of single keys\n\n#### HipChatHandler\n\n- Removed deprecated HipChat handler, migrate to Slack and use SlackWebhookHandler or SlackHandler instead\n\n#### SlackbotHandler\n\n- Removed deprecated SlackbotHandler handler, use SlackWebhookHandler or SlackHandler instead\n\n#### RavenHandler\n\n- Removed deprecated RavenHandler handler, use sentry/sentry 2.x and their Sentry\\Monolog\\Handler instead\n\n#### ElasticSearchHandler\n\n- As support for the official Elasticsearch library was added, the former ElasticSearchHandler has been\n  renamed to ElasticaHandler and the new one added as ElasticsearchHandler.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/DateTimeImmutable.php","ext":"php","size":1265,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse DateTimeZone;\n\n/**\n * Overrides default json encoding of date time objects\n *\n * @author Menno Holtkamp\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass DateTimeImmutable extends \\DateTimeImmutable implements \\JsonSerializable\n{\n    /**\n     * @var bool\n     */\n    private $useMicroseconds;\n\n    public function __construct(bool $useMicroseconds, ?DateTimeZone $timezone = null)\n    {\n        $this->useMicroseconds = $useMicroseconds;\n\n        // if you like to use a custom time to pass to Logger::addRecord directly,\n        // call modify() or setTimestamp() on this instance to change the date after creating it\n        parent::__construct('now', $timezone);\n    }\n\n    public function jsonSerialize(): string\n    {\n        if ($this->useMicroseconds) {\n            return $this->format('Y-m-d\\TH:i:s.uP');\n        }\n\n        return $this->format('Y-m-d\\TH:i:sP');\n    }\n\n    public function __toString(): string\n    {\n        return $this->jsonSerialize();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Registry.php","ext":"php","size":4002,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse InvalidArgumentException;\n\n/**\n * Monolog log registry\n *\n * Allows to get `Logger` instances in the global scope\n * via static method calls on this class.\n *\n * <code>\n * $application = new Monolog\\Logger('application');\n * $api = new Monolog\\Logger('api');\n *\n * Monolog\\Registry::addLogger($application);\n * Monolog\\Registry::addLogger($api);\n *\n * function testLogger()\n * {\n *     Monolog\\Registry::api()->error('Sent to $api Logger instance');\n *     Monolog\\Registry::application()->error('Sent to $application Logger instance');\n * }\n * </code>\n *\n * @author Tomas Tatarko <tomas@tatarko.sk>\n */\nclass Registry\n{\n    /**\n     * List of all loggers in the registry (by named indexes)\n     *\n     * @var Logger[]\n     */\n    private static $loggers = [];\n\n    /**\n     * Adds new logging channel to the registry\n     *\n     * @param  Logger                    $logger    Instance of the logging channel\n     * @param  string|null               $name      Name of the logging channel ($logger->getName() by default)\n     * @param  bool                      $overwrite Overwrite instance in the registry if the given name already exists?\n     * @throws \\InvalidArgumentException If $overwrite set to false and named Logger instance already exists\n     * @return void\n     */\n    public static function addLogger(Logger $logger, ?string $name = null, bool $overwrite = false)\n    {\n        $name = $name ?: $logger->getName();\n\n        if (isset(self::$loggers[$name]) && !$overwrite) {\n            throw new InvalidArgumentException('Logger with the given name already exists');\n        }\n\n        self::$loggers[$name] = $logger;\n    }\n\n    /**\n     * Checks if such logging channel exists by name or instance\n     *\n     * @param string|Logger $logger Name or logger instance\n     */\n    public static function hasLogger($logger): bool\n    {\n        if ($logger instanceof Logger) {\n            $index = array_search($logger, self::$loggers, true);\n\n            return false !== $index;\n        }\n\n        return isset(self::$loggers[$logger]);\n    }\n\n    /**\n     * Removes instance from registry by name or instance\n     *\n     * @param string|Logger $logger Name or logger instance\n     */\n    public static function removeLogger($logger): void\n    {\n        if ($logger instanceof Logger) {\n            if (false !== ($idx = array_search($logger, self::$loggers, true))) {\n                unset(self::$loggers[$idx]);\n            }\n        } else {\n            unset(self::$loggers[$logger]);\n        }\n    }\n\n    /**\n     * Clears the registry\n     */\n    public static function clear(): void\n    {\n        self::$loggers = [];\n    }\n\n    /**\n     * Gets Logger instance from the registry\n     *\n     * @param  string                    $name Name of the requested Logger instance\n     * @throws \\InvalidArgumentException If named Logger instance is not in the registry\n     */\n    public static function getInstance($name): Logger\n    {\n        if (!isset(self::$loggers[$name])) {\n            throw new InvalidArgumentException(sprintf('Requested \"%s\" logger instance is not in the registry', $name));\n        }\n\n        return self::$loggers[$name];\n    }\n\n    /**\n     * Gets Logger instance from the registry via static method call\n     *\n     * @param  string                    $name      Name of the requested Logger instance\n     * @param  mixed[]                   $arguments Arguments passed to static method call\n     * @throws \\InvalidArgumentException If named Logger instance is not in the registry\n     * @return Logger                    Requested instance of Logger\n     */\n    public static function __callStatic($name, $arguments)\n    {\n        return self::getInstance($name);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Test/TestCase.php","ext":"php","size":2414,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Test;\n\nuse Monolog\\Logger;\nuse Monolog\\DateTimeImmutable;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Lets you easily generate log records and a dummy formatter for testing purposes\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n *\n * @internal feel free to reuse this to test your own handlers, this is marked internal to avoid issues with PHPStorm https://github.com/Seldaek/monolog/issues/1677\n */\nclass TestCase extends \\PHPUnit\\Framework\\TestCase\n{\n    public function tearDown(): void\n    {\n        parent::tearDown();\n\n        if (isset($this->handler)) {\n            unset($this->handler);\n        }\n    }\n\n    /**\n     * @param mixed[] $context\n     *\n     * @return array Record\n     *\n     * @phpstan-param  Level $level\n     * @phpstan-return Record\n     */\n    protected function getRecord(int $level = Logger::WARNING, string $message = 'test', array $context = []): array\n    {\n        return [\n            'message' => (string) $message,\n            'context' => $context,\n            'level' => $level,\n            'level_name' => Logger::getLevelName($level),\n            'channel' => 'test',\n            'datetime' => new DateTimeImmutable(true),\n            'extra' => [],\n        ];\n    }\n\n    /**\n     * @phpstan-return Record[]\n     */\n    protected function getMultipleRecords(): array\n    {\n        return [\n            $this->getRecord(Logger::DEBUG, 'debug message 1'),\n            $this->getRecord(Logger::DEBUG, 'debug message 2'),\n            $this->getRecord(Logger::INFO, 'information'),\n            $this->getRecord(Logger::WARNING, 'warning'),\n            $this->getRecord(Logger::ERROR, 'error'),\n        ];\n    }\n\n    protected function getIdentityFormatter(): FormatterInterface\n    {\n        $formatter = $this->createMock(FormatterInterface::class);\n        $formatter->expects($this->any())\n            ->method('format')\n            ->will($this->returnCallback(function ($record) {\n                return $record['message'];\n            }));\n\n        return $formatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/ResettableInterface.php","ext":"php","size":1004,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\n/**\n * Handler or Processor implementing this interface will be reset when Logger::reset() is called.\n *\n * Resetting ends a log cycle gets them back to their initial state.\n *\n * Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal\n * state, and getting it back to a state in which it can receive log records again.\n *\n * This is useful in case you want to avoid logs leaking between two requests or jobs when you\n * have a long running process like a worker or an application server serving multiple requests\n * in one process.\n *\n * @author Grégoire Pineau <lyrixx@lyrixx.info>\n */\ninterface ResettableInterface\n{\n    /**\n     * @return void\n     */\n    public function reset();\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SamplingHandler.php","ext":"php","size":4339,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Sampling handler\n *\n * A sampled event stream can be useful for logging high frequency events in\n * a production environment where you only need an idea of what is happening\n * and are not concerned with capturing every occurrence. Since the decision to\n * handle or not handle a particular event is determined randomly, the\n * resulting sampled log is not guaranteed to contain 1/N of the events that\n * occurred in the application, but based on the Law of large numbers, it will\n * tend to be close to this ratio with a large number of attempts.\n *\n * @author Bryan Davis <bd808@wikimedia.org>\n * @author Kunal Mehta <legoktm@gmail.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nclass SamplingHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface\n{\n    use ProcessableHandlerTrait;\n\n    /**\n     * @var HandlerInterface|callable\n     * @phpstan-var HandlerInterface|callable(Record|array{level: Level}|null, HandlerInterface): HandlerInterface\n     */\n    protected $handler;\n\n    /**\n     * @var int $factor\n     */\n    protected $factor;\n\n    /**\n     * @psalm-param HandlerInterface|callable(Record|array{level: Level}|null, HandlerInterface): HandlerInterface $handler\n     *\n     * @param callable|HandlerInterface $handler Handler or factory callable($record|null, $samplingHandler).\n     * @param int                       $factor  Sample factor (e.g. 10 means every ~10th record is sampled)\n     */\n    public function __construct($handler, int $factor)\n    {\n        parent::__construct();\n        $this->handler = $handler;\n        $this->factor = $factor;\n\n        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {\n            throw new \\RuntimeException(\"The given handler (\".json_encode($this->handler).\") is not a callable nor a Monolog\\Handler\\HandlerInterface object\");\n        }\n    }\n\n    public function isHandling(array $record): bool\n    {\n        return $this->getHandler($record)->isHandling($record);\n    }\n\n    public function handle(array $record): bool\n    {\n        if ($this->isHandling($record) && mt_rand(1, $this->factor) === 1) {\n            if ($this->processors) {\n                /** @var Record $record */\n                $record = $this->processRecord($record);\n            }\n\n            $this->getHandler($record)->handle($record);\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @phpstan-param Record|array{level: Level}|null $record\n     *\n     * @return HandlerInterface\n     */\n    public function getHandler(?array $record = null)\n    {\n        if (!$this->handler instanceof HandlerInterface) {\n            $this->handler = ($this->handler)($record, $this);\n            if (!$this->handler instanceof HandlerInterface) {\n                throw new \\RuntimeException(\"The factory callable should return a HandlerInterface\");\n            }\n        }\n\n        return $this->handler;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            $handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            return $handler->getFormatter();\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/LogEntriesHandler.php","ext":"php","size":1925,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * @author Robert Kaufmann III <rok3@rok3.me>\n */\nclass LogEntriesHandler extends SocketHandler\n{\n    /**\n     * @var string\n     */\n    protected $logToken;\n\n    /**\n     * @param string     $token  Log token supplied by LogEntries\n     * @param bool       $useSSL Whether or not SSL encryption should be used.\n     * @param string     $host   Custom hostname to send the data to if needed\n     *\n     * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing\n     */\n    public function __construct(\n        string $token,\n        bool $useSSL = true,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        string $host = 'data.logentries.com',\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if ($useSSL && !extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP plugin is required to use SSL encrypted connection for LogEntriesHandler');\n        }\n\n        $endpoint = $useSSL ? 'ssl://' . $host . ':443' : $host . ':80';\n        parent::__construct(\n            $endpoint,\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n        $this->logToken = $token;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        return $this->logToken . ' ' . $record['formatted'];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/StreamHandler.php","ext":"php","size":8334,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Stores to any stream resource\n *\n * Can be used to store into php://stderr, remote and local files, etc.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass StreamHandler extends AbstractProcessingHandler\n{\n    /** @const int */\n    protected const MAX_CHUNK_SIZE = 2147483647;\n    /** @const int 10MB */\n    protected const DEFAULT_CHUNK_SIZE = 10 * 1024 * 1024;\n    /** @var int */\n    protected $streamChunkSize;\n    /** @var resource|null */\n    protected $stream;\n    /** @var ?string */\n    protected $url = null;\n    /** @var ?string */\n    private $errorMessage = null;\n    /** @var ?int */\n    protected $filePermission;\n    /** @var bool */\n    protected $useLocking;\n\t/** @var string */\n    protected $fileOpenMode;\n    /** @var true|null */\n    private $dirCreated = null;\n    /** @var bool */\n    private $retrying = false;\n\n    /**\n     * @param resource|string $stream         If a missing path can't be created, an UnexpectedValueException will be thrown on first write\n     * @param int|null        $filePermission Optional file permissions (default (0644) are only for owner read/write)\n     * @param bool            $useLocking     Try to lock log file before doing any writes\n     * @param string          $fileOpenMode   The fopen() mode used when opening a file, if $stream is a file path\n     *\n     * @throws \\InvalidArgumentException If stream is not a resource or string\n     */\n    public function __construct($stream, $level = Logger::DEBUG, bool $bubble = true, ?int $filePermission = null, bool $useLocking = false, $fileOpenMode = 'a')\n    {\n        parent::__construct($level, $bubble);\n\n        if (($phpMemoryLimit = Utils::expandIniShorthandBytes(ini_get('memory_limit'))) !== false) {\n            if ($phpMemoryLimit > 0) {\n                // use max 10% of allowed memory for the chunk size, and at least 100KB\n                $this->streamChunkSize = min(static::MAX_CHUNK_SIZE, max((int) ($phpMemoryLimit / 10), 100 * 1024));\n            } else {\n                // memory is unlimited, set to the default 10MB\n                $this->streamChunkSize = static::DEFAULT_CHUNK_SIZE;\n            }\n        } else {\n            // no memory limit information, set to the default 10MB\n            $this->streamChunkSize = static::DEFAULT_CHUNK_SIZE;\n        }\n\n        if (is_resource($stream)) {\n            $this->stream = $stream;\n\n            stream_set_chunk_size($this->stream, $this->streamChunkSize);\n        } elseif (is_string($stream)) {\n            $this->url = Utils::canonicalizePath($stream);\n        } else {\n            throw new \\InvalidArgumentException('A stream must either be a resource or a string.');\n        }\n\n        $this->fileOpenMode = $fileOpenMode;\n        $this->filePermission = $filePermission;\n        $this->useLocking = $useLocking;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        if ($this->url && is_resource($this->stream)) {\n            fclose($this->stream);\n        }\n        $this->stream = null;\n        $this->dirCreated = null;\n    }\n\n    /**\n     * Return the currently active stream if it is open\n     *\n     * @return resource|null\n     */\n    public function getStream()\n    {\n        return $this->stream;\n    }\n\n    /**\n     * Return the stream URL if it was configured with a URL and not an active resource\n     *\n     * @return string|null\n     */\n    public function getUrl(): ?string\n    {\n        return $this->url;\n    }\n\n    /**\n     * @return int\n     */\n    public function getStreamChunkSize(): int\n    {\n        return $this->streamChunkSize;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!is_resource($this->stream)) {\n            $url = $this->url;\n            if (null === $url || '' === $url) {\n                throw new \\LogicException('Missing stream url, the stream can not be opened. This may be caused by a premature call to close().' . Utils::getRecordMessageForException($record));\n            }\n            $this->createDir($url);\n            $this->errorMessage = null;\n            set_error_handler(function (...$args) {\n                return $this->customErrorHandler(...$args);\n            });\n            try {\n                $stream = fopen($url, $this->fileOpenMode);\n                if ($this->filePermission !== null) {\n                    @chmod($url, $this->filePermission);\n                }\n            } finally {\n                restore_error_handler();\n            }\n            if (!is_resource($stream)) {\n                $this->stream = null;\n\n                throw new \\UnexpectedValueException(sprintf('The stream or file \"%s\" could not be opened in append mode: '.$this->errorMessage, $url) . Utils::getRecordMessageForException($record));\n            }\n            stream_set_chunk_size($stream, $this->streamChunkSize);\n            $this->stream = $stream;\n        }\n\n        $stream = $this->stream;\n        if (!is_resource($stream)) {\n            throw new \\LogicException('No stream was opened yet' . Utils::getRecordMessageForException($record));\n        }\n\n        if ($this->useLocking) {\n            // ignoring errors here, there's not much we can do about them\n            flock($stream, LOCK_EX);\n        }\n\n        $this->errorMessage = null;\n        set_error_handler(function (...$args) {\n            return $this->customErrorHandler(...$args);\n        });\n        try {\n            $this->streamWrite($stream, $record);\n        } finally {\n            restore_error_handler();\n        }\n        if ($this->errorMessage !== null) {\n            $error = $this->errorMessage;\n            // close the resource if possible to reopen it, and retry the failed write\n            if (!$this->retrying && $this->url !== null && $this->url !== 'php://memory') {\n                $this->retrying = true;\n                $this->close();\n                $this->write($record);\n\n                return;\n            }\n\n            throw new \\UnexpectedValueException('Writing to the log file failed: '.$error . Utils::getRecordMessageForException($record));\n        }\n\n        $this->retrying = false;\n        if ($this->useLocking) {\n            flock($stream, LOCK_UN);\n        }\n    }\n\n    /**\n     * Write to stream\n     * @param resource $stream\n     * @param array    $record\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    protected function streamWrite($stream, array $record): void\n    {\n        fwrite($stream, (string) $record['formatted']);\n    }\n\n    private function customErrorHandler(int $code, string $msg): bool\n    {\n        $this->errorMessage = preg_replace('{^(fopen|mkdir|fwrite)\\(.*?\\): }', '', $msg);\n\n        return true;\n    }\n\n    private function getDirFromStream(string $stream): ?string\n    {\n        $pos = strpos($stream, '://');\n        if ($pos === false) {\n            return dirname($stream);\n        }\n\n        if ('file://' === substr($stream, 0, 7)) {\n            return dirname(substr($stream, 7));\n        }\n\n        return null;\n    }\n\n    private function createDir(string $url): void\n    {\n        // Do not try to create dir if it has already been tried.\n        if ($this->dirCreated) {\n            return;\n        }\n\n        $dir = $this->getDirFromStream($url);\n        if (null !== $dir && !is_dir($dir)) {\n            $this->errorMessage = null;\n            set_error_handler(function (...$args) {\n                return $this->customErrorHandler(...$args);\n            });\n            $status = mkdir($dir, 0777, true);\n            restore_error_handler();\n            if (false === $status && !is_dir($dir) && strpos((string) $this->errorMessage, 'File exists') === false) {\n                throw new \\UnexpectedValueException(sprintf('There is no existing directory at \"%s\" and it could not be created: '.$this->errorMessage, $dir));\n            }\n        }\n        $this->dirCreated = true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ErrorLevelActivationStrategy.php","ext":"php","size":1102,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\FingersCrossed;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Error level based activation strategy.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass ErrorLevelActivationStrategy implements ActivationStrategyInterface\n{\n    /**\n     * @var Level\n     */\n    private $actionLevel;\n\n    /**\n     * @param int|string $actionLevel Level or name or value\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $actionLevel\n     */\n    public function __construct($actionLevel)\n    {\n        $this->actionLevel = Logger::toMonologLevel($actionLevel);\n    }\n\n    public function isHandlerActivated(array $record): bool\n    {\n        return $record['level'] >= $this->actionLevel;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ChannelLevelActivationStrategy.php","ext":"php","size":2460,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\FingersCrossed;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Channel and Error level based monolog activation strategy. Allows to trigger activation\n * based on level per channel. e.g. trigger activation on level 'ERROR' by default, except\n * for records of the 'sql' channel; those should trigger activation on level 'WARN'.\n *\n * Example:\n *\n * <code>\n *   $activationStrategy = new ChannelLevelActivationStrategy(\n *       Logger::CRITICAL,\n *       array(\n *           'request' => Logger::ALERT,\n *           'sensitive' => Logger::ERROR,\n *       )\n *   );\n *   $handler = new FingersCrossedHandler(new StreamHandler('php://stderr'), $activationStrategy);\n * </code>\n *\n * @author Mike Meessen <netmikey@gmail.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass ChannelLevelActivationStrategy implements ActivationStrategyInterface\n{\n    /**\n     * @var Level\n     */\n    private $defaultActionLevel;\n\n    /**\n     * @var array<string, Level>\n     */\n    private $channelToActionLevel;\n\n    /**\n     * @param int|string         $defaultActionLevel   The default action level to be used if the record's category doesn't match any\n     * @param array<string, int> $channelToActionLevel An array that maps channel names to action levels.\n     *\n     * @phpstan-param array<string, Level>        $channelToActionLevel\n     * @phpstan-param Level|LevelName|LogLevel::* $defaultActionLevel\n     */\n    public function __construct($defaultActionLevel, array $channelToActionLevel = [])\n    {\n        $this->defaultActionLevel = Logger::toMonologLevel($defaultActionLevel);\n        $this->channelToActionLevel = array_map('Monolog\\Logger::toMonologLevel', $channelToActionLevel);\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    public function isHandlerActivated(array $record): bool\n    {\n        if (isset($this->channelToActionLevel[$record['channel']])) {\n            return $record['level'] >= $this->channelToActionLevel[$record['channel']];\n        }\n\n        return $record['level'] >= $this->defaultActionLevel;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossed/ActivationStrategyInterface.php","ext":"php","size":720,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\FingersCrossed;\n\n/**\n * Interface for activation strategies for the FingersCrossedHandler.\n *\n * @author Johannes M. Schmitt <schmittjoh@gmail.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\ninterface ActivationStrategyInterface\n{\n    /**\n     * Returns whether the given record activates the handler.\n     *\n     * @phpstan-param Record $record\n     */\n    public function isHandlerActivated(array $record): bool;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/BufferHandler.php","ext":"php","size":4644,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\ResettableInterface;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Buffers all records until closing the handler and then pass them as batch.\n *\n * This is useful for a MailHandler to send only one mail per request instead of\n * sending one per log message.\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass BufferHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface\n{\n    use ProcessableHandlerTrait;\n\n    /** @var HandlerInterface */\n    protected $handler;\n    /** @var int */\n    protected $bufferSize = 0;\n    /** @var int */\n    protected $bufferLimit;\n    /** @var bool */\n    protected $flushOnOverflow;\n    /** @var Record[] */\n    protected $buffer = [];\n    /** @var bool */\n    protected $initialized = false;\n\n    /**\n     * @param HandlerInterface $handler         Handler.\n     * @param int              $bufferLimit     How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.\n     * @param bool             $flushOnOverflow If true, the buffer is flushed when the max size has been reached, by default oldest entries are discarded\n     */\n    public function __construct(HandlerInterface $handler, int $bufferLimit = 0, $level = Logger::DEBUG, bool $bubble = true, bool $flushOnOverflow = false)\n    {\n        parent::__construct($level, $bubble);\n        $this->handler = $handler;\n        $this->bufferLimit = $bufferLimit;\n        $this->flushOnOverflow = $flushOnOverflow;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($record['level'] < $this->level) {\n            return false;\n        }\n\n        if (!$this->initialized) {\n            // __destructor() doesn't get called on Fatal errors\n            register_shutdown_function([$this, 'close']);\n            $this->initialized = true;\n        }\n\n        if ($this->bufferLimit > 0 && $this->bufferSize === $this->bufferLimit) {\n            if ($this->flushOnOverflow) {\n                $this->flush();\n            } else {\n                array_shift($this->buffer);\n                $this->bufferSize--;\n            }\n        }\n\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        $this->buffer[] = $record;\n        $this->bufferSize++;\n\n        return false === $this->bubble;\n    }\n\n    public function flush(): void\n    {\n        if ($this->bufferSize === 0) {\n            return;\n        }\n\n        $this->handler->handleBatch($this->buffer);\n        $this->clear();\n    }\n\n    public function __destruct()\n    {\n        // suppress the parent behavior since we already have register_shutdown_function()\n        // to call close(), and the reference contained there will prevent this from being\n        // GC'd until the end of the request\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        $this->flush();\n\n        $this->handler->close();\n    }\n\n    /**\n     * Clears the buffer without flushing any messages down to the wrapped handler.\n     */\n    public function clear(): void\n    {\n        $this->bufferSize = 0;\n        $this->buffer = [];\n    }\n\n    public function reset()\n    {\n        $this->flush();\n\n        parent::reset();\n\n        $this->resetProcessors();\n\n        if ($this->handler instanceof ResettableInterface) {\n            $this->handler->reset();\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            $this->handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($this->handler).' does not support formatters.');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            return $this->handler->getFormatter();\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($this->handler).' does not support formatters.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/AmqpHandler.php","ext":"php","size":5101,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\JsonFormatter;\nuse PhpAmqpLib\\Message\\AMQPMessage;\nuse PhpAmqpLib\\Channel\\AMQPChannel;\nuse AMQPExchange;\n\n/**\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass AmqpHandler extends AbstractProcessingHandler\n{\n    /**\n     * @var AMQPExchange|AMQPChannel $exchange\n     */\n    protected $exchange;\n    /** @var array<string, mixed> */\n    private $extraAttributes = [];\n\n    /**\n     * @return array<string, mixed>\n     */\n    public function getExtraAttributes(): array\n    {\n        return $this->extraAttributes;\n    }\n\n    /**\n     * Configure extra attributes to pass to the AMQPExchange (if you are using the amqp extension)\n     *\n     * @param array<string, mixed> $extraAttributes  One of content_type, content_encoding,\n     *                                               message_id, user_id, app_id, delivery_mode,\n     *                                               priority, timestamp, expiration, type\n     *                                               or reply_to, headers.\n     * @return AmqpHandler\n     */\n    public function setExtraAttributes(array $extraAttributes): self\n    {\n        $this->extraAttributes = $extraAttributes;\n        return $this;\n    }\n\n    /**\n     * @var string\n     */\n    protected $exchangeName;\n\n    /**\n     * @param AMQPExchange|AMQPChannel $exchange     AMQPExchange (php AMQP ext) or PHP AMQP lib channel, ready for use\n     * @param string|null              $exchangeName Optional exchange name, for AMQPChannel (PhpAmqpLib) only\n     */\n    public function __construct($exchange, ?string $exchangeName = null, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if ($exchange instanceof AMQPChannel) {\n            $this->exchangeName = (string) $exchangeName;\n        } elseif (!$exchange instanceof AMQPExchange) {\n            throw new \\InvalidArgumentException('PhpAmqpLib\\Channel\\AMQPChannel or AMQPExchange instance required');\n        } elseif ($exchangeName) {\n            @trigger_error('The $exchangeName parameter can only be passed when using PhpAmqpLib, if using an AMQPExchange instance configure it beforehand', E_USER_DEPRECATED);\n        }\n        $this->exchange = $exchange;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $data = $record[\"formatted\"];\n        $routingKey = $this->getRoutingKey($record);\n\n        if ($this->exchange instanceof AMQPExchange) {\n            $attributes = [\n                'delivery_mode' => 2,\n                'content_type'  => 'application/json',\n            ];\n            if ($this->extraAttributes) {\n                $attributes = array_merge($attributes, $this->extraAttributes);\n            }\n            $this->exchange->publish(\n                $data,\n                $routingKey,\n                0,\n                $attributes\n            );\n        } else {\n            $this->exchange->basic_publish(\n                $this->createAmqpMessage($data),\n                $this->exchangeName,\n                $routingKey\n            );\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        if ($this->exchange instanceof AMQPExchange) {\n            parent::handleBatch($records);\n\n            return;\n        }\n\n        foreach ($records as $record) {\n            if (!$this->isHandling($record)) {\n                continue;\n            }\n\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n            $data = $this->getFormatter()->format($record);\n\n            $this->exchange->batch_basic_publish(\n                $this->createAmqpMessage($data),\n                $this->exchangeName,\n                $this->getRoutingKey($record)\n            );\n        }\n\n        $this->exchange->publish_batch();\n    }\n\n    /**\n     * Gets the routing key for the AMQP exchange\n     *\n     * @phpstan-param Record $record\n     */\n    protected function getRoutingKey(array $record): string\n    {\n        $routingKey = sprintf('%s.%s', $record['level_name'], $record['channel']);\n\n        return strtolower($routingKey);\n    }\n\n    private function createAmqpMessage(string $data): AMQPMessage\n    {\n        $attributes = [\n            'delivery_mode' => 2,\n            'content_type' => 'application/json',\n        ];\n        if ($this->extraAttributes) {\n            $attributes = array_merge($attributes, $this->extraAttributes);\n        }\n        return new AMQPMessage($data, $attributes);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new JsonFormatter(JsonFormatter::BATCH_MODE_JSON, false);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/IFTTTHandler.php","ext":"php","size":2183,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * IFTTTHandler uses cURL to trigger IFTTT Maker actions\n *\n * Register a secret key and trigger/event name at https://ifttt.com/maker\n *\n * value1 will be the channel from monolog's Logger constructor,\n * value2 will be the level name (ERROR, WARNING, ..)\n * value3 will be the log record's message\n *\n * @author Nehal Patel <nehal@nehalpatel.me>\n */\nclass IFTTTHandler extends AbstractProcessingHandler\n{\n    /** @var string */\n    private $eventName;\n    /** @var string */\n    private $secretKey;\n\n    /**\n     * @param string $eventName The name of the IFTTT Maker event that should be triggered\n     * @param string $secretKey A valid IFTTT secret key\n     */\n    public function __construct(string $eventName, string $secretKey, $level = Logger::ERROR, bool $bubble = true)\n    {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is needed to use the IFTTTHandler');\n        }\n\n        $this->eventName = $eventName;\n        $this->secretKey = $secretKey;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function write(array $record): void\n    {\n        $postData = [\n            \"value1\" => $record[\"channel\"],\n            \"value2\" => $record[\"level_name\"],\n            \"value3\" => $record[\"message\"],\n        ];\n        $postString = Utils::jsonEncode($postData);\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, \"https://maker.ifttt.com/trigger/\" . $this->eventName . \"/with/key/\" . $this->secretKey);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $postString);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, [\n            \"Content-Type: application/json\",\n        ]);\n\n        Curl\\Util::execute($ch);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/NullHandler.php","ext":"php","size":1337,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Blackhole\n *\n * Any record it can handle will be thrown away. This can be used\n * to put on top of an existing stack to override it temporarily.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass NullHandler extends Handler\n{\n    /**\n     * @var int\n     */\n    private $level;\n\n    /**\n     * @param string|int $level The minimum logging level at which this handler will be triggered\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function __construct($level = Logger::DEBUG)\n    {\n        $this->level = Logger::toMonologLevel($level);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return $record['level'] >= $this->level;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        return $record['level'] >= $this->level;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/LogmaticHandler.php","ext":"php","size":2716,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LogmaticFormatter;\n\n/**\n * @author Julien Breux <julien.breux@gmail.com>\n */\nclass LogmaticHandler extends SocketHandler\n{\n    /**\n     * @var string\n     */\n    private $logToken;\n\n    /**\n     * @var string\n     */\n    private $hostname;\n\n    /**\n     * @var string\n     */\n    private $appname;\n\n    /**\n     * @param string     $token    Log token supplied by Logmatic.\n     * @param string     $hostname Host name supplied by Logmatic.\n     * @param string     $appname  Application name supplied by Logmatic.\n     * @param bool       $useSSL   Whether or not SSL encryption should be used.\n     *\n     * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing\n     */\n    public function __construct(\n        string $token,\n        string $hostname = '',\n        string $appname = '',\n        bool $useSSL = true,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if ($useSSL && !extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP extension is required to use SSL encrypted connection for LogmaticHandler');\n        }\n\n        $endpoint = $useSSL ? 'ssl://api.logmatic.io:10515' : 'api.logmatic.io:10514';\n        $endpoint .= '/v1/';\n\n        parent::__construct(\n            $endpoint,\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n\n        $this->logToken = $token;\n        $this->hostname = $hostname;\n        $this->appname  = $appname;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        return $this->logToken . ' ' . $record['formatted'];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        $formatter = new LogmaticFormatter();\n\n        if (!empty($this->hostname)) {\n            $formatter->setHostname($this->hostname);\n        }\n        if (!empty($this->appname)) {\n            $formatter->setAppname($this->appname);\n        }\n\n        return $formatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/GelfHandler.php","ext":"php","size":1399,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Gelf\\PublisherInterface;\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\GelfMessageFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Handler to send messages to a Graylog2 (http://www.graylog2.org) server\n *\n * @author Matt Lehner <mlehner@gmail.com>\n * @author Benjamin Zikarsky <benjamin@zikarsky.de>\n */\nclass GelfHandler extends AbstractProcessingHandler\n{\n    /**\n     * @var PublisherInterface the publisher object that sends the message to the server\n     */\n    protected $publisher;\n\n    /**\n     * @param PublisherInterface $publisher a gelf publisher object\n     */\n    public function __construct(PublisherInterface $publisher, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        $this->publisher = $publisher;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->publisher->publish($record['formatted']);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new GelfMessageFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FallbackGroupHandler.php","ext":"php","size":1761,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Throwable;\n\n/**\n * Forwards records to at most one handler\n *\n * If a handler fails, the exception is suppressed and the record is forwarded to the next handler.\n *\n * As soon as one handler handles a record successfully, the handling stops there.\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass FallbackGroupHandler extends GroupHandler\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n        foreach ($this->handlers as $handler) {\n            try {\n                $handler->handle($record);\n                break;\n            } catch (Throwable $e) {\n                // What throwable?\n            }\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        if ($this->processors) {\n            $processed = [];\n            foreach ($records as $record) {\n                $processed[] = $this->processRecord($record);\n            }\n            /** @var Record[] $records */\n            $records = $processed;\n        }\n\n        foreach ($this->handlers as $handler) {\n            try {\n                $handler->handleBatch($records);\n                break;\n            } catch (Throwable $e) {\n                // What throwable?\n            }\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SymfonyMailerHandler.php","ext":"php","size":3533,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\nuse Symfony\\Component\\Mailer\\MailerInterface;\nuse Symfony\\Component\\Mailer\\Transport\\TransportInterface;\nuse Symfony\\Component\\Mime\\Email;\n\n/**\n * SymfonyMailerHandler uses Symfony's Mailer component to send the emails\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass SymfonyMailerHandler extends MailHandler\n{\n    /** @var MailerInterface|TransportInterface */\n    protected $mailer;\n    /** @var Email|callable(string, Record[]): Email */\n    private $emailTemplate;\n\n    /**\n     * @psalm-param Email|callable(string, Record[]): Email $email\n     *\n     * @param MailerInterface|TransportInterface $mailer The mailer to use\n     * @param callable|Email                     $email  An email template, the subject/body will be replaced\n     */\n    public function __construct($mailer, $email, $level = Logger::ERROR, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        $this->mailer = $mailer;\n        $this->emailTemplate = $email;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function send(string $content, array $records): void\n    {\n        $this->mailer->send($this->buildMessage($content, $records));\n    }\n\n    /**\n     * Gets the formatter for the Swift_Message subject.\n     *\n     * @param string|null $format The format of the subject\n     */\n    protected function getSubjectFormatter(?string $format): FormatterInterface\n    {\n        return new LineFormatter($format);\n    }\n\n    /**\n     * Creates instance of Email to be sent\n     *\n     * @param  string        $content formatted email body to be sent\n     * @param  array         $records Log records that formed the content\n     *\n     * @phpstan-param Record[] $records\n     */\n    protected function buildMessage(string $content, array $records): Email\n    {\n        $message = null;\n        if ($this->emailTemplate instanceof Email) {\n            $message = clone $this->emailTemplate;\n        } elseif (is_callable($this->emailTemplate)) {\n            $message = ($this->emailTemplate)($content, $records);\n        }\n\n        if (!$message instanceof Email) {\n            $record = reset($records);\n            throw new \\InvalidArgumentException('Could not resolve message as instance of Email or a callable returning it' . ($record ? Utils::getRecordMessageForException($record) : ''));\n        }\n\n        if ($records) {\n            $subjectFormatter = $this->getSubjectFormatter($message->getSubject());\n            $message->subject($subjectFormatter->format($this->getHighestRecord($records)));\n        }\n\n        if ($this->isHtmlBody($content)) {\n            if (null !== ($charset = $message->getHtmlCharset())) {\n                $message->html($content, $charset);\n            } else {\n                $message->html($content);\n            }\n        } else {\n            if (null !== ($charset = $message->getTextCharset())) {\n                $message->text($content, $charset);\n            } else {\n                $message->text($content);\n            }\n        }\n\n        return $message->date(new \\DateTimeImmutable());\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ProcessHandler.php","ext":"php","size":5215,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * Stores to STDIN of any process, specified by a command.\n *\n * Usage example:\n * <pre>\n * $log = new Logger('myLogger');\n * $log->pushHandler(new ProcessHandler('/usr/bin/php /var/www/monolog/someScript.php'));\n * </pre>\n *\n * @author Kolja Zuelsdorf <koljaz@web.de>\n */\nclass ProcessHandler extends AbstractProcessingHandler\n{\n    /**\n     * Holds the process to receive data on its STDIN.\n     *\n     * @var resource|bool|null\n     */\n    private $process;\n\n    /**\n     * @var string\n     */\n    private $command;\n\n    /**\n     * @var string|null\n     */\n    private $cwd;\n\n    /**\n     * @var resource[]\n     */\n    private $pipes = [];\n\n    /**\n     * @var array<int, string[]>\n     */\n    protected const DESCRIPTOR_SPEC = [\n        0 => ['pipe', 'r'],  // STDIN is a pipe that the child will read from\n        1 => ['pipe', 'w'],  // STDOUT is a pipe that the child will write to\n        2 => ['pipe', 'w'],  // STDERR is a pipe to catch the any errors\n    ];\n\n    /**\n     * @param  string                    $command Command for the process to start. Absolute paths are recommended,\n     *                                            especially if you do not use the $cwd parameter.\n     * @param  string|null               $cwd     \"Current working directory\" (CWD) for the process to be executed in.\n     * @throws \\InvalidArgumentException\n     */\n    public function __construct(string $command, $level = Logger::DEBUG, bool $bubble = true, ?string $cwd = null)\n    {\n        if ($command === '') {\n            throw new \\InvalidArgumentException('The command argument must be a non-empty string.');\n        }\n        if ($cwd === '') {\n            throw new \\InvalidArgumentException('The optional CWD argument must be a non-empty string or null.');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->command = $command;\n        $this->cwd = $cwd;\n    }\n\n    /**\n     * Writes the record down to the log of the implementing handler\n     *\n     * @throws \\UnexpectedValueException\n     */\n    protected function write(array $record): void\n    {\n        $this->ensureProcessIsStarted();\n\n        $this->writeProcessInput($record['formatted']);\n\n        $errors = $this->readProcessErrors();\n        if (empty($errors) === false) {\n            throw new \\UnexpectedValueException(sprintf('Errors while writing to process: %s', $errors));\n        }\n    }\n\n    /**\n     * Makes sure that the process is actually started, and if not, starts it,\n     * assigns the stream pipes, and handles startup errors, if any.\n     */\n    private function ensureProcessIsStarted(): void\n    {\n        if (is_resource($this->process) === false) {\n            $this->startProcess();\n\n            $this->handleStartupErrors();\n        }\n    }\n\n    /**\n     * Starts the actual process and sets all streams to non-blocking.\n     */\n    private function startProcess(): void\n    {\n        $this->process = proc_open($this->command, static::DESCRIPTOR_SPEC, $this->pipes, $this->cwd);\n\n        foreach ($this->pipes as $pipe) {\n            stream_set_blocking($pipe, false);\n        }\n    }\n\n    /**\n     * Selects the STDERR stream, handles upcoming startup errors, and throws an exception, if any.\n     *\n     * @throws \\UnexpectedValueException\n     */\n    private function handleStartupErrors(): void\n    {\n        $selected = $this->selectErrorStream();\n        if (false === $selected) {\n            throw new \\UnexpectedValueException('Something went wrong while selecting a stream.');\n        }\n\n        $errors = $this->readProcessErrors();\n\n        if (is_resource($this->process) === false || empty($errors) === false) {\n            throw new \\UnexpectedValueException(\n                sprintf('The process \"%s\" could not be opened: ' . $errors, $this->command)\n            );\n        }\n    }\n\n    /**\n     * Selects the STDERR stream.\n     *\n     * @return int|bool\n     */\n    protected function selectErrorStream()\n    {\n        $empty = [];\n        $errorPipes = [$this->pipes[2]];\n\n        return stream_select($errorPipes, $empty, $empty, 1);\n    }\n\n    /**\n     * Reads the errors of the process, if there are any.\n     *\n     * @codeCoverageIgnore\n     * @return string Empty string if there are no errors.\n     */\n    protected function readProcessErrors(): string\n    {\n        return (string) stream_get_contents($this->pipes[2]);\n    }\n\n    /**\n     * Writes to the input stream of the opened process.\n     *\n     * @codeCoverageIgnore\n     */\n    protected function writeProcessInput(string $string): void\n    {\n        fwrite($this->pipes[0], $string);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        if (is_resource($this->process)) {\n            foreach ($this->pipes as $pipe) {\n                fclose($pipe);\n            }\n            proc_close($this->process);\n            $this->process = null;\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/AbstractHandler.php","ext":"php","size":2651,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\ResettableInterface;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Base Handler class providing basic level/bubble support\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nabstract class AbstractHandler extends Handler implements ResettableInterface\n{\n    /**\n     * @var int\n     * @phpstan-var Level\n     */\n    protected $level = Logger::DEBUG;\n    /** @var bool */\n    protected $bubble = true;\n\n    /**\n     * @param int|string $level  The minimum logging level at which this handler will be triggered\n     * @param bool       $bubble Whether the messages that are handled can bubble up the stack or not\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function __construct($level = Logger::DEBUG, bool $bubble = true)\n    {\n        $this->setLevel($level);\n        $this->bubble = $bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return $record['level'] >= $this->level;\n    }\n\n    /**\n     * Sets minimum logging level at which this handler will be triggered.\n     *\n     * @param  Level|LevelName|LogLevel::* $level Level or level name\n     * @return self\n     */\n    public function setLevel($level): self\n    {\n        $this->level = Logger::toMonologLevel($level);\n\n        return $this;\n    }\n\n    /**\n     * Gets minimum logging level at which this handler will be triggered.\n     *\n     * @return int\n     *\n     * @phpstan-return Level\n     */\n    public function getLevel(): int\n    {\n        return $this->level;\n    }\n\n    /**\n     * Sets the bubbling behavior.\n     *\n     * @param  bool $bubble true means that this handler allows bubbling.\n     *                      false means that bubbling is not permitted.\n     * @return self\n     */\n    public function setBubble(bool $bubble): self\n    {\n        $this->bubble = $bubble;\n\n        return $this;\n    }\n\n    /**\n     * Gets the bubbling behavior.\n     *\n     * @return bool true means that this handler allows bubbling.\n     *              false means that bubbling is not permitted.\n     */\n    public function getBubble(): bool\n    {\n        return $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function reset()\n    {\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/RedisHandler.php","ext":"php","size":3020,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\n\n/**\n * Logs to a Redis key using rpush\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $redis = new RedisHandler(new Predis\\Client(\"tcp://localhost:6379\"), \"logs\", \"prod\");\n *   $log->pushHandler($redis);\n *\n * @author Thomas Tourlourat <thomas@tourlourat.com>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass RedisHandler extends AbstractProcessingHandler\n{\n    /** @var \\Predis\\Client<\\Predis\\Client>|\\Redis */\n    private $redisClient;\n    /** @var string */\n    private $redisKey;\n    /** @var int */\n    protected $capSize;\n\n    /**\n     * @param \\Predis\\Client<\\Predis\\Client>|\\Redis $redis   The redis instance\n     * @param string                $key     The key name to push records to\n     * @param int                   $capSize Number of entries to limit list size to, 0 = unlimited\n     */\n    public function __construct($redis, string $key, $level = Logger::DEBUG, bool $bubble = true, int $capSize = 0)\n    {\n        if (!(($redis instanceof \\Predis\\Client) || ($redis instanceof \\Redis))) {\n            throw new \\InvalidArgumentException('Predis\\Client or Redis instance required');\n        }\n\n        $this->redisClient = $redis;\n        $this->redisKey = $key;\n        $this->capSize = $capSize;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if ($this->capSize) {\n            $this->writeCapped($record);\n        } else {\n            $this->redisClient->rpush($this->redisKey, $record[\"formatted\"]);\n        }\n    }\n\n    /**\n     * Write and cap the collection\n     * Writes the record to the redis list and caps its\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    protected function writeCapped(array $record): void\n    {\n        if ($this->redisClient instanceof \\Redis) {\n            $mode = defined('\\Redis::MULTI') ? \\Redis::MULTI : 1;\n            $this->redisClient->multi($mode)\n                ->rpush($this->redisKey, $record[\"formatted\"])\n                ->ltrim($this->redisKey, -$this->capSize, -1)\n                ->exec();\n        } else {\n            $redisKey = $this->redisKey;\n            $capSize = $this->capSize;\n            $this->redisClient->transaction(function ($tx) use ($record, $redisKey, $capSize) {\n                $tx->rpush($redisKey, $record[\"formatted\"]);\n                $tx->ltrim($redisKey, -$capSize, -1);\n            });\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/CouchDBHandler.php","ext":"php","size":2103,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\JsonFormatter;\nuse Monolog\\Logger;\n\n/**\n * CouchDB handler\n *\n * @author Markus Bachmann <markus.bachmann@bachi.biz>\n */\nclass CouchDBHandler extends AbstractProcessingHandler\n{\n    /** @var mixed[] */\n    private $options;\n\n    /**\n     * @param mixed[] $options\n     */\n    public function __construct(array $options = [], $level = Logger::DEBUG, bool $bubble = true)\n    {\n        $this->options = array_merge([\n            'host'     => 'localhost',\n            'port'     => 5984,\n            'dbname'   => 'logger',\n            'username' => null,\n            'password' => null,\n        ], $options);\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $basicAuth = null;\n        if ($this->options['username']) {\n            $basicAuth = sprintf('%s:%s@', $this->options['username'], $this->options['password']);\n        }\n\n        $url = 'http://'.$basicAuth.$this->options['host'].':'.$this->options['port'].'/'.$this->options['dbname'];\n        $context = stream_context_create([\n            'http' => [\n                'method'        => 'POST',\n                'content'       => $record['formatted'],\n                'ignore_errors' => true,\n                'max_redirects' => 0,\n                'header'        => 'Content-type: application/json',\n            ],\n        ]);\n\n        if (false === @file_get_contents($url, false, $context)) {\n            throw new \\RuntimeException(sprintf('Could not connect to %s', $url));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new JsonFormatter(JsonFormatter::BATCH_MODE_JSON, false);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/Curl/Util.php","ext":"php","size":1895,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\Curl;\n\nuse CurlHandle;\n\n/**\n * This class is marked as internal and it is not under the BC promise of the package.\n *\n * @internal\n */\nfinal class Util\n{\n    /** @var array<int> */\n    private static $retriableErrorCodes = [\n        CURLE_COULDNT_RESOLVE_HOST,\n        CURLE_COULDNT_CONNECT,\n        CURLE_HTTP_NOT_FOUND,\n        CURLE_READ_ERROR,\n        CURLE_OPERATION_TIMEOUTED,\n        CURLE_HTTP_POST_ERROR,\n        CURLE_SSL_CONNECT_ERROR,\n    ];\n\n    /**\n     * Executes a CURL request with optional retries and exception on failure\n     *\n     * @param  resource|CurlHandle $ch             curl handler\n     * @param  int                 $retries\n     * @param  bool                $closeAfterDone\n     * @return bool|string         @see curl_exec\n     */\n    public static function execute($ch, int $retries = 5, bool $closeAfterDone = true)\n    {\n        while ($retries--) {\n            $curlResponse = curl_exec($ch);\n            if ($curlResponse === false) {\n                $curlErrno = curl_errno($ch);\n\n                if (false === in_array($curlErrno, self::$retriableErrorCodes, true) || !$retries) {\n                    $curlError = curl_error($ch);\n\n                    if ($closeAfterDone) {\n                        curl_close($ch);\n                    }\n\n                    throw new \\RuntimeException(sprintf('Curl error (code %d): %s', $curlErrno, $curlError));\n                }\n\n                continue;\n            }\n\n            if ($closeAfterDone) {\n                curl_close($ch);\n            }\n\n            return $curlResponse;\n        }\n\n        return false;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerTrait.php","ext":"php","size":1281,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\n\n/**\n * Helper trait for implementing FormattableInterface\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\ntrait FormattableHandlerTrait\n{\n    /**\n     * @var ?FormatterInterface\n     */\n    protected $formatter;\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        $this->formatter = $formatter;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        if (!$this->formatter) {\n            $this->formatter = $this->getDefaultFormatter();\n        }\n\n        return $this->formatter;\n    }\n\n    /**\n     * Gets the default formatter.\n     *\n     * Overwrite this if the LineFormatter is not a good default for your handler.\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FirePHPHandler.php","ext":"php","size":5288,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\WildfireFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Simple FirePHP Handler (http://www.firephp.org/), which uses the Wildfire protocol.\n *\n * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass FirePHPHandler extends AbstractProcessingHandler\n{\n    use WebRequestRecognizerTrait;\n\n    /**\n     * WildFire JSON header message format\n     */\n    protected const PROTOCOL_URI = 'http://meta.wildfirehq.org/Protocol/JsonStream/0.2';\n\n    /**\n     * FirePHP structure for parsing messages & their presentation\n     */\n    protected const STRUCTURE_URI = 'http://meta.firephp.org/Wildfire/Structure/FirePHP/FirebugConsole/0.1';\n\n    /**\n     * Must reference a \"known\" plugin, otherwise headers won't display in FirePHP\n     */\n    protected const PLUGIN_URI = 'http://meta.firephp.org/Wildfire/Plugin/FirePHP/Library-FirePHPCore/0.3';\n\n    /**\n     * Header prefix for Wildfire to recognize & parse headers\n     */\n    protected const HEADER_PREFIX = 'X-Wf';\n\n    /**\n     * Whether or not Wildfire vendor-specific headers have been generated & sent yet\n     * @var bool\n     */\n    protected static $initialized = false;\n\n    /**\n     * Shared static message index between potentially multiple handlers\n     * @var int\n     */\n    protected static $messageIndex = 1;\n\n    /** @var bool */\n    protected static $sendHeaders = true;\n\n    /**\n     * Base header creation function used by init headers & record headers\n     *\n     * @param array<int|string> $meta    Wildfire Plugin, Protocol & Structure Indexes\n     * @param string            $message Log message\n     *\n     * @return array<string, string> Complete header string ready for the client as key and message as value\n     *\n     * @phpstan-return non-empty-array<string, string>\n     */\n    protected function createHeader(array $meta, string $message): array\n    {\n        $header = sprintf('%s-%s', static::HEADER_PREFIX, join('-', $meta));\n\n        return [$header => $message];\n    }\n\n    /**\n     * Creates message header from record\n     *\n     * @return array<string, string>\n     *\n     * @phpstan-return non-empty-array<string, string>\n     *\n     * @see createHeader()\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    protected function createRecordHeader(array $record): array\n    {\n        // Wildfire is extensible to support multiple protocols & plugins in a single request,\n        // but we're not taking advantage of that (yet), so we're using \"1\" for simplicity's sake.\n        return $this->createHeader(\n            [1, 1, 1, self::$messageIndex++],\n            $record['formatted']\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new WildfireFormatter();\n    }\n\n    /**\n     * Wildfire initialization headers to enable message parsing\n     *\n     * @see createHeader()\n     * @see sendHeader()\n     *\n     * @return array<string, string>\n     */\n    protected function getInitHeaders(): array\n    {\n        // Initial payload consists of required headers for Wildfire\n        return array_merge(\n            $this->createHeader(['Protocol', 1], static::PROTOCOL_URI),\n            $this->createHeader([1, 'Structure', 1], static::STRUCTURE_URI),\n            $this->createHeader([1, 'Plugin', 1], static::PLUGIN_URI)\n        );\n    }\n\n    /**\n     * Send header string to the client\n     */\n    protected function sendHeader(string $header, string $content): void\n    {\n        if (!headers_sent() && self::$sendHeaders) {\n            header(sprintf('%s: %s', $header, $content));\n        }\n    }\n\n    /**\n     * Creates & sends header for a record, ensuring init headers have been sent prior\n     *\n     * @see sendHeader()\n     * @see sendInitHeaders()\n     */\n    protected function write(array $record): void\n    {\n        if (!self::$sendHeaders || !$this->isWebRequest()) {\n            return;\n        }\n\n        // WildFire-specific headers must be sent prior to any messages\n        if (!self::$initialized) {\n            self::$initialized = true;\n\n            self::$sendHeaders = $this->headersAccepted();\n            if (!self::$sendHeaders) {\n                return;\n            }\n\n            foreach ($this->getInitHeaders() as $header => $content) {\n                $this->sendHeader($header, $content);\n            }\n        }\n\n        $header = $this->createRecordHeader($record);\n        if (trim(current($header)) !== '') {\n            $this->sendHeader(key($header), current($header));\n        }\n    }\n\n    /**\n     * Verifies if the headers are accepted by the current user agent\n     */\n    protected function headersAccepted(): bool\n    {\n        if (!empty($_SERVER['HTTP_USER_AGENT']) && preg_match('{\\bFirePHP/\\d+\\.\\d+\\b}', $_SERVER['HTTP_USER_AGENT'])) {\n            return true;\n        }\n\n        return isset($_SERVER['HTTP_X_FIREPHP_VERSION']);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FlowdockHandler.php","ext":"php","size":3622,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Formatter\\FlowdockFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Sends notifications through the Flowdock push API\n *\n * This must be configured with a FlowdockFormatter instance via setFormatter()\n *\n * Notes:\n * API token - Flowdock API token\n *\n * @author Dominik Liebler <liebler.dominik@gmail.com>\n * @see https://www.flowdock.com/api/push\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n * @deprecated Since 2.9.0 and 3.3.0, Flowdock was shutdown we will thus drop this handler in Monolog 4\n */\nclass FlowdockHandler extends SocketHandler\n{\n    /**\n     * @var string\n     */\n    protected $apiToken;\n\n    /**\n     * @throws MissingExtensionException if OpenSSL is missing\n     */\n    public function __construct(\n        string $apiToken,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if (!extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP extension is required to use the FlowdockHandler');\n        }\n\n        parent::__construct(\n            'ssl://api.flowdock.com:443',\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n        $this->apiToken = $apiToken;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if (!$formatter instanceof FlowdockFormatter) {\n            throw new \\InvalidArgumentException('The FlowdockHandler requires an instance of Monolog\\Formatter\\FlowdockFormatter to function correctly');\n        }\n\n        return parent::setFormatter($formatter);\n    }\n\n    /**\n     * Gets the default formatter.\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        throw new \\InvalidArgumentException('The FlowdockHandler must be configured (via setFormatter) with an instance of Monolog\\Formatter\\FlowdockFormatter to function correctly');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        parent::write($record);\n\n        $this->closeSocket();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        $content = $this->buildContent($record);\n\n        return $this->buildHeader($content) . $content;\n    }\n\n    /**\n     * Builds the body of API call\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    private function buildContent(array $record): string\n    {\n        return Utils::jsonEncode($record['formatted']['flowdock']);\n    }\n\n    /**\n     * Builds the header of the API Call\n     */\n    private function buildHeader(string $content): string\n    {\n        $header = \"POST /v1/messages/team_inbox/\" . $this->apiToken . \" HTTP/1.1\\r\\n\";\n        $header .= \"Host: api.flowdock.com\\r\\n\";\n        $header .= \"Content-Type: application/json\\r\\n\";\n        $header .= \"Content-Length: \" . strlen($content) . \"\\r\\n\";\n        $header .= \"\\r\\n\";\n\n        return $header;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FingersCrossedHandler.php","ext":"php","size":8470,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Handler\\FingersCrossed\\ErrorLevelActivationStrategy;\nuse Monolog\\Handler\\FingersCrossed\\ActivationStrategyInterface;\nuse Monolog\\Logger;\nuse Monolog\\ResettableInterface;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Buffers all records until a certain level is reached\n *\n * The advantage of this approach is that you don't get any clutter in your log files.\n * Only requests which actually trigger an error (or whatever your actionLevel is) will be\n * in the logs, but they will contain all records, not only those above the level threshold.\n *\n * You can then have a passthruLevel as well which means that at the end of the request,\n * even if it did not get activated, it will still send through log records of e.g. at least a\n * warning level.\n *\n * You can find the various activation strategies in the\n * Monolog\\Handler\\FingersCrossed\\ namespace.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass FingersCrossedHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface, FormattableHandlerInterface\n{\n    use ProcessableHandlerTrait;\n\n    /**\n     * @var callable|HandlerInterface\n     * @phpstan-var callable(?Record, HandlerInterface): HandlerInterface|HandlerInterface\n     */\n    protected $handler;\n    /** @var ActivationStrategyInterface */\n    protected $activationStrategy;\n    /** @var bool */\n    protected $buffering = true;\n    /** @var int */\n    protected $bufferSize;\n    /** @var Record[] */\n    protected $buffer = [];\n    /** @var bool */\n    protected $stopBuffering;\n    /**\n     * @var ?int\n     * @phpstan-var ?Level\n     */\n    protected $passthruLevel;\n    /** @var bool */\n    protected $bubble;\n\n    /**\n     * @psalm-param HandlerInterface|callable(?Record, HandlerInterface): HandlerInterface $handler\n     *\n     * @param callable|HandlerInterface              $handler            Handler or factory callable($record|null, $fingersCrossedHandler).\n     * @param int|string|ActivationStrategyInterface $activationStrategy Strategy which determines when this handler takes action, or a level name/value at which the handler is activated\n     * @param int                                    $bufferSize         How many entries should be buffered at most, beyond that the oldest items are removed from the buffer.\n     * @param bool                                   $bubble             Whether the messages that are handled can bubble up the stack or not\n     * @param bool                                   $stopBuffering      Whether the handler should stop buffering after being triggered (default true)\n     * @param int|string                             $passthruLevel      Minimum level to always flush to handler on close, even if strategy not triggered\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $passthruLevel\n     * @phpstan-param Level|LevelName|LogLevel::*|ActivationStrategyInterface $activationStrategy\n     */\n    public function __construct($handler, $activationStrategy = null, int $bufferSize = 0, bool $bubble = true, bool $stopBuffering = true, $passthruLevel = null)\n    {\n        if (null === $activationStrategy) {\n            $activationStrategy = new ErrorLevelActivationStrategy(Logger::WARNING);\n        }\n\n        // convert simple int activationStrategy to an object\n        if (!$activationStrategy instanceof ActivationStrategyInterface) {\n            $activationStrategy = new ErrorLevelActivationStrategy($activationStrategy);\n        }\n\n        $this->handler = $handler;\n        $this->activationStrategy = $activationStrategy;\n        $this->bufferSize = $bufferSize;\n        $this->bubble = $bubble;\n        $this->stopBuffering = $stopBuffering;\n\n        if ($passthruLevel !== null) {\n            $this->passthruLevel = Logger::toMonologLevel($passthruLevel);\n        }\n\n        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {\n            throw new \\RuntimeException(\"The given handler (\".json_encode($this->handler).\") is not a callable nor a Monolog\\Handler\\HandlerInterface object\");\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return true;\n    }\n\n    /**\n     * Manually activate this logger regardless of the activation strategy\n     */\n    public function activate(): void\n    {\n        if ($this->stopBuffering) {\n            $this->buffering = false;\n        }\n\n        $this->getHandler(end($this->buffer) ?: null)->handleBatch($this->buffer);\n        $this->buffer = [];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        if ($this->buffering) {\n            $this->buffer[] = $record;\n            if ($this->bufferSize > 0 && count($this->buffer) > $this->bufferSize) {\n                array_shift($this->buffer);\n            }\n            if ($this->activationStrategy->isHandlerActivated($record)) {\n                $this->activate();\n            }\n        } else {\n            $this->getHandler($record)->handle($record);\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        $this->flushBuffer();\n\n        $this->getHandler()->close();\n    }\n\n    public function reset()\n    {\n        $this->flushBuffer();\n\n        $this->resetProcessors();\n\n        if ($this->getHandler() instanceof ResettableInterface) {\n            $this->getHandler()->reset();\n        }\n    }\n\n    /**\n     * Clears the buffer without flushing any messages down to the wrapped handler.\n     *\n     * It also resets the handler to its initial buffering state.\n     */\n    public function clear(): void\n    {\n        $this->buffer = [];\n        $this->reset();\n    }\n\n    /**\n     * Resets the state of the handler. Stops forwarding records to the wrapped handler.\n     */\n    private function flushBuffer(): void\n    {\n        if (null !== $this->passthruLevel) {\n            $level = $this->passthruLevel;\n            $this->buffer = array_filter($this->buffer, function ($record) use ($level) {\n                return $record['level'] >= $level;\n            });\n            if (count($this->buffer) > 0) {\n                $this->getHandler(end($this->buffer))->handleBatch($this->buffer);\n            }\n        }\n\n        $this->buffer = [];\n        $this->buffering = true;\n    }\n\n    /**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @return HandlerInterface\n     *\n     * @phpstan-param Record $record\n     */\n    public function getHandler(?array $record = null)\n    {\n        if (!$this->handler instanceof HandlerInterface) {\n            $this->handler = ($this->handler)($record, $this);\n            if (!$this->handler instanceof HandlerInterface) {\n                throw new \\RuntimeException(\"The factory callable should return a HandlerInterface\");\n            }\n        }\n\n        return $this->handler;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            $handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            return $handler->getFormatter();\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdpHandler.php","ext":"php","size":4497,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse DateTimeInterface;\nuse Monolog\\Logger;\nuse Monolog\\Handler\\SyslogUdp\\UdpSocket;\nuse Monolog\\Utils;\n\n/**\n * A Handler for logging to a remote syslogd server.\n *\n * @author Jesper Skovgaard Nielsen <nulpunkt@gmail.com>\n * @author Dominik Kukacka <dominik.kukacka@gmail.com>\n */\nclass SyslogUdpHandler extends AbstractSyslogHandler\n{\n    const RFC3164 = 0;\n    const RFC5424 = 1;\n    const RFC5424e = 2;\n\n    /** @var array<self::RFC*, string> */\n    private $dateFormats = array(\n        self::RFC3164 => 'M d H:i:s',\n        self::RFC5424 => \\DateTime::RFC3339,\n        self::RFC5424e => \\DateTime::RFC3339_EXTENDED,\n    );\n\n    /** @var UdpSocket */\n    protected $socket;\n    /** @var string */\n    protected $ident;\n    /** @var self::RFC* */\n    protected $rfc;\n\n    /**\n     * @param string     $host     Either IP/hostname or a path to a unix socket (port must be 0 then)\n     * @param int        $port     Port number, or 0 if $host is a unix socket\n     * @param string|int $facility Either one of the names of the keys in $this->facilities, or a LOG_* facility constant\n     * @param bool       $bubble   Whether the messages that are handled can bubble up the stack or not\n     * @param string     $ident    Program name or tag for each log message.\n     * @param int        $rfc      RFC to format the message for.\n     * @throws MissingExtensionException\n     *\n     * @phpstan-param self::RFC* $rfc\n     */\n    public function __construct(string $host, int $port = 514, $facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true, string $ident = 'php', int $rfc = self::RFC5424)\n    {\n        if (!extension_loaded('sockets')) {\n            throw new MissingExtensionException('The sockets extension is required to use the SyslogUdpHandler');\n        }\n\n        parent::__construct($facility, $level, $bubble);\n\n        $this->ident = $ident;\n        $this->rfc = $rfc;\n\n        $this->socket = new UdpSocket($host, $port);\n    }\n\n    protected function write(array $record): void\n    {\n        $lines = $this->splitMessageIntoLines($record['formatted']);\n\n        $header = $this->makeCommonSyslogHeader($this->logLevels[$record['level']], $record['datetime']);\n\n        foreach ($lines as $line) {\n            $this->socket->write($line, $header);\n        }\n    }\n\n    public function close(): void\n    {\n        $this->socket->close();\n    }\n\n    /**\n     * @param  string|string[] $message\n     * @return string[]\n     */\n    private function splitMessageIntoLines($message): array\n    {\n        if (is_array($message)) {\n            $message = implode(\"\\n\", $message);\n        }\n\n        $lines = preg_split('/$\\R?^/m', (string) $message, -1, PREG_SPLIT_NO_EMPTY);\n        if (false === $lines) {\n            $pcreErrorCode = preg_last_error();\n            throw new \\RuntimeException('Could not preg_split: ' . $pcreErrorCode . ' / ' . Utils::pcreLastErrorMessage($pcreErrorCode));\n        }\n\n        return $lines;\n    }\n\n    /**\n     * Make common syslog header (see rfc5424 or rfc3164)\n     */\n    protected function makeCommonSyslogHeader(int $severity, DateTimeInterface $datetime): string\n    {\n        $priority = $severity + $this->facility;\n\n        if (!$pid = getmypid()) {\n            $pid = '-';\n        }\n\n        if (!$hostname = gethostname()) {\n            $hostname = '-';\n        }\n\n        if ($this->rfc === self::RFC3164) {\n            // see https://github.com/phpstan/phpstan/issues/5348\n            // @phpstan-ignore-next-line\n            $dateNew = $datetime->setTimezone(new \\DateTimeZone('UTC'));\n            $date = $dateNew->format($this->dateFormats[$this->rfc]);\n\n            return \"<$priority>\" .\n                $date . \" \" .\n                $hostname . \" \" .\n                $this->ident . \"[\" . $pid . \"]: \";\n        }\n\n        $date = $datetime->format($this->dateFormats[$this->rfc]);\n\n        return \"<$priority>1 \" .\n            $date . \" \" .\n            $hostname . \" \" .\n            $this->ident . \" \" .\n            $pid . \" - - \";\n    }\n\n    /**\n     * Inject your own socket, mainly used for testing\n     */\n    public function setSocket(UdpSocket $socket): self\n    {\n        $this->socket = $socket;\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FilterHandler.php","ext":"php","size":6864,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\ResettableInterface;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Simple handler wrapper that filters records based on a list of levels\n *\n * It can be configured with an exact list of levels to allow, or a min/max level.\n *\n * @author Hennadiy Verkh\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass FilterHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface, FormattableHandlerInterface\n{\n    use ProcessableHandlerTrait;\n\n    /**\n     * Handler or factory callable($record, $this)\n     *\n     * @var callable|HandlerInterface\n     * @phpstan-var callable(?Record, HandlerInterface): HandlerInterface|HandlerInterface\n     */\n    protected $handler;\n\n    /**\n     * Minimum level for logs that are passed to handler\n     *\n     * @var int[]\n     * @phpstan-var array<Level, int>\n     */\n    protected $acceptedLevels;\n\n    /**\n     * Whether the messages that are handled can bubble up the stack or not\n     *\n     * @var bool\n     */\n    protected $bubble;\n\n    /**\n     * @psalm-param HandlerInterface|callable(?Record, HandlerInterface): HandlerInterface $handler\n     *\n     * @param callable|HandlerInterface $handler        Handler or factory callable($record|null, $filterHandler).\n     * @param int|array                 $minLevelOrList A list of levels to accept or a minimum level if maxLevel is provided\n     * @param int|string                $maxLevel       Maximum level to accept, only used if $minLevelOrList is not an array\n     * @param bool                      $bubble         Whether the messages that are handled can bubble up the stack or not\n     *\n     * @phpstan-param Level|LevelName|LogLevel::*|array<Level|LevelName|LogLevel::*> $minLevelOrList\n     * @phpstan-param Level|LevelName|LogLevel::* $maxLevel\n     */\n    public function __construct($handler, $minLevelOrList = Logger::DEBUG, $maxLevel = Logger::EMERGENCY, bool $bubble = true)\n    {\n        $this->handler  = $handler;\n        $this->bubble   = $bubble;\n        $this->setAcceptedLevels($minLevelOrList, $maxLevel);\n\n        if (!$this->handler instanceof HandlerInterface && !is_callable($this->handler)) {\n            throw new \\RuntimeException(\"The given handler (\".json_encode($this->handler).\") is not a callable nor a Monolog\\Handler\\HandlerInterface object\");\n        }\n    }\n\n    /**\n     * @phpstan-return array<int, Level>\n     */\n    public function getAcceptedLevels(): array\n    {\n        return array_flip($this->acceptedLevels);\n    }\n\n    /**\n     * @param int|string|array $minLevelOrList A list of levels to accept or a minimum level or level name if maxLevel is provided\n     * @param int|string       $maxLevel       Maximum level or level name to accept, only used if $minLevelOrList is not an array\n     *\n     * @phpstan-param Level|LevelName|LogLevel::*|array<Level|LevelName|LogLevel::*> $minLevelOrList\n     * @phpstan-param Level|LevelName|LogLevel::*                                    $maxLevel\n     */\n    public function setAcceptedLevels($minLevelOrList = Logger::DEBUG, $maxLevel = Logger::EMERGENCY): self\n    {\n        if (is_array($minLevelOrList)) {\n            $acceptedLevels = array_map('Monolog\\Logger::toMonologLevel', $minLevelOrList);\n        } else {\n            $minLevelOrList = Logger::toMonologLevel($minLevelOrList);\n            $maxLevel = Logger::toMonologLevel($maxLevel);\n            $acceptedLevels = array_values(array_filter(Logger::getLevels(), function ($level) use ($minLevelOrList, $maxLevel) {\n                return $level >= $minLevelOrList && $level <= $maxLevel;\n            }));\n        }\n        $this->acceptedLevels = array_flip($acceptedLevels);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return isset($this->acceptedLevels[$record['level']]);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if (!$this->isHandling($record)) {\n            return false;\n        }\n\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        $this->getHandler($record)->handle($record);\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        $filtered = [];\n        foreach ($records as $record) {\n            if ($this->isHandling($record)) {\n                $filtered[] = $record;\n            }\n        }\n\n        if (count($filtered) > 0) {\n            $this->getHandler($filtered[count($filtered) - 1])->handleBatch($filtered);\n        }\n    }\n\n    /**\n     * Return the nested handler\n     *\n     * If the handler was provided as a factory callable, this will trigger the handler's instantiation.\n     *\n     * @return HandlerInterface\n     *\n     * @phpstan-param Record $record\n     */\n    public function getHandler(?array $record = null)\n    {\n        if (!$this->handler instanceof HandlerInterface) {\n            $this->handler = ($this->handler)($record, $this);\n            if (!$this->handler instanceof HandlerInterface) {\n                throw new \\RuntimeException(\"The factory callable should return a HandlerInterface\");\n            }\n        }\n\n        return $this->handler;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            $handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        $handler = $this->getHandler();\n        if ($handler instanceof FormattableHandlerInterface) {\n            return $handler->getFormatter();\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($handler).' does not support formatters.');\n    }\n\n    public function reset()\n    {\n        $this->resetProcessors();\n\n        if ($this->getHandler() instanceof ResettableInterface) {\n            $this->getHandler()->reset();\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/InsightOpsHandler.php","ext":"php","size":2106,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * Inspired on LogEntriesHandler.\n *\n * @author Robert Kaufmann III <rok3@rok3.me>\n * @author Gabriel Machado <gabriel.ms1@hotmail.com>\n */\nclass InsightOpsHandler extends SocketHandler\n{\n    /**\n     * @var string\n     */\n    protected $logToken;\n\n    /**\n     * @param string     $token  Log token supplied by InsightOps\n     * @param string     $region Region where InsightOps account is hosted. Could be 'us' or 'eu'.\n     * @param bool       $useSSL Whether or not SSL encryption should be used\n     *\n     * @throws MissingExtensionException If SSL encryption is set to true and OpenSSL is missing\n     */\n    public function __construct(\n        string $token,\n        string $region = 'us',\n        bool $useSSL = true,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if ($useSSL && !extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP plugin is required to use SSL encrypted connection for InsightOpsHandler');\n        }\n\n        $endpoint = $useSSL\n            ? 'ssl://' . $region . '.data.logs.insight.rapid7.com:443'\n            : $region . '.data.logs.insight.rapid7.com:80';\n\n        parent::__construct(\n            $endpoint,\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n        $this->logToken = $token;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        return $this->logToken . ' ' . $record['formatted'];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/PushoverHandler.php","ext":"php","size":8085,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Sends notifications through the pushover api to mobile phones\n *\n * @author Sebastian Göttschkes <sebastian.goettschkes@googlemail.com>\n * @see    https://www.pushover.net/api\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass PushoverHandler extends SocketHandler\n{\n    /** @var string */\n    private $token;\n    /** @var array<int|string> */\n    private $users;\n    /** @var string */\n    private $title;\n    /** @var string|int|null */\n    private $user = null;\n    /** @var int */\n    private $retry;\n    /** @var int */\n    private $expire;\n\n    /** @var int */\n    private $highPriorityLevel;\n    /** @var int */\n    private $emergencyLevel;\n    /** @var bool */\n    private $useFormattedMessage = false;\n\n    /**\n     * All parameters that can be sent to Pushover\n     * @see https://pushover.net/api\n     * @var array<string, bool>\n     */\n    private $parameterNames = [\n        'token' => true,\n        'user' => true,\n        'message' => true,\n        'device' => true,\n        'title' => true,\n        'url' => true,\n        'url_title' => true,\n        'priority' => true,\n        'timestamp' => true,\n        'sound' => true,\n        'retry' => true,\n        'expire' => true,\n        'callback' => true,\n    ];\n\n    /**\n     * Sounds the api supports by default\n     * @see https://pushover.net/api#sounds\n     * @var string[]\n     */\n    private $sounds = [\n        'pushover', 'bike', 'bugle', 'cashregister', 'classical', 'cosmic', 'falling', 'gamelan', 'incoming',\n        'intermission', 'magic', 'mechanical', 'pianobar', 'siren', 'spacealarm', 'tugboat', 'alien', 'climb',\n        'persistent', 'echo', 'updown', 'none',\n    ];\n\n    /**\n     * @param string       $token             Pushover api token\n     * @param string|array $users             Pushover user id or array of ids the message will be sent to\n     * @param string|null  $title             Title sent to the Pushover API\n     * @param bool         $useSSL            Whether to connect via SSL. Required when pushing messages to users that are not\n     *                                        the pushover.net app owner. OpenSSL is required for this option.\n     * @param string|int   $highPriorityLevel The minimum logging level at which this handler will start\n     *                                        sending \"high priority\" requests to the Pushover API\n     * @param string|int   $emergencyLevel    The minimum logging level at which this handler will start\n     *                                        sending \"emergency\" requests to the Pushover API\n     * @param int          $retry             The retry parameter specifies how often (in seconds) the Pushover servers will\n     *                                        send the same notification to the user.\n     * @param int          $expire            The expire parameter specifies how many seconds your notification will continue\n     *                                        to be retried for (every retry seconds).\n     *\n     * @phpstan-param string|array<int|string>    $users\n     * @phpstan-param Level|LevelName|LogLevel::* $highPriorityLevel\n     * @phpstan-param Level|LevelName|LogLevel::* $emergencyLevel\n     */\n    public function __construct(\n        string $token,\n        $users,\n        ?string $title = null,\n        $level = Logger::CRITICAL,\n        bool $bubble = true,\n        bool $useSSL = true,\n        $highPriorityLevel = Logger::CRITICAL,\n        $emergencyLevel = Logger::EMERGENCY,\n        int $retry = 30,\n        int $expire = 25200,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        $connectionString = $useSSL ? 'ssl://api.pushover.net:443' : 'api.pushover.net:80';\n        parent::__construct(\n            $connectionString,\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n\n        $this->token = $token;\n        $this->users = (array) $users;\n        $this->title = $title ?: (string) gethostname();\n        $this->highPriorityLevel = Logger::toMonologLevel($highPriorityLevel);\n        $this->emergencyLevel = Logger::toMonologLevel($emergencyLevel);\n        $this->retry = $retry;\n        $this->expire = $expire;\n    }\n\n    protected function generateDataStream(array $record): string\n    {\n        $content = $this->buildContent($record);\n\n        return $this->buildHeader($content) . $content;\n    }\n\n    /**\n     * @phpstan-param FormattedRecord $record\n     */\n    private function buildContent(array $record): string\n    {\n        // Pushover has a limit of 512 characters on title and message combined.\n        $maxMessageLength = 512 - strlen($this->title);\n\n        $message = ($this->useFormattedMessage) ? $record['formatted'] : $record['message'];\n        $message = Utils::substr($message, 0, $maxMessageLength);\n\n        $timestamp = $record['datetime']->getTimestamp();\n\n        $dataArray = [\n            'token' => $this->token,\n            'user' => $this->user,\n            'message' => $message,\n            'title' => $this->title,\n            'timestamp' => $timestamp,\n        ];\n\n        if (isset($record['level']) && $record['level'] >= $this->emergencyLevel) {\n            $dataArray['priority'] = 2;\n            $dataArray['retry'] = $this->retry;\n            $dataArray['expire'] = $this->expire;\n        } elseif (isset($record['level']) && $record['level'] >= $this->highPriorityLevel) {\n            $dataArray['priority'] = 1;\n        }\n\n        // First determine the available parameters\n        $context = array_intersect_key($record['context'], $this->parameterNames);\n        $extra = array_intersect_key($record['extra'], $this->parameterNames);\n\n        // Least important info should be merged with subsequent info\n        $dataArray = array_merge($extra, $context, $dataArray);\n\n        // Only pass sounds that are supported by the API\n        if (isset($dataArray['sound']) && !in_array($dataArray['sound'], $this->sounds)) {\n            unset($dataArray['sound']);\n        }\n\n        return http_build_query($dataArray);\n    }\n\n    private function buildHeader(string $content): string\n    {\n        $header = \"POST /1/messages.json HTTP/1.1\\r\\n\";\n        $header .= \"Host: api.pushover.net\\r\\n\";\n        $header .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $header .= \"Content-Length: \" . strlen($content) . \"\\r\\n\";\n        $header .= \"\\r\\n\";\n\n        return $header;\n    }\n\n    protected function write(array $record): void\n    {\n        foreach ($this->users as $user) {\n            $this->user = $user;\n\n            parent::write($record);\n            $this->closeSocket();\n        }\n\n        $this->user = null;\n    }\n\n    /**\n     * @param int|string $value\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $value\n     */\n    public function setHighPriorityLevel($value): self\n    {\n        $this->highPriorityLevel = Logger::toMonologLevel($value);\n\n        return $this;\n    }\n\n    /**\n     * @param int|string $value\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $value\n     */\n    public function setEmergencyLevel($value): self\n    {\n        $this->emergencyLevel = Logger::toMonologLevel($value);\n\n        return $this;\n    }\n\n    /**\n     * Use the formatted message?\n     */\n    public function useFormattedMessage(bool $value): self\n    {\n        $this->useFormattedMessage = $value;\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/OverflowHandler.php","ext":"php","size":4533,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Handler to only pass log messages when a certain threshold of number of messages is reached.\n *\n * This can be useful in cases of processing a batch of data, but you're for example only interested\n * in case it fails catastrophically instead of a warning for 1 or 2 events. Worse things can happen, right?\n *\n * Usage example:\n *\n * ```\n *   $log = new Logger('application');\n *   $handler = new SomeHandler(...)\n *\n *   // Pass all warnings to the handler when more than 10 & all error messages when more then 5\n *   $overflow = new OverflowHandler($handler, [Logger::WARNING => 10, Logger::ERROR => 5]);\n *\n *   $log->pushHandler($overflow);\n *```\n *\n * @author Kris Buist <krisbuist@gmail.com>\n */\nclass OverflowHandler extends AbstractHandler implements FormattableHandlerInterface\n{\n    /** @var HandlerInterface */\n    private $handler;\n\n    /** @var int[] */\n    private $thresholdMap = [\n        Logger::DEBUG => 0,\n        Logger::INFO => 0,\n        Logger::NOTICE => 0,\n        Logger::WARNING => 0,\n        Logger::ERROR => 0,\n        Logger::CRITICAL => 0,\n        Logger::ALERT => 0,\n        Logger::EMERGENCY => 0,\n    ];\n\n    /**\n     * Buffer of all messages passed to the handler before the threshold was reached\n     *\n     * @var mixed[][]\n     */\n    private $buffer = [];\n\n    /**\n     * @param HandlerInterface $handler\n     * @param int[]            $thresholdMap Dictionary of logger level => threshold\n     */\n    public function __construct(\n        HandlerInterface $handler,\n        array $thresholdMap = [],\n        $level = Logger::DEBUG,\n        bool $bubble = true\n    ) {\n        $this->handler = $handler;\n        foreach ($thresholdMap as $thresholdLevel => $threshold) {\n            $this->thresholdMap[$thresholdLevel] = $threshold;\n        }\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * Handles a record.\n     *\n     * All records may be passed to this method, and the handler should discard\n     * those that it does not want to handle.\n     *\n     * The return value of this function controls the bubbling process of the handler stack.\n     * Unless the bubbling is interrupted (by returning true), the Logger class will keep on\n     * calling further handlers in the stack with a given log record.\n     *\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($record['level'] < $this->level) {\n            return false;\n        }\n\n        $level = $record['level'];\n\n        if (!isset($this->thresholdMap[$level])) {\n            $this->thresholdMap[$level] = 0;\n        }\n\n        if ($this->thresholdMap[$level] > 0) {\n            // The overflow threshold is not yet reached, so we're buffering the record and lowering the threshold by 1\n            $this->thresholdMap[$level]--;\n            $this->buffer[$level][] = $record;\n\n            return false === $this->bubble;\n        }\n\n        if ($this->thresholdMap[$level] == 0) {\n            // This current message is breaking the threshold. Flush the buffer and continue handling the current record\n            foreach ($this->buffer[$level] ?? [] as $buffered) {\n                $this->handler->handle($buffered);\n            }\n            $this->thresholdMap[$level]--;\n            unset($this->buffer[$level]);\n        }\n\n        $this->handler->handle($record);\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            $this->handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($this->handler).' does not support formatters.');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            return $this->handler->getFormatter();\n        }\n\n        throw new \\UnexpectedValueException('The nested handler of type '.get_class($this->handler).' does not support formatters.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/NewRelicHandler.php","ext":"php","size":6211,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Formatter\\NormalizerFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Class to record a log on a NewRelic application.\n * Enabling New Relic High Security mode may prevent capture of useful information.\n *\n * This handler requires a NormalizerFormatter to function and expects an array in $record['formatted']\n *\n * @see https://docs.newrelic.com/docs/agents/php-agent\n * @see https://docs.newrelic.com/docs/accounts-partnerships/accounts/security/high-security\n */\nclass NewRelicHandler extends AbstractProcessingHandler\n{\n    /**\n     * Name of the New Relic application that will receive logs from this handler.\n     *\n     * @var ?string\n     */\n    protected $appName;\n\n    /**\n     * Name of the current transaction\n     *\n     * @var ?string\n     */\n    protected $transactionName;\n\n    /**\n     * Some context and extra data is passed into the handler as arrays of values. Do we send them as is\n     * (useful if we are using the API), or explode them for display on the NewRelic RPM website?\n     *\n     * @var bool\n     */\n    protected $explodeArrays;\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param string|null $appName\n     * @param bool        $explodeArrays\n     * @param string|null $transactionName\n     */\n    public function __construct(\n        $level = Logger::ERROR,\n        bool $bubble = true,\n        ?string $appName = null,\n        bool $explodeArrays = false,\n        ?string $transactionName = null\n    ) {\n        parent::__construct($level, $bubble);\n\n        $this->appName       = $appName;\n        $this->explodeArrays = $explodeArrays;\n        $this->transactionName = $transactionName;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!$this->isNewRelicEnabled()) {\n            throw new MissingExtensionException('The newrelic PHP extension is required to use the NewRelicHandler');\n        }\n\n        if ($appName = $this->getAppName($record['context'])) {\n            $this->setNewRelicAppName($appName);\n        }\n\n        if ($transactionName = $this->getTransactionName($record['context'])) {\n            $this->setNewRelicTransactionName($transactionName);\n            unset($record['formatted']['context']['transaction_name']);\n        }\n\n        if (isset($record['context']['exception']) && $record['context']['exception'] instanceof \\Throwable) {\n            newrelic_notice_error($record['message'], $record['context']['exception']);\n            unset($record['formatted']['context']['exception']);\n        } else {\n            newrelic_notice_error($record['message']);\n        }\n\n        if (isset($record['formatted']['context']) && is_array($record['formatted']['context'])) {\n            foreach ($record['formatted']['context'] as $key => $parameter) {\n                if (is_array($parameter) && $this->explodeArrays) {\n                    foreach ($parameter as $paramKey => $paramValue) {\n                        $this->setNewRelicParameter('context_' . $key . '_' . $paramKey, $paramValue);\n                    }\n                } else {\n                    $this->setNewRelicParameter('context_' . $key, $parameter);\n                }\n            }\n        }\n\n        if (isset($record['formatted']['extra']) && is_array($record['formatted']['extra'])) {\n            foreach ($record['formatted']['extra'] as $key => $parameter) {\n                if (is_array($parameter) && $this->explodeArrays) {\n                    foreach ($parameter as $paramKey => $paramValue) {\n                        $this->setNewRelicParameter('extra_' . $key . '_' . $paramKey, $paramValue);\n                    }\n                } else {\n                    $this->setNewRelicParameter('extra_' . $key, $parameter);\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks whether the NewRelic extension is enabled in the system.\n     *\n     * @return bool\n     */\n    protected function isNewRelicEnabled(): bool\n    {\n        return extension_loaded('newrelic');\n    }\n\n    /**\n     * Returns the appname where this log should be sent. Each log can override the default appname, set in this\n     * handler's constructor, by providing the appname in it's context.\n     *\n     * @param mixed[] $context\n     */\n    protected function getAppName(array $context): ?string\n    {\n        if (isset($context['appname'])) {\n            return $context['appname'];\n        }\n\n        return $this->appName;\n    }\n\n    /**\n     * Returns the name of the current transaction. Each log can override the default transaction name, set in this\n     * handler's constructor, by providing the transaction_name in it's context\n     *\n     * @param mixed[] $context\n     */\n    protected function getTransactionName(array $context): ?string\n    {\n        if (isset($context['transaction_name'])) {\n            return $context['transaction_name'];\n        }\n\n        return $this->transactionName;\n    }\n\n    /**\n     * Sets the NewRelic application that should receive this log.\n     */\n    protected function setNewRelicAppName(string $appName): void\n    {\n        newrelic_set_appname($appName);\n    }\n\n    /**\n     * Overwrites the name of the current transaction\n     */\n    protected function setNewRelicTransactionName(string $transactionName): void\n    {\n        newrelic_name_transaction($transactionName);\n    }\n\n    /**\n     * @param string $key\n     * @param mixed  $value\n     */\n    protected function setNewRelicParameter(string $key, $value): void\n    {\n        if (null === $value || is_scalar($value)) {\n            newrelic_add_custom_parameter($key, $value);\n        } else {\n            newrelic_add_custom_parameter($key, Utils::jsonEncode($value, null, true));\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new NormalizerFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/CubeHandler.php","ext":"php","size":5399,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Logs to Cube.\n *\n * @link https://github.com/square/cube/wiki\n * @author Wan Chen <kami@kamisama.me>\n * @deprecated Since 2.8.0 and 3.2.0, Cube appears abandoned and thus we will drop this handler in Monolog 4\n */\nclass CubeHandler extends AbstractProcessingHandler\n{\n    /** @var resource|\\Socket|null */\n    private $udpConnection = null;\n    /** @var resource|\\CurlHandle|null */\n    private $httpConnection = null;\n    /** @var string */\n    private $scheme;\n    /** @var string */\n    private $host;\n    /** @var int */\n    private $port;\n    /** @var string[] */\n    private $acceptedSchemes = ['http', 'udp'];\n\n    /**\n     * Create a Cube handler\n     *\n     * @throws \\UnexpectedValueException when given url is not a valid url.\n     *                                   A valid url must consist of three parts : protocol://host:port\n     *                                   Only valid protocols used by Cube are http and udp\n     */\n    public function __construct(string $url, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        $urlInfo = parse_url($url);\n\n        if ($urlInfo === false || !isset($urlInfo['scheme'], $urlInfo['host'], $urlInfo['port'])) {\n            throw new \\UnexpectedValueException('URL \"'.$url.'\" is not valid');\n        }\n\n        if (!in_array($urlInfo['scheme'], $this->acceptedSchemes)) {\n            throw new \\UnexpectedValueException(\n                'Invalid protocol (' . $urlInfo['scheme']  . ').'\n                . ' Valid options are ' . implode(', ', $this->acceptedSchemes)\n            );\n        }\n\n        $this->scheme = $urlInfo['scheme'];\n        $this->host = $urlInfo['host'];\n        $this->port = (int) $urlInfo['port'];\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * Establish a connection to an UDP socket\n     *\n     * @throws \\LogicException           when unable to connect to the socket\n     * @throws MissingExtensionException when there is no socket extension\n     */\n    protected function connectUdp(): void\n    {\n        if (!extension_loaded('sockets')) {\n            throw new MissingExtensionException('The sockets extension is required to use udp URLs with the CubeHandler');\n        }\n\n        $udpConnection = socket_create(AF_INET, SOCK_DGRAM, 0);\n        if (false === $udpConnection) {\n            throw new \\LogicException('Unable to create a socket');\n        }\n\n        $this->udpConnection = $udpConnection;\n        if (!socket_connect($this->udpConnection, $this->host, $this->port)) {\n            throw new \\LogicException('Unable to connect to the socket at ' . $this->host . ':' . $this->port);\n        }\n    }\n\n    /**\n     * Establish a connection to an http server\n     *\n     * @throws \\LogicException           when unable to connect to the socket\n     * @throws MissingExtensionException when no curl extension\n     */\n    protected function connectHttp(): void\n    {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is required to use http URLs with the CubeHandler');\n        }\n\n        $httpConnection = curl_init('http://'.$this->host.':'.$this->port.'/1.0/event/put');\n        if (false === $httpConnection) {\n            throw new \\LogicException('Unable to connect to ' . $this->host . ':' . $this->port);\n        }\n\n        $this->httpConnection = $httpConnection;\n        curl_setopt($this->httpConnection, CURLOPT_CUSTOMREQUEST, \"POST\");\n        curl_setopt($this->httpConnection, CURLOPT_RETURNTRANSFER, true);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $date = $record['datetime'];\n\n        $data = ['time' => $date->format('Y-m-d\\TH:i:s.uO')];\n        unset($record['datetime']);\n\n        if (isset($record['context']['type'])) {\n            $data['type'] = $record['context']['type'];\n            unset($record['context']['type']);\n        } else {\n            $data['type'] = $record['channel'];\n        }\n\n        $data['data'] = $record['context'];\n        $data['data']['level'] = $record['level'];\n\n        if ($this->scheme === 'http') {\n            $this->writeHttp(Utils::jsonEncode($data));\n        } else {\n            $this->writeUdp(Utils::jsonEncode($data));\n        }\n    }\n\n    private function writeUdp(string $data): void\n    {\n        if (!$this->udpConnection) {\n            $this->connectUdp();\n        }\n\n        socket_send($this->udpConnection, $data, strlen($data), 0);\n    }\n\n    private function writeHttp(string $data): void\n    {\n        if (!$this->httpConnection) {\n            $this->connectHttp();\n        }\n\n        if (null === $this->httpConnection) {\n            throw new \\LogicException('No connection could be established');\n        }\n\n        curl_setopt($this->httpConnection, CURLOPT_POSTFIELDS, '['.$data.']');\n        curl_setopt($this->httpConnection, CURLOPT_HTTPHEADER, [\n            'Content-Type: application/json',\n            'Content-Length: ' . strlen('['.$data.']'),\n        ]);\n\n        Curl\\Util::execute($this->httpConnection, 5, false);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/Slack/SlackRecord.php","ext":"php","size":10688,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\Slack;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Formatter\\NormalizerFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Slack record utility helping to log to Slack webhooks or API.\n *\n * @author Greg Kedzierski <greg@gregkedzierski.com>\n * @author Haralan Dobrev <hkdobrev@gmail.com>\n * @see    https://api.slack.com/incoming-webhooks\n * @see    https://api.slack.com/docs/message-attachments\n *\n * @phpstan-import-type FormattedRecord from \\Monolog\\Handler\\AbstractProcessingHandler\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass SlackRecord\n{\n    public const COLOR_DANGER = 'danger';\n\n    public const COLOR_WARNING = 'warning';\n\n    public const COLOR_GOOD = 'good';\n\n    public const COLOR_DEFAULT = '#e3e4e6';\n\n    /**\n     * Slack channel (encoded ID or name)\n     * @var string|null\n     */\n    private $channel;\n\n    /**\n     * Name of a bot\n     * @var string|null\n     */\n    private $username;\n\n    /**\n     * User icon e.g. 'ghost', 'http://example.com/user.png'\n     * @var string|null\n     */\n    private $userIcon;\n\n    /**\n     * Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @var bool\n     */\n    private $useAttachment;\n\n    /**\n     * Whether the the context/extra messages added to Slack as attachments are in a short style\n     * @var bool\n     */\n    private $useShortAttachment;\n\n    /**\n     * Whether the attachment should include context and extra data\n     * @var bool\n     */\n    private $includeContextAndExtra;\n\n    /**\n     * Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     * @var string[]\n     */\n    private $excludeFields;\n\n    /**\n     * @var ?FormatterInterface\n     */\n    private $formatter;\n\n    /**\n     * @var NormalizerFormatter\n     */\n    private $normalizerFormatter;\n\n    /**\n     * @param string[] $excludeFields\n     */\n    public function __construct(\n        ?string $channel = null,\n        ?string $username = null,\n        bool $useAttachment = true,\n        ?string $userIcon = null,\n        bool $useShortAttachment = false,\n        bool $includeContextAndExtra = false,\n        array $excludeFields = array(),\n        ?FormatterInterface $formatter = null\n    ) {\n        $this\n            ->setChannel($channel)\n            ->setUsername($username)\n            ->useAttachment($useAttachment)\n            ->setUserIcon($userIcon)\n            ->useShortAttachment($useShortAttachment)\n            ->includeContextAndExtra($includeContextAndExtra)\n            ->excludeFields($excludeFields)\n            ->setFormatter($formatter);\n\n        if ($this->includeContextAndExtra) {\n            $this->normalizerFormatter = new NormalizerFormatter();\n        }\n    }\n\n    /**\n     * Returns required data in format that Slack\n     * is expecting.\n     *\n     * @phpstan-param FormattedRecord $record\n     * @phpstan-return mixed[]\n     */\n    public function getSlackData(array $record): array\n    {\n        $dataArray = array();\n        $record = $this->removeExcludedFields($record);\n\n        if ($this->username) {\n            $dataArray['username'] = $this->username;\n        }\n\n        if ($this->channel) {\n            $dataArray['channel'] = $this->channel;\n        }\n\n        if ($this->formatter && !$this->useAttachment) {\n            /** @phpstan-ignore-next-line */\n            $message = $this->formatter->format($record);\n        } else {\n            $message = $record['message'];\n        }\n\n        if ($this->useAttachment) {\n            $attachment = array(\n                'fallback'    => $message,\n                'text'        => $message,\n                'color'       => $this->getAttachmentColor($record['level']),\n                'fields'      => array(),\n                'mrkdwn_in'   => array('fields'),\n                'ts'          => $record['datetime']->getTimestamp(),\n                'footer'      => $this->username,\n                'footer_icon' => $this->userIcon,\n            );\n\n            if ($this->useShortAttachment) {\n                $attachment['title'] = $record['level_name'];\n            } else {\n                $attachment['title'] = 'Message';\n                $attachment['fields'][] = $this->generateAttachmentField('Level', $record['level_name']);\n            }\n\n            if ($this->includeContextAndExtra) {\n                foreach (array('extra', 'context') as $key) {\n                    if (empty($record[$key])) {\n                        continue;\n                    }\n\n                    if ($this->useShortAttachment) {\n                        $attachment['fields'][] = $this->generateAttachmentField(\n                            (string) $key,\n                            $record[$key]\n                        );\n                    } else {\n                        // Add all extra fields as individual fields in attachment\n                        $attachment['fields'] = array_merge(\n                            $attachment['fields'],\n                            $this->generateAttachmentFields($record[$key])\n                        );\n                    }\n                }\n            }\n\n            $dataArray['attachments'] = array($attachment);\n        } else {\n            $dataArray['text'] = $message;\n        }\n\n        if ($this->userIcon) {\n            if (filter_var($this->userIcon, FILTER_VALIDATE_URL)) {\n                $dataArray['icon_url'] = $this->userIcon;\n            } else {\n                $dataArray['icon_emoji'] = \":{$this->userIcon}:\";\n            }\n        }\n\n        return $dataArray;\n    }\n\n    /**\n     * Returns a Slack message attachment color associated with\n     * provided level.\n     */\n    public function getAttachmentColor(int $level): string\n    {\n        switch (true) {\n            case $level >= Logger::ERROR:\n                return static::COLOR_DANGER;\n            case $level >= Logger::WARNING:\n                return static::COLOR_WARNING;\n            case $level >= Logger::INFO:\n                return static::COLOR_GOOD;\n            default:\n                return static::COLOR_DEFAULT;\n        }\n    }\n\n    /**\n     * Stringifies an array of key/value pairs to be used in attachment fields\n     *\n     * @param mixed[] $fields\n     */\n    public function stringify(array $fields): string\n    {\n        /** @var Record $fields */\n        $normalized = $this->normalizerFormatter->format($fields);\n\n        $hasSecondDimension = count(array_filter($normalized, 'is_array'));\n        $hasNonNumericKeys = !count(array_filter(array_keys($normalized), 'is_numeric'));\n\n        return $hasSecondDimension || $hasNonNumericKeys\n            ? Utils::jsonEncode($normalized, JSON_PRETTY_PRINT|Utils::DEFAULT_JSON_FLAGS)\n            : Utils::jsonEncode($normalized, Utils::DEFAULT_JSON_FLAGS);\n    }\n\n    /**\n     * Channel used by the bot when posting\n     *\n     * @param ?string $channel\n     *\n     * @return static\n     */\n    public function setChannel(?string $channel = null): self\n    {\n        $this->channel = $channel;\n\n        return $this;\n    }\n\n    /**\n     * Username used by the bot when posting\n     *\n     * @param ?string $username\n     *\n     * @return static\n     */\n    public function setUsername(?string $username = null): self\n    {\n        $this->username = $username;\n\n        return $this;\n    }\n\n    public function useAttachment(bool $useAttachment = true): self\n    {\n        $this->useAttachment = $useAttachment;\n\n        return $this;\n    }\n\n    public function setUserIcon(?string $userIcon = null): self\n    {\n        $this->userIcon = $userIcon;\n\n        if (\\is_string($userIcon)) {\n            $this->userIcon = trim($userIcon, ':');\n        }\n\n        return $this;\n    }\n\n    public function useShortAttachment(bool $useShortAttachment = false): self\n    {\n        $this->useShortAttachment = $useShortAttachment;\n\n        return $this;\n    }\n\n    public function includeContextAndExtra(bool $includeContextAndExtra = false): self\n    {\n        $this->includeContextAndExtra = $includeContextAndExtra;\n\n        if ($this->includeContextAndExtra) {\n            $this->normalizerFormatter = new NormalizerFormatter();\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param string[] $excludeFields\n     */\n    public function excludeFields(array $excludeFields = []): self\n    {\n        $this->excludeFields = $excludeFields;\n\n        return $this;\n    }\n\n    public function setFormatter(?FormatterInterface $formatter = null): self\n    {\n        $this->formatter = $formatter;\n\n        return $this;\n    }\n\n    /**\n     * Generates attachment field\n     *\n     * @param string|mixed[] $value\n     *\n     * @return array{title: string, value: string, short: false}\n     */\n    private function generateAttachmentField(string $title, $value): array\n    {\n        $value = is_array($value)\n            ? sprintf('```%s```', substr($this->stringify($value), 0, 1990))\n            : $value;\n\n        return array(\n            'title' => ucfirst($title),\n            'value' => $value,\n            'short' => false,\n        );\n    }\n\n    /**\n     * Generates a collection of attachment fields from array\n     *\n     * @param mixed[] $data\n     *\n     * @return array<array{title: string, value: string, short: false}>\n     */\n    private function generateAttachmentFields(array $data): array\n    {\n        /** @var Record $data */\n        $normalized = $this->normalizerFormatter->format($data);\n\n        $fields = array();\n        foreach ($normalized as $key => $value) {\n            $fields[] = $this->generateAttachmentField((string) $key, $value);\n        }\n\n        return $fields;\n    }\n\n    /**\n     * Get a copy of record with fields excluded according to $this->excludeFields\n     *\n     * @phpstan-param FormattedRecord $record\n     *\n     * @return mixed[]\n     */\n    private function removeExcludedFields(array $record): array\n    {\n        foreach ($this->excludeFields as $field) {\n            $keys = explode('.', $field);\n            $node = &$record;\n            $lastKey = end($keys);\n            foreach ($keys as $key) {\n                if (!isset($node[$key])) {\n                    break;\n                }\n                if ($lastKey === $key) {\n                    unset($node[$key]);\n                    break;\n                }\n                $node = &$node[$key];\n            }\n        }\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/PsrHandler.php","ext":"php","size":2440,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LoggerInterface;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Proxies log messages to an existing PSR-3 compliant logger.\n *\n * If a formatter is configured, the formatter's output MUST be a string and the\n * formatted message will be fed to the wrapped PSR logger instead of the original\n * log record's message.\n *\n * @author Michael Moussa <michael.moussa@gmail.com>\n */\nclass PsrHandler extends AbstractHandler implements FormattableHandlerInterface\n{\n    /**\n     * PSR-3 compliant logger\n     *\n     * @var LoggerInterface\n     */\n    protected $logger;\n\n    /**\n     * @var FormatterInterface|null\n     */\n    protected $formatter;\n\n    /**\n     * @param LoggerInterface $logger The underlying PSR-3 compliant logger to which messages will be proxied\n     */\n    public function __construct(LoggerInterface $logger, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        $this->logger = $logger;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if (!$this->isHandling($record)) {\n            return false;\n        }\n\n        if ($this->formatter) {\n            $formatted = $this->formatter->format($record);\n            $this->logger->log(strtolower($record['level_name']), (string) $formatted, $record['context']);\n        } else {\n            $this->logger->log(strtolower($record['level_name']), $record['message'], $record['context']);\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * Sets the formatter.\n     *\n     * @param FormatterInterface $formatter\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        $this->formatter = $formatter;\n\n        return $this;\n    }\n\n    /**\n     * Gets the formatter.\n     *\n     * @return FormatterInterface\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        if (!$this->formatter) {\n            throw new \\LogicException('No formatter has been set and this handler does not have a default formatter');\n        }\n\n        return $this->formatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/MailHandler.php","ext":"php","size":2341,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\HtmlFormatter;\n\n/**\n * Base class for all mail handlers\n *\n * @author Gyula Sallai\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nabstract class MailHandler extends AbstractProcessingHandler\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        $messages = [];\n\n        foreach ($records as $record) {\n            if ($record['level'] < $this->level) {\n                continue;\n            }\n            /** @var Record $message */\n            $message = $this->processRecord($record);\n            $messages[] = $message;\n        }\n\n        if (!empty($messages)) {\n            $this->send((string) $this->getFormatter()->formatBatch($messages), $messages);\n        }\n    }\n\n    /**\n     * Send a mail with the given content\n     *\n     * @param string $content formatted email body to be sent\n     * @param array  $records the array of log records that formed this content\n     *\n     * @phpstan-param Record[] $records\n     */\n    abstract protected function send(string $content, array $records): void;\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->send((string) $record['formatted'], [$record]);\n    }\n\n    /**\n     * @phpstan-param non-empty-array<Record> $records\n     * @phpstan-return Record\n     */\n    protected function getHighestRecord(array $records): array\n    {\n        $highestRecord = null;\n        foreach ($records as $record) {\n            if ($highestRecord === null || $highestRecord['level'] < $record['level']) {\n                $highestRecord = $record;\n            }\n        }\n\n        return $highestRecord;\n    }\n\n    protected function isHtmlBody(string $body): bool\n    {\n        return ($body[0] ?? null) === '<';\n    }\n\n    /**\n     * Gets the default formatter.\n     *\n     * @return FormatterInterface\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new HtmlFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/HandlerWrapper.php","ext":"php","size":3358,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\ResettableInterface;\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * This simple wrapper class can be used to extend handlers functionality.\n *\n * Example: A custom filtering that can be applied to any handler.\n *\n * Inherit from this class and override handle() like this:\n *\n *   public function handle(array $record)\n *   {\n *        if ($record meets certain conditions) {\n *            return false;\n *        }\n *        return $this->handler->handle($record);\n *   }\n *\n * @author Alexey Karapetov <alexey@karapetov.com>\n */\nclass HandlerWrapper implements HandlerInterface, ProcessableHandlerInterface, FormattableHandlerInterface, ResettableInterface\n{\n    /**\n     * @var HandlerInterface\n     */\n    protected $handler;\n\n    public function __construct(HandlerInterface $handler)\n    {\n        $this->handler = $handler;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return $this->handler->isHandling($record);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        return $this->handler->handle($record);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        $this->handler->handleBatch($records);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        $this->handler->close();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function pushProcessor(callable $callback): HandlerInterface\n    {\n        if ($this->handler instanceof ProcessableHandlerInterface) {\n            $this->handler->pushProcessor($callback);\n\n            return $this;\n        }\n\n        throw new \\LogicException('The wrapped handler does not implement ' . ProcessableHandlerInterface::class);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function popProcessor(): callable\n    {\n        if ($this->handler instanceof ProcessableHandlerInterface) {\n            return $this->handler->popProcessor();\n        }\n\n        throw new \\LogicException('The wrapped handler does not implement ' . ProcessableHandlerInterface::class);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            $this->handler->setFormatter($formatter);\n\n            return $this;\n        }\n\n        throw new \\LogicException('The wrapped handler does not implement ' . FormattableHandlerInterface::class);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getFormatter(): FormatterInterface\n    {\n        if ($this->handler instanceof FormattableHandlerInterface) {\n            return $this->handler->getFormatter();\n        }\n\n        throw new \\LogicException('The wrapped handler does not implement ' . FormattableHandlerInterface::class);\n    }\n\n    public function reset()\n    {\n        if ($this->handler instanceof ResettableInterface) {\n            $this->handler->reset();\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerInterface.php","ext":"php","size":1197,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Processor\\ProcessorInterface;\n\n/**\n * Interface to describe loggers that have processors\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\ninterface ProcessableHandlerInterface\n{\n    /**\n     * Adds a processor in the stack.\n     *\n     * @psalm-param ProcessorInterface|callable(Record): Record $callback\n     *\n     * @param  ProcessorInterface|callable $callback\n     * @return HandlerInterface            self\n     */\n    public function pushProcessor(callable $callback): HandlerInterface;\n\n    /**\n     * Removes the processor on top of the stack and returns it.\n     *\n     * @psalm-return ProcessorInterface|callable(Record): Record $callback\n     *\n     * @throws \\LogicException             In case the processor stack is empty\n     * @return callable|ProcessorInterface\n     */\n    public function popProcessor(): callable;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/MongoDBHandler.php","ext":"php","size":2545,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse MongoDB\\Driver\\BulkWrite;\nuse MongoDB\\Driver\\Manager;\nuse MongoDB\\Client;\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\MongoDBFormatter;\n\n/**\n * Logs to a MongoDB database.\n *\n * Usage example:\n *\n *   $log = new \\Monolog\\Logger('application');\n *   $client = new \\MongoDB\\Client('mongodb://localhost:27017');\n *   $mongodb = new \\Monolog\\Handler\\MongoDBHandler($client, 'logs', 'prod');\n *   $log->pushHandler($mongodb);\n *\n * The above examples uses the MongoDB PHP library's client class; however, the\n * MongoDB\\Driver\\Manager class from ext-mongodb is also supported.\n */\nclass MongoDBHandler extends AbstractProcessingHandler\n{\n    /** @var \\MongoDB\\Collection */\n    private $collection;\n    /** @var Client|Manager */\n    private $manager;\n    /** @var string */\n    private $namespace;\n\n    /**\n     * Constructor.\n     *\n     * @param Client|Manager $mongodb    MongoDB library or driver client\n     * @param string         $database   Database name\n     * @param string         $collection Collection name\n     */\n    public function __construct($mongodb, string $database, string $collection, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!($mongodb instanceof Client || $mongodb instanceof Manager)) {\n            throw new \\InvalidArgumentException('MongoDB\\Client or MongoDB\\Driver\\Manager instance required');\n        }\n\n        if ($mongodb instanceof Client) {\n            $this->collection = $mongodb->selectCollection($database, $collection);\n        } else {\n            $this->manager = $mongodb;\n            $this->namespace = $database . '.' . $collection;\n        }\n\n        parent::__construct($level, $bubble);\n    }\n\n    protected function write(array $record): void\n    {\n        if (isset($this->collection)) {\n            $this->collection->insertOne($record['formatted']);\n        }\n\n        if (isset($this->manager, $this->namespace)) {\n            $bulk = new BulkWrite;\n            $bulk->insert($record[\"formatted\"]);\n            $this->manager->executeBulkWrite($this->namespace, $bulk);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new MongoDBFormatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ZendMonitorHandler.php","ext":"php","size":3137,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\NormalizerFormatter;\nuse Monolog\\Logger;\n\n/**\n * Handler sending logs to Zend Monitor\n *\n * @author  Christian Bergau <cbergau86@gmail.com>\n * @author  Jason Davis <happydude@jasondavis.net>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass ZendMonitorHandler extends AbstractProcessingHandler\n{\n    /**\n     * Monolog level / ZendMonitor Custom Event priority map\n     *\n     * @var array<int, int>\n     */\n    protected $levelMap = [];\n\n    /**\n     * @throws MissingExtensionException\n     */\n    public function __construct($level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!function_exists('zend_monitor_custom_event')) {\n            throw new MissingExtensionException(\n                'You must have Zend Server installed with Zend Monitor enabled in order to use this handler'\n            );\n        }\n        //zend monitor constants are not defined if zend monitor is not enabled.\n        $this->levelMap = [\n            Logger::DEBUG     => \\ZEND_MONITOR_EVENT_SEVERITY_INFO,\n            Logger::INFO      => \\ZEND_MONITOR_EVENT_SEVERITY_INFO,\n            Logger::NOTICE    => \\ZEND_MONITOR_EVENT_SEVERITY_INFO,\n            Logger::WARNING   => \\ZEND_MONITOR_EVENT_SEVERITY_WARNING,\n            Logger::ERROR     => \\ZEND_MONITOR_EVENT_SEVERITY_ERROR,\n            Logger::CRITICAL  => \\ZEND_MONITOR_EVENT_SEVERITY_ERROR,\n            Logger::ALERT     => \\ZEND_MONITOR_EVENT_SEVERITY_ERROR,\n            Logger::EMERGENCY => \\ZEND_MONITOR_EVENT_SEVERITY_ERROR,\n        ];\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->writeZendMonitorCustomEvent(\n            Logger::getLevelName($record['level']),\n            $record['message'],\n            $record['formatted'],\n            $this->levelMap[$record['level']]\n        );\n    }\n\n    /**\n     * Write to Zend Monitor Events\n     * @param string $type      Text displayed in \"Class Name (custom)\" field\n     * @param string $message   Text displayed in \"Error String\"\n     * @param array  $formatted Displayed in Custom Variables tab\n     * @param int    $severity  Set the event severity level (-1,0,1)\n     *\n     * @phpstan-param FormattedRecord $formatted\n     */\n    protected function writeZendMonitorCustomEvent(string $type, string $message, array $formatted, int $severity): void\n    {\n        zend_monitor_custom_event($type, $message, $formatted, $severity);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function getDefaultFormatter(): FormatterInterface\n    {\n        return new NormalizerFormatter();\n    }\n\n    /**\n     * @return array<int, int>\n     */\n    public function getLevelMap(): array\n    {\n        return $this->levelMap;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/AbstractProcessingHandler.php","ext":"php","size":1914,"mtime":1756373563,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Base Handler class providing the Handler structure, including processors and formatters\n *\n * Classes extending it should (in most cases) only implement write($record)\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @author Christophe Coevoet <stof@notk.org>\n *\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-type FormattedRecord array{message: string, context: mixed[], level: Level, level_name: LevelName, channel: string, datetime: \\DateTimeImmutable, extra: mixed[], formatted: mixed}\n */\nabstract class AbstractProcessingHandler extends AbstractHandler implements ProcessableHandlerInterface, FormattableHandlerInterface\n{\n    use ProcessableHandlerTrait;\n    use FormattableHandlerTrait;\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if (!$this->isHandling($record)) {\n            return false;\n        }\n\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        $record['formatted'] = $this->getFormatter()->format($record);\n\n        $this->write($record);\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * Writes the record down to the log of the implementing handler\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    abstract protected function write(array $record): void;\n\n    /**\n     * @return void\n     */\n    public function reset()\n    {\n        parent::reset();\n\n        $this->resetProcessors();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/BrowserConsoleHandler.php","ext":"php","size":9501,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Utils;\nuse Monolog\\Logger;\n\nuse function count;\nuse function headers_list;\nuse function stripos;\nuse function trigger_error;\n\nuse const E_USER_DEPRECATED;\n\n/**\n * Handler sending logs to browser's javascript console with no browser extension required\n *\n * @author Olivier Poitrey <rs@dailymotion.com>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass BrowserConsoleHandler extends AbstractProcessingHandler\n{\n    /** @var bool */\n    protected static $initialized = false;\n    /** @var FormattedRecord[] */\n    protected static $records = [];\n\n    protected const FORMAT_HTML = 'html';\n    protected const FORMAT_JS = 'js';\n    protected const FORMAT_UNKNOWN = 'unknown';\n\n    /**\n     * {@inheritDoc}\n     *\n     * Formatted output may contain some formatting markers to be transferred to `console.log` using the %c format.\n     *\n     * Example of formatted string:\n     *\n     *     You can do [[blue text]]{color: blue} or [[green background]]{background-color: green; color: white}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter('[[%channel%]]{macro: autolabel} [[%level_name%]]{font-weight: bold} %message%');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        // Accumulate records\n        static::$records[] = $record;\n\n        // Register shutdown handler if not already done\n        if (!static::$initialized) {\n            static::$initialized = true;\n            $this->registerShutdownFunction();\n        }\n    }\n\n    /**\n     * Convert records to javascript console commands and send it to the browser.\n     * This method is automatically called on PHP shutdown if output is HTML or Javascript.\n     */\n    public static function send(): void\n    {\n        $format = static::getResponseFormat();\n        if ($format === self::FORMAT_UNKNOWN) {\n            return;\n        }\n\n        if (count(static::$records)) {\n            if ($format === self::FORMAT_HTML) {\n                static::writeOutput('<script>' . static::generateScript() . '</script>');\n            } elseif ($format === self::FORMAT_JS) {\n                static::writeOutput(static::generateScript());\n            }\n            static::resetStatic();\n        }\n    }\n\n    public function close(): void\n    {\n        self::resetStatic();\n    }\n\n    public function reset()\n    {\n        parent::reset();\n\n        self::resetStatic();\n    }\n\n    /**\n     * Forget all logged records\n     */\n    public static function resetStatic(): void\n    {\n        static::$records = [];\n    }\n\n    /**\n     * Wrapper for register_shutdown_function to allow overriding\n     */\n    protected function registerShutdownFunction(): void\n    {\n        if (PHP_SAPI !== 'cli') {\n            register_shutdown_function(['Monolog\\Handler\\BrowserConsoleHandler', 'send']);\n        }\n    }\n\n    /**\n     * Wrapper for echo to allow overriding\n     */\n    protected static function writeOutput(string $str): void\n    {\n        echo $str;\n    }\n\n    /**\n     * Checks the format of the response\n     *\n     * If Content-Type is set to application/javascript or text/javascript -> js\n     * If Content-Type is set to text/html, or is unset -> html\n     * If Content-Type is anything else -> unknown\n     *\n     * @return string One of 'js', 'html' or 'unknown'\n     * @phpstan-return self::FORMAT_*\n     */\n    protected static function getResponseFormat(): string\n    {\n        // Check content type\n        foreach (headers_list() as $header) {\n            if (stripos($header, 'content-type:') === 0) {\n                return static::getResponseFormatFromContentType($header);\n            }\n        }\n\n        return self::FORMAT_HTML;\n    }\n\n    /**\n     * @return string One of 'js', 'html' or 'unknown'\n     * @phpstan-return self::FORMAT_*\n     */\n    protected static function getResponseFormatFromContentType(string $contentType): string\n    {\n        // This handler only works with HTML and javascript outputs\n        // text/javascript is obsolete in favour of application/javascript, but still used\n        if (stripos($contentType, 'application/javascript') !== false || stripos($contentType, 'text/javascript') !== false) {\n            return self::FORMAT_JS;\n        }\n\n        if (stripos($contentType, 'text/html') !== false) {\n            return self::FORMAT_HTML;\n        }\n\n        return self::FORMAT_UNKNOWN;\n    }\n\n    private static function generateScript(): string\n    {\n        $script = [];\n        foreach (static::$records as $record) {\n            $context = static::dump('Context', $record['context']);\n            $extra = static::dump('Extra', $record['extra']);\n\n            if (empty($context) && empty($extra)) {\n                $script[] = static::call_array(static::getConsoleMethodForLevel($record['level']), static::handleStyles($record['formatted']));\n            } else {\n                $script = array_merge(\n                    $script,\n                    [static::call_array('groupCollapsed', static::handleStyles($record['formatted']))],\n                    $context,\n                    $extra,\n                    [static::call('groupEnd')]\n                );\n            }\n        }\n\n        return \"(function (c) {if (c && c.groupCollapsed) {\\n\" . implode(\"\\n\", $script) . \"\\n}})(console);\";\n    }\n\n    private static function getConsoleMethodForLevel(int $level): string\n    {\n        return [\n            Logger::DEBUG => 'debug',\n            Logger::INFO => 'info',\n            Logger::NOTICE => 'info',\n            Logger::WARNING => 'warn',\n            Logger::ERROR => 'error',\n            Logger::CRITICAL => 'error',\n            Logger::ALERT => 'error',\n            Logger::EMERGENCY => 'error',\n        ][$level] ?? 'log';\n    }\n\n    /**\n     * @return string[]\n     */\n    private static function handleStyles(string $formatted): array\n    {\n        $args = [];\n        $format = '%c' . $formatted;\n        preg_match_all('/\\[\\[(.*?)\\]\\]\\{([^}]*)\\}/s', $format, $matches, PREG_OFFSET_CAPTURE | PREG_SET_ORDER);\n\n        foreach (array_reverse($matches) as $match) {\n            $args[] = '\"font-weight: normal\"';\n            $args[] = static::quote(static::handleCustomStyles($match[2][0], $match[1][0]));\n\n            $pos = $match[0][1];\n            $format = Utils::substr($format, 0, $pos) . '%c' . $match[1][0] . '%c' . Utils::substr($format, $pos + strlen($match[0][0]));\n        }\n\n        $args[] = static::quote('font-weight: normal');\n        $args[] = static::quote($format);\n\n        return array_reverse($args);\n    }\n\n    private static function handleCustomStyles(string $style, string $string): string\n    {\n        static $colors = ['blue', 'green', 'red', 'magenta', 'orange', 'black', 'grey'];\n        static $labels = [];\n\n        $style = preg_replace_callback('/macro\\s*:(.*?)(?:;|$)/', function (array $m) use ($string, &$colors, &$labels) {\n            if (trim($m[1]) === 'autolabel') {\n                // Format the string as a label with consistent auto assigned background color\n                if (!isset($labels[$string])) {\n                    $labels[$string] = $colors[count($labels) % count($colors)];\n                }\n                $color = $labels[$string];\n\n                return \"background-color: $color; color: white; border-radius: 3px; padding: 0 2px 0 2px\";\n            }\n\n            return $m[1];\n        }, $style);\n\n        if (null === $style) {\n            $pcreErrorCode = preg_last_error();\n            throw new \\RuntimeException('Failed to run preg_replace_callback: ' . $pcreErrorCode . ' / ' . Utils::pcreLastErrorMessage($pcreErrorCode));\n        }\n\n        return $style;\n    }\n\n    /**\n     * @param  mixed[] $dict\n     * @return mixed[]\n     */\n    private static function dump(string $title, array $dict): array\n    {\n        $script = [];\n        $dict = array_filter($dict);\n        if (empty($dict)) {\n            return $script;\n        }\n        $script[] = static::call('log', static::quote('%c%s'), static::quote('font-weight: bold'), static::quote($title));\n        foreach ($dict as $key => $value) {\n            $value = json_encode($value);\n            if (empty($value)) {\n                $value = static::quote('');\n            }\n            $script[] = static::call('log', static::quote('%s: %o'), static::quote((string) $key), $value);\n        }\n\n        return $script;\n    }\n\n    private static function quote(string $arg): string\n    {\n        return '\"' . addcslashes($arg, \"\\\"\\n\\\\\") . '\"';\n    }\n\n    /**\n     * @param mixed $args\n     */\n    private static function call(...$args): string\n    {\n        $method = array_shift($args);\n        if (!is_string($method)) {\n            throw new \\UnexpectedValueException('Expected the first arg to be a string, got: '.var_export($method, true));\n        }\n\n        return static::call_array($method, $args);\n    }\n\n    /**\n     * @param mixed[] $args\n     */\n    private static function call_array(string $method, array $args): string\n    {\n        return 'c.' . $method . '(' . implode(', ', $args) . ');';\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ElasticaHandler.php","ext":"php","size":3328,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Elastica\\Document;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\ElasticaFormatter;\nuse Monolog\\Logger;\nuse Elastica\\Client;\nuse Elastica\\Exception\\ExceptionInterface;\n\n/**\n * Elastic Search handler\n *\n * Usage example:\n *\n *    $client = new \\Elastica\\Client();\n *    $options = array(\n *        'index' => 'elastic_index_name',\n *        'type' => 'elastic_doc_type', Types have been removed in Elastica 7\n *    );\n *    $handler = new ElasticaHandler($client, $options);\n *    $log = new Logger('application');\n *    $log->pushHandler($handler);\n *\n * @author Jelle Vink <jelle.vink@gmail.com>\n */\nclass ElasticaHandler extends AbstractProcessingHandler\n{\n    /**\n     * @var Client\n     */\n    protected $client;\n\n    /**\n     * @var mixed[] Handler config options\n     */\n    protected $options = [];\n\n    /**\n     * @param Client  $client  Elastica Client object\n     * @param mixed[] $options Handler configuration\n     */\n    public function __construct(Client $client, array $options = [], $level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n        $this->client = $client;\n        $this->options = array_merge(\n            [\n                'index'          => 'monolog',      // Elastic index name\n                'type'           => 'record',       // Elastic document type\n                'ignore_error'   => false,          // Suppress Elastica exceptions\n            ],\n            $options\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->bulkSend([$record['formatted']]);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if ($formatter instanceof ElasticaFormatter) {\n            return parent::setFormatter($formatter);\n        }\n\n        throw new \\InvalidArgumentException('ElasticaHandler is only compatible with ElasticaFormatter');\n    }\n\n    /**\n     * @return mixed[]\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new ElasticaFormatter($this->options['index'], $this->options['type']);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        $documents = $this->getFormatter()->formatBatch($records);\n        $this->bulkSend($documents);\n    }\n\n    /**\n     * Use Elasticsearch bulk API to send list of documents\n     *\n     * @param Document[] $documents\n     *\n     * @throws \\RuntimeException\n     */\n    protected function bulkSend(array $documents): void\n    {\n        try {\n            $this->client->addDocuments($documents);\n        } catch (ExceptionInterface $e) {\n            if (!$this->options['ignore_error']) {\n                throw new \\RuntimeException(\"Error sending messages to Elasticsearch\", 0, $e);\n            }\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SyslogUdp/UdpSocket.php","ext":"php","size":2168,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler\\SyslogUdp;\n\nuse Monolog\\Utils;\nuse Socket;\n\nclass UdpSocket\n{\n    protected const DATAGRAM_MAX_LENGTH = 65023;\n\n    /** @var string */\n    protected $ip;\n    /** @var int */\n    protected $port;\n    /** @var resource|Socket|null */\n    protected $socket = null;\n\n    public function __construct(string $ip, int $port = 514)\n    {\n        $this->ip = $ip;\n        $this->port = $port;\n    }\n\n    /**\n     * @param  string $line\n     * @param  string $header\n     * @return void\n     */\n    public function write($line, $header = \"\")\n    {\n        $this->send($this->assembleMessage($line, $header));\n    }\n\n    public function close(): void\n    {\n        if (is_resource($this->socket) || $this->socket instanceof Socket) {\n            socket_close($this->socket);\n            $this->socket = null;\n        }\n    }\n\n    /**\n     * @return resource|Socket\n     */\n    protected function getSocket()\n    {\n        if (null !== $this->socket) {\n            return $this->socket;\n        }\n\n        $domain = AF_INET;\n        $protocol = SOL_UDP;\n        // Check if we are using unix sockets.\n        if ($this->port === 0) {\n            $domain = AF_UNIX;\n            $protocol = IPPROTO_IP;\n        }\n\n        $this->socket = socket_create($domain, SOCK_DGRAM, $protocol) ?: null;\n        if (null === $this->socket) {\n            throw new \\RuntimeException('The UdpSocket to '.$this->ip.':'.$this->port.' could not be opened via socket_create');\n        }\n\n        return $this->socket;\n    }\n\n    protected function send(string $chunk): void\n    {\n        socket_sendto($this->getSocket(), $chunk, strlen($chunk), $flags = 0, $this->ip, $this->port);\n    }\n\n    protected function assembleMessage(string $line, string $header): string\n    {\n        $chunkSize = static::DATAGRAM_MAX_LENGTH - strlen($header);\n\n        return $header . Utils::substr($line, 0, $chunkSize);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/AbstractSyslogHandler.php","ext":"php","size":3540,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\n\n/**\n * Common syslog functionality\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nabstract class AbstractSyslogHandler extends AbstractProcessingHandler\n{\n    /** @var int */\n    protected $facility;\n\n    /**\n     * Translates Monolog log levels to syslog log priorities.\n     * @var array\n     * @phpstan-var array<Level, int>\n     */\n    protected $logLevels = [\n        Logger::DEBUG     => LOG_DEBUG,\n        Logger::INFO      => LOG_INFO,\n        Logger::NOTICE    => LOG_NOTICE,\n        Logger::WARNING   => LOG_WARNING,\n        Logger::ERROR     => LOG_ERR,\n        Logger::CRITICAL  => LOG_CRIT,\n        Logger::ALERT     => LOG_ALERT,\n        Logger::EMERGENCY => LOG_EMERG,\n    ];\n\n    /**\n     * List of valid log facility names.\n     * @var array<string, int>\n     */\n    protected $facilities = [\n        'auth'     => LOG_AUTH,\n        'authpriv' => LOG_AUTHPRIV,\n        'cron'     => LOG_CRON,\n        'daemon'   => LOG_DAEMON,\n        'kern'     => LOG_KERN,\n        'lpr'      => LOG_LPR,\n        'mail'     => LOG_MAIL,\n        'news'     => LOG_NEWS,\n        'syslog'   => LOG_SYSLOG,\n        'user'     => LOG_USER,\n        'uucp'     => LOG_UUCP,\n    ];\n\n    /**\n     * @param string|int $facility Either one of the names of the keys in $this->facilities, or a LOG_* facility constant\n     */\n    public function __construct($facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        if (!defined('PHP_WINDOWS_VERSION_BUILD')) {\n            $this->facilities['local0'] = LOG_LOCAL0;\n            $this->facilities['local1'] = LOG_LOCAL1;\n            $this->facilities['local2'] = LOG_LOCAL2;\n            $this->facilities['local3'] = LOG_LOCAL3;\n            $this->facilities['local4'] = LOG_LOCAL4;\n            $this->facilities['local5'] = LOG_LOCAL5;\n            $this->facilities['local6'] = LOG_LOCAL6;\n            $this->facilities['local7'] = LOG_LOCAL7;\n        } else {\n            $this->facilities['local0'] = 128; // LOG_LOCAL0\n            $this->facilities['local1'] = 136; // LOG_LOCAL1\n            $this->facilities['local2'] = 144; // LOG_LOCAL2\n            $this->facilities['local3'] = 152; // LOG_LOCAL3\n            $this->facilities['local4'] = 160; // LOG_LOCAL4\n            $this->facilities['local5'] = 168; // LOG_LOCAL5\n            $this->facilities['local6'] = 176; // LOG_LOCAL6\n            $this->facilities['local7'] = 184; // LOG_LOCAL7\n        }\n\n        // convert textual description of facility to syslog constant\n        if (is_string($facility) && array_key_exists(strtolower($facility), $this->facilities)) {\n            $facility = $this->facilities[strtolower($facility)];\n        } elseif (!in_array($facility, array_values($this->facilities), true)) {\n            throw new \\UnexpectedValueException('Unknown facility value \"'.$facility.'\" given');\n        }\n\n        $this->facility = $facility;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter('%channel%.%level_name%: %message% %context% %extra%');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ProcessableHandlerTrait.php","ext":"php","size":1737,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\ResettableInterface;\nuse Monolog\\Processor\\ProcessorInterface;\n\n/**\n * Helper trait for implementing ProcessableInterface\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\ntrait ProcessableHandlerTrait\n{\n    /**\n     * @var callable[]\n     * @phpstan-var array<ProcessorInterface|callable(Record): Record>\n     */\n    protected $processors = [];\n\n    /**\n     * {@inheritDoc}\n     */\n    public function pushProcessor(callable $callback): HandlerInterface\n    {\n        array_unshift($this->processors, $callback);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function popProcessor(): callable\n    {\n        if (!$this->processors) {\n            throw new \\LogicException('You tried to pop from an empty processor stack.');\n        }\n\n        return array_shift($this->processors);\n    }\n\n    /**\n     * Processes a record.\n     *\n     * @phpstan-param  Record $record\n     * @phpstan-return Record\n     */\n    protected function processRecord(array $record): array\n    {\n        foreach ($this->processors as $processor) {\n            $record = $processor($record);\n        }\n\n        return $record;\n    }\n\n    protected function resetProcessors(): void\n    {\n        foreach ($this->processors as $processor) {\n            if ($processor instanceof ResettableInterface) {\n                $processor->reset();\n            }\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/LogglyHandler.php","ext":"php","size":4098,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LogglyFormatter;\nuse function array_key_exists;\nuse CurlHandle;\n\n/**\n * Sends errors to Loggly.\n *\n * @author Przemek Sobstel <przemek@sobstel.org>\n * @author Adam Pancutt <adam@pancutt.com>\n * @author Gregory Barchard <gregory@barchard.net>\n */\nclass LogglyHandler extends AbstractProcessingHandler\n{\n    protected const HOST = 'logs-01.loggly.com';\n    protected const ENDPOINT_SINGLE = 'inputs';\n    protected const ENDPOINT_BATCH = 'bulk';\n\n    /**\n     * Caches the curl handlers for every given endpoint.\n     *\n     * @var resource[]|CurlHandle[]\n     */\n    protected $curlHandlers = [];\n\n    /** @var string */\n    protected $token;\n\n    /** @var string[] */\n    protected $tag = [];\n\n    /**\n     * @param string $token API token supplied by Loggly\n     *\n     * @throws MissingExtensionException If the curl extension is missing\n     */\n    public function __construct(string $token, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is needed to use the LogglyHandler');\n        }\n\n        $this->token = $token;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * Loads and returns the shared curl handler for the given endpoint.\n     *\n     * @param string $endpoint\n     *\n     * @return resource|CurlHandle\n     */\n    protected function getCurlHandler(string $endpoint)\n    {\n        if (!array_key_exists($endpoint, $this->curlHandlers)) {\n            $this->curlHandlers[$endpoint] = $this->loadCurlHandle($endpoint);\n        }\n\n        return $this->curlHandlers[$endpoint];\n    }\n\n    /**\n     * Starts a fresh curl session for the given endpoint and returns its handler.\n     *\n     * @param string $endpoint\n     *\n     * @return resource|CurlHandle\n     */\n    private function loadCurlHandle(string $endpoint)\n    {\n        $url = sprintf(\"https://%s/%s/%s/\", static::HOST, $endpoint, $this->token);\n\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_POST, true);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n        return $ch;\n    }\n\n    /**\n     * @param string[]|string $tag\n     */\n    public function setTag($tag): self\n    {\n        $tag = !empty($tag) ? $tag : [];\n        $this->tag = is_array($tag) ? $tag : [$tag];\n\n        return $this;\n    }\n\n    /**\n     * @param string[]|string $tag\n     */\n    public function addTag($tag): self\n    {\n        if (!empty($tag)) {\n            $tag = is_array($tag) ? $tag : [$tag];\n            $this->tag = array_unique(array_merge($this->tag, $tag));\n        }\n\n        return $this;\n    }\n\n    protected function write(array $record): void\n    {\n        $this->send($record[\"formatted\"], static::ENDPOINT_SINGLE);\n    }\n\n    public function handleBatch(array $records): void\n    {\n        $level = $this->level;\n\n        $records = array_filter($records, function ($record) use ($level) {\n            return ($record['level'] >= $level);\n        });\n\n        if ($records) {\n            $this->send($this->getFormatter()->formatBatch($records), static::ENDPOINT_BATCH);\n        }\n    }\n\n    protected function send(string $data, string $endpoint): void\n    {\n        $ch = $this->getCurlHandler($endpoint);\n\n        $headers = ['Content-Type: application/json'];\n\n        if (!empty($this->tag)) {\n            $headers[] = 'X-LOGGLY-TAG: '.implode(',', $this->tag);\n        }\n\n        curl_setopt($ch, CURLOPT_POSTFIELDS, $data);\n        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);\n\n        Curl\\Util::execute($ch, 5, false);\n    }\n\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LogglyFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FormattableHandlerInterface.php","ext":"php","size":845,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\n\n/**\n * Interface to describe loggers that have a formatter\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\ninterface FormattableHandlerInterface\n{\n    /**\n     * Sets the formatter.\n     *\n     * @param  FormatterInterface $formatter\n     * @return HandlerInterface   self\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface;\n\n    /**\n     * Gets the formatter.\n     *\n     * @return FormatterInterface\n     */\n    public function getFormatter(): FormatterInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SlackWebhookHandler.php","ext":"php","size":3923,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Handler\\Slack\\SlackRecord;\n\n/**\n * Sends notifications through Slack Webhooks\n *\n * @author Haralan Dobrev <hkdobrev@gmail.com>\n * @see    https://api.slack.com/incoming-webhooks\n */\nclass SlackWebhookHandler extends AbstractProcessingHandler\n{\n    /**\n     * Slack Webhook token\n     * @var string\n     */\n    private $webhookUrl;\n\n    /**\n     * Instance of the SlackRecord util class preparing data for Slack API.\n     * @var SlackRecord\n     */\n    private $slackRecord;\n\n    /**\n     * @param string      $webhookUrl             Slack Webhook URL\n     * @param string|null $channel                Slack channel (encoded ID or name)\n     * @param string|null $username               Name of a bot\n     * @param bool        $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @param string|null $iconEmoji              The emoji name to use (or null)\n     * @param bool        $useShortAttachment     Whether the the context/extra messages added to Slack as attachments are in a short style\n     * @param bool        $includeContextAndExtra Whether the attachment should include context and extra data\n     * @param string[]    $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     */\n    public function __construct(\n        string $webhookUrl,\n        ?string $channel = null,\n        ?string $username = null,\n        bool $useAttachment = true,\n        ?string $iconEmoji = null,\n        bool $useShortAttachment = false,\n        bool $includeContextAndExtra = false,\n        $level = Logger::CRITICAL,\n        bool $bubble = true,\n        array $excludeFields = array()\n    ) {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is needed to use the SlackWebhookHandler');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->webhookUrl = $webhookUrl;\n\n        $this->slackRecord = new SlackRecord(\n            $channel,\n            $username,\n            $useAttachment,\n            $iconEmoji,\n            $useShortAttachment,\n            $includeContextAndExtra,\n            $excludeFields\n        );\n    }\n\n    public function getSlackRecord(): SlackRecord\n    {\n        return $this->slackRecord;\n    }\n\n    public function getWebhookUrl(): string\n    {\n        return $this->webhookUrl;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $postData = $this->slackRecord->getSlackData($record);\n        $postString = Utils::jsonEncode($postData);\n\n        $ch = curl_init();\n        $options = array(\n            CURLOPT_URL => $this->webhookUrl,\n            CURLOPT_POST => true,\n            CURLOPT_RETURNTRANSFER => true,\n            CURLOPT_HTTPHEADER => array('Content-type: application/json'),\n            CURLOPT_POSTFIELDS => $postString,\n        );\n        if (defined('CURLOPT_SAFE_UPLOAD')) {\n            $options[CURLOPT_SAFE_UPLOAD] = true;\n        }\n\n        curl_setopt_array($ch, $options);\n\n        Curl\\Util::execute($ch);\n    }\n\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        parent::setFormatter($formatter);\n        $this->slackRecord->setFormatter($formatter);\n\n        return $this;\n    }\n\n    public function getFormatter(): FormatterInterface\n    {\n        $formatter = parent::getFormatter();\n        $this->slackRecord->setFormatter($formatter);\n\n        return $formatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/NoopHandler.php","ext":"php","size":880,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * No-op\n *\n * This handler handles anything, but does nothing, and does not stop bubbling to the rest of the stack.\n * This can be used for testing, or to disable a handler when overriding a configuration without\n * influencing the rest of the stack.\n *\n * @author Roel Harbers <roelharbers@gmail.com>\n */\nclass NoopHandler extends Handler\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        return true;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        return false;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ElasticsearchHandler.php","ext":"php","size":6571,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Elastic\\Elasticsearch\\Response\\Elasticsearch;\nuse Throwable;\nuse RuntimeException;\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\ElasticsearchFormatter;\nuse InvalidArgumentException;\nuse Elasticsearch\\Common\\Exceptions\\RuntimeException as ElasticsearchRuntimeException;\nuse Elasticsearch\\Client;\nuse Elastic\\Elasticsearch\\Exception\\InvalidArgumentException as ElasticInvalidArgumentException;\nuse Elastic\\Elasticsearch\\Client as Client8;\n\n/**\n * Elasticsearch handler\n *\n * @link https://www.elastic.co/guide/en/elasticsearch/client/php-api/current/index.html\n *\n * Simple usage example:\n *\n *    $client = \\Elasticsearch\\ClientBuilder::create()\n *        ->setHosts($hosts)\n *        ->build();\n *\n *    $options = array(\n *        'index' => 'elastic_index_name',\n *        'type'  => 'elastic_doc_type',\n *    );\n *    $handler = new ElasticsearchHandler($client, $options);\n *    $log = new Logger('application');\n *    $log->pushHandler($handler);\n *\n * @author Avtandil Kikabidze <akalongman@gmail.com>\n */\nclass ElasticsearchHandler extends AbstractProcessingHandler\n{\n    /**\n     * @var Client|Client8\n     */\n    protected $client;\n\n    /**\n     * @var mixed[] Handler config options\n     */\n    protected $options = [];\n\n    /**\n     * @var bool\n     */\n    private $needsType;\n\n    /**\n     * @param Client|Client8 $client  Elasticsearch Client object\n     * @param mixed[]        $options Handler configuration\n     */\n    public function __construct($client, array $options = [], $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!$client instanceof Client && !$client instanceof Client8) {\n            throw new \\TypeError('Elasticsearch\\Client or Elastic\\Elasticsearch\\Client instance required');\n        }\n\n        parent::__construct($level, $bubble);\n        $this->client = $client;\n        $this->options = array_merge(\n            [\n                'index'        => 'monolog', // Elastic index name\n                'type'         => '_doc',    // Elastic document type\n                'ignore_error' => false,     // Suppress Elasticsearch exceptions\n            ],\n            $options\n        );\n\n        if ($client instanceof Client8 || $client::VERSION[0] === '7') {\n            $this->needsType = false;\n            // force the type to _doc for ES8/ES7\n            $this->options['type'] = '_doc';\n        } else {\n            $this->needsType = true;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->bulkSend([$record['formatted']]);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        if ($formatter instanceof ElasticsearchFormatter) {\n            return parent::setFormatter($formatter);\n        }\n\n        throw new InvalidArgumentException('ElasticsearchHandler is only compatible with ElasticsearchFormatter');\n    }\n\n    /**\n     * Getter options\n     *\n     * @return mixed[]\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new ElasticsearchFormatter($this->options['index'], $this->options['type']);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        $documents = $this->getFormatter()->formatBatch($records);\n        $this->bulkSend($documents);\n    }\n\n    /**\n     * Use Elasticsearch bulk API to send list of documents\n     *\n     * @param  array[]           $records Records + _index/_type keys\n     * @throws \\RuntimeException\n     */\n    protected function bulkSend(array $records): void\n    {\n        try {\n            $params = [\n                'body' => [],\n            ];\n\n            foreach ($records as $record) {\n                $params['body'][] = [\n                    'index' => $this->needsType ? [\n                        '_index' => $record['_index'],\n                        '_type'  => $record['_type'],\n                    ] : [\n                        '_index' => $record['_index'],\n                    ],\n                ];\n                unset($record['_index'], $record['_type']);\n\n                $params['body'][] = $record;\n            }\n\n            /** @var Elasticsearch */\n            $responses = $this->client->bulk($params);\n\n            if ($responses['errors'] === true) {\n                throw $this->createExceptionFromResponses($responses);\n            }\n        } catch (Throwable $e) {\n            if (! $this->options['ignore_error']) {\n                throw new RuntimeException('Error sending messages to Elasticsearch', 0, $e);\n            }\n        }\n    }\n\n    /**\n     * Creates elasticsearch exception from responses array\n     *\n     * Only the first error is converted into an exception.\n     *\n     * @param mixed[]|Elasticsearch $responses returned by $this->client->bulk()\n     */\n    protected function createExceptionFromResponses($responses): Throwable\n    {\n        // @phpstan-ignore offsetAccess.nonOffsetAccessible\n        foreach ($responses['items'] ?? [] as $item) {\n            if (isset($item['index']['error'])) {\n                return $this->createExceptionFromError($item['index']['error']);\n            }\n        }\n\n        if (class_exists(ElasticInvalidArgumentException::class)) {\n            return new ElasticInvalidArgumentException('Elasticsearch failed to index one or more records.');\n        }\n\n        return new ElasticsearchRuntimeException('Elasticsearch failed to index one or more records.');\n    }\n\n    /**\n     * Creates elasticsearch exception from error array\n     *\n     * @param mixed[] $error\n     */\n    protected function createExceptionFromError(array $error): Throwable\n    {\n        $previous = isset($error['caused_by']) ? $this->createExceptionFromError($error['caused_by']) : null;\n\n        if (class_exists(ElasticInvalidArgumentException::class)) {\n            return new ElasticInvalidArgumentException($error['type'] . ': ' . $error['reason'], 0, $previous);\n        }\n\n        return new ElasticsearchRuntimeException($error['type'] . ': ' . $error['reason'], 0, $previous);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SwiftMailerHandler.php","ext":"php","size":3669,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\nuse Swift_Message;\nuse Swift;\n\n/**\n * SwiftMailerHandler uses Swift_Mailer to send the emails\n *\n * @author Gyula Sallai\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @deprecated Since Monolog 2.6. Use SymfonyMailerHandler instead.\n */\nclass SwiftMailerHandler extends MailHandler\n{\n    /** @var \\Swift_Mailer */\n    protected $mailer;\n    /** @var Swift_Message|callable(string, Record[]): Swift_Message */\n    private $messageTemplate;\n\n    /**\n     * @psalm-param Swift_Message|callable(string, Record[]): Swift_Message $message\n     *\n     * @param \\Swift_Mailer          $mailer  The mailer to use\n     * @param callable|Swift_Message $message An example message for real messages, only the body will be replaced\n     */\n    public function __construct(\\Swift_Mailer $mailer, $message, $level = Logger::ERROR, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        @trigger_error('The SwiftMailerHandler is deprecated since Monolog 2.6. Use SymfonyMailerHandler instead.', E_USER_DEPRECATED);\n\n        $this->mailer = $mailer;\n        $this->messageTemplate = $message;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function send(string $content, array $records): void\n    {\n        $this->mailer->send($this->buildMessage($content, $records));\n    }\n\n    /**\n     * Gets the formatter for the Swift_Message subject.\n     *\n     * @param string|null $format The format of the subject\n     */\n    protected function getSubjectFormatter(?string $format): FormatterInterface\n    {\n        return new LineFormatter($format);\n    }\n\n    /**\n     * Creates instance of Swift_Message to be sent\n     *\n     * @param  string        $content formatted email body to be sent\n     * @param  array         $records Log records that formed the content\n     * @return Swift_Message\n     *\n     * @phpstan-param Record[] $records\n     */\n    protected function buildMessage(string $content, array $records): Swift_Message\n    {\n        $message = null;\n        if ($this->messageTemplate instanceof Swift_Message) {\n            $message = clone $this->messageTemplate;\n            $message->generateId();\n        } elseif (is_callable($this->messageTemplate)) {\n            $message = ($this->messageTemplate)($content, $records);\n        }\n\n        if (!$message instanceof Swift_Message) {\n            $record = reset($records);\n            throw new \\InvalidArgumentException('Could not resolve message as instance of Swift_Message or a callable returning it' . ($record ? Utils::getRecordMessageForException($record) : ''));\n        }\n\n        if ($records) {\n            $subjectFormatter = $this->getSubjectFormatter($message->getSubject());\n            $message->setSubject($subjectFormatter->format($this->getHighestRecord($records)));\n        }\n\n        $mime = 'text/plain';\n        if ($this->isHtmlBody($content)) {\n            $mime = 'text/html';\n        }\n\n        $message->setBody($content, $mime);\n        /** @phpstan-ignore-next-line */\n        if (version_compare(Swift::VERSION, '6.0.0', '>=')) {\n            $message->setDate(new \\DateTimeImmutable());\n        } else {\n            /** @phpstan-ignore-next-line */\n            $message->setDate(time());\n        }\n\n        return $message;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SqsHandler.php","ext":"php","size":1746,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Aws\\Sqs\\SqsClient;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Writes to any sqs queue.\n *\n * @author Martijn van Calker <git@amvc.nl>\n */\nclass SqsHandler extends AbstractProcessingHandler\n{\n    /** 256 KB in bytes - maximum message size in SQS */\n    protected const MAX_MESSAGE_SIZE = 262144;\n    /** 100 KB in bytes - head message size for new error log */\n    protected const HEAD_MESSAGE_SIZE = 102400;\n\n    /** @var SqsClient */\n    private $client;\n    /** @var string */\n    private $queueUrl;\n\n    public function __construct(SqsClient $sqsClient, string $queueUrl, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        $this->client = $sqsClient;\n        $this->queueUrl = $queueUrl;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!isset($record['formatted']) || 'string' !== gettype($record['formatted'])) {\n            throw new \\InvalidArgumentException('SqsHandler accepts only formatted records as a string' . Utils::getRecordMessageForException($record));\n        }\n\n        $messageBody = $record['formatted'];\n        if (strlen($messageBody) >= static::MAX_MESSAGE_SIZE) {\n            $messageBody = Utils::substr($messageBody, 0, static::HEAD_MESSAGE_SIZE);\n        }\n\n        $this->client->sendMessage([\n            'QueueUrl' => $this->queueUrl,\n            'MessageBody' => $messageBody,\n        ]);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/MissingExtensionException.php","ext":"php","size":473,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Exception can be thrown if an extension for a handler is missing\n *\n * @author Christian Bergau <cbergau86@gmail.com>\n */\nclass MissingExtensionException extends \\Exception\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/GroupHandler.php","ext":"php","size":3234,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\ResettableInterface;\n\n/**\n * Forwards records to multiple handlers\n *\n * @author Lenar Lõhmus <lenar@city.ee>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass GroupHandler extends Handler implements ProcessableHandlerInterface, ResettableInterface\n{\n    use ProcessableHandlerTrait;\n\n    /** @var HandlerInterface[] */\n    protected $handlers;\n    /** @var bool */\n    protected $bubble;\n\n    /**\n     * @param HandlerInterface[] $handlers Array of Handlers.\n     * @param bool               $bubble   Whether the messages that are handled can bubble up the stack or not\n     */\n    public function __construct(array $handlers, bool $bubble = true)\n    {\n        foreach ($handlers as $handler) {\n            if (!$handler instanceof HandlerInterface) {\n                throw new \\InvalidArgumentException('The first argument of the GroupHandler must be an array of HandlerInterface instances.');\n            }\n        }\n\n        $this->handlers = $handlers;\n        $this->bubble = $bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function isHandling(array $record): bool\n    {\n        foreach ($this->handlers as $handler) {\n            if ($handler->isHandling($record)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        foreach ($this->handlers as $handler) {\n            $handler->handle($record);\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        if ($this->processors) {\n            $processed = [];\n            foreach ($records as $record) {\n                $processed[] = $this->processRecord($record);\n            }\n            /** @var Record[] $records */\n            $records = $processed;\n        }\n\n        foreach ($this->handlers as $handler) {\n            $handler->handleBatch($records);\n        }\n    }\n\n    public function reset()\n    {\n        $this->resetProcessors();\n\n        foreach ($this->handlers as $handler) {\n            if ($handler instanceof ResettableInterface) {\n                $handler->reset();\n            }\n        }\n    }\n\n    public function close(): void\n    {\n        parent::close();\n\n        foreach ($this->handlers as $handler) {\n            $handler->close();\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        foreach ($this->handlers as $handler) {\n            if ($handler instanceof FormattableHandlerInterface) {\n                $handler->setFormatter($formatter);\n            }\n        }\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/TelegramBotHandler.php","ext":"php","size":8420,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse RuntimeException;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Handler send logs to Telegram using Telegram Bot API.\n *\n * How to use:\n *  1) Create telegram bot with https://telegram.me/BotFather\n *  2) Create a telegram channel where logs will be recorded.\n *  3) Add created bot from step 1 to the created channel from step 2.\n *\n * Use telegram bot API key from step 1 and channel name with '@' prefix from step 2 to create instance of TelegramBotHandler\n *\n * @link https://core.telegram.org/bots/api\n *\n * @author Mazur Alexandr <alexandrmazur96@gmail.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass TelegramBotHandler extends AbstractProcessingHandler\n{\n    private const BOT_API = 'https://api.telegram.org/bot';\n\n    /**\n     * The available values of parseMode according to the Telegram api documentation\n     */\n    private const AVAILABLE_PARSE_MODES = [\n        'HTML',\n        'MarkdownV2',\n        'Markdown', // legacy mode without underline and strikethrough, use MarkdownV2 instead\n    ];\n\n    /**\n     * The maximum number of characters allowed in a message according to the Telegram api documentation\n     */\n    private const MAX_MESSAGE_LENGTH = 4096;\n\n    /**\n     * Telegram bot access token provided by BotFather.\n     * Create telegram bot with https://telegram.me/BotFather and use access token from it.\n     * @var string\n     */\n    private $apiKey;\n\n    /**\n     * Telegram channel name.\n     * Since to start with '@' symbol as prefix.\n     * @var string\n     */\n    private $channel;\n\n    /**\n     * The kind of formatting that is used for the message.\n     * See available options at https://core.telegram.org/bots/api#formatting-options\n     * or in AVAILABLE_PARSE_MODES\n     * @var ?string\n     */\n    private $parseMode;\n\n    /**\n     * Disables link previews for links in the message.\n     * @var ?bool\n     */\n    private $disableWebPagePreview;\n\n    /**\n     * Sends the message silently. Users will receive a notification with no sound.\n     * @var ?bool\n     */\n    private $disableNotification;\n\n    /**\n     * True - split a message longer than MAX_MESSAGE_LENGTH into parts and send in multiple messages.\n     * False - truncates a message that is too long.\n     * @var bool\n     */\n    private $splitLongMessages;\n\n    /**\n     * Adds 1-second delay between sending a split message (according to Telegram API to avoid 429 Too Many Requests).\n     * @var bool\n     */\n    private $delayBetweenMessages;\n\n    /**\n     * @param string $apiKey Telegram bot access token provided by BotFather\n     * @param string $channel Telegram channel name\n     * @param bool $splitLongMessages Split a message longer than MAX_MESSAGE_LENGTH into parts and send in multiple messages\n     * @param bool $delayBetweenMessages Adds delay between sending a split message according to Telegram API\n     * @throws MissingExtensionException\n     */\n    public function __construct(\n        string $apiKey,\n        string $channel,\n               $level = Logger::DEBUG,\n        bool   $bubble = true,\n        ?string $parseMode = null,\n        ?bool   $disableWebPagePreview = null,\n        ?bool   $disableNotification = null,\n        bool   $splitLongMessages = false,\n        bool   $delayBetweenMessages = false\n    )\n    {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is needed to use the TelegramBotHandler');\n        }\n\n        parent::__construct($level, $bubble);\n\n        $this->apiKey = $apiKey;\n        $this->channel = $channel;\n        $this->setParseMode($parseMode);\n        $this->disableWebPagePreview($disableWebPagePreview);\n        $this->disableNotification($disableNotification);\n        $this->splitLongMessages($splitLongMessages);\n        $this->delayBetweenMessages($delayBetweenMessages);\n    }\n\n    public function setParseMode(?string $parseMode = null): self\n    {\n        if ($parseMode !== null && !in_array($parseMode, self::AVAILABLE_PARSE_MODES)) {\n            throw new \\InvalidArgumentException('Unknown parseMode, use one of these: ' . implode(', ', self::AVAILABLE_PARSE_MODES) . '.');\n        }\n\n        $this->parseMode = $parseMode;\n\n        return $this;\n    }\n\n    public function disableWebPagePreview(?bool $disableWebPagePreview = null): self\n    {\n        $this->disableWebPagePreview = $disableWebPagePreview;\n\n        return $this;\n    }\n\n    public function disableNotification(?bool $disableNotification = null): self\n    {\n        $this->disableNotification = $disableNotification;\n\n        return $this;\n    }\n\n    /**\n     * True - split a message longer than MAX_MESSAGE_LENGTH into parts and send in multiple messages.\n     * False - truncates a message that is too long.\n     * @param bool $splitLongMessages\n     * @return $this\n     */\n    public function splitLongMessages(bool $splitLongMessages = false): self\n    {\n        $this->splitLongMessages = $splitLongMessages;\n\n        return $this;\n    }\n\n    /**\n     * Adds 1-second delay between sending a split message (according to Telegram API to avoid 429 Too Many Requests).\n     * @param bool $delayBetweenMessages\n     * @return $this\n     */\n    public function delayBetweenMessages(bool $delayBetweenMessages = false): self\n    {\n        $this->delayBetweenMessages = $delayBetweenMessages;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        /** @var Record[] $messages */\n        $messages = [];\n\n        foreach ($records as $record) {\n            if (!$this->isHandling($record)) {\n                continue;\n            }\n\n            if ($this->processors) {\n                /** @var Record $record */\n                $record = $this->processRecord($record);\n            }\n\n            $messages[] = $record;\n        }\n\n        if (!empty($messages)) {\n            $this->send((string)$this->getFormatter()->formatBatch($messages));\n        }\n    }\n\n    /**\n     * @inheritDoc\n     */\n    protected function write(array $record): void\n    {\n        $this->send($record['formatted']);\n    }\n\n    /**\n     * Send request to @link https://api.telegram.org/bot on SendMessage action.\n     * @param string $message\n     */\n    protected function send(string $message): void\n    {\n        $messages = $this->handleMessageLength($message);\n\n        foreach ($messages as $key => $msg) {\n            if ($this->delayBetweenMessages && $key > 0) {\n                sleep(1);\n            }\n\n            $this->sendCurl($msg);\n        }\n    }\n\n    protected function sendCurl(string $message): void\n    {\n        $ch = curl_init();\n        $url = self::BOT_API . $this->apiKey . '/SendMessage';\n        curl_setopt($ch, CURLOPT_URL, $url);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, true);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([\n            'text' => $message,\n            'chat_id' => $this->channel,\n            'parse_mode' => $this->parseMode,\n            'disable_web_page_preview' => $this->disableWebPagePreview,\n            'disable_notification' => $this->disableNotification,\n        ]));\n\n        $result = Curl\\Util::execute($ch);\n        if (!is_string($result)) {\n            throw new RuntimeException('Telegram API error. Description: No response');\n        }\n        $result = json_decode($result, true);\n\n        if ($result['ok'] === false) {\n            throw new RuntimeException('Telegram API error. Description: ' . $result['description']);\n        }\n    }\n\n    /**\n     * Handle a message that is too long: truncates or splits into several\n     * @param string $message\n     * @return string[]\n     */\n    private function handleMessageLength(string $message): array\n    {\n        $truncatedMarker = ' (...truncated)';\n        if (!$this->splitLongMessages && strlen($message) > self::MAX_MESSAGE_LENGTH) {\n            return [Utils::substr($message, 0, self::MAX_MESSAGE_LENGTH - strlen($truncatedMarker)) . $truncatedMarker];\n        }\n\n        return str_split($message, self::MAX_MESSAGE_LENGTH);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/Handler.php","ext":"php","size":1247,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Base Handler class providing basic close() support as well as handleBatch\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nabstract class Handler implements HandlerInterface\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        foreach ($records as $record) {\n            $this->handle($record);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n    }\n\n    public function __destruct()\n    {\n        try {\n            $this->close();\n        } catch (\\Throwable $e) {\n            // do nothing\n        }\n    }\n\n    public function __sleep()\n    {\n        $this->close();\n\n        $reflClass = new \\ReflectionClass($this);\n\n        $keys = [];\n        foreach ($reflClass->getProperties() as $reflProp) {\n            if (!$reflProp->isStatic()) {\n                $keys[] = $reflProp->getName();\n            }\n        }\n\n        return $keys;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SocketHandler.php","ext":"php","size":12283,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * Stores to any socket - uses fsockopen() or pfsockopen().\n *\n * @author Pablo de Leon Belloc <pablolb@gmail.com>\n * @see    http://php.net/manual/en/function.fsockopen.php\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass SocketHandler extends AbstractProcessingHandler\n{\n    /** @var string */\n    private $connectionString;\n    /** @var float */\n    private $connectionTimeout;\n    /** @var resource|null */\n    private $resource;\n    /** @var float */\n    private $timeout;\n    /** @var float */\n    private $writingTimeout;\n    /** @var ?int */\n    private $lastSentBytes = null;\n    /** @var ?int */\n    private $chunkSize;\n    /** @var bool */\n    private $persistent;\n    /** @var ?int */\n    private $errno = null;\n    /** @var ?string */\n    private $errstr = null;\n    /** @var ?float */\n    private $lastWritingAt = null;\n\n    /**\n     * @param string     $connectionString  Socket connection string\n     * @param bool       $persistent        Flag to enable/disable persistent connections\n     * @param float      $timeout           Socket timeout to wait until the request is being aborted\n     * @param float      $writingTimeout    Socket timeout to wait until the request should've been sent/written\n     * @param float|null $connectionTimeout Socket connect timeout to wait until the connection should've been\n     *                                      established\n     * @param int|null   $chunkSize         Sets the chunk size. Only has effect during connection in the writing cycle\n     *\n     * @throws \\InvalidArgumentException    If an invalid timeout value (less than 0) is passed.\n     */\n    public function __construct(\n        string $connectionString,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        parent::__construct($level, $bubble);\n        $this->connectionString = $connectionString;\n\n        if ($connectionTimeout !== null) {\n            $this->validateTimeout($connectionTimeout);\n        }\n\n        $this->connectionTimeout = $connectionTimeout ?? (float) ini_get('default_socket_timeout');\n        $this->persistent = $persistent;\n        $this->validateTimeout($timeout);\n        $this->timeout = $timeout;\n        $this->validateTimeout($writingTimeout);\n        $this->writingTimeout = $writingTimeout;\n        $this->chunkSize = $chunkSize;\n    }\n\n    /**\n     * Connect (if necessary) and write to the socket\n     *\n     * {@inheritDoc}\n     *\n     * @throws \\UnexpectedValueException\n     * @throws \\RuntimeException\n     */\n    protected function write(array $record): void\n    {\n        $this->connectIfNotConnected();\n        $data = $this->generateDataStream($record);\n        $this->writeToSocket($data);\n    }\n\n    /**\n     * We will not close a PersistentSocket instance so it can be reused in other requests.\n     */\n    public function close(): void\n    {\n        if (!$this->isPersistent()) {\n            $this->closeSocket();\n        }\n    }\n\n    /**\n     * Close socket, if open\n     */\n    public function closeSocket(): void\n    {\n        if (is_resource($this->resource)) {\n            fclose($this->resource);\n            $this->resource = null;\n        }\n    }\n\n    /**\n     * Set socket connection to be persistent. It only has effect before the connection is initiated.\n     */\n    public function setPersistent(bool $persistent): self\n    {\n        $this->persistent = $persistent;\n\n        return $this;\n    }\n\n    /**\n     * Set connection timeout.  Only has effect before we connect.\n     *\n     * @see http://php.net/manual/en/function.fsockopen.php\n     */\n    public function setConnectionTimeout(float $seconds): self\n    {\n        $this->validateTimeout($seconds);\n        $this->connectionTimeout = $seconds;\n\n        return $this;\n    }\n\n    /**\n     * Set write timeout. Only has effect before we connect.\n     *\n     * @see http://php.net/manual/en/function.stream-set-timeout.php\n     */\n    public function setTimeout(float $seconds): self\n    {\n        $this->validateTimeout($seconds);\n        $this->timeout = $seconds;\n\n        return $this;\n    }\n\n    /**\n     * Set writing timeout. Only has effect during connection in the writing cycle.\n     *\n     * @param float $seconds 0 for no timeout\n     */\n    public function setWritingTimeout(float $seconds): self\n    {\n        $this->validateTimeout($seconds);\n        $this->writingTimeout = $seconds;\n\n        return $this;\n    }\n\n    /**\n     * Set chunk size. Only has effect during connection in the writing cycle.\n     */\n    public function setChunkSize(int $bytes): self\n    {\n        $this->chunkSize = $bytes;\n\n        return $this;\n    }\n\n    /**\n     * Get current connection string\n     */\n    public function getConnectionString(): string\n    {\n        return $this->connectionString;\n    }\n\n    /**\n     * Get persistent setting\n     */\n    public function isPersistent(): bool\n    {\n        return $this->persistent;\n    }\n\n    /**\n     * Get current connection timeout setting\n     */\n    public function getConnectionTimeout(): float\n    {\n        return $this->connectionTimeout;\n    }\n\n    /**\n     * Get current in-transfer timeout\n     */\n    public function getTimeout(): float\n    {\n        return $this->timeout;\n    }\n\n    /**\n     * Get current local writing timeout\n     *\n     * @return float\n     */\n    public function getWritingTimeout(): float\n    {\n        return $this->writingTimeout;\n    }\n\n    /**\n     * Get current chunk size\n     */\n    public function getChunkSize(): ?int\n    {\n        return $this->chunkSize;\n    }\n\n    /**\n     * Check to see if the socket is currently available.\n     *\n     * UDP might appear to be connected but might fail when writing.  See http://php.net/fsockopen for details.\n     */\n    public function isConnected(): bool\n    {\n        return is_resource($this->resource)\n            && !feof($this->resource);  // on TCP - other party can close connection.\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @return resource|false\n     */\n    protected function pfsockopen()\n    {\n        return @pfsockopen($this->connectionString, -1, $this->errno, $this->errstr, $this->connectionTimeout);\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @return resource|false\n     */\n    protected function fsockopen()\n    {\n        return @fsockopen($this->connectionString, -1, $this->errno, $this->errstr, $this->connectionTimeout);\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @see http://php.net/manual/en/function.stream-set-timeout.php\n     *\n     * @return bool\n     */\n    protected function streamSetTimeout()\n    {\n        $seconds = floor($this->timeout);\n        $microseconds = round(($this->timeout - $seconds) * 1e6);\n\n        if (!is_resource($this->resource)) {\n            throw new \\LogicException('streamSetTimeout called but $this->resource is not a resource');\n        }\n\n        return stream_set_timeout($this->resource, (int) $seconds, (int) $microseconds);\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @see http://php.net/manual/en/function.stream-set-chunk-size.php\n     *\n     * @return int|bool\n     */\n    protected function streamSetChunkSize()\n    {\n        if (!is_resource($this->resource)) {\n            throw new \\LogicException('streamSetChunkSize called but $this->resource is not a resource');\n        }\n\n        if (null === $this->chunkSize) {\n            throw new \\LogicException('streamSetChunkSize called but $this->chunkSize is not set');\n        }\n\n        return stream_set_chunk_size($this->resource, $this->chunkSize);\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @return int|bool\n     */\n    protected function fwrite(string $data)\n    {\n        if (!is_resource($this->resource)) {\n            throw new \\LogicException('fwrite called but $this->resource is not a resource');\n        }\n\n        return @fwrite($this->resource, $data);\n    }\n\n    /**\n     * Wrapper to allow mocking\n     *\n     * @return mixed[]|bool\n     */\n    protected function streamGetMetadata()\n    {\n        if (!is_resource($this->resource)) {\n            throw new \\LogicException('streamGetMetadata called but $this->resource is not a resource');\n        }\n\n        return stream_get_meta_data($this->resource);\n    }\n\n    private function validateTimeout(float $value): void\n    {\n        if ($value < 0) {\n            throw new \\InvalidArgumentException(\"Timeout must be 0 or a positive float (got $value)\");\n        }\n    }\n\n    private function connectIfNotConnected(): void\n    {\n        if ($this->isConnected()) {\n            return;\n        }\n        $this->connect();\n    }\n\n    /**\n     * @phpstan-param FormattedRecord $record\n     */\n    protected function generateDataStream(array $record): string\n    {\n        return (string) $record['formatted'];\n    }\n\n    /**\n     * @return resource|null\n     */\n    protected function getResource()\n    {\n        return $this->resource;\n    }\n\n    private function connect(): void\n    {\n        $this->createSocketResource();\n        $this->setSocketTimeout();\n        $this->setStreamChunkSize();\n    }\n\n    private function createSocketResource(): void\n    {\n        if ($this->isPersistent()) {\n            $resource = $this->pfsockopen();\n        } else {\n            $resource = $this->fsockopen();\n        }\n        if (is_bool($resource)) {\n            throw new \\UnexpectedValueException(\"Failed connecting to $this->connectionString ($this->errno: $this->errstr)\");\n        }\n        $this->resource = $resource;\n    }\n\n    private function setSocketTimeout(): void\n    {\n        if (!$this->streamSetTimeout()) {\n            throw new \\UnexpectedValueException(\"Failed setting timeout with stream_set_timeout()\");\n        }\n    }\n\n    private function setStreamChunkSize(): void\n    {\n        if ($this->chunkSize && !$this->streamSetChunkSize()) {\n            throw new \\UnexpectedValueException(\"Failed setting chunk size with stream_set_chunk_size()\");\n        }\n    }\n\n    private function writeToSocket(string $data): void\n    {\n        $length = strlen($data);\n        $sent = 0;\n        $this->lastSentBytes = $sent;\n        while ($this->isConnected() && $sent < $length) {\n            if (0 == $sent) {\n                $chunk = $this->fwrite($data);\n            } else {\n                $chunk = $this->fwrite(substr($data, $sent));\n            }\n            if ($chunk === false) {\n                throw new \\RuntimeException(\"Could not write to socket\");\n            }\n            $sent += $chunk;\n            $socketInfo = $this->streamGetMetadata();\n            if (is_array($socketInfo) && $socketInfo['timed_out']) {\n                throw new \\RuntimeException(\"Write timed-out\");\n            }\n\n            if ($this->writingIsTimedOut($sent)) {\n                throw new \\RuntimeException(\"Write timed-out, no data sent for `{$this->writingTimeout}` seconds, probably we got disconnected (sent $sent of $length)\");\n            }\n        }\n        if (!$this->isConnected() && $sent < $length) {\n            throw new \\RuntimeException(\"End-of-file reached, probably we got disconnected (sent $sent of $length)\");\n        }\n    }\n\n    private function writingIsTimedOut(int $sent): bool\n    {\n        // convert to ms\n        if (0.0 == $this->writingTimeout) {\n            return false;\n        }\n\n        if ($sent !== $this->lastSentBytes) {\n            $this->lastWritingAt = microtime(true);\n            $this->lastSentBytes = $sent;\n\n            return false;\n        } else {\n            usleep(100);\n        }\n\n        if ((microtime(true) - $this->lastWritingAt) >= $this->writingTimeout) {\n            $this->closeSocket();\n\n            return true;\n        }\n\n        return false;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ChromePHPHandler.php","ext":"php","size":5250,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\ChromePHPFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Handler sending logs to the ChromePHP extension (http://www.chromephp.com/)\n *\n * This also works out of the box with Firefox 43+\n *\n * @author Christophe Coevoet <stof@notk.org>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass ChromePHPHandler extends AbstractProcessingHandler\n{\n    use WebRequestRecognizerTrait;\n\n    /**\n     * Version of the extension\n     */\n    protected const VERSION = '4.0';\n\n    /**\n     * Header name\n     */\n    protected const HEADER_NAME = 'X-ChromeLogger-Data';\n\n    /**\n     * Regular expression to detect supported browsers (matches any Chrome, or Firefox 43+)\n     */\n    protected const USER_AGENT_REGEX = '{\\b(?:Chrome/\\d+(?:\\.\\d+)*|HeadlessChrome|Firefox/(?:4[3-9]|[5-9]\\d|\\d{3,})(?:\\.\\d)*)\\b}';\n\n    /** @var bool */\n    protected static $initialized = false;\n\n    /**\n     * Tracks whether we sent too much data\n     *\n     * Chrome limits the headers to 4KB, so when we sent 3KB we stop sending\n     *\n     * @var bool\n     */\n    protected static $overflowed = false;\n\n    /** @var mixed[] */\n    protected static $json = [\n        'version' => self::VERSION,\n        'columns' => ['label', 'log', 'backtrace', 'type'],\n        'rows' => [],\n    ];\n\n    /** @var bool */\n    protected static $sendHeaders = true;\n\n    public function __construct($level = Logger::DEBUG, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n        if (!function_exists('json_encode')) {\n            throw new \\RuntimeException('PHP\\'s json extension is required to use Monolog\\'s ChromePHPHandler');\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        if (!$this->isWebRequest()) {\n            return;\n        }\n\n        $messages = [];\n\n        foreach ($records as $record) {\n            if ($record['level'] < $this->level) {\n                continue;\n            }\n            /** @var Record $message */\n            $message = $this->processRecord($record);\n            $messages[] = $message;\n        }\n\n        if (!empty($messages)) {\n            $messages = $this->getFormatter()->formatBatch($messages);\n            self::$json['rows'] = array_merge(self::$json['rows'], $messages);\n            $this->send();\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new ChromePHPFormatter();\n    }\n\n    /**\n     * Creates & sends header for a record\n     *\n     * @see sendHeader()\n     * @see send()\n     */\n    protected function write(array $record): void\n    {\n        if (!$this->isWebRequest()) {\n            return;\n        }\n\n        self::$json['rows'][] = $record['formatted'];\n\n        $this->send();\n    }\n\n    /**\n     * Sends the log header\n     *\n     * @see sendHeader()\n     */\n    protected function send(): void\n    {\n        if (self::$overflowed || !self::$sendHeaders) {\n            return;\n        }\n\n        if (!self::$initialized) {\n            self::$initialized = true;\n\n            self::$sendHeaders = $this->headersAccepted();\n            if (!self::$sendHeaders) {\n                return;\n            }\n\n            self::$json['request_uri'] = $_SERVER['REQUEST_URI'] ?? '';\n        }\n\n        $json = Utils::jsonEncode(self::$json, Utils::DEFAULT_JSON_FLAGS & ~JSON_UNESCAPED_UNICODE, true);\n        $data = base64_encode($json);\n        if (strlen($data) > 3 * 1024) {\n            self::$overflowed = true;\n\n            $record = [\n                'message' => 'Incomplete logs, chrome header size limit reached',\n                'context' => [],\n                'level' => Logger::WARNING,\n                'level_name' => Logger::getLevelName(Logger::WARNING),\n                'channel' => 'monolog',\n                'datetime' => new \\DateTimeImmutable(),\n                'extra' => [],\n            ];\n            self::$json['rows'][count(self::$json['rows']) - 1] = $this->getFormatter()->format($record);\n            $json = Utils::jsonEncode(self::$json, Utils::DEFAULT_JSON_FLAGS & ~JSON_UNESCAPED_UNICODE, true);\n            $data = base64_encode($json);\n        }\n\n        if (trim($data) !== '') {\n            $this->sendHeader(static::HEADER_NAME, $data);\n        }\n    }\n\n    /**\n     * Send header string to the client\n     */\n    protected function sendHeader(string $header, string $content): void\n    {\n        if (!headers_sent() && self::$sendHeaders) {\n            header(sprintf('%s: %s', $header, $content));\n        }\n    }\n\n    /**\n     * Verifies if the headers are accepted by the current user agent\n     */\n    protected function headersAccepted(): bool\n    {\n        if (empty($_SERVER['HTTP_USER_AGENT'])) {\n            return false;\n        }\n\n        return preg_match(static::USER_AGENT_REGEX, $_SERVER['HTTP_USER_AGENT']) === 1;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/RollbarHandler.php","ext":"php","size":3412,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Rollbar\\RollbarLogger;\nuse Throwable;\nuse Monolog\\Logger;\n\n/**\n * Sends errors to Rollbar\n *\n * If the context data contains a `payload` key, that is used as an array\n * of payload options to RollbarLogger's log method.\n *\n * Rollbar's context info will contain the context + extra keys from the log record\n * merged, and then on top of that a few keys:\n *\n *  - level (rollbar level name)\n *  - monolog_level (monolog level name, raw level, as rollbar only has 5 but monolog 8)\n *  - channel\n *  - datetime (unix timestamp)\n *\n * @author Paul Statezny <paulstatezny@gmail.com>\n */\nclass RollbarHandler extends AbstractProcessingHandler\n{\n    /**\n     * @var RollbarLogger\n     */\n    protected $rollbarLogger;\n\n    /** @var string[] */\n    protected $levelMap = [\n        Logger::DEBUG     => 'debug',\n        Logger::INFO      => 'info',\n        Logger::NOTICE    => 'info',\n        Logger::WARNING   => 'warning',\n        Logger::ERROR     => 'error',\n        Logger::CRITICAL  => 'critical',\n        Logger::ALERT     => 'critical',\n        Logger::EMERGENCY => 'critical',\n    ];\n\n    /**\n     * Records whether any log records have been added since the last flush of the rollbar notifier\n     *\n     * @var bool\n     */\n    private $hasRecords = false;\n\n    /** @var bool */\n    protected $initialized = false;\n\n    /**\n     * @param RollbarLogger $rollbarLogger RollbarLogger object constructed with valid token\n     */\n    public function __construct(RollbarLogger $rollbarLogger, $level = Logger::ERROR, bool $bubble = true)\n    {\n        $this->rollbarLogger = $rollbarLogger;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!$this->initialized) {\n            // __destructor() doesn't get called on Fatal errors\n            register_shutdown_function(array($this, 'close'));\n            $this->initialized = true;\n        }\n\n        $context = $record['context'];\n        $context = array_merge($context, $record['extra'], [\n            'level' => $this->levelMap[$record['level']],\n            'monolog_level' => $record['level_name'],\n            'channel' => $record['channel'],\n            'datetime' => $record['datetime']->format('U'),\n        ]);\n\n        if (isset($context['exception']) && $context['exception'] instanceof Throwable) {\n            $exception = $context['exception'];\n            unset($context['exception']);\n            $toLog = $exception;\n        } else {\n            $toLog = $record['message'];\n        }\n\n        // @phpstan-ignore-next-line\n        $this->rollbarLogger->log($context['level'], $toLog, $context);\n\n        $this->hasRecords = true;\n    }\n\n    public function flush(): void\n    {\n        if ($this->hasRecords) {\n            $this->rollbarLogger->flush();\n            $this->hasRecords = false;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        $this->flush();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function reset()\n    {\n        $this->flush();\n\n        parent::reset();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/FleepHookHandler.php","ext":"php","size":3593,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Logger;\n\n/**\n * Sends logs to Fleep.io using Webhook integrations\n *\n * You'll need a Fleep.io account to use this handler.\n *\n * @see https://fleep.io/integrations/webhooks/ Fleep Webhooks Documentation\n * @author Ando Roots <ando@sqroot.eu>\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass FleepHookHandler extends SocketHandler\n{\n    protected const FLEEP_HOST = 'fleep.io';\n\n    protected const FLEEP_HOOK_URI = '/hook/';\n\n    /**\n     * @var string Webhook token (specifies the conversation where logs are sent)\n     */\n    protected $token;\n\n    /**\n     * Construct a new Fleep.io Handler.\n     *\n     * For instructions on how to create a new web hook in your conversations\n     * see https://fleep.io/integrations/webhooks/\n     *\n     * @param  string                    $token  Webhook token\n     * @throws MissingExtensionException\n     */\n    public function __construct(\n        string $token,\n        $level = Logger::DEBUG,\n        bool $bubble = true,\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if (!extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP extension is required to use the FleepHookHandler');\n        }\n\n        $this->token = $token;\n\n        $connectionString = 'ssl://' . static::FLEEP_HOST . ':443';\n        parent::__construct(\n            $connectionString,\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n    }\n\n    /**\n     * Returns the default formatter to use with this handler\n     *\n     * Overloaded to remove empty context and extra arrays from the end of the log message.\n     *\n     * @return LineFormatter\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter(null, null, true, true);\n    }\n\n    /**\n     * Handles a log record\n     */\n    public function write(array $record): void\n    {\n        parent::write($record);\n        $this->closeSocket();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        $content = $this->buildContent($record);\n\n        return $this->buildHeader($content) . $content;\n    }\n\n    /**\n     * Builds the header of the API Call\n     */\n    private function buildHeader(string $content): string\n    {\n        $header = \"POST \" . static::FLEEP_HOOK_URI . $this->token . \" HTTP/1.1\\r\\n\";\n        $header .= \"Host: \" . static::FLEEP_HOST . \"\\r\\n\";\n        $header .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $header .= \"Content-Length: \" . strlen($content) . \"\\r\\n\";\n        $header .= \"\\r\\n\";\n\n        return $header;\n    }\n\n    /**\n     * Builds the body of API call\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    private function buildContent(array $record): string\n    {\n        $dataArray = [\n            'message' => $record['formatted'],\n        ];\n\n        return http_build_query($dataArray);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/DeduplicationHandler.php","ext":"php","size":6063,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Simple handler wrapper that deduplicates log records across multiple requests\n *\n * It also includes the BufferHandler functionality and will buffer\n * all messages until the end of the request or flush() is called.\n *\n * This works by storing all log records' messages above $deduplicationLevel\n * to the file specified by $deduplicationStore. When further logs come in at the end of the\n * request (or when flush() is called), all those above $deduplicationLevel are checked\n * against the existing stored logs. If they match and the timestamps in the stored log is\n * not older than $time seconds, the new log record is discarded. If no log record is new, the\n * whole data set is discarded.\n *\n * This is mainly useful in combination with Mail handlers or things like Slack or HipChat handlers\n * that send messages to people, to avoid spamming with the same message over and over in case of\n * a major component failure like a database server being down which makes all requests fail in the\n * same way.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nclass DeduplicationHandler extends BufferHandler\n{\n    /**\n     * @var string\n     */\n    protected $deduplicationStore;\n\n    /**\n     * @var Level\n     */\n    protected $deduplicationLevel;\n\n    /**\n     * @var int\n     */\n    protected $time;\n\n    /**\n     * @var bool\n     */\n    private $gc = false;\n\n    /**\n     * @param HandlerInterface $handler            Handler.\n     * @param string           $deduplicationStore The file/path where the deduplication log should be kept\n     * @param string|int       $deduplicationLevel The minimum logging level for log records to be looked at for deduplication purposes\n     * @param int              $time               The period (in seconds) during which duplicate entries should be suppressed after a given log is sent through\n     * @param bool             $bubble             Whether the messages that are handled can bubble up the stack or not\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $deduplicationLevel\n     */\n    public function __construct(HandlerInterface $handler, ?string $deduplicationStore = null, $deduplicationLevel = Logger::ERROR, int $time = 60, bool $bubble = true)\n    {\n        parent::__construct($handler, 0, Logger::DEBUG, $bubble, false);\n\n        $this->deduplicationStore = $deduplicationStore === null ? sys_get_temp_dir() . '/monolog-dedup-' . substr(md5(__FILE__), 0, 20) .'.log' : $deduplicationStore;\n        $this->deduplicationLevel = Logger::toMonologLevel($deduplicationLevel);\n        $this->time = $time;\n    }\n\n    public function flush(): void\n    {\n        if ($this->bufferSize === 0) {\n            return;\n        }\n\n        $passthru = null;\n\n        foreach ($this->buffer as $record) {\n            if ($record['level'] >= $this->deduplicationLevel) {\n                $passthru = $passthru || !$this->isDuplicate($record);\n                if ($passthru) {\n                    $this->appendRecord($record);\n                }\n            }\n        }\n\n        // default of null is valid as well as if no record matches duplicationLevel we just pass through\n        if ($passthru === true || $passthru === null) {\n            $this->handler->handleBatch($this->buffer);\n        }\n\n        $this->clear();\n\n        if ($this->gc) {\n            $this->collectLogs();\n        }\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    private function isDuplicate(array $record): bool\n    {\n        if (!file_exists($this->deduplicationStore)) {\n            return false;\n        }\n\n        $store = file($this->deduplicationStore, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);\n        if (!is_array($store)) {\n            return false;\n        }\n\n        $yesterday = time() - 86400;\n        $timestampValidity = $record['datetime']->getTimestamp() - $this->time;\n        $expectedMessage = preg_replace('{[\\r\\n].*}', '', $record['message']);\n\n        for ($i = count($store) - 1; $i >= 0; $i--) {\n            list($timestamp, $level, $message) = explode(':', $store[$i], 3);\n\n            if ($level === $record['level_name'] && $message === $expectedMessage && $timestamp > $timestampValidity) {\n                return true;\n            }\n\n            if ($timestamp < $yesterday) {\n                $this->gc = true;\n            }\n        }\n\n        return false;\n    }\n\n    private function collectLogs(): void\n    {\n        if (!file_exists($this->deduplicationStore)) {\n            return;\n        }\n\n        $handle = fopen($this->deduplicationStore, 'rw+');\n\n        if (!$handle) {\n            throw new \\RuntimeException('Failed to open file for reading and writing: ' . $this->deduplicationStore);\n        }\n\n        flock($handle, LOCK_EX);\n        $validLogs = [];\n\n        $timestampValidity = time() - $this->time;\n\n        while (!feof($handle)) {\n            $log = fgets($handle);\n            if ($log && substr($log, 0, 10) >= $timestampValidity) {\n                $validLogs[] = $log;\n            }\n        }\n\n        ftruncate($handle, 0);\n        rewind($handle);\n        foreach ($validLogs as $log) {\n            fwrite($handle, $log);\n        }\n\n        flock($handle, LOCK_UN);\n        fclose($handle);\n\n        $this->gc = false;\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    private function appendRecord(array $record): void\n    {\n        file_put_contents($this->deduplicationStore, $record['datetime']->getTimestamp() . ':' . $record['level_name'] . ':' . preg_replace('{[\\r\\n].*}', '', $record['message']) . \"\\n\", FILE_APPEND);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SlackHandler.php","ext":"php","size":7020,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse Monolog\\Handler\\Slack\\SlackRecord;\n\n/**\n * Sends notifications through Slack API\n *\n * @author Greg Kedzierski <greg@gregkedzierski.com>\n * @see    https://api.slack.com/\n *\n * @phpstan-import-type FormattedRecord from AbstractProcessingHandler\n */\nclass SlackHandler extends SocketHandler\n{\n    /**\n     * Slack API token\n     * @var string\n     */\n    private $token;\n\n    /**\n     * Instance of the SlackRecord util class preparing data for Slack API.\n     * @var SlackRecord\n     */\n    private $slackRecord;\n\n    /**\n     * @param  string                    $token                  Slack API token\n     * @param  string                    $channel                Slack channel (encoded ID or name)\n     * @param  string|null               $username               Name of a bot\n     * @param  bool                      $useAttachment          Whether the message should be added to Slack as attachment (plain text otherwise)\n     * @param  string|null               $iconEmoji              The emoji name to use (or null)\n     * @param  bool                      $useShortAttachment     Whether the context/extra messages added to Slack as attachments are in a short style\n     * @param  bool                      $includeContextAndExtra Whether the attachment should include context and extra data\n     * @param  string[]                  $excludeFields          Dot separated list of fields to exclude from slack message. E.g. ['context.field1', 'extra.field2']\n     * @throws MissingExtensionException If no OpenSSL PHP extension configured\n     */\n    public function __construct(\n        string $token,\n        string $channel,\n        ?string $username = null,\n        bool $useAttachment = true,\n        ?string $iconEmoji = null,\n        $level = Logger::CRITICAL,\n        bool $bubble = true,\n        bool $useShortAttachment = false,\n        bool $includeContextAndExtra = false,\n        array $excludeFields = array(),\n        bool $persistent = false,\n        float $timeout = 0.0,\n        float $writingTimeout = 10.0,\n        ?float $connectionTimeout = null,\n        ?int $chunkSize = null\n    ) {\n        if (!extension_loaded('openssl')) {\n            throw new MissingExtensionException('The OpenSSL PHP extension is required to use the SlackHandler');\n        }\n\n        parent::__construct(\n            'ssl://slack.com:443',\n            $level,\n            $bubble,\n            $persistent,\n            $timeout,\n            $writingTimeout,\n            $connectionTimeout,\n            $chunkSize\n        );\n\n        $this->slackRecord = new SlackRecord(\n            $channel,\n            $username,\n            $useAttachment,\n            $iconEmoji,\n            $useShortAttachment,\n            $includeContextAndExtra,\n            $excludeFields\n        );\n\n        $this->token = $token;\n    }\n\n    public function getSlackRecord(): SlackRecord\n    {\n        return $this->slackRecord;\n    }\n\n    public function getToken(): string\n    {\n        return $this->token;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function generateDataStream(array $record): string\n    {\n        $content = $this->buildContent($record);\n\n        return $this->buildHeader($content) . $content;\n    }\n\n    /**\n     * Builds the body of API call\n     *\n     * @phpstan-param FormattedRecord $record\n     */\n    private function buildContent(array $record): string\n    {\n        $dataArray = $this->prepareContentData($record);\n\n        return http_build_query($dataArray);\n    }\n\n    /**\n     * @phpstan-param FormattedRecord $record\n     * @return string[]\n     */\n    protected function prepareContentData(array $record): array\n    {\n        $dataArray = $this->slackRecord->getSlackData($record);\n        $dataArray['token'] = $this->token;\n\n        if (!empty($dataArray['attachments'])) {\n            $dataArray['attachments'] = Utils::jsonEncode($dataArray['attachments']);\n        }\n\n        return $dataArray;\n    }\n\n    /**\n     * Builds the header of the API Call\n     */\n    private function buildHeader(string $content): string\n    {\n        $header = \"POST /api/chat.postMessage HTTP/1.1\\r\\n\";\n        $header .= \"Host: slack.com\\r\\n\";\n        $header .= \"Content-Type: application/x-www-form-urlencoded\\r\\n\";\n        $header .= \"Content-Length: \" . strlen($content) . \"\\r\\n\";\n        $header .= \"\\r\\n\";\n\n        return $header;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        parent::write($record);\n        $this->finalizeWrite();\n    }\n\n    /**\n     * Finalizes the request by reading some bytes and then closing the socket\n     *\n     * If we do not read some but close the socket too early, slack sometimes\n     * drops the request entirely.\n     */\n    protected function finalizeWrite(): void\n    {\n        $res = $this->getResource();\n        if (is_resource($res)) {\n            @fread($res, 2048);\n        }\n        $this->closeSocket();\n    }\n\n    public function setFormatter(FormatterInterface $formatter): HandlerInterface\n    {\n        parent::setFormatter($formatter);\n        $this->slackRecord->setFormatter($formatter);\n\n        return $this;\n    }\n\n    public function getFormatter(): FormatterInterface\n    {\n        $formatter = parent::getFormatter();\n        $this->slackRecord->setFormatter($formatter);\n\n        return $formatter;\n    }\n\n    /**\n     * Channel used by the bot when posting\n     */\n    public function setChannel(string $channel): self\n    {\n        $this->slackRecord->setChannel($channel);\n\n        return $this;\n    }\n\n    /**\n     * Username used by the bot when posting\n     */\n    public function setUsername(string $username): self\n    {\n        $this->slackRecord->setUsername($username);\n\n        return $this;\n    }\n\n    public function useAttachment(bool $useAttachment): self\n    {\n        $this->slackRecord->useAttachment($useAttachment);\n\n        return $this;\n    }\n\n    public function setIconEmoji(string $iconEmoji): self\n    {\n        $this->slackRecord->setUserIcon($iconEmoji);\n\n        return $this;\n    }\n\n    public function useShortAttachment(bool $useShortAttachment): self\n    {\n        $this->slackRecord->useShortAttachment($useShortAttachment);\n\n        return $this;\n    }\n\n    public function includeContextAndExtra(bool $includeContextAndExtra): self\n    {\n        $this->slackRecord->includeContextAndExtra($includeContextAndExtra);\n\n        return $this;\n    }\n\n    /**\n     * @param string[] $excludeFields\n     */\n    public function excludeFields(array $excludeFields): self\n    {\n        $this->slackRecord->excludeFields($excludeFields);\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SendGridHandler.php","ext":"php","size":2871,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\n\n/**\n * SendGridrHandler uses the SendGrid API v2 function to send Log emails, more information in https://sendgrid.com/docs/API_Reference/Web_API/mail.html\n *\n * @author Ricardo Fontanelli <ricardo.fontanelli@hotmail.com>\n */\nclass SendGridHandler extends MailHandler\n{\n    /**\n     * The SendGrid API User\n     * @var string\n     */\n    protected $apiUser;\n\n    /**\n     * The SendGrid API Key\n     * @var string\n     */\n    protected $apiKey;\n\n    /**\n     * The email addresses to which the message will be sent\n     * @var string\n     */\n    protected $from;\n\n    /**\n     * The email addresses to which the message will be sent\n     * @var string[]\n     */\n    protected $to;\n\n    /**\n     * The subject of the email\n     * @var string\n     */\n    protected $subject;\n\n    /**\n     * @param string          $apiUser The SendGrid API User\n     * @param string          $apiKey  The SendGrid API Key\n     * @param string          $from    The sender of the email\n     * @param string|string[] $to      The recipients of the email\n     * @param string          $subject The subject of the mail\n     */\n    public function __construct(string $apiUser, string $apiKey, string $from, $to, string $subject, $level = Logger::ERROR, bool $bubble = true)\n    {\n        if (!extension_loaded('curl')) {\n            throw new MissingExtensionException('The curl extension is needed to use the SendGridHandler');\n        }\n\n        parent::__construct($level, $bubble);\n        $this->apiUser = $apiUser;\n        $this->apiKey = $apiKey;\n        $this->from = $from;\n        $this->to = (array) $to;\n        $this->subject = $subject;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function send(string $content, array $records): void\n    {\n        $message = [];\n        $message['api_user'] = $this->apiUser;\n        $message['api_key'] = $this->apiKey;\n        $message['from'] = $this->from;\n        foreach ($this->to as $recipient) {\n            $message['to[]'] = $recipient;\n        }\n        $message['subject'] = $this->subject;\n        $message['date'] = date('r');\n\n        if ($this->isHtmlBody($content)) {\n            $message['html'] = $content;\n        } else {\n            $message['text'] = $content;\n        }\n\n        $ch = curl_init();\n        curl_setopt($ch, CURLOPT_URL, 'https://api.sendgrid.com/api/mail.send.json');\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($message));\n        Curl\\Util::execute($ch, 2);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/TestHandler.php","ext":"php","size":6750,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Used for testing purposes.\n *\n * It records all records and gives you access to them for verification.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @method bool hasEmergency($record)\n * @method bool hasAlert($record)\n * @method bool hasCritical($record)\n * @method bool hasError($record)\n * @method bool hasWarning($record)\n * @method bool hasNotice($record)\n * @method bool hasInfo($record)\n * @method bool hasDebug($record)\n *\n * @method bool hasEmergencyRecords()\n * @method bool hasAlertRecords()\n * @method bool hasCriticalRecords()\n * @method bool hasErrorRecords()\n * @method bool hasWarningRecords()\n * @method bool hasNoticeRecords()\n * @method bool hasInfoRecords()\n * @method bool hasDebugRecords()\n *\n * @method bool hasEmergencyThatContains($message)\n * @method bool hasAlertThatContains($message)\n * @method bool hasCriticalThatContains($message)\n * @method bool hasErrorThatContains($message)\n * @method bool hasWarningThatContains($message)\n * @method bool hasNoticeThatContains($message)\n * @method bool hasInfoThatContains($message)\n * @method bool hasDebugThatContains($message)\n *\n * @method bool hasEmergencyThatMatches($message)\n * @method bool hasAlertThatMatches($message)\n * @method bool hasCriticalThatMatches($message)\n * @method bool hasErrorThatMatches($message)\n * @method bool hasWarningThatMatches($message)\n * @method bool hasNoticeThatMatches($message)\n * @method bool hasInfoThatMatches($message)\n * @method bool hasDebugThatMatches($message)\n *\n * @method bool hasEmergencyThatPasses($message)\n * @method bool hasAlertThatPasses($message)\n * @method bool hasCriticalThatPasses($message)\n * @method bool hasErrorThatPasses($message)\n * @method bool hasWarningThatPasses($message)\n * @method bool hasNoticeThatPasses($message)\n * @method bool hasInfoThatPasses($message)\n * @method bool hasDebugThatPasses($message)\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass TestHandler extends AbstractProcessingHandler\n{\n    /** @var Record[] */\n    protected $records = [];\n    /** @var array<Level, Record[]> */\n    protected $recordsByLevel = [];\n    /** @var bool */\n    private $skipReset = false;\n\n    /**\n     * @return array\n     *\n     * @phpstan-return Record[]\n     */\n    public function getRecords()\n    {\n        return $this->records;\n    }\n\n    /**\n     * @return void\n     */\n    public function clear()\n    {\n        $this->records = [];\n        $this->recordsByLevel = [];\n    }\n\n    /**\n     * @return void\n     */\n    public function reset()\n    {\n        if (!$this->skipReset) {\n            $this->clear();\n        }\n    }\n\n    /**\n     * @return void\n     */\n    public function setSkipReset(bool $skipReset)\n    {\n        $this->skipReset = $skipReset;\n    }\n\n    /**\n     * @param string|int $level Logging level value or name\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function hasRecords($level): bool\n    {\n        return isset($this->recordsByLevel[Logger::toMonologLevel($level)]);\n    }\n\n    /**\n     * @param string|array $record Either a message string or an array containing message and optionally context keys that will be checked against all records\n     * @param string|int   $level  Logging level value or name\n     *\n     * @phpstan-param array{message: string, context?: mixed[]}|string $record\n     * @phpstan-param Level|LevelName|LogLevel::*                      $level\n     */\n    public function hasRecord($record, $level): bool\n    {\n        if (is_string($record)) {\n            $record = array('message' => $record);\n        }\n\n        return $this->hasRecordThatPasses(function ($rec) use ($record) {\n            if ($rec['message'] !== $record['message']) {\n                return false;\n            }\n            if (isset($record['context']) && $rec['context'] !== $record['context']) {\n                return false;\n            }\n\n            return true;\n        }, $level);\n    }\n\n    /**\n     * @param string|int $level Logging level value or name\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function hasRecordThatContains(string $message, $level): bool\n    {\n        return $this->hasRecordThatPasses(function ($rec) use ($message) {\n            return strpos($rec['message'], $message) !== false;\n        }, $level);\n    }\n\n    /**\n     * @param string|int $level Logging level value or name\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function hasRecordThatMatches(string $regex, $level): bool\n    {\n        return $this->hasRecordThatPasses(function (array $rec) use ($regex): bool {\n            return preg_match($regex, $rec['message']) > 0;\n        }, $level);\n    }\n\n    /**\n     * @param  string|int $level Logging level value or name\n     * @return bool\n     *\n     * @psalm-param callable(Record, int): mixed $predicate\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function hasRecordThatPasses(callable $predicate, $level)\n    {\n        $level = Logger::toMonologLevel($level);\n\n        if (!isset($this->recordsByLevel[$level])) {\n            return false;\n        }\n\n        foreach ($this->recordsByLevel[$level] as $i => $rec) {\n            if ($predicate($rec, $i)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->recordsByLevel[$record['level']][] = $record;\n        $this->records[] = $record;\n    }\n\n    /**\n     * @param  string  $method\n     * @param  mixed[] $args\n     * @return bool\n     */\n    public function __call($method, $args)\n    {\n        if (preg_match('/(.*)(Debug|Info|Notice|Warning|Error|Critical|Alert|Emergency)(.*)/', $method, $matches) > 0) {\n            $genericMethod = $matches[1] . ('Records' !== $matches[3] ? 'Record' : '') . $matches[3];\n            $level = constant('Monolog\\Logger::' . strtoupper($matches[2]));\n            $callback = [$this, $genericMethod];\n            if (is_callable($callback)) {\n                $args[] = $level;\n\n                return call_user_func_array($callback, $args);\n            }\n        }\n\n        throw new \\BadMethodCallException('Call to undefined method ' . get_class($this) . '::' . $method . '()');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/WebRequestRecognizerTrait.php","ext":"php","size":524,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\ntrait WebRequestRecognizerTrait\n{\n    /**\n     * Checks if PHP's serving a web request\n     * @return bool\n     */\n    protected function isWebRequest(): bool\n    {\n        return 'cli' !== \\PHP_SAPI && 'phpdbg' !== \\PHP_SAPI;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/DoctrineCouchDBHandler.php","ext":"php","size":1128,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\NormalizerFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Doctrine\\CouchDB\\CouchDBClient;\n\n/**\n * CouchDB handler for Doctrine CouchDB ODM\n *\n * @author Markus Bachmann <markus.bachmann@bachi.biz>\n */\nclass DoctrineCouchDBHandler extends AbstractProcessingHandler\n{\n    /** @var CouchDBClient */\n    private $client;\n\n    public function __construct(CouchDBClient $client, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        $this->client = $client;\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->client->postDocument($record['formatted']);\n    }\n\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new NormalizerFormatter;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/HandlerInterface.php","ext":"php","size":3032,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Interface that all Monolog Handlers must implement\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\ninterface HandlerInterface\n{\n    /**\n     * Checks whether the given record will be handled by this handler.\n     *\n     * This is mostly done for performance reasons, to avoid calling processors for nothing.\n     *\n     * Handlers should still check the record levels within handle(), returning false in isHandling()\n     * is no guarantee that handle() will not be called, and isHandling() might not be called\n     * for a given record.\n     *\n     * @param array $record Partial log record containing only a level key\n     *\n     * @return bool\n     *\n     * @phpstan-param array{level: Level} $record\n     */\n    public function isHandling(array $record): bool;\n\n    /**\n     * Handles a record.\n     *\n     * All records may be passed to this method, and the handler should discard\n     * those that it does not want to handle.\n     *\n     * The return value of this function controls the bubbling process of the handler stack.\n     * Unless the bubbling is interrupted (by returning true), the Logger class will keep on\n     * calling further handlers in the stack with a given log record.\n     *\n     * @param  array $record The record to handle\n     * @return bool  true means that this handler handled the record, and that bubbling is not permitted.\n     *                      false means the record was either not processed or that this handler allows bubbling.\n     *\n     * @phpstan-param Record $record\n     */\n    public function handle(array $record): bool;\n\n    /**\n     * Handles a set of records at once.\n     *\n     * @param array $records The records to handle (an array of record arrays)\n     *\n     * @phpstan-param Record[] $records\n     */\n    public function handleBatch(array $records): void;\n\n    /**\n     * Closes the handler.\n     *\n     * Ends a log cycle and frees all resources used by the handler.\n     *\n     * Closing a Handler means flushing all buffers and freeing any open resources/handles.\n     *\n     * Implementations have to be idempotent (i.e. it should be possible to call close several times without breakage)\n     * and ideally handlers should be able to reopen themselves on handle() after they have been closed.\n     *\n     * This is useful at the end of a request and will be called automatically when the object\n     * is destroyed if you extend Monolog\\Handler\\Handler.\n     *\n     * If you are thinking of calling this method yourself, most likely you should be\n     * calling ResettableInterface::reset instead. Have a look.\n     */\n    public function close(): void;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/NativeMailerHandler.php","ext":"php","size":4971,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Formatter\\LineFormatter;\n\n/**\n * NativeMailerHandler uses the mail() function to send the emails\n *\n * @author Christophe Coevoet <stof@notk.org>\n * @author Mark Garrett <mark@moderndeveloperllc.com>\n */\nclass NativeMailerHandler extends MailHandler\n{\n    /**\n     * The email addresses to which the message will be sent\n     * @var string[]\n     */\n    protected $to;\n\n    /**\n     * The subject of the email\n     * @var string\n     */\n    protected $subject;\n\n    /**\n     * Optional headers for the message\n     * @var string[]\n     */\n    protected $headers = [];\n\n    /**\n     * Optional parameters for the message\n     * @var string[]\n     */\n    protected $parameters = [];\n\n    /**\n     * The wordwrap length for the message\n     * @var int\n     */\n    protected $maxColumnWidth;\n\n    /**\n     * The Content-type for the message\n     * @var string|null\n     */\n    protected $contentType;\n\n    /**\n     * The encoding for the message\n     * @var string\n     */\n    protected $encoding = 'utf-8';\n\n    /**\n     * @param string|string[] $to             The receiver of the mail\n     * @param string          $subject        The subject of the mail\n     * @param string          $from           The sender of the mail\n     * @param int             $maxColumnWidth The maximum column width that the message lines will have\n     */\n    public function __construct($to, string $subject, string $from, $level = Logger::ERROR, bool $bubble = true, int $maxColumnWidth = 70)\n    {\n        parent::__construct($level, $bubble);\n        $this->to = (array) $to;\n        $this->subject = $subject;\n        $this->addHeader(sprintf('From: %s', $from));\n        $this->maxColumnWidth = $maxColumnWidth;\n    }\n\n    /**\n     * Add headers to the message\n     *\n     * @param string|string[] $headers Custom added headers\n     */\n    public function addHeader($headers): self\n    {\n        foreach ((array) $headers as $header) {\n            if (strpos($header, \"\\n\") !== false || strpos($header, \"\\r\") !== false) {\n                throw new \\InvalidArgumentException('Headers can not contain newline characters for security reasons');\n            }\n            $this->headers[] = $header;\n        }\n\n        return $this;\n    }\n\n    /**\n     * Add parameters to the message\n     *\n     * @param string|string[] $parameters Custom added parameters\n     */\n    public function addParameter($parameters): self\n    {\n        $this->parameters = array_merge($this->parameters, (array) $parameters);\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function send(string $content, array $records): void\n    {\n        $contentType = $this->getContentType() ?: ($this->isHtmlBody($content) ? 'text/html' : 'text/plain');\n\n        if ($contentType !== 'text/html') {\n            $content = wordwrap($content, $this->maxColumnWidth);\n        }\n\n        $headers = ltrim(implode(\"\\r\\n\", $this->headers) . \"\\r\\n\", \"\\r\\n\");\n        $headers .= 'Content-type: ' . $contentType . '; charset=' . $this->getEncoding() . \"\\r\\n\";\n        if ($contentType === 'text/html' && false === strpos($headers, 'MIME-Version:')) {\n            $headers .= 'MIME-Version: 1.0' . \"\\r\\n\";\n        }\n\n        $subject = $this->subject;\n        if ($records) {\n            $subjectFormatter = new LineFormatter($this->subject);\n            $subject = $subjectFormatter->format($this->getHighestRecord($records));\n        }\n\n        $parameters = implode(' ', $this->parameters);\n        foreach ($this->to as $to) {\n            mail($to, $subject, $content, $headers, $parameters);\n        }\n    }\n\n    public function getContentType(): ?string\n    {\n        return $this->contentType;\n    }\n\n    public function getEncoding(): string\n    {\n        return $this->encoding;\n    }\n\n    /**\n     * @param string $contentType The content type of the email - Defaults to text/plain. Use text/html for HTML messages.\n     */\n    public function setContentType(string $contentType): self\n    {\n        if (strpos($contentType, \"\\n\") !== false || strpos($contentType, \"\\r\") !== false) {\n            throw new \\InvalidArgumentException('The content type can not contain newline characters to prevent email header injection');\n        }\n\n        $this->contentType = $contentType;\n\n        return $this;\n    }\n\n    public function setEncoding(string $encoding): self\n    {\n        if (strpos($encoding, \"\\n\") !== false || strpos($encoding, \"\\r\") !== false) {\n            throw new \\InvalidArgumentException('The encoding can not contain newline characters to prevent email header injection');\n        }\n\n        $this->encoding = $encoding;\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/MandrillHandler.php","ext":"php","size":2473,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Swift;\nuse Swift_Message;\n\n/**\n * MandrillHandler uses cURL to send the emails to the Mandrill API\n *\n * @author Adam Nicholson <adamnicholson10@gmail.com>\n */\nclass MandrillHandler extends MailHandler\n{\n    /** @var Swift_Message */\n    protected $message;\n    /** @var string */\n    protected $apiKey;\n\n    /**\n     * @psalm-param Swift_Message|callable(): Swift_Message $message\n     *\n     * @param string                 $apiKey  A valid Mandrill API key\n     * @param callable|Swift_Message $message An example message for real messages, only the body will be replaced\n     */\n    public function __construct(string $apiKey, $message, $level = Logger::ERROR, bool $bubble = true)\n    {\n        parent::__construct($level, $bubble);\n\n        if (!$message instanceof Swift_Message && is_callable($message)) {\n            $message = $message();\n        }\n        if (!$message instanceof Swift_Message) {\n            throw new \\InvalidArgumentException('You must provide either a Swift_Message instance or a callable returning it');\n        }\n        $this->message = $message;\n        $this->apiKey = $apiKey;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function send(string $content, array $records): void\n    {\n        $mime = 'text/plain';\n        if ($this->isHtmlBody($content)) {\n            $mime = 'text/html';\n        }\n\n        $message = clone $this->message;\n        $message->setBody($content, $mime);\n        /** @phpstan-ignore-next-line */\n        if (version_compare(Swift::VERSION, '6.0.0', '>=')) {\n            $message->setDate(new \\DateTimeImmutable());\n        } else {\n            /** @phpstan-ignore-next-line */\n            $message->setDate(time());\n        }\n\n        $ch = curl_init();\n\n        curl_setopt($ch, CURLOPT_URL, 'https://mandrillapp.com/api/1.0/messages/send-raw.json');\n        curl_setopt($ch, CURLOPT_POST, 1);\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n        curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query([\n            'key' => $this->apiKey,\n            'raw_message' => (string) $message,\n            'async' => false,\n        ]));\n\n        Curl\\Util::execute($ch);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/DynamoDbHandler.php","ext":"php","size":2482,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Aws\\Sdk;\nuse Aws\\DynamoDb\\DynamoDbClient;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Aws\\DynamoDb\\Marshaler;\nuse Monolog\\Formatter\\ScalarFormatter;\nuse Monolog\\Logger;\n\n/**\n * Amazon DynamoDB handler (http://aws.amazon.com/dynamodb/)\n *\n * @link https://github.com/aws/aws-sdk-php/\n * @author Andrew Lawson <adlawson@gmail.com>\n */\nclass DynamoDbHandler extends AbstractProcessingHandler\n{\n    public const DATE_FORMAT = 'Y-m-d\\TH:i:s.uO';\n\n    /**\n     * @var DynamoDbClient\n     */\n    protected $client;\n\n    /**\n     * @var string\n     */\n    protected $table;\n\n    /**\n     * @var int\n     */\n    protected $version;\n\n    /**\n     * @var Marshaler\n     */\n    protected $marshaler;\n\n    public function __construct(DynamoDbClient $client, string $table, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        /** @phpstan-ignore-next-line */\n        if (defined('Aws\\Sdk::VERSION') && version_compare(Sdk::VERSION, '3.0', '>=')) {\n            $this->version = 3;\n            $this->marshaler = new Marshaler;\n        } else {\n            $this->version = 2;\n        }\n\n        $this->client = $client;\n        $this->table = $table;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $filtered = $this->filterEmptyFields($record['formatted']);\n        if ($this->version === 3) {\n            $formatted = $this->marshaler->marshalItem($filtered);\n        } else {\n            /** @phpstan-ignore-next-line */\n            $formatted = $this->client->formatAttributes($filtered);\n        }\n\n        $this->client->putItem([\n            'TableName' => $this->table,\n            'Item' => $formatted,\n        ]);\n    }\n\n    /**\n     * @param  mixed[] $record\n     * @return mixed[]\n     */\n    protected function filterEmptyFields(array $record): array\n    {\n        return array_filter($record, function ($value) {\n            return !empty($value) || false === $value || 0 === $value;\n        });\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new ScalarFormatter(self::DATE_FORMAT);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/RotatingFileHandler.php","ext":"php","size":6626,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse InvalidArgumentException;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Stores logs to files that are rotated every day and a limited number of files are kept.\n *\n * This rotation is only intended to be used as a workaround. Using logrotate to\n * handle the rotation is strongly encouraged when you can use it.\n *\n * @author Christophe Coevoet <stof@notk.org>\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass RotatingFileHandler extends StreamHandler\n{\n    public const FILE_PER_DAY = 'Y-m-d';\n    public const FILE_PER_MONTH = 'Y-m';\n    public const FILE_PER_YEAR = 'Y';\n\n    /** @var string */\n    protected $filename;\n    /** @var int */\n    protected $maxFiles;\n    /** @var bool */\n    protected $mustRotate;\n    /** @var \\DateTimeImmutable */\n    protected $nextRotation;\n    /** @var string */\n    protected $filenameFormat;\n    /** @var string */\n    protected $dateFormat;\n\n    /**\n     * @param string     $filename\n     * @param int        $maxFiles       The maximal amount of files to keep (0 means unlimited)\n     * @param int|null   $filePermission Optional file permissions (default (0644) are only for owner read/write)\n     * @param bool       $useLocking     Try to lock log file before doing any writes\n     */\n    public function __construct(string $filename, int $maxFiles = 0, $level = Logger::DEBUG, bool $bubble = true, ?int $filePermission = null, bool $useLocking = false)\n    {\n        $this->filename = Utils::canonicalizePath($filename);\n        $this->maxFiles = $maxFiles;\n        $this->nextRotation = new \\DateTimeImmutable('tomorrow');\n        $this->filenameFormat = '{filename}-{date}';\n        $this->dateFormat = static::FILE_PER_DAY;\n\n        parent::__construct($this->getTimedFilename(), $level, $bubble, $filePermission, $useLocking);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        parent::close();\n\n        if (true === $this->mustRotate) {\n            $this->rotate();\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function reset()\n    {\n        parent::reset();\n\n        if (true === $this->mustRotate) {\n            $this->rotate();\n        }\n    }\n\n    public function setFilenameFormat(string $filenameFormat, string $dateFormat): self\n    {\n        if (!preg_match('{^[Yy](([/_.-]?m)([/_.-]?d)?)?$}', $dateFormat)) {\n            throw new InvalidArgumentException(\n                'Invalid date format - format must be one of '.\n                'RotatingFileHandler::FILE_PER_DAY (\"Y-m-d\"), RotatingFileHandler::FILE_PER_MONTH (\"Y-m\") '.\n                'or RotatingFileHandler::FILE_PER_YEAR (\"Y\"), or you can set one of the '.\n                'date formats using slashes, underscores and/or dots instead of dashes.'\n            );\n        }\n        if (substr_count($filenameFormat, '{date}') === 0) {\n            throw new InvalidArgumentException(\n                'Invalid filename format - format must contain at least `{date}`, because otherwise rotating is impossible.'\n            );\n        }\n        $this->filenameFormat = $filenameFormat;\n        $this->dateFormat = $dateFormat;\n        $this->url = $this->getTimedFilename();\n        $this->close();\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        // on the first record written, if the log is new, we rotate (once per day) after the log has been written so that the new file exists\n        if (null === $this->mustRotate) {\n            $this->mustRotate = null === $this->url || !file_exists($this->url);\n        }\n\n        // if the next rotation is expired, then we rotate immediately\n        if ($this->nextRotation <= $record['datetime']) {\n            $this->mustRotate = true;\n            $this->close(); // triggers rotation\n        }\n\n        parent::write($record);\n\n        if ($this->mustRotate) {\n            $this->close(); // triggers rotation\n        }\n    }\n\n    /**\n     * Rotates the files.\n     */\n    protected function rotate(): void\n    {\n        // update filename\n        $this->url = $this->getTimedFilename();\n        $this->nextRotation = new \\DateTimeImmutable('tomorrow');\n\n        $this->mustRotate = false;\n\n        // skip GC of old logs if files are unlimited\n        if (0 === $this->maxFiles) {\n            return;\n        }\n\n        $logFiles = glob($this->getGlobPattern());\n        if (false === $logFiles) {\n            // failed to glob\n            return;\n        }\n\n        if ($this->maxFiles >= count($logFiles)) {\n            // no files to remove\n            return;\n        }\n\n        // Sorting the files by name to remove the older ones\n        usort($logFiles, function ($a, $b) {\n            return strcmp($b, $a);\n        });\n\n        foreach (array_slice($logFiles, $this->maxFiles) as $file) {\n            if (is_writable($file)) {\n                // suppress errors here as unlink() might fail if two processes\n                // are cleaning up/rotating at the same time\n                set_error_handler(function (int $errno, string $errstr, string $errfile, int $errline): bool {\n                    return false;\n                });\n                unlink($file);\n                restore_error_handler();\n            }\n        }\n    }\n\n    protected function getTimedFilename(): string\n    {\n        $fileInfo = pathinfo($this->filename);\n        $timedFilename = str_replace(\n            ['{filename}', '{date}'],\n            [$fileInfo['filename'], date($this->dateFormat)],\n            $fileInfo['dirname'] . '/' . $this->filenameFormat\n        );\n\n        if (isset($fileInfo['extension'])) {\n            $timedFilename .= '.'.$fileInfo['extension'];\n        }\n\n        return $timedFilename;\n    }\n\n    protected function getGlobPattern(): string\n    {\n        $fileInfo = pathinfo($this->filename);\n        $glob = str_replace(\n            ['{filename}', '{date}'],\n            [$fileInfo['filename'], str_replace(\n                ['Y', 'y', 'm', 'd'],\n                ['[0-9][0-9][0-9][0-9]', '[0-9][0-9]', '[0-9][0-9]', '[0-9][0-9]'],\n                $this->dateFormat)\n            ],\n            $fileInfo['dirname'] . '/' . $this->filenameFormat\n        );\n        if (isset($fileInfo['extension'])) {\n            $glob .= '.'.$fileInfo['extension'];\n        }\n\n        return $glob;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/SyslogHandler.php","ext":"php","size":1907,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Logs to syslog service.\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $syslog = new SyslogHandler('myfacility', 'local6');\n *   $formatter = new LineFormatter(\"%channel%.%level_name%: %message% %extra%\");\n *   $syslog->setFormatter($formatter);\n *   $log->pushHandler($syslog);\n *\n * @author Sven Paulus <sven@karlsruhe.org>\n */\nclass SyslogHandler extends AbstractSyslogHandler\n{\n    /** @var string */\n    protected $ident;\n    /** @var int */\n    protected $logopts;\n\n    /**\n     * @param string     $ident\n     * @param string|int $facility Either one of the names of the keys in $this->facilities, or a LOG_* facility constant\n     * @param int        $logopts  Option flags for the openlog() call, defaults to LOG_PID\n     */\n    public function __construct(string $ident, $facility = LOG_USER, $level = Logger::DEBUG, bool $bubble = true, int $logopts = LOG_PID)\n    {\n        parent::__construct($facility, $level, $bubble);\n\n        $this->ident = $ident;\n        $this->logopts = $logopts;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        closelog();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!openlog($this->ident, $this->logopts, $this->facility)) {\n            throw new \\LogicException('Can\\'t open syslog for ident \"'.$this->ident.'\" and facility \"'.$this->facility.'\"' . Utils::getRecordMessageForException($record));\n        }\n        syslog($this->logLevels[$record['level']], (string) $record['formatted']);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/ErrorLogHandler.php","ext":"php","size":2587,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Stores to PHP error_log() handler.\n *\n * @author Elan Ruusamäe <glen@delfi.ee>\n */\nclass ErrorLogHandler extends AbstractProcessingHandler\n{\n    public const OPERATING_SYSTEM = 0;\n    public const SAPI = 4;\n\n    /** @var int */\n    protected $messageType;\n    /** @var bool */\n    protected $expandNewlines;\n\n    /**\n     * @param int  $messageType    Says where the error should go.\n     * @param bool $expandNewlines If set to true, newlines in the message will be expanded to be take multiple log entries\n     */\n    public function __construct(int $messageType = self::OPERATING_SYSTEM, $level = Logger::DEBUG, bool $bubble = true, bool $expandNewlines = false)\n    {\n        parent::__construct($level, $bubble);\n\n        if (false === in_array($messageType, self::getAvailableTypes(), true)) {\n            $message = sprintf('The given message type \"%s\" is not supported', print_r($messageType, true));\n\n            throw new \\InvalidArgumentException($message);\n        }\n\n        $this->messageType = $messageType;\n        $this->expandNewlines = $expandNewlines;\n    }\n\n    /**\n     * @return int[] With all available types\n     */\n    public static function getAvailableTypes(): array\n    {\n        return [\n            self::OPERATING_SYSTEM,\n            self::SAPI,\n        ];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter('[%datetime%] %channel%.%level_name%: %message% %context% %extra%');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        if (!$this->expandNewlines) {\n            error_log((string) $record['formatted'], $this->messageType);\n\n            return;\n        }\n\n        $lines = preg_split('{[\\r\\n]+}', (string) $record['formatted']);\n        if ($lines === false) {\n            $pcreErrorCode = preg_last_error();\n            throw new \\RuntimeException('Failed to preg_split formatted string: ' . $pcreErrorCode . ' / '. Utils::pcreLastErrorMessage($pcreErrorCode));\n        }\n        foreach ($lines as $line) {\n            error_log($line, $this->messageType);\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/PHPConsoleHandler.php","ext":"php","size":10540,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\nuse Monolog\\Utils;\nuse PhpConsole\\Connector;\nuse PhpConsole\\Handler as VendorPhpConsoleHandler;\nuse PhpConsole\\Helper;\n\n/**\n * Monolog handler for Google Chrome extension \"PHP Console\"\n *\n * Display PHP error/debug log messages in Google Chrome console and notification popups, executes PHP code remotely\n *\n * Usage:\n * 1. Install Google Chrome extension [now dead and removed from the chrome store]\n * 2. See overview https://github.com/barbushin/php-console#overview\n * 3. Install PHP Console library https://github.com/barbushin/php-console#installation\n * 4. Example (result will looks like http://i.hizliresim.com/vg3Pz4.png)\n *\n *      $logger = new \\Monolog\\Logger('all', array(new \\Monolog\\Handler\\PHPConsoleHandler()));\n *      \\Monolog\\ErrorHandler::register($logger);\n *      echo $undefinedVar;\n *      $logger->debug('SELECT * FROM users', array('db', 'time' => 0.012));\n *      PC::debug($_SERVER); // PHP Console debugger for any type of vars\n *\n * @author Sergey Barbushin https://www.linkedin.com/in/barbushin\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n * @deprecated Since 2.8.0 and 3.2.0, PHPConsole is abandoned and thus we will drop this handler in Monolog 4\n */\nclass PHPConsoleHandler extends AbstractProcessingHandler\n{\n    /** @var array<string, mixed> */\n    private $options = [\n        'enabled' => true, // bool Is PHP Console server enabled\n        'classesPartialsTraceIgnore' => ['Monolog\\\\'], // array Hide calls of classes started with...\n        'debugTagsKeysInContext' => [0, 'tag'], // bool Is PHP Console server enabled\n        'useOwnErrorsHandler' => false, // bool Enable errors handling\n        'useOwnExceptionsHandler' => false, // bool Enable exceptions handling\n        'sourcesBasePath' => null, // string Base path of all project sources to strip in errors source paths\n        'registerHelper' => true, // bool Register PhpConsole\\Helper that allows short debug calls like PC::debug($var, 'ta.g.s')\n        'serverEncoding' => null, // string|null Server internal encoding\n        'headersLimit' => null, // int|null Set headers size limit for your web-server\n        'password' => null, // string|null Protect PHP Console connection by password\n        'enableSslOnlyMode' => false, // bool Force connection by SSL for clients with PHP Console installed\n        'ipMasks' => [], // array Set IP masks of clients that will be allowed to connect to PHP Console: array('192.168.*.*', '127.0.0.1')\n        'enableEvalListener' => false, // bool Enable eval request to be handled by eval dispatcher(if enabled, 'password' option is also required)\n        'dumperDetectCallbacks' => false, // bool Convert callback items in dumper vars to (callback SomeClass::someMethod) strings\n        'dumperLevelLimit' => 5, // int Maximum dumped vars array or object nested dump level\n        'dumperItemsCountLimit' => 100, // int Maximum dumped var same level array items or object properties number\n        'dumperItemSizeLimit' => 5000, // int Maximum length of any string or dumped array item\n        'dumperDumpSizeLimit' => 500000, // int Maximum approximate size of dumped vars result formatted in JSON\n        'detectDumpTraceAndSource' => false, // bool Autodetect and append trace data to debug\n        'dataStorage' => null, // \\PhpConsole\\Storage|null Fixes problem with custom $_SESSION handler(see http://goo.gl/Ne8juJ)\n    ];\n\n    /** @var Connector */\n    private $connector;\n\n    /**\n     * @param  array<string, mixed> $options   See \\Monolog\\Handler\\PHPConsoleHandler::$options for more details\n     * @param  Connector|null       $connector Instance of \\PhpConsole\\Connector class (optional)\n     * @throws \\RuntimeException\n     */\n    public function __construct(array $options = [], ?Connector $connector = null, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!class_exists('PhpConsole\\Connector')) {\n            throw new \\RuntimeException('PHP Console library not found. See https://github.com/barbushin/php-console#installation');\n        }\n        parent::__construct($level, $bubble);\n        $this->options = $this->initOptions($options);\n        $this->connector = $this->initConnector($connector);\n    }\n\n    /**\n     * @param array<string, mixed> $options\n     *\n     * @return array<string, mixed>\n     */\n    private function initOptions(array $options): array\n    {\n        $wrongOptions = array_diff(array_keys($options), array_keys($this->options));\n        if ($wrongOptions) {\n            throw new \\RuntimeException('Unknown options: ' . implode(', ', $wrongOptions));\n        }\n\n        return array_replace($this->options, $options);\n    }\n\n    private function initConnector(?Connector $connector = null): Connector\n    {\n        if (!$connector) {\n            if ($this->options['dataStorage']) {\n                Connector::setPostponeStorage($this->options['dataStorage']);\n            }\n            $connector = Connector::getInstance();\n        }\n\n        if ($this->options['registerHelper'] && !Helper::isRegistered()) {\n            Helper::register();\n        }\n\n        if ($this->options['enabled'] && $connector->isActiveClient()) {\n            if ($this->options['useOwnErrorsHandler'] || $this->options['useOwnExceptionsHandler']) {\n                $handler = VendorPhpConsoleHandler::getInstance();\n                $handler->setHandleErrors($this->options['useOwnErrorsHandler']);\n                $handler->setHandleExceptions($this->options['useOwnExceptionsHandler']);\n                $handler->start();\n            }\n            if ($this->options['sourcesBasePath']) {\n                $connector->setSourcesBasePath($this->options['sourcesBasePath']);\n            }\n            if ($this->options['serverEncoding']) {\n                $connector->setServerEncoding($this->options['serverEncoding']);\n            }\n            if ($this->options['password']) {\n                $connector->setPassword($this->options['password']);\n            }\n            if ($this->options['enableSslOnlyMode']) {\n                $connector->enableSslOnlyMode();\n            }\n            if ($this->options['ipMasks']) {\n                $connector->setAllowedIpMasks($this->options['ipMasks']);\n            }\n            if ($this->options['headersLimit']) {\n                $connector->setHeadersLimit($this->options['headersLimit']);\n            }\n            if ($this->options['detectDumpTraceAndSource']) {\n                $connector->getDebugDispatcher()->detectTraceAndSource = true;\n            }\n            $dumper = $connector->getDumper();\n            $dumper->levelLimit = $this->options['dumperLevelLimit'];\n            $dumper->itemsCountLimit = $this->options['dumperItemsCountLimit'];\n            $dumper->itemSizeLimit = $this->options['dumperItemSizeLimit'];\n            $dumper->dumpSizeLimit = $this->options['dumperDumpSizeLimit'];\n            $dumper->detectCallbacks = $this->options['dumperDetectCallbacks'];\n            if ($this->options['enableEvalListener']) {\n                $connector->startEvalRequestsListener();\n            }\n        }\n\n        return $connector;\n    }\n\n    public function getConnector(): Connector\n    {\n        return $this->connector;\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    public function getOptions(): array\n    {\n        return $this->options;\n    }\n\n    public function handle(array $record): bool\n    {\n        if ($this->options['enabled'] && $this->connector->isActiveClient()) {\n            return parent::handle($record);\n        }\n\n        return !$this->bubble;\n    }\n\n    /**\n     * Writes the record down to the log of the implementing handler\n     */\n    protected function write(array $record): void\n    {\n        if ($record['level'] < Logger::NOTICE) {\n            $this->handleDebugRecord($record);\n        } elseif (isset($record['context']['exception']) && $record['context']['exception'] instanceof \\Throwable) {\n            $this->handleExceptionRecord($record);\n        } else {\n            $this->handleErrorRecord($record);\n        }\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    private function handleDebugRecord(array $record): void\n    {\n        $tags = $this->getRecordTags($record);\n        $message = $record['message'];\n        if ($record['context']) {\n            $message .= ' ' . Utils::jsonEncode($this->connector->getDumper()->dump(array_filter($record['context'])), null, true);\n        }\n        $this->connector->getDebugDispatcher()->dispatchDebug($message, $tags, $this->options['classesPartialsTraceIgnore']);\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    private function handleExceptionRecord(array $record): void\n    {\n        $this->connector->getErrorsDispatcher()->dispatchException($record['context']['exception']);\n    }\n\n    /**\n     * @phpstan-param Record $record\n     */\n    private function handleErrorRecord(array $record): void\n    {\n        $context = $record['context'];\n\n        $this->connector->getErrorsDispatcher()->dispatchError(\n            $context['code'] ?? null,\n            $context['message'] ?? $record['message'],\n            $context['file'] ?? null,\n            $context['line'] ?? null,\n            $this->options['classesPartialsTraceIgnore']\n        );\n    }\n\n    /**\n     * @phpstan-param Record $record\n     * @return string\n     */\n    private function getRecordTags(array &$record)\n    {\n        $tags = null;\n        if (!empty($record['context'])) {\n            $context = & $record['context'];\n            foreach ($this->options['debugTagsKeysInContext'] as $key) {\n                if (!empty($context[$key])) {\n                    $tags = $context[$key];\n                    if ($key === 0) {\n                        array_shift($context);\n                    } else {\n                        unset($context[$key]);\n                    }\n                    break;\n                }\n            }\n        }\n\n        return $tags ?: strtolower($record['level_name']);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter('%message%');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/RedisPubSubHandler.php","ext":"php","size":1820,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\nuse Monolog\\Formatter\\LineFormatter;\nuse Monolog\\Formatter\\FormatterInterface;\nuse Monolog\\Logger;\n\n/**\n * Sends the message to a Redis Pub/Sub channel using PUBLISH\n *\n * usage example:\n *\n *   $log = new Logger('application');\n *   $redis = new RedisPubSubHandler(new Predis\\Client(\"tcp://localhost:6379\"), \"logs\", Logger::WARNING);\n *   $log->pushHandler($redis);\n *\n * @author Gaëtan Faugère <gaetan@fauge.re>\n */\nclass RedisPubSubHandler extends AbstractProcessingHandler\n{\n    /** @var \\Predis\\Client<\\Predis\\Client>|\\Redis */\n    private $redisClient;\n    /** @var string */\n    private $channelKey;\n\n    /**\n     * @param \\Predis\\Client<\\Predis\\Client>|\\Redis $redis The redis instance\n     * @param string                $key   The channel key to publish records to\n     */\n    public function __construct($redis, string $key, $level = Logger::DEBUG, bool $bubble = true)\n    {\n        if (!(($redis instanceof \\Predis\\Client) || ($redis instanceof \\Redis))) {\n            throw new \\InvalidArgumentException('Predis\\Client or Redis instance required');\n        }\n\n        $this->redisClient = $redis;\n        $this->channelKey = $key;\n\n        parent::__construct($level, $bubble);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function write(array $record): void\n    {\n        $this->redisClient->publish($this->channelKey, $record[\"formatted\"]);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    protected function getDefaultFormatter(): FormatterInterface\n    {\n        return new LineFormatter();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Handler/WhatFailureGroupHandler.php","ext":"php","size":1949,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Handler;\n\n/**\n * Forwards records to multiple handlers suppressing failures of each handler\n * and continuing through to give every handler a chance to succeed.\n *\n * @author Craig D'Amelio <craig@damelio.ca>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass WhatFailureGroupHandler extends GroupHandler\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function handle(array $record): bool\n    {\n        if ($this->processors) {\n            /** @var Record $record */\n            $record = $this->processRecord($record);\n        }\n\n        foreach ($this->handlers as $handler) {\n            try {\n                $handler->handle($record);\n            } catch (\\Throwable $e) {\n                // What failure?\n            }\n        }\n\n        return false === $this->bubble;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function handleBatch(array $records): void\n    {\n        if ($this->processors) {\n            $processed = array();\n            foreach ($records as $record) {\n                $processed[] = $this->processRecord($record);\n            }\n            /** @var Record[] $records */\n            $records = $processed;\n        }\n\n        foreach ($this->handlers as $handler) {\n            try {\n                $handler->handleBatch($records);\n            } catch (\\Throwable $e) {\n                // What failure?\n            }\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function close(): void\n    {\n        foreach ($this->handlers as $handler) {\n            try {\n                $handler->close();\n            } catch (\\Throwable $e) {\n                // What failure?\n            }\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Logger.php","ext":"php","size":23125,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse DateTimeZone;\nuse Monolog\\Handler\\HandlerInterface;\nuse Psr\\Log\\LoggerInterface;\nuse Psr\\Log\\InvalidArgumentException;\nuse Psr\\Log\\LogLevel;\nuse Throwable;\nuse Stringable;\n\n/**\n * Monolog log channel\n *\n * It contains a stack of Handlers and a stack of Processors,\n * and uses them to store records that are added to it.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-type Level Logger::DEBUG|Logger::INFO|Logger::NOTICE|Logger::WARNING|Logger::ERROR|Logger::CRITICAL|Logger::ALERT|Logger::EMERGENCY\n * @phpstan-type LevelName 'DEBUG'|'INFO'|'NOTICE'|'WARNING'|'ERROR'|'CRITICAL'|'ALERT'|'EMERGENCY'\n * @phpstan-type Record array{message: string, context: mixed[], level: Level, level_name: LevelName, channel: string, datetime: \\DateTimeImmutable, extra: mixed[]}\n */\nclass Logger implements LoggerInterface, ResettableInterface\n{\n    /**\n     * Detailed debug information\n     */\n    public const DEBUG = 100;\n\n    /**\n     * Interesting events\n     *\n     * Examples: User logs in, SQL logs.\n     */\n    public const INFO = 200;\n\n    /**\n     * Uncommon events\n     */\n    public const NOTICE = 250;\n\n    /**\n     * Exceptional occurrences that are not errors\n     *\n     * Examples: Use of deprecated APIs, poor use of an API,\n     * undesirable things that are not necessarily wrong.\n     */\n    public const WARNING = 300;\n\n    /**\n     * Runtime errors\n     */\n    public const ERROR = 400;\n\n    /**\n     * Critical conditions\n     *\n     * Example: Application component unavailable, unexpected exception.\n     */\n    public const CRITICAL = 500;\n\n    /**\n     * Action must be taken immediately\n     *\n     * Example: Entire website down, database unavailable, etc.\n     * This should trigger the SMS alerts and wake you up.\n     */\n    public const ALERT = 550;\n\n    /**\n     * Urgent alert.\n     */\n    public const EMERGENCY = 600;\n\n    /**\n     * Monolog API version\n     *\n     * This is only bumped when API breaks are done and should\n     * follow the major version of the library\n     *\n     * @var int\n     */\n    public const API = 2;\n\n    /**\n     * This is a static variable and not a constant to serve as an extension point for custom levels\n     *\n     * @var array<int, string> $levels Logging levels with the levels as key\n     *\n     * @phpstan-var array<Level, LevelName> $levels Logging levels with the levels as key\n     */\n    protected static $levels = [\n        self::DEBUG     => 'DEBUG',\n        self::INFO      => 'INFO',\n        self::NOTICE    => 'NOTICE',\n        self::WARNING   => 'WARNING',\n        self::ERROR     => 'ERROR',\n        self::CRITICAL  => 'CRITICAL',\n        self::ALERT     => 'ALERT',\n        self::EMERGENCY => 'EMERGENCY',\n    ];\n\n    /**\n     * Mapping between levels numbers defined in RFC 5424 and Monolog ones\n     *\n     * @phpstan-var array<int, Level> $rfc_5424_levels\n     */\n    private const RFC_5424_LEVELS = [\n        7 => self::DEBUG,\n        6 => self::INFO,\n        5 => self::NOTICE,\n        4 => self::WARNING,\n        3 => self::ERROR,\n        2 => self::CRITICAL,\n        1 => self::ALERT,\n        0 => self::EMERGENCY,\n    ];\n\n    /**\n     * @var string\n     */\n    protected $name;\n\n    /**\n     * The handler stack\n     *\n     * @var HandlerInterface[]\n     */\n    protected $handlers;\n\n    /**\n     * Processors that will process all log records\n     *\n     * To process records of a single handler instead, add the processor on that specific handler\n     *\n     * @var callable[]\n     */\n    protected $processors;\n\n    /**\n     * @var bool\n     */\n    protected $microsecondTimestamps = true;\n\n    /**\n     * @var DateTimeZone\n     */\n    protected $timezone;\n\n    /**\n     * @var callable|null\n     */\n    protected $exceptionHandler;\n\n    /**\n     * @var int Keeps track of depth to prevent infinite logging loops\n     */\n    private $logDepth = 0;\n\n    /**\n     * @var \\WeakMap<\\Fiber<mixed, mixed, mixed, mixed>, int> Keeps track of depth inside fibers to prevent infinite logging loops\n     */\n    private $fiberLogDepth;\n\n    /**\n     * @var bool Whether to detect infinite logging loops\n     *\n     * This can be disabled via {@see useLoggingLoopDetection} if you have async handlers that do not play well with this\n     */\n    private $detectCycles = true;\n\n    /**\n     * @psalm-param array<callable(array): array> $processors\n     *\n     * @param string             $name       The logging channel, a simple descriptive name that is attached to all log records\n     * @param HandlerInterface[] $handlers   Optional stack of handlers, the first one in the array is called first, etc.\n     * @param callable[]         $processors Optional array of processors\n     * @param DateTimeZone|null  $timezone   Optional timezone, if not provided date_default_timezone_get() will be used\n     */\n    public function __construct(string $name, array $handlers = [], array $processors = [], ?DateTimeZone $timezone = null)\n    {\n        $this->name = $name;\n        $this->setHandlers($handlers);\n        $this->processors = $processors;\n        $this->timezone = $timezone ?: new DateTimeZone(date_default_timezone_get() ?: 'UTC');\n\n        if (\\PHP_VERSION_ID >= 80100) {\n            // Local variable for phpstan, see https://github.com/phpstan/phpstan/issues/6732#issuecomment-1111118412\n            /** @var \\WeakMap<\\Fiber<mixed, mixed, mixed, mixed>, int> $fiberLogDepth */\n            $fiberLogDepth = new \\WeakMap();\n            $this->fiberLogDepth = $fiberLogDepth;\n        }\n    }\n\n    public function getName(): string\n    {\n        return $this->name;\n    }\n\n    /**\n     * Return a new cloned instance with the name changed\n     */\n    public function withName(string $name): self\n    {\n        $new = clone $this;\n        $new->name = $name;\n\n        return $new;\n    }\n\n    /**\n     * Pushes a handler on to the stack.\n     */\n    public function pushHandler(HandlerInterface $handler): self\n    {\n        array_unshift($this->handlers, $handler);\n\n        return $this;\n    }\n\n    /**\n     * Pops a handler from the stack\n     *\n     * @throws \\LogicException If empty handler stack\n     */\n    public function popHandler(): HandlerInterface\n    {\n        if (!$this->handlers) {\n            throw new \\LogicException('You tried to pop from an empty handler stack.');\n        }\n\n        return array_shift($this->handlers);\n    }\n\n    /**\n     * Set handlers, replacing all existing ones.\n     *\n     * If a map is passed, keys will be ignored.\n     *\n     * @param HandlerInterface[] $handlers\n     */\n    public function setHandlers(array $handlers): self\n    {\n        $this->handlers = [];\n        foreach (array_reverse($handlers) as $handler) {\n            $this->pushHandler($handler);\n        }\n\n        return $this;\n    }\n\n    /**\n     * @return HandlerInterface[]\n     */\n    public function getHandlers(): array\n    {\n        return $this->handlers;\n    }\n\n    /**\n     * Adds a processor on to the stack.\n     */\n    public function pushProcessor(callable $callback): self\n    {\n        array_unshift($this->processors, $callback);\n\n        return $this;\n    }\n\n    /**\n     * Removes the processor on top of the stack and returns it.\n     *\n     * @throws \\LogicException If empty processor stack\n     * @return callable\n     */\n    public function popProcessor(): callable\n    {\n        if (!$this->processors) {\n            throw new \\LogicException('You tried to pop from an empty processor stack.');\n        }\n\n        return array_shift($this->processors);\n    }\n\n    /**\n     * @return callable[]\n     */\n    public function getProcessors(): array\n    {\n        return $this->processors;\n    }\n\n    /**\n     * Control the use of microsecond resolution timestamps in the 'datetime'\n     * member of new records.\n     *\n     * As of PHP7.1 microseconds are always included by the engine, so\n     * there is no performance penalty and Monolog 2 enabled microseconds\n     * by default. This function lets you disable them though in case you want\n     * to suppress microseconds from the output.\n     *\n     * @param bool $micro True to use microtime() to create timestamps\n     */\n    public function useMicrosecondTimestamps(bool $micro): self\n    {\n        $this->microsecondTimestamps = $micro;\n\n        return $this;\n    }\n\n    public function useLoggingLoopDetection(bool $detectCycles): self\n    {\n        $this->detectCycles = $detectCycles;\n\n        return $this;\n    }\n\n    /**\n     * Adds a log record.\n     *\n     * @param  int               $level    The logging level (a Monolog or RFC 5424 level)\n     * @param  string            $message  The log message\n     * @param  mixed[]           $context  The log context\n     * @param  DateTimeImmutable $datetime Optional log date to log into the past or future\n     * @return bool              Whether the record has been processed\n     *\n     * @phpstan-param Level $level\n     */\n    public function addRecord(int $level, string $message, array $context = [], ?DateTimeImmutable $datetime = null): bool\n    {\n        if (isset(self::RFC_5424_LEVELS[$level])) {\n            $level = self::RFC_5424_LEVELS[$level];\n        }\n\n        if ($this->detectCycles) {\n            if (\\PHP_VERSION_ID >= 80100 && $fiber = \\Fiber::getCurrent()) {\n                // @phpstan-ignore offsetAssign.dimType\n                $this->fiberLogDepth[$fiber] = $this->fiberLogDepth[$fiber] ?? 0;\n                $logDepth = ++$this->fiberLogDepth[$fiber];\n            } else {\n                $logDepth = ++$this->logDepth;\n            }\n        } else {\n            $logDepth = 0;\n        }\n\n        if ($logDepth === 3) {\n            $this->warning('A possible infinite logging loop was detected and aborted. It appears some of your handler code is triggering logging, see the previous log record for a hint as to what may be the cause.');\n            return false;\n        } elseif ($logDepth >= 5) { // log depth 4 is let through, so we can log the warning above\n            return false;\n        }\n\n        try {\n            $record = null;\n\n            foreach ($this->handlers as $handler) {\n                if (null === $record) {\n                    // skip creating the record as long as no handler is going to handle it\n                    if (!$handler->isHandling(['level' => $level])) {\n                        continue;\n                    }\n\n                    $levelName = static::getLevelName($level);\n\n                    $record = [\n                        'message' => $message,\n                        'context' => $context,\n                        'level' => $level,\n                        'level_name' => $levelName,\n                        'channel' => $this->name,\n                        'datetime' => $datetime ?? new DateTimeImmutable($this->microsecondTimestamps, $this->timezone),\n                        'extra' => [],\n                    ];\n\n                    try {\n                        foreach ($this->processors as $processor) {\n                            $record = $processor($record);\n                        }\n                    } catch (Throwable $e) {\n                        $this->handleException($e, $record);\n\n                        return true;\n                    }\n                }\n\n                // once the record exists, send it to all handlers as long as the bubbling chain is not interrupted\n                try {\n                    if (true === $handler->handle($record)) {\n                        break;\n                    }\n                } catch (Throwable $e) {\n                    $this->handleException($e, $record);\n\n                    return true;\n                }\n            }\n        } finally {\n            if ($this->detectCycles) {\n                if (isset($fiber)) {\n                    $this->fiberLogDepth[$fiber]--;\n                } else {\n                    $this->logDepth--;\n                }\n            }\n        }\n\n        return null !== $record;\n    }\n\n    /**\n     * Ends a log cycle and frees all resources used by handlers.\n     *\n     * Closing a Handler means flushing all buffers and freeing any open resources/handles.\n     * Handlers that have been closed should be able to accept log records again and re-open\n     * themselves on demand, but this may not always be possible depending on implementation.\n     *\n     * This is useful at the end of a request and will be called automatically on every handler\n     * when they get destructed.\n     */\n    public function close(): void\n    {\n        foreach ($this->handlers as $handler) {\n            $handler->close();\n        }\n    }\n\n    /**\n     * Ends a log cycle and resets all handlers and processors to their initial state.\n     *\n     * Resetting a Handler or a Processor means flushing/cleaning all buffers, resetting internal\n     * state, and getting it back to a state in which it can receive log records again.\n     *\n     * This is useful in case you want to avoid logs leaking between two requests or jobs when you\n     * have a long running process like a worker or an application server serving multiple requests\n     * in one process.\n     */\n    public function reset(): void\n    {\n        foreach ($this->handlers as $handler) {\n            if ($handler instanceof ResettableInterface) {\n                $handler->reset();\n            }\n        }\n\n        foreach ($this->processors as $processor) {\n            if ($processor instanceof ResettableInterface) {\n                $processor->reset();\n            }\n        }\n    }\n\n    /**\n     * Gets all supported logging levels.\n     *\n     * @return array<string, int> Assoc array with human-readable level names => level codes.\n     * @phpstan-return array<LevelName, Level>\n     */\n    public static function getLevels(): array\n    {\n        return array_flip(static::$levels);\n    }\n\n    /**\n     * Gets the name of the logging level.\n     *\n     * @throws \\Psr\\Log\\InvalidArgumentException If level is not defined\n     *\n     * @phpstan-param  Level     $level\n     * @phpstan-return LevelName\n     */\n    public static function getLevelName(int $level): string\n    {\n        if (!isset(static::$levels[$level])) {\n            throw new InvalidArgumentException('Level \"'.$level.'\" is not defined, use one of: '.implode(', ', array_keys(static::$levels)));\n        }\n\n        return static::$levels[$level];\n    }\n\n    /**\n     * Converts PSR-3 levels to Monolog ones if necessary\n     *\n     * @param  string|int                        $level Level number (monolog) or name (PSR-3)\n     * @throws \\Psr\\Log\\InvalidArgumentException If level is not defined\n     *\n     * @phpstan-param  Level|LevelName|LogLevel::* $level\n     * @phpstan-return Level\n     */\n    public static function toMonologLevel($level): int\n    {\n        if (is_string($level)) {\n            if (is_numeric($level)) {\n                /** @phpstan-ignore-next-line */\n                return intval($level);\n            }\n\n            // Contains chars of all log levels and avoids using strtoupper() which may have\n            // strange results depending on locale (for example, \"i\" will become \"İ\" in Turkish locale)\n            $upper = strtr($level, 'abcdefgilmnortuwy', 'ABCDEFGILMNORTUWY');\n            if (defined(__CLASS__.'::'.$upper)) {\n                return constant(__CLASS__ . '::' . $upper);\n            }\n\n            throw new InvalidArgumentException('Level \"'.$level.'\" is not defined, use one of: '.implode(', ', array_keys(static::$levels) + static::$levels));\n        }\n\n        if (!is_int($level)) {\n            throw new InvalidArgumentException('Level \"'.var_export($level, true).'\" is not defined, use one of: '.implode(', ', array_keys(static::$levels) + static::$levels));\n        }\n\n        return $level;\n    }\n\n    /**\n     * Checks whether the Logger has a handler that listens on the given level\n     *\n     * @phpstan-param Level $level\n     */\n    public function isHandling(int $level): bool\n    {\n        $record = [\n            'level' => $level,\n        ];\n\n        foreach ($this->handlers as $handler) {\n            if ($handler->isHandling($record)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Set a custom exception handler that will be called if adding a new record fails\n     *\n     * The callable will receive an exception object and the record that failed to be logged\n     */\n    public function setExceptionHandler(?callable $callback): self\n    {\n        $this->exceptionHandler = $callback;\n\n        return $this;\n    }\n\n    public function getExceptionHandler(): ?callable\n    {\n        return $this->exceptionHandler;\n    }\n\n    /**\n     * Adds a log record at an arbitrary level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param mixed             $level   The log level (a Monolog, PSR-3 or RFC 5424 level)\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function log($level, $message, array $context = []): void\n    {\n        if (!is_int($level) && !is_string($level)) {\n            throw new \\InvalidArgumentException('$level is expected to be a string or int');\n        }\n\n        if (isset(self::RFC_5424_LEVELS[$level])) {\n            $level = self::RFC_5424_LEVELS[$level];\n        }\n\n        $level = static::toMonologLevel($level);\n\n        $this->addRecord($level, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the DEBUG level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function debug($message, array $context = []): void\n    {\n        $this->addRecord(static::DEBUG, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the INFO level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function info($message, array $context = []): void\n    {\n        $this->addRecord(static::INFO, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the NOTICE level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function notice($message, array $context = []): void\n    {\n        $this->addRecord(static::NOTICE, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the WARNING level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function warning($message, array $context = []): void\n    {\n        $this->addRecord(static::WARNING, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the ERROR level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function error($message, array $context = []): void\n    {\n        $this->addRecord(static::ERROR, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the CRITICAL level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function critical($message, array $context = []): void\n    {\n        $this->addRecord(static::CRITICAL, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the ALERT level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function alert($message, array $context = []): void\n    {\n        $this->addRecord(static::ALERT, (string) $message, $context);\n    }\n\n    /**\n     * Adds a log record at the EMERGENCY level.\n     *\n     * This method allows for compatibility with common interfaces.\n     *\n     * @param string|Stringable $message The log message\n     * @param mixed[]           $context The log context\n     */\n    public function emergency($message, array $context = []): void\n    {\n        $this->addRecord(static::EMERGENCY, (string) $message, $context);\n    }\n\n    /**\n     * Sets the timezone to be used for the timestamp of log records.\n     */\n    public function setTimezone(DateTimeZone $tz): self\n    {\n        $this->timezone = $tz;\n\n        return $this;\n    }\n\n    /**\n     * Returns the timezone to be used for the timestamp of log records.\n     */\n    public function getTimezone(): DateTimeZone\n    {\n        return $this->timezone;\n    }\n\n    /**\n     * Delegates exception management to the custom exception handler,\n     * or throws the exception if no custom handler is set.\n     *\n     * @param array $record\n     * @phpstan-param Record $record\n     */\n    protected function handleException(Throwable $e, array $record): void\n    {\n        if (!$this->exceptionHandler) {\n            throw $e;\n        }\n\n        ($this->exceptionHandler)($e, $record);\n    }\n\n    /**\n     * @return array<string, mixed>\n     */\n    public function __serialize(): array\n    {\n        return [\n            'name' => $this->name,\n            'handlers' => $this->handlers,\n            'processors' => $this->processors,\n            'microsecondTimestamps' => $this->microsecondTimestamps,\n            'timezone' => $this->timezone,\n            'exceptionHandler' => $this->exceptionHandler,\n            'logDepth' => $this->logDepth,\n            'detectCycles' => $this->detectCycles,\n        ];\n    }\n\n    /**\n     * @param array<string, mixed> $data\n     */\n    public function __unserialize(array $data): void\n    {\n        foreach (['name', 'handlers', 'processors', 'microsecondTimestamps', 'timezone', 'exceptionHandler', 'logDepth', 'detectCycles'] as $property) {\n            if (isset($data[$property])) {\n                $this->$property = $data[$property];\n            }\n        }\n\n        if (\\PHP_VERSION_ID >= 80100) {\n            // Local variable for phpstan, see https://github.com/phpstan/phpstan/issues/6732#issuecomment-1111118412\n            /** @var \\WeakMap<\\Fiber<mixed, mixed, mixed, mixed>, int> $fiberLogDepth */\n            $fiberLogDepth = new \\WeakMap();\n            $this->fiberLogDepth = $fiberLogDepth;\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/PsrLogMessageProcessor.php","ext":"php","size":3039,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\Utils;\n\n/**\n * Processes a record's message according to PSR-3 rules\n *\n * It replaces {foo} with the value from $context['foo']\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass PsrLogMessageProcessor implements ProcessorInterface\n{\n    public const SIMPLE_DATE = \"Y-m-d\\TH:i:s.uP\";\n\n    /** @var string|null */\n    private $dateFormat;\n\n    /** @var bool */\n    private $removeUsedContextFields;\n\n    /**\n     * @param string|null $dateFormat              The format of the timestamp: one supported by DateTime::format\n     * @param bool        $removeUsedContextFields If set to true the fields interpolated into message gets unset\n     */\n    public function __construct(?string $dateFormat = null, bool $removeUsedContextFields = false)\n    {\n        $this->dateFormat = $dateFormat;\n        $this->removeUsedContextFields = $removeUsedContextFields;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        if (false === strpos($record['message'], '{')) {\n            return $record;\n        }\n\n        $replacements = [];\n        foreach ($record['context'] as $key => $val) {\n            $placeholder = '{' . $key . '}';\n            if (strpos($record['message'], $placeholder) === false) {\n                continue;\n            }\n\n            if (is_null($val) || is_scalar($val) || (is_object($val) && method_exists($val, \"__toString\"))) {\n                $replacements[$placeholder] = $val;\n            } elseif ($val instanceof \\DateTimeInterface) {\n                if (!$this->dateFormat && $val instanceof \\Monolog\\DateTimeImmutable) {\n                    // handle monolog dates using __toString if no specific dateFormat was asked for\n                    // so that it follows the useMicroseconds flag\n                    $replacements[$placeholder] = (string) $val;\n                } else {\n                    $replacements[$placeholder] = $val->format($this->dateFormat ?: static::SIMPLE_DATE);\n                }\n            } elseif ($val instanceof \\UnitEnum) {\n                $replacements[$placeholder] = $val instanceof \\BackedEnum ? $val->value : $val->name;\n            } elseif (is_object($val)) {\n                $replacements[$placeholder] = '[object '.Utils::getClass($val).']';\n            } elseif (is_array($val)) {\n                $replacements[$placeholder] = 'array'.Utils::jsonEncode($val, null, true);\n            } else {\n                $replacements[$placeholder] = '['.gettype($val).']';\n            }\n\n            if ($this->removeUsedContextFields) {\n                unset($record['context'][$key]);\n            }\n        }\n\n        $record['message'] = strtr($record['message'], $replacements);\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/MercurialProcessor.php","ext":"php","size":1896,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Injects Hg branch and Hg revision number in all records\n *\n * @author Jonathan A. Schweder <jonathanschweder@gmail.com>\n *\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nclass MercurialProcessor implements ProcessorInterface\n{\n    /** @var Level */\n    private $level;\n    /** @var array{branch: string, revision: string}|array<never>|null */\n    private static $cache = null;\n\n    /**\n     * @param int|string $level The minimum logging level at which this Processor will be triggered\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function __construct($level = Logger::DEBUG)\n    {\n        $this->level = Logger::toMonologLevel($level);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        // return if the level is not high enough\n        if ($record['level'] < $this->level) {\n            return $record;\n        }\n\n        $record['extra']['hg'] = self::getMercurialInfo();\n\n        return $record;\n    }\n\n    /**\n     * @return array{branch: string, revision: string}|array<never>\n     */\n    private static function getMercurialInfo(): array\n    {\n        if (self::$cache) {\n            return self::$cache;\n        }\n\n        $result = explode(' ', trim(`hg id -nb`));\n\n        if (count($result) >= 3) {\n            return self::$cache = [\n                'branch' => $result[1],\n                'revision' => $result[2],\n            ];\n        }\n\n        return self::$cache = [];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/TagProcessor.php","ext":"php","size":1122,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Adds a tags array into record\n *\n * @author Martijn Riemers\n */\nclass TagProcessor implements ProcessorInterface\n{\n    /** @var string[] */\n    private $tags;\n\n    /**\n     * @param string[] $tags\n     */\n    public function __construct(array $tags = [])\n    {\n        $this->setTags($tags);\n    }\n\n    /**\n     * @param string[] $tags\n     */\n    public function addTags(array $tags = []): self\n    {\n        $this->tags = array_merge($this->tags, $tags);\n\n        return $this;\n    }\n\n    /**\n     * @param string[] $tags\n     */\n    public function setTags(array $tags = []): self\n    {\n        $this->tags = $tags;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $record['extra']['tags'] = $this->tags;\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/GitProcessor.php","ext":"php","size":1941,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Injects Git branch and Git commit SHA in all records\n *\n * @author Nick Otter\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass GitProcessor implements ProcessorInterface\n{\n    /** @var int */\n    private $level;\n    /** @var array{branch: string, commit: string}|array<never>|null */\n    private static $cache = null;\n\n    /**\n     * @param string|int $level The minimum logging level at which this Processor will be triggered\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function __construct($level = Logger::DEBUG)\n    {\n        $this->level = Logger::toMonologLevel($level);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        // return if the level is not high enough\n        if ($record['level'] < $this->level) {\n            return $record;\n        }\n\n        $record['extra']['git'] = self::getGitInfo();\n\n        return $record;\n    }\n\n    /**\n     * @return array{branch: string, commit: string}|array<never>\n     */\n    private static function getGitInfo(): array\n    {\n        if (self::$cache) {\n            return self::$cache;\n        }\n\n        $branches = `git branch -v --no-abbrev`;\n        if ($branches && preg_match('{^\\* (.+?)\\s+([a-f0-9]{40})(?:\\s|$)}m', $branches, $matches)) {\n            return self::$cache = [\n                'branch' => $matches[1],\n                'commit' => $matches[2],\n            ];\n        }\n\n        return self::$cache = [];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/WebProcessor.php","ext":"php","size":3535,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects url/method and remote IP of the current web request in all records\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass WebProcessor implements ProcessorInterface\n{\n    /**\n     * @var array<string, mixed>|\\ArrayAccess<string, mixed>\n     */\n    protected $serverData;\n\n    /**\n     * Default fields\n     *\n     * Array is structured as [key in record.extra => key in $serverData]\n     *\n     * @var array<string, string>\n     */\n    protected $extraFields = [\n        'url'         => 'REQUEST_URI',\n        'ip'          => 'REMOTE_ADDR',\n        'http_method' => 'REQUEST_METHOD',\n        'server'      => 'SERVER_NAME',\n        'referrer'    => 'HTTP_REFERER',\n        'user_agent'  => 'HTTP_USER_AGENT',\n    ];\n\n    /**\n     * @param array<string, mixed>|\\ArrayAccess<string, mixed>|null $serverData  Array or object w/ ArrayAccess that provides access to the $_SERVER data\n     * @param array<string, string>|array<string>|null              $extraFields Field names and the related key inside $serverData to be added (or just a list of field names to use the default configured $serverData mapping). If not provided it defaults to: [url, ip, http_method, server, referrer] + unique_id if present in server data\n     */\n    public function __construct($serverData = null, ?array $extraFields = null)\n    {\n        if (null === $serverData) {\n            $this->serverData = &$_SERVER;\n        } elseif (is_array($serverData) || $serverData instanceof \\ArrayAccess) {\n            $this->serverData = $serverData;\n        } else {\n            throw new \\UnexpectedValueException('$serverData must be an array or object implementing ArrayAccess.');\n        }\n\n        $defaultEnabled = ['url', 'ip', 'http_method', 'server', 'referrer'];\n        if (isset($this->serverData['UNIQUE_ID'])) {\n            $this->extraFields['unique_id'] = 'UNIQUE_ID';\n            $defaultEnabled[] = 'unique_id';\n        }\n\n        if (null === $extraFields) {\n            $extraFields = $defaultEnabled;\n        }\n        if (isset($extraFields[0])) {\n            foreach (array_keys($this->extraFields) as $fieldName) {\n                if (!in_array($fieldName, $extraFields)) {\n                    unset($this->extraFields[$fieldName]);\n                }\n            }\n        } else {\n            $this->extraFields = $extraFields;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        // skip processing if for some reason request data\n        // is not present (CLI or wonky SAPIs)\n        if (!isset($this->serverData['REQUEST_URI'])) {\n            return $record;\n        }\n\n        $record['extra'] = $this->appendExtraFields($record['extra']);\n\n        return $record;\n    }\n\n    public function addExtraField(string $extraName, string $serverName): self\n    {\n        $this->extraFields[$extraName] = $serverName;\n\n        return $this;\n    }\n\n    /**\n     * @param  mixed[] $extra\n     * @return mixed[]\n     */\n    private function appendExtraFields(array $extra): array\n    {\n        foreach ($this->extraFields as $extraName => $serverName) {\n            $extra[$extraName] = $this->serverData[$serverName] ?? null;\n        }\n\n        return $extra;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/MemoryProcessor.php","ext":"php","size":1827,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Some methods that are common for all memory processors\n *\n * @author Rob Jensen\n */\nabstract class MemoryProcessor implements ProcessorInterface\n{\n    /**\n     * @var bool If true, get the real size of memory allocated from system. Else, only the memory used by emalloc() is reported.\n     */\n    protected $realUsage;\n\n    /**\n     * @var bool If true, then format memory size to human readable string (MB, KB, B depending on size)\n     */\n    protected $useFormatting;\n\n    /**\n     * @param bool $realUsage     Set this to true to get the real size of memory allocated from system.\n     * @param bool $useFormatting If true, then format memory size to human readable string (MB, KB, B depending on size)\n     */\n    public function __construct(bool $realUsage = true, bool $useFormatting = true)\n    {\n        $this->realUsage = $realUsage;\n        $this->useFormatting = $useFormatting;\n    }\n\n    /**\n     * Formats bytes into a human readable string if $this->useFormatting is true, otherwise return $bytes as is\n     *\n     * @param  int        $bytes\n     * @return string|int Formatted string if $this->useFormatting is true, otherwise return $bytes as int\n     */\n    protected function formatBytes(int $bytes)\n    {\n        if (!$this->useFormatting) {\n            return $bytes;\n        }\n\n        if ($bytes > 1024 * 1024) {\n            return round($bytes / 1024 / 1024, 2).' MB';\n        } elseif ($bytes > 1024) {\n            return round($bytes / 1024, 2).' KB';\n        }\n\n        return $bytes . ' B';\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/MemoryUsageProcessor.php","ext":"php","size":817,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects memory_get_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n */\nclass MemoryUsageProcessor extends MemoryProcessor\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $usage = memory_get_usage($this->realUsage);\n\n        if ($this->useFormatting) {\n            $usage = $this->formatBytes($usage);\n        }\n\n        $record['extra']['memory_usage'] = $usage;\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/UidProcessor.php","ext":"php","size":1305,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\ResettableInterface;\n\n/**\n * Adds a unique identifier into records\n *\n * @author Simon Mönch <sm@webfactory.de>\n */\nclass UidProcessor implements ProcessorInterface, ResettableInterface\n{\n    /** @var string */\n    private $uid;\n\n    public function __construct(int $length = 7)\n    {\n        if ($length > 32 || $length < 1) {\n            throw new \\InvalidArgumentException('The uid length must be an integer between 1 and 32');\n        }\n\n        $this->uid = $this->generateUid($length);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $record['extra']['uid'] = $this->uid;\n\n        return $record;\n    }\n\n    public function getUid(): string\n    {\n        return $this->uid;\n    }\n\n    public function reset()\n    {\n        $this->uid = $this->generateUid(strlen($this->uid));\n    }\n\n    private function generateUid(int $length): string\n    {\n        return substr(bin2hex(random_bytes((int) ceil($length / 2))), 0, $length);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/ProcessorInterface.php","ext":"php","size":674,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * An optional interface to allow labelling Monolog processors.\n *\n * @author Nicolas Grekas <p@tchwork.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\ninterface ProcessorInterface\n{\n    /**\n     * @return array The processed record\n     *\n     * @phpstan-param  Record $record\n     * @phpstan-return Record\n     */\n    public function __invoke(array $record);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/MemoryPeakUsageProcessor.php","ext":"php","size":836,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects memory_get_peak_usage in all records\n *\n * @see Monolog\\Processor\\MemoryProcessor::__construct() for options\n * @author Rob Jensen\n */\nclass MemoryPeakUsageProcessor extends MemoryProcessor\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $usage = memory_get_peak_usage($this->realUsage);\n\n        if ($this->useFormatting) {\n            $usage = $this->formatBytes($usage);\n        }\n\n        $record['extra']['memory_peak_usage'] = $usage;\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/ProcessIdProcessor.php","ext":"php","size":607,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Adds value of getmypid into records\n *\n * @author Andreas Hörnicke\n */\nclass ProcessIdProcessor implements ProcessorInterface\n{\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $record['extra']['process_id'] = getmypid();\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/HostnameProcessor.php","ext":"php","size":724,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\n/**\n * Injects value of gethostname in all records\n */\nclass HostnameProcessor implements ProcessorInterface\n{\n    /** @var string */\n    private static $host;\n\n    public function __construct()\n    {\n        self::$host = (string) gethostname();\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        $record['extra']['hostname'] = self::$host;\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Processor/IntrospectionProcessor.php","ext":"php","size":3868,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Processor;\n\nuse Monolog\\Logger;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Injects line/file:class/function where the log message came from\n *\n * Warning: This only works if the handler processes the logs directly.\n * If you put the processor on a handler that is behind a FingersCrossedHandler\n * for example, the processor will only be called once the trigger level is reached,\n * and all the log records will have the same file/line/.. data from the call that\n * triggered the FingersCrossedHandler.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass IntrospectionProcessor implements ProcessorInterface\n{\n    /** @var int */\n    private $level;\n    /** @var string[] */\n    private $skipClassesPartials;\n    /** @var int */\n    private $skipStackFramesCount;\n    /** @var string[] */\n    private $skipFunctions = [\n        'call_user_func',\n        'call_user_func_array',\n    ];\n\n    /**\n     * @param string|int $level               The minimum logging level at which this Processor will be triggered\n     * @param string[]   $skipClassesPartials\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function __construct($level = Logger::DEBUG, array $skipClassesPartials = [], int $skipStackFramesCount = 0)\n    {\n        $this->level = Logger::toMonologLevel($level);\n        $this->skipClassesPartials = array_merge(['Monolog\\\\'], $skipClassesPartials);\n        $this->skipStackFramesCount = $skipStackFramesCount;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function __invoke(array $record): array\n    {\n        // return if the level is not high enough\n        if ($record['level'] < $this->level) {\n            return $record;\n        }\n\n        $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n\n        // skip first since it's always the current method\n        array_shift($trace);\n        // the call_user_func call is also skipped\n        array_shift($trace);\n\n        $i = 0;\n\n        while ($this->isTraceClassOrSkippedFunction($trace, $i)) {\n            if (isset($trace[$i]['class'])) {\n                foreach ($this->skipClassesPartials as $part) {\n                    if (strpos($trace[$i]['class'], $part) !== false) {\n                        $i++;\n\n                        continue 2;\n                    }\n                }\n            } elseif (in_array($trace[$i]['function'], $this->skipFunctions)) {\n                $i++;\n\n                continue;\n            }\n\n            break;\n        }\n\n        $i += $this->skipStackFramesCount;\n\n        // we should have the call source now\n        $record['extra'] = array_merge(\n            $record['extra'],\n            [\n                'file'      => isset($trace[$i - 1]['file']) ? $trace[$i - 1]['file'] : null,\n                'line'      => isset($trace[$i - 1]['line']) ? $trace[$i - 1]['line'] : null,\n                'class'     => isset($trace[$i]['class']) ? $trace[$i]['class'] : null,\n                'callType'  => isset($trace[$i]['type']) ? $trace[$i]['type'] : null,\n                'function'  => isset($trace[$i]['function']) ? $trace[$i]['function'] : null,\n            ]\n        );\n\n        return $record;\n    }\n\n    /**\n     * @param array[] $trace\n     */\n    private function isTraceClassOrSkippedFunction(array $trace, int $index): bool\n    {\n        if (!isset($trace[$index])) {\n            return false;\n        }\n\n        return isset($trace[$index]['class']) || in_array($trace[$index]['function'], $this->skipFunctions);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Utils.php","ext":"php","size":9531,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nfinal class Utils\n{\n    const DEFAULT_JSON_FLAGS = JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRESERVE_ZERO_FRACTION | JSON_INVALID_UTF8_SUBSTITUTE | JSON_PARTIAL_OUTPUT_ON_ERROR;\n\n    public static function getClass(object $object): string\n    {\n        $class = \\get_class($object);\n\n        if (false === ($pos = \\strpos($class, \"@anonymous\\0\"))) {\n            return $class;\n        }\n\n        if (false === ($parent = \\get_parent_class($class))) {\n            return \\substr($class, 0, $pos + 10);\n        }\n\n        return $parent . '@anonymous';\n    }\n\n    public static function substr(string $string, int $start, ?int $length = null): string\n    {\n        if (extension_loaded('mbstring')) {\n            return mb_strcut($string, $start, $length);\n        }\n\n        return substr($string, $start, (null === $length) ? strlen($string) : $length);\n    }\n\n    /**\n     * Makes sure if a relative path is passed in it is turned into an absolute path\n     *\n     * @param string $streamUrl stream URL or path without protocol\n     */\n    public static function canonicalizePath(string $streamUrl): string\n    {\n        $prefix = '';\n        if ('file://' === substr($streamUrl, 0, 7)) {\n            $streamUrl = substr($streamUrl, 7);\n            $prefix = 'file://';\n        }\n\n        // other type of stream, not supported\n        if (false !== strpos($streamUrl, '://')) {\n            return $streamUrl;\n        }\n\n        // already absolute\n        if (substr($streamUrl, 0, 1) === '/' || substr($streamUrl, 1, 1) === ':' || substr($streamUrl, 0, 2) === '\\\\\\\\') {\n            return $prefix.$streamUrl;\n        }\n\n        $streamUrl = getcwd() . '/' . $streamUrl;\n\n        return $prefix.$streamUrl;\n    }\n\n    /**\n     * Return the JSON representation of a value\n     *\n     * @param  mixed             $data\n     * @param  int               $encodeFlags  flags to pass to json encode, defaults to DEFAULT_JSON_FLAGS\n     * @param  bool              $ignoreErrors whether to ignore encoding errors or to throw on error, when ignored and the encoding fails, \"null\" is returned which is valid json for null\n     * @throws \\RuntimeException if encoding fails and errors are not ignored\n     * @return string            when errors are ignored and the encoding fails, \"null\" is returned which is valid json for null\n     */\n    public static function jsonEncode($data, ?int $encodeFlags = null, bool $ignoreErrors = false): string\n    {\n        if (null === $encodeFlags) {\n            $encodeFlags = self::DEFAULT_JSON_FLAGS;\n        }\n\n        if ($ignoreErrors) {\n            $json = @json_encode($data, $encodeFlags);\n            if (false === $json) {\n                return 'null';\n            }\n\n            return $json;\n        }\n\n        $json = json_encode($data, $encodeFlags);\n        if (false === $json) {\n            $json = self::handleJsonError(json_last_error(), $data);\n        }\n\n        return $json;\n    }\n\n    /**\n     * Handle a json_encode failure.\n     *\n     * If the failure is due to invalid string encoding, try to clean the\n     * input and encode again. If the second encoding attempt fails, the\n     * initial error is not encoding related or the input can't be cleaned then\n     * raise a descriptive exception.\n     *\n     * @param  int               $code        return code of json_last_error function\n     * @param  mixed             $data        data that was meant to be encoded\n     * @param  int               $encodeFlags flags to pass to json encode, defaults to JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE | JSON_PRESERVE_ZERO_FRACTION\n     * @throws \\RuntimeException if failure can't be corrected\n     * @return string            JSON encoded data after error correction\n     */\n    public static function handleJsonError(int $code, $data, ?int $encodeFlags = null): string\n    {\n        if ($code !== JSON_ERROR_UTF8) {\n            self::throwEncodeError($code, $data);\n        }\n\n        if (is_string($data)) {\n            self::detectAndCleanUtf8($data);\n        } elseif (is_array($data)) {\n            array_walk_recursive($data, array('Monolog\\Utils', 'detectAndCleanUtf8'));\n        } else {\n            self::throwEncodeError($code, $data);\n        }\n\n        if (null === $encodeFlags) {\n            $encodeFlags = self::DEFAULT_JSON_FLAGS;\n        }\n\n        $json = json_encode($data, $encodeFlags);\n\n        if ($json === false) {\n            self::throwEncodeError(json_last_error(), $data);\n        }\n\n        return $json;\n    }\n\n    /**\n     * @internal\n     */\n    public static function pcreLastErrorMessage(int $code): string\n    {\n        if (PHP_VERSION_ID >= 80000) {\n            return preg_last_error_msg();\n        }\n\n        $constants = (get_defined_constants(true))['pcre'];\n        $constants = array_filter($constants, function ($key) {\n            return substr($key, -6) == '_ERROR';\n        }, ARRAY_FILTER_USE_KEY);\n\n        $constants = array_flip($constants);\n\n        return $constants[$code] ?? 'UNDEFINED_ERROR';\n    }\n\n    /**\n     * Throws an exception according to a given code with a customized message\n     *\n     * @param  int               $code return code of json_last_error function\n     * @param  mixed             $data data that was meant to be encoded\n     * @throws \\RuntimeException\n     *\n     * @return never\n     */\n    private static function throwEncodeError(int $code, $data): void\n    {\n        switch ($code) {\n            case JSON_ERROR_DEPTH:\n                $msg = 'Maximum stack depth exceeded';\n                break;\n            case JSON_ERROR_STATE_MISMATCH:\n                $msg = 'Underflow or the modes mismatch';\n                break;\n            case JSON_ERROR_CTRL_CHAR:\n                $msg = 'Unexpected control character found';\n                break;\n            case JSON_ERROR_UTF8:\n                $msg = 'Malformed UTF-8 characters, possibly incorrectly encoded';\n                break;\n            default:\n                $msg = 'Unknown error';\n        }\n\n        throw new \\RuntimeException('JSON encoding failed: '.$msg.'. Encoding: '.var_export($data, true));\n    }\n\n    /**\n     * Detect invalid UTF-8 string characters and convert to valid UTF-8.\n     *\n     * Valid UTF-8 input will be left unmodified, but strings containing\n     * invalid UTF-8 codepoints will be reencoded as UTF-8 with an assumed\n     * original encoding of ISO-8859-15. This conversion may result in\n     * incorrect output if the actual encoding was not ISO-8859-15, but it\n     * will be clean UTF-8 output and will not rely on expensive and fragile\n     * detection algorithms.\n     *\n     * Function converts the input in place in the passed variable so that it\n     * can be used as a callback for array_walk_recursive.\n     *\n     * @param mixed $data Input to check and convert if needed, passed by ref\n     */\n    private static function detectAndCleanUtf8(&$data): void\n    {\n        if (is_string($data) && !preg_match('//u', $data)) {\n            $data = preg_replace_callback(\n                '/[\\x80-\\xFF]+/',\n                function ($m) {\n                    return function_exists('mb_convert_encoding') ? mb_convert_encoding($m[0], 'UTF-8', 'ISO-8859-1') : utf8_encode($m[0]);\n                },\n                $data\n            );\n            if (!is_string($data)) {\n                $pcreErrorCode = preg_last_error();\n                throw new \\RuntimeException('Failed to preg_replace_callback: ' . $pcreErrorCode . ' / ' . self::pcreLastErrorMessage($pcreErrorCode));\n            }\n            $data = str_replace(\n                ['¤', '¦', '¨', '´', '¸', '¼', '½', '¾'],\n                ['€', 'Š', 'š', 'Ž', 'ž', 'Œ', 'œ', 'Ÿ'],\n                $data\n            );\n        }\n    }\n\n    /**\n     * Converts a string with a valid 'memory_limit' format, to bytes.\n     *\n     * @param string|false $val\n     * @return int|false Returns an integer representing bytes. Returns FALSE in case of error.\n     */\n    public static function expandIniShorthandBytes($val)\n    {\n        if (!is_string($val)) {\n            return false;\n        }\n\n        // support -1\n        if ((int) $val < 0) {\n            return (int) $val;\n        }\n\n        if (!preg_match('/^\\s*(?<val>\\d+)(?:\\.\\d+)?\\s*(?<unit>[gmk]?)\\s*$/i', $val, $match)) {\n            return false;\n        }\n\n        $val = (int) $match['val'];\n        switch (strtolower($match['unit'])) {\n            case 'g':\n                $val *= 1024;\n            case 'm':\n                $val *= 1024;\n            case 'k':\n                $val *= 1024;\n        }\n\n        return $val;\n    }\n\n    /**\n     * @param array<mixed> $record\n     */\n    public static function getRecordMessageForException(array $record): string\n    {\n        $context = '';\n        $extra = '';\n        try {\n            if ($record['context']) {\n                $context = \"\\nContext: \" . json_encode($record['context']);\n            }\n            if ($record['extra']) {\n                $extra = \"\\nExtra: \" . json_encode($record['extra']);\n            }\n        } catch (\\Throwable $e) {\n            // noop\n        }\n\n        return \"\\nThe exception occurred while attempting to log: \" . $record['message'] . $context . $extra;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Attribute/AsMonologProcessor.php","ext":"php","size":1529,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Attribute;\n\n/**\n * A reusable attribute to help configure a class or a method as a processor.\n * \n * Using it offers no guarantee: it needs to be leveraged by a Monolog third-party consumer.\n * \n * Using it with the Monolog library only has no effect at all: processors should still be turned into a callable if\n * needed and manually pushed to the loggers and to the processable handlers.\n */\n#[\\Attribute(\\Attribute::TARGET_CLASS | \\Attribute::TARGET_METHOD | \\Attribute::IS_REPEATABLE)]\nclass AsMonologProcessor\n{\n    /** @var string|null */\n    public $channel = null;\n    /** @var string|null */\n    public $handler = null;\n    /** @var string|null */\n    public $method = null;\n    \n    /**\n     * @param string|null $channel  The logging channel the processor should be pushed to.\n     * @param string|null $handler  The handler the processor should be pushed to.\n     * @param string|null $method   The method that processes the records (if the attribute is used at the class level).\n     */\n    public function __construct(\n        ?string $channel = null,\n        ?string $handler = null,\n        ?string $method = null\n    ) {\n        $this->channel = $channel;\n        $this->handler = $handler;\n        $this->method = $method;\n    }\n} \n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/SignalHandler.php","ext":"php","size":4110,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse Psr\\Log\\LoggerInterface;\nuse Psr\\Log\\LogLevel;\nuse ReflectionExtension;\n\n/**\n * Monolog POSIX signal handler\n *\n * @author Robert Gust-Bardon <robert@gust-bardon.org>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n * @phpstan-import-type LevelName from \\Monolog\\Logger\n */\nclass SignalHandler\n{\n    /** @var LoggerInterface */\n    private $logger;\n\n    /** @var array<int, callable|string|int> SIG_DFL, SIG_IGN or previous callable */\n    private $previousSignalHandler = [];\n    /** @var array<int, int> */\n    private $signalLevelMap = [];\n    /** @var array<int, bool> */\n    private $signalRestartSyscalls = [];\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * @param  int|string $level           Level or level name\n     * @param  bool       $callPrevious\n     * @param  bool       $restartSyscalls\n     * @param  bool|null  $async\n     * @return $this\n     *\n     * @phpstan-param Level|LevelName|LogLevel::* $level\n     */\n    public function registerSignalHandler(int $signo, $level = LogLevel::CRITICAL, bool $callPrevious = true, bool $restartSyscalls = true, ?bool $async = true): self\n    {\n        if (!extension_loaded('pcntl') || !function_exists('pcntl_signal')) {\n            return $this;\n        }\n\n        $level = Logger::toMonologLevel($level);\n\n        if ($callPrevious) {\n            $handler = pcntl_signal_get_handler($signo);\n            $this->previousSignalHandler[$signo] = $handler;\n        } else {\n            unset($this->previousSignalHandler[$signo]);\n        }\n        $this->signalLevelMap[$signo] = $level;\n        $this->signalRestartSyscalls[$signo] = $restartSyscalls;\n\n        if ($async !== null) {\n            pcntl_async_signals($async);\n        }\n\n        pcntl_signal($signo, [$this, 'handleSignal'], $restartSyscalls);\n\n        return $this;\n    }\n\n    /**\n     * @param mixed $siginfo\n     */\n    public function handleSignal(int $signo, $siginfo = null): void\n    {\n        /** @var array<int, string> $signals */\n        static $signals = [];\n\n        if (!$signals && extension_loaded('pcntl')) {\n            $pcntl = new ReflectionExtension('pcntl');\n            // HHVM 3.24.2 returns an empty array.\n            foreach ($pcntl->getConstants() ?: get_defined_constants(true)['Core'] as $name => $value) {\n                if (substr($name, 0, 3) === 'SIG' && $name[3] !== '_' && is_int($value)) {\n                    $signals[$value] = $name;\n                }\n            }\n        }\n\n        $level = $this->signalLevelMap[$signo] ?? LogLevel::CRITICAL;\n        $signal = $signals[$signo] ?? $signo;\n        $context = $siginfo ?? [];\n        $this->logger->log($level, sprintf('Program received signal %s', $signal), $context);\n\n        if (!isset($this->previousSignalHandler[$signo])) {\n            return;\n        }\n\n        if ($this->previousSignalHandler[$signo] === SIG_DFL) {\n            if (extension_loaded('pcntl') && function_exists('pcntl_signal') && function_exists('pcntl_sigprocmask') && function_exists('pcntl_signal_dispatch')\n                && extension_loaded('posix') && function_exists('posix_getpid') && function_exists('posix_kill')\n            ) {\n                $restartSyscalls = $this->signalRestartSyscalls[$signo] ?? true;\n                pcntl_signal($signo, SIG_DFL, $restartSyscalls);\n                pcntl_sigprocmask(SIG_UNBLOCK, [$signo], $oldset);\n                posix_kill(posix_getpid(), $signo);\n                pcntl_signal_dispatch();\n                pcntl_sigprocmask(SIG_SETMASK, $oldset);\n                pcntl_signal($signo, [$this, 'handleSignal'], $restartSyscalls);\n            }\n        } elseif (is_callable($this->previousSignalHandler[$signo])) {\n            $this->previousSignalHandler[$signo]($signo, $siginfo);\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/ErrorHandler.php","ext":"php","size":10871,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse Psr\\Log\\LoggerInterface;\nuse Psr\\Log\\LogLevel;\n\n/**\n * Monolog error handler\n *\n * A facility to enable logging of runtime errors, exceptions and fatal errors.\n *\n * Quick setup: <code>ErrorHandler::register($logger);</code>\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass ErrorHandler\n{\n    /** @var LoggerInterface */\n    private $logger;\n\n    /** @var ?callable */\n    private $previousExceptionHandler = null;\n    /** @var array<class-string, LogLevel::*> an array of class name to LogLevel::* constant mapping */\n    private $uncaughtExceptionLevelMap = [];\n\n    /** @var callable|true|null */\n    private $previousErrorHandler = null;\n    /** @var array<int, LogLevel::*> an array of E_* constant to LogLevel::* constant mapping */\n    private $errorLevelMap = [];\n    /** @var bool */\n    private $handleOnlyReportedErrors = true;\n\n    /** @var bool */\n    private $hasFatalErrorHandler = false;\n    /** @var LogLevel::* */\n    private $fatalLevel = LogLevel::ALERT;\n    /** @var ?string */\n    private $reservedMemory = null;\n    /** @var ?array{type: int, message: string, file: string, line: int, trace: mixed} */\n    private $lastFatalData = null;\n    /** @var int[] */\n    private static $fatalErrors = [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR, E_USER_ERROR];\n\n    public function __construct(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n\n    /**\n     * Registers a new ErrorHandler for a given Logger\n     *\n     * By default it will handle errors, exceptions and fatal errors\n     *\n     * @param  LoggerInterface                        $logger\n     * @param  array<int, LogLevel::*>|false          $errorLevelMap     an array of E_* constant to LogLevel::* constant mapping, or false to disable error handling\n     * @param  array<class-string, LogLevel::*>|false $exceptionLevelMap an array of class name to LogLevel::* constant mapping, or false to disable exception handling\n     * @param  LogLevel::*|null|false                 $fatalLevel        a LogLevel::* constant, null to use the default LogLevel::ALERT or false to disable fatal error handling\n     * @return ErrorHandler\n     */\n    public static function register(LoggerInterface $logger, $errorLevelMap = [], $exceptionLevelMap = [], $fatalLevel = null): self\n    {\n        /** @phpstan-ignore-next-line */\n        $handler = new static($logger);\n        if ($errorLevelMap !== false) {\n            $handler->registerErrorHandler($errorLevelMap);\n        }\n        if ($exceptionLevelMap !== false) {\n            $handler->registerExceptionHandler($exceptionLevelMap);\n        }\n        if ($fatalLevel !== false) {\n            $handler->registerFatalHandler($fatalLevel);\n        }\n\n        return $handler;\n    }\n\n    /**\n     * @param  array<class-string, LogLevel::*> $levelMap an array of class name to LogLevel::* constant mapping\n     * @return $this\n     */\n    public function registerExceptionHandler(array $levelMap = [], bool $callPrevious = true): self\n    {\n        $prev = set_exception_handler(function (\\Throwable $e): void {\n            $this->handleException($e);\n        });\n        $this->uncaughtExceptionLevelMap = $levelMap;\n        foreach ($this->defaultExceptionLevelMap() as $class => $level) {\n            if (!isset($this->uncaughtExceptionLevelMap[$class])) {\n                $this->uncaughtExceptionLevelMap[$class] = $level;\n            }\n        }\n        if ($callPrevious && $prev) {\n            $this->previousExceptionHandler = $prev;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param  array<int, LogLevel::*> $levelMap an array of E_* constant to LogLevel::* constant mapping\n     * @return $this\n     */\n    public function registerErrorHandler(array $levelMap = [], bool $callPrevious = true, int $errorTypes = -1, bool $handleOnlyReportedErrors = true): self\n    {\n        $prev = set_error_handler([$this, 'handleError'], $errorTypes);\n        $this->errorLevelMap = array_replace($this->defaultErrorLevelMap(), $levelMap);\n        if ($callPrevious) {\n            $this->previousErrorHandler = $prev ?: true;\n        } else {\n            $this->previousErrorHandler = null;\n        }\n\n        $this->handleOnlyReportedErrors = $handleOnlyReportedErrors;\n\n        return $this;\n    }\n\n    /**\n     * @param LogLevel::*|null $level              a LogLevel::* constant, null to use the default LogLevel::ALERT\n     * @param int              $reservedMemorySize Amount of KBs to reserve in memory so that it can be freed when handling fatal errors giving Monolog some room in memory to get its job done\n     */\n    public function registerFatalHandler($level = null, int $reservedMemorySize = 20): self\n    {\n        register_shutdown_function([$this, 'handleFatalError']);\n\n        $this->reservedMemory = str_repeat(' ', 1024 * $reservedMemorySize);\n        $this->fatalLevel = null === $level ? LogLevel::ALERT : $level;\n        $this->hasFatalErrorHandler = true;\n\n        return $this;\n    }\n\n    /**\n     * @return array<class-string, LogLevel::*>\n     */\n    protected function defaultExceptionLevelMap(): array\n    {\n        return [\n            'ParseError' => LogLevel::CRITICAL,\n            'Throwable' => LogLevel::ERROR,\n        ];\n    }\n\n    /**\n     * @return array<int, LogLevel::*>\n     */\n    protected function defaultErrorLevelMap(): array\n    {\n        return [\n            E_ERROR             => LogLevel::CRITICAL,\n            E_WARNING           => LogLevel::WARNING,\n            E_PARSE             => LogLevel::ALERT,\n            E_NOTICE            => LogLevel::NOTICE,\n            E_CORE_ERROR        => LogLevel::CRITICAL,\n            E_CORE_WARNING      => LogLevel::WARNING,\n            E_COMPILE_ERROR     => LogLevel::ALERT,\n            E_COMPILE_WARNING   => LogLevel::WARNING,\n            E_USER_ERROR        => LogLevel::ERROR,\n            E_USER_WARNING      => LogLevel::WARNING,\n            E_USER_NOTICE       => LogLevel::NOTICE,\n            E_STRICT            => LogLevel::NOTICE,\n            E_RECOVERABLE_ERROR => LogLevel::ERROR,\n            E_DEPRECATED        => LogLevel::NOTICE,\n            E_USER_DEPRECATED   => LogLevel::NOTICE,\n        ];\n    }\n\n    /**\n     * @phpstan-return never\n     */\n    private function handleException(\\Throwable $e): void\n    {\n        $level = LogLevel::ERROR;\n        foreach ($this->uncaughtExceptionLevelMap as $class => $candidate) {\n            if ($e instanceof $class) {\n                $level = $candidate;\n                break;\n            }\n        }\n\n        $this->logger->log(\n            $level,\n            sprintf('Uncaught Exception %s: \"%s\" at %s line %s', Utils::getClass($e), $e->getMessage(), $e->getFile(), $e->getLine()),\n            ['exception' => $e]\n        );\n\n        if ($this->previousExceptionHandler) {\n            ($this->previousExceptionHandler)($e);\n        }\n\n        if (!headers_sent() && in_array(strtolower((string) ini_get('display_errors')), ['0', '', 'false', 'off', 'none', 'no'], true)) {\n            http_response_code(500);\n        }\n\n        exit(255);\n    }\n\n    /**\n     * @private\n     *\n     * @param mixed[] $context\n     */\n    public function handleError(int $code, string $message, string $file = '', int $line = 0, ?array $context = []): bool\n    {\n        if ($this->handleOnlyReportedErrors && !(error_reporting() & $code)) {\n            return false;\n        }\n\n        // fatal error codes are ignored if a fatal error handler is present as well to avoid duplicate log entries\n        if (!$this->hasFatalErrorHandler || !in_array($code, self::$fatalErrors, true)) {\n            $level = $this->errorLevelMap[$code] ?? LogLevel::CRITICAL;\n            $this->logger->log($level, self::codeToString($code).': '.$message, ['code' => $code, 'message' => $message, 'file' => $file, 'line' => $line]);\n        } else {\n            $trace = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS);\n            array_shift($trace); // Exclude handleError from trace\n            $this->lastFatalData = ['type' => $code, 'message' => $message, 'file' => $file, 'line' => $line, 'trace' => $trace];\n        }\n\n        if ($this->previousErrorHandler === true) {\n            return false;\n        } elseif ($this->previousErrorHandler) {\n            return (bool) ($this->previousErrorHandler)($code, $message, $file, $line, $context);\n        }\n\n        return true;\n    }\n\n    /**\n     * @private\n     */\n    public function handleFatalError(): void\n    {\n        $this->reservedMemory = '';\n\n        if (is_array($this->lastFatalData)) {\n            $lastError = $this->lastFatalData;\n        } else {\n            $lastError = error_get_last();\n        }\n\n        if ($lastError && in_array($lastError['type'], self::$fatalErrors, true)) {\n            $trace = $lastError['trace'] ?? null;\n            $this->logger->log(\n                $this->fatalLevel,\n                'Fatal Error ('.self::codeToString($lastError['type']).'): '.$lastError['message'],\n                ['code' => $lastError['type'], 'message' => $lastError['message'], 'file' => $lastError['file'], 'line' => $lastError['line'], 'trace' => $trace]\n            );\n\n            if ($this->logger instanceof Logger) {\n                foreach ($this->logger->getHandlers() as $handler) {\n                    $handler->close();\n                }\n            }\n        }\n    }\n\n    /**\n     * @param int $code\n     */\n    private static function codeToString($code): string\n    {\n        switch ($code) {\n            case E_ERROR:\n                return 'E_ERROR';\n            case E_WARNING:\n                return 'E_WARNING';\n            case E_PARSE:\n                return 'E_PARSE';\n            case E_NOTICE:\n                return 'E_NOTICE';\n            case E_CORE_ERROR:\n                return 'E_CORE_ERROR';\n            case E_CORE_WARNING:\n                return 'E_CORE_WARNING';\n            case E_COMPILE_ERROR:\n                return 'E_COMPILE_ERROR';\n            case E_COMPILE_WARNING:\n                return 'E_COMPILE_WARNING';\n            case E_USER_ERROR:\n                return 'E_USER_ERROR';\n            case E_USER_WARNING:\n                return 'E_USER_WARNING';\n            case E_USER_NOTICE:\n                return 'E_USER_NOTICE';\n            case E_STRICT:\n                return 'E_STRICT';\n            case E_RECOVERABLE_ERROR:\n                return 'E_RECOVERABLE_ERROR';\n            case E_DEPRECATED:\n                return 'E_DEPRECATED';\n            case E_USER_DEPRECATED:\n                return 'E_USER_DEPRECATED';\n        }\n\n        return 'Unknown PHP error';\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/GoogleCloudLoggingFormatter.php","ext":"php","size":1130,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse DateTimeInterface;\nuse Monolog\\LogRecord;\n\n/**\n * Encodes message information into JSON in a format compatible with Cloud logging.\n *\n * @see https://cloud.google.com/logging/docs/structured-logging\n * @see https://cloud.google.com/logging/docs/reference/v2/rest/v2/LogEntry\n *\n * @author Luís Cobucci <lcobucci@gmail.com>\n */\nfinal class GoogleCloudLoggingFormatter extends JsonFormatter\n{\n    /** {@inheritdoc} **/\n    public function format(array $record): string\n    {\n        // Re-key level for GCP logging\n        $record['severity'] = $record['level_name'];\n        $record['time'] = $record['datetime']->format(DateTimeInterface::RFC3339_EXTENDED);\n\n        // Remove keys that are not used by GCP\n        unset($record['level'], $record['level_name'], $record['datetime']);\n\n        return parent::format($record);\n    }\n}\n\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/HtmlFormatter.php","ext":"php","size":4513,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Logger;\nuse Monolog\\Utils;\n\n/**\n * Formats incoming records into an HTML table\n *\n * This is especially useful for html email logging\n *\n * @author Tiago Brito <tlfbrito@gmail.com>\n */\nclass HtmlFormatter extends NormalizerFormatter\n{\n    /**\n     * Translates Monolog log levels to html color priorities.\n     *\n     * @var array<int, string>\n     */\n    protected $logLevels = [\n        Logger::DEBUG     => '#CCCCCC',\n        Logger::INFO      => '#28A745',\n        Logger::NOTICE    => '#17A2B8',\n        Logger::WARNING   => '#FFC107',\n        Logger::ERROR     => '#FD7E14',\n        Logger::CRITICAL  => '#DC3545',\n        Logger::ALERT     => '#821722',\n        Logger::EMERGENCY => '#000000',\n    ];\n\n    /**\n     * @param string|null $dateFormat The format of the timestamp: one supported by DateTime::format\n     */\n    public function __construct(?string $dateFormat = null)\n    {\n        parent::__construct($dateFormat);\n    }\n\n    /**\n     * Creates an HTML table row\n     *\n     * @param string $th       Row header content\n     * @param string $td       Row standard cell content\n     * @param bool   $escapeTd false if td content must not be html escaped\n     */\n    protected function addRow(string $th, string $td = ' ', bool $escapeTd = true): string\n    {\n        $th = htmlspecialchars($th, ENT_NOQUOTES, 'UTF-8');\n        if ($escapeTd) {\n            $td = '<pre>'.htmlspecialchars($td, ENT_NOQUOTES, 'UTF-8').'</pre>';\n        }\n\n        return \"<tr style=\\\"padding: 4px;text-align: left;\\\">\\n<th style=\\\"vertical-align: top;background: #ccc;color: #000\\\" width=\\\"100\\\">$th:</th>\\n<td style=\\\"padding: 4px;text-align: left;vertical-align: top;background: #eee;color: #000\\\">\".$td.\"</td>\\n</tr>\";\n    }\n\n    /**\n     * Create a HTML h1 tag\n     *\n     * @param  string $title Text to be in the h1\n     * @param  int    $level Error level\n     * @return string\n     */\n    protected function addTitle(string $title, int $level): string\n    {\n        $title = htmlspecialchars($title, ENT_NOQUOTES, 'UTF-8');\n\n        return '<h1 style=\"background: '.$this->logLevels[$level].';color: #ffffff;padding: 5px;\" class=\"monolog-output\">'.$title.'</h1>';\n    }\n\n    /**\n     * Formats a log record.\n     *\n     * @return string The formatted record\n     */\n    public function format(array $record): string\n    {\n        $output = $this->addTitle($record['level_name'], $record['level']);\n        $output .= '<table cellspacing=\"1\" width=\"100%\" class=\"monolog-output\">';\n\n        $output .= $this->addRow('Message', (string) $record['message']);\n        $output .= $this->addRow('Time', $this->formatDate($record['datetime']));\n        $output .= $this->addRow('Channel', $record['channel']);\n        if ($record['context']) {\n            $embeddedTable = '<table cellspacing=\"1\" width=\"100%\">';\n            foreach ($record['context'] as $key => $value) {\n                $embeddedTable .= $this->addRow((string) $key, $this->convertToString($value));\n            }\n            $embeddedTable .= '</table>';\n            $output .= $this->addRow('Context', $embeddedTable, false);\n        }\n        if ($record['extra']) {\n            $embeddedTable = '<table cellspacing=\"1\" width=\"100%\">';\n            foreach ($record['extra'] as $key => $value) {\n                $embeddedTable .= $this->addRow((string) $key, $this->convertToString($value));\n            }\n            $embeddedTable .= '</table>';\n            $output .= $this->addRow('Extra', $embeddedTable, false);\n        }\n\n        return $output.'</table>';\n    }\n\n    /**\n     * Formats a set of log records.\n     *\n     * @return string The formatted set of records\n     */\n    public function formatBatch(array $records): string\n    {\n        $message = '';\n        foreach ($records as $record) {\n            $message .= $this->format($record);\n        }\n\n        return $message;\n    }\n\n    /**\n     * @param mixed $data\n     */\n    protected function convertToString($data): string\n    {\n        if (null === $data || is_scalar($data)) {\n            return (string) $data;\n        }\n\n        $data = $this->normalize($data);\n\n        return Utils::jsonEncode($data, JSON_PRETTY_PRINT | Utils::DEFAULT_JSON_FLAGS, true);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/LogmaticFormatter.php","ext":"php","size":1484,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Encodes message information into JSON in a format compatible with Logmatic.\n *\n * @author Julien Breux <julien.breux@gmail.com>\n */\nclass LogmaticFormatter extends JsonFormatter\n{\n    protected const MARKERS = [\"sourcecode\", \"php\"];\n\n    /**\n     * @var string\n     */\n    protected $hostname = '';\n\n    /**\n     * @var string\n     */\n    protected $appname = '';\n\n    public function setHostname(string $hostname): self\n    {\n        $this->hostname = $hostname;\n\n        return $this;\n    }\n\n    public function setAppname(string $appname): self\n    {\n        $this->appname = $appname;\n\n        return $this;\n    }\n\n    /**\n     * Appends the 'hostname' and 'appname' parameter for indexing by Logmatic.\n     *\n     * @see http://doc.logmatic.io/docs/basics-to-send-data\n     * @see \\Monolog\\Formatter\\JsonFormatter::format()\n     */\n    public function format(array $record): string\n    {\n        if (!empty($this->hostname)) {\n            $record[\"hostname\"] = $this->hostname;\n        }\n        if (!empty($this->appname)) {\n            $record[\"appname\"] = $this->appname;\n        }\n\n        $record[\"@marker\"] = static::MARKERS;\n\n        return parent::format($record);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/ScalarFormatter.php","ext":"php","size":1160,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Formats data into an associative array of scalar values.\n * Objects and arrays will be JSON encoded.\n *\n * @author Andrew Lawson <adlawson@gmail.com>\n */\nclass ScalarFormatter extends NormalizerFormatter\n{\n    /**\n     * {@inheritDoc}\n     *\n     * @phpstan-return array<string, scalar|null> $record\n     */\n    public function format(array $record): array\n    {\n        $result = [];\n        foreach ($record as $key => $value) {\n            $result[$key] = $this->normalizeValue($value);\n        }\n\n        return $result;\n    }\n\n    /**\n     * @param  mixed                      $value\n     * @return scalar|null\n     */\n    protected function normalizeValue($value)\n    {\n        $normalized = $this->normalize($value);\n\n        if (is_array($normalized)) {\n            return $this->toJson($normalized, true);\n        }\n\n        return $normalized;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/MongoDBFormatter.php","ext":"php","size":4972,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse MongoDB\\BSON\\Type;\nuse MongoDB\\BSON\\UTCDateTime;\nuse Monolog\\Utils;\n\n/**\n * Formats a record for use with the MongoDBHandler.\n *\n * @author Florian Plattner <me@florianplattner.de>\n */\nclass MongoDBFormatter implements FormatterInterface\n{\n    /** @var bool */\n    private $exceptionTraceAsString;\n    /** @var int */\n    private $maxNestingLevel;\n    /** @var bool */\n    private $isLegacyMongoExt;\n\n    /**\n     * @param int  $maxNestingLevel        0 means infinite nesting, the $record itself is level 1, $record['context'] is 2\n     * @param bool $exceptionTraceAsString set to false to log exception traces as a sub documents instead of strings\n     */\n    public function __construct(int $maxNestingLevel = 3, bool $exceptionTraceAsString = true)\n    {\n        $this->maxNestingLevel = max($maxNestingLevel, 0);\n        $this->exceptionTraceAsString = $exceptionTraceAsString;\n\n        $this->isLegacyMongoExt = extension_loaded('mongodb') && version_compare((string) phpversion('mongodb'), '1.1.9', '<=');\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return mixed[]\n     */\n    public function format(array $record): array\n    {\n        /** @var mixed[] $res */\n        $res = $this->formatArray($record);\n\n        return $res;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return array<mixed[]>\n     */\n    public function formatBatch(array $records): array\n    {\n        $formatted = [];\n        foreach ($records as $key => $record) {\n            $formatted[$key] = $this->format($record);\n        }\n\n        return $formatted;\n    }\n\n    /**\n     * @param  mixed[]        $array\n     * @return mixed[]|string Array except when max nesting level is reached then a string \"[...]\"\n     */\n    protected function formatArray(array $array, int $nestingLevel = 0)\n    {\n        if ($this->maxNestingLevel > 0 && $nestingLevel > $this->maxNestingLevel) {\n            return '[...]';\n        }\n\n        foreach ($array as $name => $value) {\n            if ($value instanceof \\DateTimeInterface) {\n                $array[$name] = $this->formatDate($value, $nestingLevel + 1);\n            } elseif ($value instanceof \\Throwable) {\n                $array[$name] = $this->formatException($value, $nestingLevel + 1);\n            } elseif (is_array($value)) {\n                $array[$name] = $this->formatArray($value, $nestingLevel + 1);\n            } elseif (is_object($value) && !$value instanceof Type) {\n                $array[$name] = $this->formatObject($value, $nestingLevel + 1);\n            }\n        }\n\n        return $array;\n    }\n\n    /**\n     * @param  mixed          $value\n     * @return mixed[]|string\n     */\n    protected function formatObject($value, int $nestingLevel)\n    {\n        $objectVars = get_object_vars($value);\n        $objectVars['class'] = Utils::getClass($value);\n\n        return $this->formatArray($objectVars, $nestingLevel);\n    }\n\n    /**\n     * @return mixed[]|string\n     */\n    protected function formatException(\\Throwable $exception, int $nestingLevel)\n    {\n        $formattedException = [\n            'class' => Utils::getClass($exception),\n            'message' => $exception->getMessage(),\n            'code' => (int) $exception->getCode(),\n            'file' => $exception->getFile() . ':' . $exception->getLine(),\n        ];\n\n        if ($this->exceptionTraceAsString === true) {\n            $formattedException['trace'] = $exception->getTraceAsString();\n        } else {\n            $formattedException['trace'] = $exception->getTrace();\n        }\n\n        return $this->formatArray($formattedException, $nestingLevel);\n    }\n\n    protected function formatDate(\\DateTimeInterface $value, int $nestingLevel): UTCDateTime\n    {\n        if ($this->isLegacyMongoExt) {\n            return $this->legacyGetMongoDbDateTime($value);\n        }\n\n        return $this->getMongoDbDateTime($value);\n    }\n\n    private function getMongoDbDateTime(\\DateTimeInterface $value): UTCDateTime\n    {\n        return new UTCDateTime((int) floor(((float) $value->format('U.u')) * 1000));\n    }\n\n    /**\n     * This is needed to support MongoDB Driver v1.19 and below\n     *\n     * See https://github.com/mongodb/mongo-php-driver/issues/426\n     *\n     * It can probably be removed in 2.1 or later once MongoDB's 1.2 is released and widely adopted\n     */\n    private function legacyGetMongoDbDateTime(\\DateTimeInterface $value): UTCDateTime\n    {\n        $milliseconds = floor(((float) $value->format('U.u')) * 1000);\n\n        $milliseconds = (PHP_INT_SIZE == 8) //64-bit OS?\n            ? (int) $milliseconds\n            : (string) $milliseconds;\n\n        // @phpstan-ignore-next-line\n        return new UTCDateTime($milliseconds);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/ChromePHPFormatter.php","ext":"php","size":2144,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Logger;\n\n/**\n * Formats a log message according to the ChromePHP array format\n *\n * @author Christophe Coevoet <stof@notk.org>\n */\nclass ChromePHPFormatter implements FormatterInterface\n{\n    /**\n     * Translates Monolog log levels to Wildfire levels.\n     *\n     * @var array<int, 'log'|'info'|'warn'|'error'>\n     */\n    private $logLevels = [\n        Logger::DEBUG     => 'log',\n        Logger::INFO      => 'info',\n        Logger::NOTICE    => 'info',\n        Logger::WARNING   => 'warn',\n        Logger::ERROR     => 'error',\n        Logger::CRITICAL  => 'error',\n        Logger::ALERT     => 'error',\n        Logger::EMERGENCY => 'error',\n    ];\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record)\n    {\n        // Retrieve the line and file if set and remove them from the formatted extra\n        $backtrace = 'unknown';\n        if (isset($record['extra']['file'], $record['extra']['line'])) {\n            $backtrace = $record['extra']['file'].' : '.$record['extra']['line'];\n            unset($record['extra']['file'], $record['extra']['line']);\n        }\n\n        $message = ['message' => $record['message']];\n        if ($record['context']) {\n            $message['context'] = $record['context'];\n        }\n        if ($record['extra']) {\n            $message['extra'] = $record['extra'];\n        }\n        if (count($message) === 1) {\n            $message = reset($message);\n        }\n\n        return [\n            $record['channel'],\n            $message,\n            $backtrace,\n            $this->logLevels[$record['level']],\n        ];\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function formatBatch(array $records)\n    {\n        $formatted = [];\n\n        foreach ($records as $record) {\n            $formatted[] = $this->format($record);\n        }\n\n        return $formatted;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/ElasticaFormatter.php","ext":"php","size":2072,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Elastica\\Document;\n\n/**\n * Format a log message into an Elastica Document\n *\n * @author Jelle Vink <jelle.vink@gmail.com>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass ElasticaFormatter extends NormalizerFormatter\n{\n    /**\n     * @var string Elastic search index name\n     */\n    protected $index;\n\n    /**\n     * @var ?string Elastic search document type\n     */\n    protected $type;\n\n    /**\n     * @param string  $index Elastic Search index name\n     * @param ?string $type  Elastic Search document type, deprecated as of Elastica 7\n     */\n    public function __construct(string $index, ?string $type)\n    {\n        // elasticsearch requires a ISO 8601 format date with optional millisecond precision.\n        parent::__construct('Y-m-d\\TH:i:s.uP');\n\n        $this->index = $index;\n        $this->type = $type;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record)\n    {\n        $record = parent::format($record);\n\n        return $this->getDocument($record);\n    }\n\n    public function getIndex(): string\n    {\n        return $this->index;\n    }\n\n    /**\n     * @deprecated since Elastica 7 type has no effect\n     */\n    public function getType(): string\n    {\n        /** @phpstan-ignore-next-line */\n        return $this->type;\n    }\n\n    /**\n     * Convert a log message into an Elastica Document\n     *\n     * @phpstan-param Record $record\n     */\n    protected function getDocument(array $record): Document\n    {\n        $document = new Document();\n        $document->setData($record);\n        if (method_exists($document, 'setType')) {\n            /** @phpstan-ignore-next-line */\n            $document->setType($this->type);\n        }\n        $document->setIndex($this->index);\n\n        return $document;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/LineFormatter.php","ext":"php","size":7690,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Utils;\n\n/**\n * Formats incoming records into a one-line string\n *\n * This is especially useful for logging to files\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @author Christophe Coevoet <stof@notk.org>\n */\nclass LineFormatter extends NormalizerFormatter\n{\n    public const SIMPLE_FORMAT = \"[%datetime%] %channel%.%level_name%: %message% %context% %extra%\\n\";\n\n    /** @var string */\n    protected $format;\n    /** @var bool */\n    protected $allowInlineLineBreaks;\n    /** @var bool */\n    protected $ignoreEmptyContextAndExtra;\n    /** @var bool */\n    protected $includeStacktraces;\n    /** @var ?callable */\n    protected $stacktracesParser;\n\n    /**\n     * @param string|null $format                     The format of the message\n     * @param string|null $dateFormat                 The format of the timestamp: one supported by DateTime::format\n     * @param bool        $allowInlineLineBreaks      Whether to allow inline line breaks in log entries\n     * @param bool        $ignoreEmptyContextAndExtra\n     */\n    public function __construct(?string $format = null, ?string $dateFormat = null, bool $allowInlineLineBreaks = false, bool $ignoreEmptyContextAndExtra = false, bool $includeStacktraces = false)\n    {\n        $this->format = $format === null ? static::SIMPLE_FORMAT : $format;\n        $this->allowInlineLineBreaks = $allowInlineLineBreaks;\n        $this->ignoreEmptyContextAndExtra = $ignoreEmptyContextAndExtra;\n        $this->includeStacktraces($includeStacktraces);\n        parent::__construct($dateFormat);\n    }\n\n    public function includeStacktraces(bool $include = true, ?callable $parser = null): self\n    {\n        $this->includeStacktraces = $include;\n        if ($this->includeStacktraces) {\n            $this->allowInlineLineBreaks = true;\n            $this->stacktracesParser = $parser;\n        }\n\n        return $this;\n    }\n\n    public function allowInlineLineBreaks(bool $allow = true): self\n    {\n        $this->allowInlineLineBreaks = $allow;\n\n        return $this;\n    }\n\n    public function ignoreEmptyContextAndExtra(bool $ignore = true): self\n    {\n        $this->ignoreEmptyContextAndExtra = $ignore;\n\n        return $this;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record): string\n    {\n        $vars = parent::format($record);\n\n        $output = $this->format;\n\n        foreach ($vars['extra'] as $var => $val) {\n            if (false !== strpos($output, '%extra.'.$var.'%')) {\n                $output = str_replace('%extra.'.$var.'%', $this->stringify($val), $output);\n                unset($vars['extra'][$var]);\n            }\n        }\n\n        foreach ($vars['context'] as $var => $val) {\n            if (false !== strpos($output, '%context.'.$var.'%')) {\n                $output = str_replace('%context.'.$var.'%', $this->stringify($val), $output);\n                unset($vars['context'][$var]);\n            }\n        }\n\n        if ($this->ignoreEmptyContextAndExtra) {\n            if (empty($vars['context'])) {\n                unset($vars['context']);\n                $output = str_replace('%context%', '', $output);\n            }\n\n            if (empty($vars['extra'])) {\n                unset($vars['extra']);\n                $output = str_replace('%extra%', '', $output);\n            }\n        }\n\n        foreach ($vars as $var => $val) {\n            if (false !== strpos($output, '%'.$var.'%')) {\n                $output = str_replace('%'.$var.'%', $this->stringify($val), $output);\n            }\n        }\n\n        // remove leftover %extra.xxx% and %context.xxx% if any\n        if (false !== strpos($output, '%')) {\n            $output = preg_replace('/%(?:extra|context)\\..+?%/', '', $output);\n            if (null === $output) {\n                $pcreErrorCode = preg_last_error();\n                throw new \\RuntimeException('Failed to run preg_replace: ' . $pcreErrorCode . ' / ' . Utils::pcreLastErrorMessage($pcreErrorCode));\n            }\n        }\n\n        return $output;\n    }\n\n    public function formatBatch(array $records): string\n    {\n        $message = '';\n        foreach ($records as $record) {\n            $message .= $this->format($record);\n        }\n\n        return $message;\n    }\n\n    /**\n     * @param mixed $value\n     */\n    public function stringify($value): string\n    {\n        return $this->replaceNewlines($this->convertToString($value));\n    }\n\n    protected function normalizeException(\\Throwable $e, int $depth = 0): string\n    {\n        $str = $this->formatException($e);\n\n        if ($previous = $e->getPrevious()) {\n            do {\n                $depth++;\n                if ($depth > $this->maxNormalizeDepth) {\n                    $str .= \"\\n[previous exception] Over \" . $this->maxNormalizeDepth . ' levels deep, aborting normalization';\n                    break;\n                }\n\n                $str .= \"\\n[previous exception] \" . $this->formatException($previous);\n            } while ($previous = $previous->getPrevious());\n        }\n\n        return $str;\n    }\n\n    /**\n     * @param mixed $data\n     */\n    protected function convertToString($data): string\n    {\n        if (null === $data || is_bool($data)) {\n            return var_export($data, true);\n        }\n\n        if (is_scalar($data)) {\n            return (string) $data;\n        }\n\n        return $this->toJson($data, true);\n    }\n\n    protected function replaceNewlines(string $str): string\n    {\n        if ($this->allowInlineLineBreaks) {\n            if (0 === strpos($str, '{')) {\n                $str = preg_replace('/(?<!\\\\\\\\)\\\\\\\\[rn]/', \"\\n\", $str);\n                if (null === $str) {\n                    $pcreErrorCode = preg_last_error();\n                    throw new \\RuntimeException('Failed to run preg_replace: ' . $pcreErrorCode . ' / ' . Utils::pcreLastErrorMessage($pcreErrorCode));\n                }\n            }\n\n            return $str;\n        }\n\n        return str_replace([\"\\r\\n\", \"\\r\", \"\\n\"], ' ', $str);\n    }\n\n    private function formatException(\\Throwable $e): string\n    {\n        $str = '[object] (' . Utils::getClass($e) . '(code: ' . $e->getCode();\n        if ($e instanceof \\SoapFault) {\n            if (isset($e->faultcode)) {\n                $str .= ' faultcode: ' . $e->faultcode;\n            }\n\n            if (isset($e->faultactor)) {\n                $str .= ' faultactor: ' . $e->faultactor;\n            }\n\n            if (isset($e->detail)) {\n                if (is_string($e->detail)) {\n                    $str .= ' detail: ' . $e->detail;\n                } elseif (is_object($e->detail) || is_array($e->detail)) {\n                    $str .= ' detail: ' . $this->toJson($e->detail, true);\n                }\n            }\n        }\n        $str .= '): ' . $e->getMessage() . ' at ' . $e->getFile() . ':' . $e->getLine() . ')';\n\n        if ($this->includeStacktraces) {\n            $str .= $this->stacktracesParser($e);\n        }\n\n        return $str;\n    }\n\n    private function stacktracesParser(\\Throwable $e): string\n    {\n        $trace = $e->getTraceAsString();\n\n        if ($this->stacktracesParser) {\n            $trace = $this->stacktracesParserCustom($trace);\n        }\n\n        return \"\\n[stacktrace]\\n\" . $trace . \"\\n\";\n    }\n\n    private function stacktracesParserCustom(string $trace): string\n    {\n        return implode(\"\\n\", array_filter(array_map($this->stacktracesParser, explode(\"\\n\", $trace))));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/LogstashFormatter.php","ext":"php","size":3402,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Serializes a log message to Logstash Event Format\n *\n * @see https://www.elastic.co/products/logstash\n * @see https://github.com/elastic/logstash/blob/master/logstash-core/src/main/java/org/logstash/Event.java\n *\n * @author Tim Mower <timothy.mower@gmail.com>\n */\nclass LogstashFormatter extends NormalizerFormatter\n{\n    /**\n     * @var string the name of the system for the Logstash log message, used to fill the @source field\n     */\n    protected $systemName;\n\n    /**\n     * @var string an application name for the Logstash log message, used to fill the @type field\n     */\n    protected $applicationName;\n\n    /**\n     * @var string the key for 'extra' fields from the Monolog record\n     */\n    protected $extraKey;\n\n    /**\n     * @var string the key for 'context' fields from the Monolog record\n     */\n    protected $contextKey;\n\n    /**\n     * @param string      $applicationName The application that sends the data, used as the \"type\" field of logstash\n     * @param string|null $systemName      The system/machine name, used as the \"source\" field of logstash, defaults to the hostname of the machine\n     * @param string      $extraKey        The key for extra keys inside logstash \"fields\", defaults to extra\n     * @param string      $contextKey      The key for context keys inside logstash \"fields\", defaults to context\n     */\n    public function __construct(string $applicationName, ?string $systemName = null, string $extraKey = 'extra', string $contextKey = 'context')\n    {\n        // logstash requires a ISO 8601 format date with optional millisecond precision.\n        parent::__construct('Y-m-d\\TH:i:s.uP');\n\n        $this->systemName = $systemName === null ? (string) gethostname() : $systemName;\n        $this->applicationName = $applicationName;\n        $this->extraKey = $extraKey;\n        $this->contextKey = $contextKey;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record): string\n    {\n        $record = parent::format($record);\n\n        if (empty($record['datetime'])) {\n            $record['datetime'] = gmdate('c');\n        }\n        $message = [\n            '@timestamp' => $record['datetime'],\n            '@version' => 1,\n            'host' => $this->systemName,\n        ];\n        if (isset($record['message'])) {\n            $message['message'] = $record['message'];\n        }\n        if (isset($record['channel'])) {\n            $message['type'] = $record['channel'];\n            $message['channel'] = $record['channel'];\n        }\n        if (isset($record['level_name'])) {\n            $message['level'] = $record['level_name'];\n        }\n        if (isset($record['level'])) {\n            $message['monolog_level'] = $record['level'];\n        }\n        if ($this->applicationName) {\n            $message['type'] = $this->applicationName;\n        }\n        if (!empty($record['extra'])) {\n            $message[$this->extraKey] = $record['extra'];\n        }\n        if (!empty($record['context'])) {\n            $message[$this->contextKey] = $record['context'];\n        }\n\n        return $this->toJson($message) . \"\\n\";\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/WildfireFormatter.php","ext":"php","size":3937,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Logger;\n\n/**\n * Serializes a log message according to Wildfire's header requirements\n *\n * @author Eric Clemmons (@ericclemmons) <eric@uxdriven.com>\n * @author Christophe Coevoet <stof@notk.org>\n * @author Kirill chEbba Chebunin <iam@chebba.org>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nclass WildfireFormatter extends NormalizerFormatter\n{\n    /**\n     * Translates Monolog log levels to Wildfire levels.\n     *\n     * @var array<Level, string>\n     */\n    private $logLevels = [\n        Logger::DEBUG     => 'LOG',\n        Logger::INFO      => 'INFO',\n        Logger::NOTICE    => 'INFO',\n        Logger::WARNING   => 'WARN',\n        Logger::ERROR     => 'ERROR',\n        Logger::CRITICAL  => 'ERROR',\n        Logger::ALERT     => 'ERROR',\n        Logger::EMERGENCY => 'ERROR',\n    ];\n\n    /**\n     * @param string|null $dateFormat The format of the timestamp: one supported by DateTime::format\n     */\n    public function __construct(?string $dateFormat = null)\n    {\n        parent::__construct($dateFormat);\n\n        // http headers do not like non-ISO-8559-1 characters\n        $this->removeJsonEncodeOption(JSON_UNESCAPED_UNICODE);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return string\n     */\n    public function format(array $record): string\n    {\n        // Retrieve the line and file if set and remove them from the formatted extra\n        $file = $line = '';\n        if (isset($record['extra']['file'])) {\n            $file = $record['extra']['file'];\n            unset($record['extra']['file']);\n        }\n        if (isset($record['extra']['line'])) {\n            $line = $record['extra']['line'];\n            unset($record['extra']['line']);\n        }\n\n        /** @var mixed[] $record */\n        $record = $this->normalize($record);\n        $message = ['message' => $record['message']];\n        $handleError = false;\n        if ($record['context']) {\n            $message['context'] = $record['context'];\n            $handleError = true;\n        }\n        if ($record['extra']) {\n            $message['extra'] = $record['extra'];\n            $handleError = true;\n        }\n        if (count($message) === 1) {\n            $message = reset($message);\n        }\n\n        if (isset($record['context']['table'])) {\n            $type  = 'TABLE';\n            $label = $record['channel'] .': '. $record['message'];\n            $message = $record['context']['table'];\n        } else {\n            $type  = $this->logLevels[$record['level']];\n            $label = $record['channel'];\n        }\n\n        // Create JSON object describing the appearance of the message in the console\n        $json = $this->toJson([\n            [\n                'Type'  => $type,\n                'File'  => $file,\n                'Line'  => $line,\n                'Label' => $label,\n            ],\n            $message,\n        ], $handleError);\n\n        // The message itself is a serialization of the above JSON object + it's length\n        return sprintf(\n            '%d|%s|',\n            strlen($json),\n            $json\n        );\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @phpstan-return never\n     */\n    public function formatBatch(array $records)\n    {\n        throw new \\BadMethodCallException('Batch formatting does not make sense for the WildfireFormatter');\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return null|scalar|array<array|scalar|null>|object\n     */\n    protected function normalize($data, int $depth = 0)\n    {\n        if (is_object($data) && !$data instanceof \\DateTimeInterface) {\n            return $data;\n        }\n\n        return parent::normalize($data, $depth);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/FormatterInterface.php","ext":"php","size":958,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Interface for formatters\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\ninterface FormatterInterface\n{\n    /**\n     * Formats a log record.\n     *\n     * @param  array $record A record to format\n     * @return mixed The formatted record\n     *\n     * @phpstan-param Record $record\n     */\n    public function format(array $record);\n\n    /**\n     * Formats a set of log records.\n     *\n     * @param  array $records A set of records to format\n     * @return mixed The formatted set of records\n     *\n     * @phpstan-param Record[] $records\n     */\n    public function formatBatch(array $records);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/JsonFormatter.php","ext":"php","size":6257,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Throwable;\n\n/**\n * Encodes whatever record data is passed to it as json\n *\n * This can be useful to log to databases or remote APIs\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n *\n * @phpstan-import-type Record from \\Monolog\\Logger\n */\nclass JsonFormatter extends NormalizerFormatter\n{\n    public const BATCH_MODE_JSON = 1;\n    public const BATCH_MODE_NEWLINES = 2;\n\n    /** @var self::BATCH_MODE_* */\n    protected $batchMode;\n    /** @var bool */\n    protected $appendNewline;\n    /** @var bool */\n    protected $ignoreEmptyContextAndExtra;\n    /** @var bool */\n    protected $includeStacktraces = false;\n\n    /**\n     * @param self::BATCH_MODE_* $batchMode\n     */\n    public function __construct(int $batchMode = self::BATCH_MODE_JSON, bool $appendNewline = true, bool $ignoreEmptyContextAndExtra = false, bool $includeStacktraces = false)\n    {\n        $this->batchMode = $batchMode;\n        $this->appendNewline = $appendNewline;\n        $this->ignoreEmptyContextAndExtra = $ignoreEmptyContextAndExtra;\n        $this->includeStacktraces = $includeStacktraces;\n\n        parent::__construct();\n    }\n\n    /**\n     * The batch mode option configures the formatting style for\n     * multiple records. By default, multiple records will be\n     * formatted as a JSON-encoded array. However, for\n     * compatibility with some API endpoints, alternative styles\n     * are available.\n     */\n    public function getBatchMode(): int\n    {\n        return $this->batchMode;\n    }\n\n    /**\n     * True if newlines are appended to every formatted record\n     */\n    public function isAppendingNewlines(): bool\n    {\n        return $this->appendNewline;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record): string\n    {\n        $normalized = $this->normalize($record);\n\n        if (isset($normalized['context']) && $normalized['context'] === []) {\n            if ($this->ignoreEmptyContextAndExtra) {\n                unset($normalized['context']);\n            } else {\n                $normalized['context'] = new \\stdClass;\n            }\n        }\n        if (isset($normalized['extra']) && $normalized['extra'] === []) {\n            if ($this->ignoreEmptyContextAndExtra) {\n                unset($normalized['extra']);\n            } else {\n                $normalized['extra'] = new \\stdClass;\n            }\n        }\n\n        return $this->toJson($normalized, true) . ($this->appendNewline ? \"\\n\" : '');\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function formatBatch(array $records): string\n    {\n        switch ($this->batchMode) {\n            case static::BATCH_MODE_NEWLINES:\n                return $this->formatBatchNewlines($records);\n\n            case static::BATCH_MODE_JSON:\n            default:\n                return $this->formatBatchJson($records);\n        }\n    }\n\n    /**\n     * @return self\n     */\n    public function includeStacktraces(bool $include = true): self\n    {\n        $this->includeStacktraces = $include;\n\n        return $this;\n    }\n\n    /**\n     * Return a JSON-encoded array of records.\n     *\n     * @phpstan-param Record[] $records\n     */\n    protected function formatBatchJson(array $records): string\n    {\n        return $this->toJson($this->normalize($records), true);\n    }\n\n    /**\n     * Use new lines to separate records instead of a\n     * JSON-encoded array.\n     *\n     * @phpstan-param Record[] $records\n     */\n    protected function formatBatchNewlines(array $records): string\n    {\n        $instance = $this;\n\n        $oldNewline = $this->appendNewline;\n        $this->appendNewline = false;\n        array_walk($records, function (&$value, $key) use ($instance) {\n            $value = $instance->format($value);\n        });\n        $this->appendNewline = $oldNewline;\n\n        return implode(\"\\n\", $records);\n    }\n\n    /**\n     * Normalizes given $data.\n     *\n     * @param mixed $data\n     *\n     * @return mixed\n     */\n    protected function normalize($data, int $depth = 0)\n    {\n        if ($depth > $this->maxNormalizeDepth) {\n            return 'Over '.$this->maxNormalizeDepth.' levels deep, aborting normalization';\n        }\n\n        if (is_array($data)) {\n            $normalized = [];\n\n            $count = 1;\n            foreach ($data as $key => $value) {\n                if ($count++ > $this->maxNormalizeItemCount) {\n                    $normalized['...'] = 'Over '.$this->maxNormalizeItemCount.' items ('.count($data).' total), aborting normalization';\n                    break;\n                }\n\n                $normalized[$key] = $this->normalize($value, $depth + 1);\n            }\n\n            return $normalized;\n        }\n\n        if (is_object($data)) {\n            if ($data instanceof \\DateTimeInterface) {\n                return $this->formatDate($data);\n            }\n\n            if ($data instanceof Throwable) {\n                return $this->normalizeException($data, $depth);\n            }\n\n            // if the object has specific json serializability we want to make sure we skip the __toString treatment below\n            if ($data instanceof \\JsonSerializable) {\n                return $data;\n            }\n\n            if (\\get_class($data) === '__PHP_Incomplete_Class') {\n                return new \\ArrayObject($data);\n            }\n\n            if (method_exists($data, '__toString')) {\n                return $data->__toString();\n            }\n\n            return $data;\n        }\n\n        if (is_resource($data)) {\n            return parent::normalize($data);\n        }\n\n        return $data;\n    }\n\n    /**\n     * Normalizes given exception with or without its own stack trace based on\n     * `includeStacktraces` property.\n     *\n     * {@inheritDoc}\n     */\n    protected function normalizeException(Throwable $e, int $depth = 0): array\n    {\n        $data = parent::normalizeException($e, $depth);\n        if (!$this->includeStacktraces) {\n            unset($data['trace']);\n        }\n\n        return $data;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/GelfMessageFormatter.php","ext":"php","size":5617,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Logger;\nuse Gelf\\Message;\nuse Monolog\\Utils;\n\n/**\n * Serializes a log message to GELF\n * @see http://docs.graylog.org/en/latest/pages/gelf.html\n *\n * @author Matt Lehner <mlehner@gmail.com>\n *\n * @phpstan-import-type Level from \\Monolog\\Logger\n */\nclass GelfMessageFormatter extends NormalizerFormatter\n{\n    protected const DEFAULT_MAX_LENGTH = 32766;\n\n    /**\n     * @var string the name of the system for the Gelf log message\n     */\n    protected $systemName;\n\n    /**\n     * @var string a prefix for 'extra' fields from the Monolog record (optional)\n     */\n    protected $extraPrefix;\n\n    /**\n     * @var string a prefix for 'context' fields from the Monolog record (optional)\n     */\n    protected $contextPrefix;\n\n    /**\n     * @var int max length per field\n     */\n    protected $maxLength;\n\n    /**\n     * @var int\n     */\n    private $gelfVersion = 2;\n\n    /**\n     * Translates Monolog log levels to Graylog2 log priorities.\n     *\n     * @var array<int, int>\n     *\n     * @phpstan-var array<Level, int>\n     */\n    private $logLevels = [\n        Logger::DEBUG     => 7,\n        Logger::INFO      => 6,\n        Logger::NOTICE    => 5,\n        Logger::WARNING   => 4,\n        Logger::ERROR     => 3,\n        Logger::CRITICAL  => 2,\n        Logger::ALERT     => 1,\n        Logger::EMERGENCY => 0,\n    ];\n\n    public function __construct(?string $systemName = null, ?string $extraPrefix = null, string $contextPrefix = 'ctxt_', ?int $maxLength = null)\n    {\n        if (!class_exists(Message::class)) {\n            throw new \\RuntimeException('Composer package graylog2/gelf-php is required to use Monolog\\'s GelfMessageFormatter');\n        }\n\n        parent::__construct('U.u');\n\n        $this->systemName = (is_null($systemName) || $systemName === '') ? (string) gethostname() : $systemName;\n\n        $this->extraPrefix = is_null($extraPrefix) ? '' : $extraPrefix;\n        $this->contextPrefix = $contextPrefix;\n        $this->maxLength = is_null($maxLength) ? self::DEFAULT_MAX_LENGTH : $maxLength;\n\n        if (method_exists(Message::class, 'setFacility')) {\n            $this->gelfVersion = 1;\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record): Message\n    {\n        $context = $extra = [];\n        if (isset($record['context'])) {\n            /** @var mixed[] $context */\n            $context = parent::normalize($record['context']);\n        }\n        if (isset($record['extra'])) {\n            /** @var mixed[] $extra */\n            $extra = parent::normalize($record['extra']);\n        }\n\n        if (!isset($record['datetime'], $record['message'], $record['level'])) {\n            throw new \\InvalidArgumentException('The record should at least contain datetime, message and level keys, '.var_export($record, true).' given');\n        }\n\n        $message = new Message();\n        $message\n            ->setTimestamp($record['datetime'])\n            ->setShortMessage((string) $record['message'])\n            ->setHost($this->systemName)\n            ->setLevel($this->logLevels[$record['level']]);\n\n        // message length + system name length + 200 for padding / metadata\n        $len = 200 + strlen((string) $record['message']) + strlen($this->systemName);\n\n        if ($len > $this->maxLength) {\n            $message->setShortMessage(Utils::substr($record['message'], 0, $this->maxLength));\n        }\n\n        if ($this->gelfVersion === 1) {\n            if (isset($record['channel'])) {\n                $message->setFacility($record['channel']);\n            }\n            if (isset($extra['line'])) {\n                $message->setLine($extra['line']);\n                unset($extra['line']);\n            }\n            if (isset($extra['file'])) {\n                $message->setFile($extra['file']);\n                unset($extra['file']);\n            }\n        } else {\n            $message->setAdditional('facility', $record['channel']);\n        }\n\n        foreach ($extra as $key => $val) {\n            $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);\n            $len = strlen($this->extraPrefix . $key . $val);\n            if ($len > $this->maxLength) {\n                $message->setAdditional($this->extraPrefix . $key, Utils::substr((string) $val, 0, $this->maxLength));\n\n                continue;\n            }\n            $message->setAdditional($this->extraPrefix . $key, $val);\n        }\n\n        foreach ($context as $key => $val) {\n            $val = is_scalar($val) || null === $val ? $val : $this->toJson($val);\n            $len = strlen($this->contextPrefix . $key . $val);\n            if ($len > $this->maxLength) {\n                $message->setAdditional($this->contextPrefix . $key, Utils::substr((string) $val, 0, $this->maxLength));\n\n                continue;\n            }\n            $message->setAdditional($this->contextPrefix . $key, $val);\n        }\n\n        if ($this->gelfVersion === 1) {\n            /** @phpstan-ignore-next-line */\n            if (null === $message->getFile() && isset($context['exception']['file'])) {\n                if (preg_match(\"/^(.+):([0-9]+)$/\", $context['exception']['file'], $matches)) {\n                    $message->setFile($matches[1]);\n                    $message->setLine($matches[2]);\n                }\n            }\n        }\n\n        return $message;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/FluentdFormatter.php","ext":"php","size":2224,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\Utils;\n\n/**\n * Class FluentdFormatter\n *\n * Serializes a log message to Fluentd unix socket protocol\n *\n * Fluentd config:\n *\n * <source>\n *  type unix\n *  path /var/run/td-agent/td-agent.sock\n * </source>\n *\n * Monolog setup:\n *\n * $logger = new Monolog\\Logger('fluent.tag');\n * $fluentHandler = new Monolog\\Handler\\SocketHandler('unix:///var/run/td-agent/td-agent.sock');\n * $fluentHandler->setFormatter(new Monolog\\Formatter\\FluentdFormatter());\n * $logger->pushHandler($fluentHandler);\n *\n * @author Andrius Putna <fordnox@gmail.com>\n */\nclass FluentdFormatter implements FormatterInterface\n{\n    /**\n     * @var bool $levelTag should message level be a part of the fluentd tag\n     */\n    protected $levelTag = false;\n\n    public function __construct(bool $levelTag = false)\n    {\n        if (!function_exists('json_encode')) {\n            throw new \\RuntimeException('PHP\\'s json extension is required to use Monolog\\'s FluentdUnixFormatter');\n        }\n\n        $this->levelTag = $levelTag;\n    }\n\n    public function isUsingLevelsInTag(): bool\n    {\n        return $this->levelTag;\n    }\n\n    public function format(array $record): string\n    {\n        $tag = $record['channel'];\n        if ($this->levelTag) {\n            $tag .= '.' . strtolower($record['level_name']);\n        }\n\n        $message = [\n            'message' => $record['message'],\n            'context' => $record['context'],\n            'extra' => $record['extra'],\n        ];\n\n        if (!$this->levelTag) {\n            $message['level'] = $record['level'];\n            $message['level_name'] = $record['level_name'];\n        }\n\n        return Utils::jsonEncode([$tag, $record['datetime']->getTimestamp(), $message]);\n    }\n\n    public function formatBatch(array $records): string\n    {\n        $message = '';\n        foreach ($records as $record) {\n            $message .= $this->format($record);\n        }\n\n        return $message;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/LogglyFormatter.php","ext":"php","size":1305,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * Encodes message information into JSON in a format compatible with Loggly.\n *\n * @author Adam Pancutt <adam@pancutt.com>\n */\nclass LogglyFormatter extends JsonFormatter\n{\n    /**\n     * Overrides the default batch mode to new lines for compatibility with the\n     * Loggly bulk API.\n     */\n    public function __construct(int $batchMode = self::BATCH_MODE_NEWLINES, bool $appendNewline = false)\n    {\n        parent::__construct($batchMode, $appendNewline);\n    }\n\n    /**\n     * Appends the 'timestamp' parameter for indexing by Loggly.\n     *\n     * @see https://www.loggly.com/docs/automated-parsing/#json\n     * @see \\Monolog\\Formatter\\JsonFormatter::format()\n     */\n    public function format(array $record): string\n    {\n        if (isset($record[\"datetime\"]) && ($record[\"datetime\"] instanceof \\DateTimeInterface)) {\n            $record[\"timestamp\"] = $record[\"datetime\"]->format(\"Y-m-d\\TH:i:s.uO\");\n            unset($record[\"datetime\"]);\n        }\n\n        return parent::format($record);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/FlowdockFormatter.php","ext":"php","size":2613,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\n/**\n * formats the record to be used in the FlowdockHandler\n *\n * @author Dominik Liebler <liebler.dominik@gmail.com>\n * @deprecated Since 2.9.0 and 3.3.0, Flowdock was shutdown we will thus drop this handler in Monolog 4\n */\nclass FlowdockFormatter implements FormatterInterface\n{\n    /**\n     * @var string\n     */\n    private $source;\n\n    /**\n     * @var string\n     */\n    private $sourceEmail;\n\n    public function __construct(string $source, string $sourceEmail)\n    {\n        $this->source = $source;\n        $this->sourceEmail = $sourceEmail;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return mixed[]\n     */\n    public function format(array $record): array\n    {\n        $tags = [\n            '#logs',\n            '#' . strtolower($record['level_name']),\n            '#' . $record['channel'],\n        ];\n\n        foreach ($record['extra'] as $value) {\n            $tags[] = '#' . $value;\n        }\n\n        $subject = sprintf(\n            'in %s: %s - %s',\n            $this->source,\n            $record['level_name'],\n            $this->getShortMessage($record['message'])\n        );\n\n        $record['flowdock'] = [\n            'source' => $this->source,\n            'from_address' => $this->sourceEmail,\n            'subject' => $subject,\n            'content' => $record['message'],\n            'tags' => $tags,\n            'project' => $this->source,\n        ];\n\n        return $record;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @return mixed[][]\n     */\n    public function formatBatch(array $records): array\n    {\n        $formatted = [];\n\n        foreach ($records as $record) {\n            $formatted[] = $this->format($record);\n        }\n\n        return $formatted;\n    }\n\n    public function getShortMessage(string $message): string\n    {\n        static $hasMbString;\n\n        if (null === $hasMbString) {\n            $hasMbString = function_exists('mb_strlen');\n        }\n\n        $maxLength = 45;\n\n        if ($hasMbString) {\n            if (mb_strlen($message, 'UTF-8') > $maxLength) {\n                $message = mb_substr($message, 0, $maxLength - 4, 'UTF-8') . ' ...';\n            }\n        } else {\n            if (strlen($message) > $maxLength) {\n                $message = substr($message, 0, $maxLength - 4) . ' ...';\n            }\n        }\n\n        return $message;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/NormalizerFormatter.php","ext":"php","size":8239,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse Monolog\\DateTimeImmutable;\nuse Monolog\\Utils;\nuse Throwable;\n\n/**\n * Normalizes incoming records to remove objects/resources so it's easier to dump to various targets\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n */\nclass NormalizerFormatter implements FormatterInterface\n{\n    public const SIMPLE_DATE = \"Y-m-d\\TH:i:sP\";\n\n    /** @var string */\n    protected $dateFormat;\n    /** @var int */\n    protected $maxNormalizeDepth = 9;\n    /** @var int */\n    protected $maxNormalizeItemCount = 1000;\n\n    /** @var int */\n    private $jsonEncodeOptions = Utils::DEFAULT_JSON_FLAGS;\n\n    /**\n     * @param string|null $dateFormat The format of the timestamp: one supported by DateTime::format\n     */\n    public function __construct(?string $dateFormat = null)\n    {\n        $this->dateFormat = null === $dateFormat ? static::SIMPLE_DATE : $dateFormat;\n        if (!function_exists('json_encode')) {\n            throw new \\RuntimeException('PHP\\'s json extension is required to use Monolog\\'s NormalizerFormatter');\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @param mixed[] $record\n     */\n    public function format(array $record)\n    {\n        return $this->normalize($record);\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function formatBatch(array $records)\n    {\n        foreach ($records as $key => $record) {\n            $records[$key] = $this->format($record);\n        }\n\n        return $records;\n    }\n\n    public function getDateFormat(): string\n    {\n        return $this->dateFormat;\n    }\n\n    public function setDateFormat(string $dateFormat): self\n    {\n        $this->dateFormat = $dateFormat;\n\n        return $this;\n    }\n\n    /**\n     * The maximum number of normalization levels to go through\n     */\n    public function getMaxNormalizeDepth(): int\n    {\n        return $this->maxNormalizeDepth;\n    }\n\n    public function setMaxNormalizeDepth(int $maxNormalizeDepth): self\n    {\n        $this->maxNormalizeDepth = $maxNormalizeDepth;\n\n        return $this;\n    }\n\n    /**\n     * The maximum number of items to normalize per level\n     */\n    public function getMaxNormalizeItemCount(): int\n    {\n        return $this->maxNormalizeItemCount;\n    }\n\n    public function setMaxNormalizeItemCount(int $maxNormalizeItemCount): self\n    {\n        $this->maxNormalizeItemCount = $maxNormalizeItemCount;\n\n        return $this;\n    }\n\n    /**\n     * Enables `json_encode` pretty print.\n     */\n    public function setJsonPrettyPrint(bool $enable): self\n    {\n        if ($enable) {\n            $this->jsonEncodeOptions |= JSON_PRETTY_PRINT;\n        } else {\n            $this->jsonEncodeOptions &= ~JSON_PRETTY_PRINT;\n        }\n\n        return $this;\n    }\n\n    /**\n     * @param  mixed                $data\n     * @return null|scalar|array<array|scalar|null>\n     */\n    protected function normalize($data, int $depth = 0)\n    {\n        if ($depth > $this->maxNormalizeDepth) {\n            return 'Over ' . $this->maxNormalizeDepth . ' levels deep, aborting normalization';\n        }\n\n        if (null === $data || is_scalar($data)) {\n            if (is_float($data)) {\n                if (is_infinite($data)) {\n                    return ($data > 0 ? '' : '-') . 'INF';\n                }\n                if (is_nan($data)) {\n                    return 'NaN';\n                }\n            }\n\n            return $data;\n        }\n\n        if (is_array($data)) {\n            $normalized = [];\n\n            $count = 1;\n            foreach ($data as $key => $value) {\n                if ($count++ > $this->maxNormalizeItemCount) {\n                    $normalized['...'] = 'Over ' . $this->maxNormalizeItemCount . ' items ('.count($data).' total), aborting normalization';\n                    break;\n                }\n\n                $normalized[$key] = $this->normalize($value, $depth + 1);\n            }\n\n            return $normalized;\n        }\n\n        if ($data instanceof \\DateTimeInterface) {\n            return $this->formatDate($data);\n        }\n\n        if (is_object($data)) {\n            if ($data instanceof Throwable) {\n                return $this->normalizeException($data, $depth);\n            }\n\n            if ($data instanceof \\JsonSerializable) {\n                /** @var null|scalar|array<array|scalar|null> $value */\n                $value = $data->jsonSerialize();\n            } elseif (\\get_class($data) === '__PHP_Incomplete_Class') {\n                $accessor = new \\ArrayObject($data);\n                $value = (string) $accessor['__PHP_Incomplete_Class_Name'];\n            } elseif (method_exists($data, '__toString')) {\n                /** @var string $value */\n                $value = $data->__toString();\n            } else {\n                // the rest is normalized by json encoding and decoding it\n                /** @var null|scalar|array<array|scalar|null> $value */\n                $value = json_decode($this->toJson($data, true), true);\n            }\n\n            return [Utils::getClass($data) => $value];\n        }\n\n        if (is_resource($data)) {\n            return sprintf('[resource(%s)]', get_resource_type($data));\n        }\n\n        return '[unknown('.gettype($data).')]';\n    }\n\n    /**\n     * @return mixed[]\n     */\n    protected function normalizeException(Throwable $e, int $depth = 0)\n    {\n        if ($depth > $this->maxNormalizeDepth) {\n            return ['Over ' . $this->maxNormalizeDepth . ' levels deep, aborting normalization'];\n        }\n\n        if ($e instanceof \\JsonSerializable) {\n            return (array) $e->jsonSerialize();\n        }\n\n        $data = [\n            'class' => Utils::getClass($e),\n            'message' => $e->getMessage(),\n            'code' => (int) $e->getCode(),\n            'file' => $e->getFile().':'.$e->getLine(),\n        ];\n\n        if ($e instanceof \\SoapFault) {\n            if (isset($e->faultcode)) {\n                $data['faultcode'] = $e->faultcode;\n            }\n\n            if (isset($e->faultactor)) {\n                $data['faultactor'] = $e->faultactor;\n            }\n\n            if (isset($e->detail)) {\n                if (is_string($e->detail)) {\n                    $data['detail'] = $e->detail;\n                } elseif (is_object($e->detail) || is_array($e->detail)) {\n                    $data['detail'] = $this->toJson($e->detail, true);\n                }\n            }\n        }\n\n        $trace = $e->getTrace();\n        foreach ($trace as $frame) {\n            if (isset($frame['file'])) {\n                $data['trace'][] = $frame['file'].':'.$frame['line'];\n            }\n        }\n\n        if ($previous = $e->getPrevious()) {\n            $data['previous'] = $this->normalizeException($previous, $depth + 1);\n        }\n\n        return $data;\n    }\n\n    /**\n     * Return the JSON representation of a value\n     *\n     * @param  mixed             $data\n     * @throws \\RuntimeException if encoding fails and errors are not ignored\n     * @return string            if encoding fails and ignoreErrors is true 'null' is returned\n     */\n    protected function toJson($data, bool $ignoreErrors = false): string\n    {\n        return Utils::jsonEncode($data, $this->jsonEncodeOptions, $ignoreErrors);\n    }\n\n    /**\n     * @return string\n     */\n    protected function formatDate(\\DateTimeInterface $date)\n    {\n        // in case the date format isn't custom then we defer to the custom DateTimeImmutable\n        // formatting logic, which will pick the right format based on whether useMicroseconds is on\n        if ($this->dateFormat === self::SIMPLE_DATE && $date instanceof DateTimeImmutable) {\n            return (string) $date;\n        }\n\n        return $date->format($this->dateFormat);\n    }\n\n    public function addJsonEncodeOption(int $option): self\n    {\n        $this->jsonEncodeOptions |= $option;\n\n        return $this;\n    }\n\n    public function removeJsonEncodeOption(int $option): self\n    {\n        $this->jsonEncodeOptions &= ~$option;\n\n        return $this;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/Formatter/ElasticsearchFormatter.php","ext":"php","size":1861,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog\\Formatter;\n\nuse DateTimeInterface;\n\n/**\n * Format a log message into an Elasticsearch record\n *\n * @author Avtandil Kikabidze <akalongman@gmail.com>\n */\nclass ElasticsearchFormatter extends NormalizerFormatter\n{\n    /**\n     * @var string Elasticsearch index name\n     */\n    protected $index;\n\n    /**\n     * @var string Elasticsearch record type\n     */\n    protected $type;\n\n    /**\n     * @param string $index Elasticsearch index name\n     * @param string $type  Elasticsearch record type\n     */\n    public function __construct(string $index, string $type)\n    {\n        // Elasticsearch requires an ISO 8601 format date with optional millisecond precision.\n        parent::__construct(DateTimeInterface::ISO8601);\n\n        $this->index = $index;\n        $this->type = $type;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function format(array $record)\n    {\n        $record = parent::format($record);\n\n        return $this->getDocument($record);\n    }\n\n    /**\n     * Getter index\n     *\n     * @return string\n     */\n    public function getIndex(): string\n    {\n        return $this->index;\n    }\n\n    /**\n     * Getter type\n     *\n     * @return string\n     */\n    public function getType(): string\n    {\n        return $this->type;\n    }\n\n    /**\n     * Convert a log message into an Elasticsearch record\n     *\n     * @param  mixed[] $record Log message\n     * @return mixed[]\n     */\n    protected function getDocument(array $record): array\n    {\n        $record['_index'] = $this->index;\n        $record['_type'] = $this->type;\n\n        return $record;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/monolog/monolog/src/Monolog/LogRecord.php","ext":"php","size":983,"mtime":1756373564,"type":"text","content":"<?php declare(strict_types=1);\n\n/*\n * This file is part of the Monolog package.\n *\n * (c) Jordi Boggiano <j.boggiano@seld.be>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace Monolog;\n\nuse ArrayAccess;\n\n/**\n * Monolog log record interface for forward compatibility with Monolog 3.0\n *\n * This is just present in Monolog 2.4+ to allow interoperable code to be written against\n * both versions by type-hinting arguments as `array|\\Monolog\\LogRecord $record`\n *\n * Do not rely on this interface for other purposes, and do not implement it.\n *\n * @author Jordi Boggiano <j.boggiano@seld.be>\n * @template-extends \\ArrayAccess<'message'|'level'|'context'|'level_name'|'channel'|'datetime'|'extra'|'formatted', mixed>\n * @phpstan-import-type Record from Logger\n */\ninterface LogRecord extends \\ArrayAccess\n{\n    /**\n     * @phpstan-return Record\n     */\n    public function toArray(): array;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/CHANGELOG.md","ext":"md","size":20320,"mtime":1756373564,"type":"text","content":"# Changelog\n\nAll notable changes to this project will be documented in this file.\n\n## [0.13.1](https://github.com/brick/math/releases/tag/0.13.1) - 2025-03-29\n\n✨ **Improvements**\n\n- `__toString()` methods of `BigInteger` and `BigDecimal` are now type-hinted as returning `numeric-string` instead of `string` (#90 by @vudaltsov)\n\n## [0.13.0](https://github.com/brick/math/releases/tag/0.13.0) - 2025-03-03\n\n💥 **Breaking changes**\n\n- `BigDecimal::ofUnscaledValue()` no longer throws an exception if the scale is negative\n- `MathException` now extends `RuntimeException` instead of `Exception`; this reverts the change introduced in version `0.11.0` (#82)\n\n✨ **New features**\n\n- `BigDecimal::ofUnscaledValue()` allows a negative scale (and converts the values to create a zero scale number)\n\n## [0.12.3](https://github.com/brick/math/releases/tag/0.12.3) - 2025-02-28\n\n✨ **New features**\n\n- `BigDecimal::getPrecision()` Returns the number of significant digits in a decimal number\n\n## [0.12.2](https://github.com/brick/math/releases/tag/0.12.2) - 2025-02-26\n\n⚡️ **Performance improvements**\n\n- Division in `NativeCalculator` is now faster for small divisors, thanks to [@Izumi-kun](https://github.com/Izumi-kun) in [#87](https://github.com/brick/math/pull/87).\n\n👌 **Improvements**\n\n- Add missing `RoundingNecessaryException` to the `@throws` annotation of `BigNumber::of()`\n\n## [0.12.1](https://github.com/brick/math/releases/tag/0.12.1) - 2023-11-29\n\n⚡️ **Performance improvements**\n\n- `BigNumber::of()` is now faster, thanks to [@SebastienDug](https://github.com/SebastienDug) in [#77](https://github.com/brick/math/pull/77).\n\n## [0.12.0](https://github.com/brick/math/releases/tag/0.12.0) - 2023-11-26\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 8.1\n- `RoundingMode` is now an `enum`; if you're type-hinting rounding modes, you need to type-hint against `RoundingMode` instead of `int` now\n- `BigNumber` classes do not implement the `Serializable` interface anymore (they use the [new custom object serialization mechanism](https://wiki.php.net/rfc/custom_object_serialization))\n- The following breaking changes only affect you if you're creating your own `BigNumber` subclasses:\n  - the return type of `BigNumber::of()` is now `static`\n  - `BigNumber` has a new abstract method `from()`\n  - all `public` and `protected` functions of `BigNumber` are now `final`\n\n## [0.11.0](https://github.com/brick/math/releases/tag/0.11.0) - 2023-01-16\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 8.0\n- Methods accepting a union of types are now strongly typed<sup>*</sup>\n- `MathException` now extends `Exception` instead of `RuntimeException`\n\n<sup>* You may now run into type errors if you were passing `Stringable` objects to `of()` or any of the methods\ninternally calling `of()`, with `strict_types` enabled. You can fix this by casting `Stringable` objects to `string`\nfirst.</sup>\n\n## [0.10.2](https://github.com/brick/math/releases/tag/0.10.2) - 2022-08-11\n\n👌 **Improvements**\n\n- `BigRational::toFloat()` now simplifies the fraction before performing division (#73) thanks to @olsavmic\n\n## [0.10.1](https://github.com/brick/math/releases/tag/0.10.1) - 2022-08-02\n\n✨ **New features**\n\n- `BigInteger::gcdMultiple()` returns the GCD of multiple `BigInteger` numbers\n\n## [0.10.0](https://github.com/brick/math/releases/tag/0.10.0) - 2022-06-18\n\n💥 **Breaking changes**\n\n- Minimum PHP version is now 7.4\n\n## [0.9.3](https://github.com/brick/math/releases/tag/0.9.3) - 2021-08-15\n\n🚀 **Compatibility with PHP 8.1**\n\n- Support for custom object serialization; this removes a warning on PHP 8.1 due to the `Serializable` interface being deprecated (#60) thanks @TRowbotham\n\n## [0.9.2](https://github.com/brick/math/releases/tag/0.9.2) - 2021-01-20\n\n🐛 **Bug fix**\n\n- Incorrect results could be returned when using the BCMath calculator, with a default scale set with `bcscale()`, on PHP >= 7.2 (#55).\n\n## [0.9.1](https://github.com/brick/math/releases/tag/0.9.1) - 2020-08-19\n\n✨ **New features**\n\n- `BigInteger::not()` returns the bitwise `NOT` value\n\n🐛 **Bug fixes**\n\n- `BigInteger::toBytes()` could return an incorrect binary representation for some numbers\n- The bitwise operations `and()`, `or()`, `xor()` on `BigInteger` could return an incorrect result when the GMP extension is not available\n\n## [0.9.0](https://github.com/brick/math/releases/tag/0.9.0) - 2020-08-18\n\n👌 **Improvements**\n\n- `BigNumber::of()` now accepts `.123` and `123.` formats, both of which return a `BigDecimal`\n\n💥 **Breaking changes**\n\n- Deprecated method `BigInteger::powerMod()` has been removed - use `modPow()` instead\n- Deprecated method `BigInteger::parse()` has been removed - use `fromBase()` instead\n\n## [0.8.17](https://github.com/brick/math/releases/tag/0.8.17) - 2020-08-19\n\n🐛 **Bug fix**\n\n- `BigInteger::toBytes()` could return an incorrect binary representation for some numbers\n- The bitwise operations `and()`, `or()`, `xor()` on `BigInteger` could return an incorrect result when the GMP extension is not available\n\n## [0.8.16](https://github.com/brick/math/releases/tag/0.8.16) - 2020-08-18\n\n🚑 **Critical fix**\n\n- This version reintroduces the deprecated `BigInteger::parse()` method, that has been removed by mistake in version `0.8.9` and should have lasted for the whole `0.8` release cycle.\n\n✨ **New features**\n\n- `BigInteger::modInverse()` calculates a modular multiplicative inverse\n- `BigInteger::fromBytes()` creates a `BigInteger` from a byte string\n- `BigInteger::toBytes()` converts a `BigInteger` to a byte string\n- `BigInteger::randomBits()` creates a pseudo-random `BigInteger` of a given bit length\n- `BigInteger::randomRange()` creates a pseudo-random `BigInteger` between two bounds\n\n💩 **Deprecations**\n\n- `BigInteger::powerMod()` is now deprecated in favour of `modPow()`\n\n## [0.8.15](https://github.com/brick/math/releases/tag/0.8.15) - 2020-04-15\n\n🐛 **Fixes**\n\n- added missing `ext-json` requirement, due to `BigNumber` implementing `JsonSerializable`\n\n⚡️ **Optimizations**\n\n- additional optimization in `BigInteger::remainder()`\n\n## [0.8.14](https://github.com/brick/math/releases/tag/0.8.14) - 2020-02-18\n\n✨ **New features**\n\n- `BigInteger::getLowestSetBit()` returns the index of the rightmost one bit\n\n## [0.8.13](https://github.com/brick/math/releases/tag/0.8.13) - 2020-02-16\n\n✨ **New features**\n\n- `BigInteger::isEven()` tests whether the number is even\n- `BigInteger::isOdd()` tests whether the number is odd\n- `BigInteger::testBit()` tests if a bit is set\n- `BigInteger::getBitLength()` returns the number of bits in the minimal representation of the number\n\n## [0.8.12](https://github.com/brick/math/releases/tag/0.8.12) - 2020-02-03\n\n🛠️ **Maintenance release**\n\nClasses are now annotated for better static analysis with [psalm](https://psalm.dev/).\n\nThis is a maintenance release: no bug fixes, no new features, no breaking changes.\n\n## [0.8.11](https://github.com/brick/math/releases/tag/0.8.11) - 2020-01-23\n\n✨ **New feature**\n\n`BigInteger::powerMod()` performs a power-with-modulo operation. Useful for crypto.\n\n## [0.8.10](https://github.com/brick/math/releases/tag/0.8.10) - 2020-01-21\n\n✨ **New feature**\n\n`BigInteger::mod()` returns the **modulo** of two numbers. The *modulo* differs from the *remainder* when the signs of the operands are different.\n\n## [0.8.9](https://github.com/brick/math/releases/tag/0.8.9) - 2020-01-08\n\n⚡️ **Performance improvements**\n\nA few additional optimizations in `BigInteger` and `BigDecimal` when one of the operands can be returned as is. Thanks to @tomtomsen in #24.\n\n## [0.8.8](https://github.com/brick/math/releases/tag/0.8.8) - 2019-04-25\n\n🐛 **Bug fixes**\n\n- `BigInteger::toBase()` could return an empty string for zero values (BCMath & Native calculators only, GMP calculator unaffected)\n\n✨ **New features**\n\n- `BigInteger::toArbitraryBase()` converts a number to an arbitrary base, using a custom alphabet\n- `BigInteger::fromArbitraryBase()` converts a string in an arbitrary base, using a custom alphabet, back to a number\n\nThese methods can be used as the foundation to convert strings between different bases/alphabets, using BigInteger as an intermediate representation.\n\n💩 **Deprecations**\n\n- `BigInteger::parse()` is now deprecated in favour of `fromBase()`\n\n`BigInteger::fromBase()` works the same way as `parse()`, with 2 minor differences:\n\n- the `$base` parameter is required, it does not default to `10`\n- it throws a `NumberFormatException` instead of an `InvalidArgumentException` when the number is malformed\n\n## [0.8.7](https://github.com/brick/math/releases/tag/0.8.7) - 2019-04-20\n\n**Improvements**\n\n- Safer conversion from `float` when using custom locales\n- **Much faster** `NativeCalculator` implementation 🚀\n\nYou can expect **at least a 3x performance improvement** for common arithmetic operations when using the library on systems without GMP or BCMath; it gets exponentially faster on multiplications with a high number of digits. This is due to calculations now being performed on whole blocks of digits (the block size depending on the platform, 32-bit or 64-bit) instead of digit-by-digit as before.\n\n## [0.8.6](https://github.com/brick/math/releases/tag/0.8.6) - 2019-04-11\n\n**New method**\n\n`BigNumber::sum()` returns the sum of one or more numbers.\n\n## [0.8.5](https://github.com/brick/math/releases/tag/0.8.5) - 2019-02-12\n\n**Bug fix**: `of()` factory methods could fail when passing a `float` in environments using a `LC_NUMERIC` locale with a decimal separator other than `'.'` (#20).\n\nThanks @manowark 👍\n\n## [0.8.4](https://github.com/brick/math/releases/tag/0.8.4) - 2018-12-07\n\n**New method**\n\n`BigDecimal::sqrt()` calculates the square root of a decimal number, to a given scale.\n\n## [0.8.3](https://github.com/brick/math/releases/tag/0.8.3) - 2018-12-06\n\n**New method**\n\n`BigInteger::sqrt()` calculates the square root of a number (thanks @peter279k).\n\n**New exception**\n\n`NegativeNumberException` is thrown when calling `sqrt()` on a negative number.\n\n## [0.8.2](https://github.com/brick/math/releases/tag/0.8.2) - 2018-11-08\n\n**Performance update**\n\n- Further improvement of `toInt()` performance\n- `NativeCalculator` can now perform some multiplications more efficiently\n\n## [0.8.1](https://github.com/brick/math/releases/tag/0.8.1) - 2018-11-07\n\nPerformance optimization of `toInt()` methods.\n\n## [0.8.0](https://github.com/brick/math/releases/tag/0.8.0) - 2018-10-13\n\n**Breaking changes**\n\nThe following deprecated methods have been removed. Use the new method name instead:\n\n| Method removed | Replacement method |\n| --- | --- |\n| `BigDecimal::getIntegral()` | `BigDecimal::getIntegralPart()` |\n| `BigDecimal::getFraction()` | `BigDecimal::getFractionalPart()` |\n\n---\n\n**New features**\n\n`BigInteger` has been augmented with 5 new methods for bitwise operations:\n\n| New method | Description |\n| --- | --- |\n| `and()` | performs a bitwise `AND` operation on two numbers |\n| `or()` | performs a bitwise `OR` operation on two numbers |\n| `xor()` | performs a bitwise `XOR` operation on two numbers |\n| `shiftedLeft()` | returns the number shifted left by a number of bits |\n| `shiftedRight()` | returns the number shifted right by a number of bits |\n\nThanks to @DASPRiD 👍\n\n## [0.7.3](https://github.com/brick/math/releases/tag/0.7.3) - 2018-08-20\n\n**New method:** `BigDecimal::hasNonZeroFractionalPart()`\n\n**Renamed/deprecated methods:**\n\n- `BigDecimal::getIntegral()` has been renamed to `getIntegralPart()` and is now deprecated\n- `BigDecimal::getFraction()` has been renamed to `getFractionalPart()` and is now deprecated\n\n## [0.7.2](https://github.com/brick/math/releases/tag/0.7.2) - 2018-07-21\n\n**Performance update**\n\n`BigInteger::parse()` and `toBase()` now use GMP's built-in base conversion features when available.\n\n## [0.7.1](https://github.com/brick/math/releases/tag/0.7.1) - 2018-03-01\n\nThis is a maintenance release, no code has been changed.\n\n- When installed with `--no-dev`, the autoloader does not autoload tests anymore\n- Tests and other files unnecessary for production are excluded from the dist package\n\nThis will help make installations more compact.\n\n## [0.7.0](https://github.com/brick/math/releases/tag/0.7.0) - 2017-10-02\n\nMethods renamed:\n\n- `BigNumber:sign()` has been renamed to `getSign()`\n- `BigDecimal::unscaledValue()` has been renamed to `getUnscaledValue()`\n- `BigDecimal::scale()` has been renamed to `getScale()`\n- `BigDecimal::integral()` has been renamed to `getIntegral()`\n- `BigDecimal::fraction()` has been renamed to `getFraction()`\n- `BigRational::numerator()` has been renamed to `getNumerator()`\n- `BigRational::denominator()` has been renamed to `getDenominator()`\n\nClasses renamed:\n\n- `ArithmeticException` has been renamed to `MathException`\n\n## [0.6.2](https://github.com/brick/math/releases/tag/0.6.2) - 2017-10-02\n\nThe base class for all exceptions is now `MathException`.\n`ArithmeticException` has been deprecated, and will be removed in 0.7.0.\n\n## [0.6.1](https://github.com/brick/math/releases/tag/0.6.1) - 2017-10-02\n\nA number of methods have been renamed:\n\n- `BigNumber:sign()` is deprecated; use `getSign()` instead\n- `BigDecimal::unscaledValue()` is deprecated; use `getUnscaledValue()` instead\n- `BigDecimal::scale()` is deprecated; use `getScale()` instead\n- `BigDecimal::integral()` is deprecated; use `getIntegral()` instead\n- `BigDecimal::fraction()` is deprecated; use `getFraction()` instead\n- `BigRational::numerator()` is deprecated; use `getNumerator()` instead\n- `BigRational::denominator()` is deprecated; use `getDenominator()` instead\n\nThe old methods will be removed in version 0.7.0.\n\n## [0.6.0](https://github.com/brick/math/releases/tag/0.6.0) - 2017-08-25\n\n- Minimum PHP version is now [7.1](https://gophp71.org/); for PHP 5.6 and PHP 7.0 support, use version `0.5`\n- Deprecated method `BigDecimal::withScale()` has been removed; use `toScale()` instead\n- Method `BigNumber::toInteger()` has been renamed to `toInt()`\n\n## [0.5.4](https://github.com/brick/math/releases/tag/0.5.4) - 2016-10-17\n\n`BigNumber` classes now implement [JsonSerializable](http://php.net/manual/en/class.jsonserializable.php).\nThe JSON output is always a string.\n\n## [0.5.3](https://github.com/brick/math/releases/tag/0.5.3) - 2016-03-31\n\nThis is a bugfix release. Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.5.2](https://github.com/brick/math/releases/tag/0.5.2) - 2015-08-06\n\nThe `$scale` parameter of `BigDecimal::dividedBy()` is now optional again.\n\n## [0.5.1](https://github.com/brick/math/releases/tag/0.5.1) - 2015-07-05\n\n**New method: `BigNumber::toScale()`**\n\nThis allows to convert any `BigNumber` to a `BigDecimal` with a given scale, using rounding if necessary.\n\n## [0.5.0](https://github.com/brick/math/releases/tag/0.5.0) - 2015-07-04\n\n**New features**\n- Common `BigNumber` interface for all classes, with the following methods:\n  - `sign()` and derived methods (`isZero()`, `isPositive()`, ...)\n  - `compareTo()` and derived methods (`isEqualTo()`, `isGreaterThan()`, ...) that work across different `BigNumber` types\n  - `toBigInteger()`, `toBigDecimal()`, `toBigRational`() conversion methods\n  - `toInteger()` and `toFloat()` conversion methods to native types\n- Unified `of()` behaviour: every class now accepts any type of number, provided that it can be safely converted to the current type\n- New method: `BigDecimal::exactlyDividedBy()`; this method automatically computes the scale of the result, provided that the division yields a finite number of digits\n- New methods: `BigRational::quotient()` and `remainder()`\n- Fine-grained exceptions: `DivisionByZeroException`, `RoundingNecessaryException`, `NumberFormatException`\n- Factory methods `zero()`, `one()` and `ten()` available in all classes\n- Rounding mode reintroduced in `BigInteger::dividedBy()`\n\nThis release also comes with many performance improvements.\n\n---\n\n**Breaking changes**\n- `BigInteger`:\n  - `getSign()` is renamed to `sign()`\n  - `toString()` is renamed to `toBase()`\n  - `BigInteger::dividedBy()` now throws an exception by default if the remainder is not zero; use `quotient()` to get the previous behaviour\n- `BigDecimal`:\n  - `getSign()` is renamed to `sign()`\n  - `getUnscaledValue()` is renamed to `unscaledValue()`\n  - `getScale()` is renamed to `scale()`\n  - `getIntegral()` is renamed to `integral()`\n  - `getFraction()` is renamed to `fraction()`\n  - `divideAndRemainder()` is renamed to `quotientAndRemainder()`\n  - `dividedBy()` now takes a **mandatory** `$scale` parameter **before** the rounding mode\n  - `toBigInteger()` does not accept a `$roundingMode` parameter anymore\n  - `toBigRational()` does not simplify the fraction anymore; explicitly add `->simplified()` to get the previous behaviour\n- `BigRational`:\n  - `getSign()` is renamed to `sign()`\n  - `getNumerator()` is renamed to  `numerator()`\n  - `getDenominator()` is renamed to  `denominator()`\n  - `of()` is renamed to `nd()`, while `parse()` is renamed to `of()`\n- Miscellaneous:\n  - `ArithmeticException` is moved to an `Exception\\` sub-namespace\n  - `of()` factory methods now throw `NumberFormatException` instead of `InvalidArgumentException`\n\n## [0.4.3](https://github.com/brick/math/releases/tag/0.4.3) - 2016-03-31\n\nBackport of two bug fixes from the 0.5 branch:\n- `BigInteger::parse()` did not always throw `InvalidArgumentException` as expected\n- Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.4.2](https://github.com/brick/math/releases/tag/0.4.2) - 2015-06-16\n\nNew method: `BigDecimal::stripTrailingZeros()`\n\n## [0.4.1](https://github.com/brick/math/releases/tag/0.4.1) - 2015-06-12\n\nIntroducing a `BigRational` class, to perform calculations on fractions of any size.\n\n## [0.4.0](https://github.com/brick/math/releases/tag/0.4.0) - 2015-06-12\n\nRounding modes have been removed from `BigInteger`, and are now a concept specific to `BigDecimal`.\n\n`BigInteger::dividedBy()` now always returns the quotient of the division.\n\n## [0.3.5](https://github.com/brick/math/releases/tag/0.3.5) - 2016-03-31\n\nBackport of two bug fixes from the 0.5 branch:\n\n- `BigInteger::parse()` did not always throw `InvalidArgumentException` as expected\n- Dividing by a negative power of 1 with the same scale as the dividend could trigger an incorrect optimization which resulted in a wrong result. See #6.\n\n## [0.3.4](https://github.com/brick/math/releases/tag/0.3.4) - 2015-06-11\n\nNew methods:\n- `BigInteger::remainder()` returns the remainder of a division only\n- `BigInteger::gcd()` returns the greatest common divisor of two numbers\n\n## [0.3.3](https://github.com/brick/math/releases/tag/0.3.3) - 2015-06-07\n\nFix `toString()` not handling negative numbers.\n\n## [0.3.2](https://github.com/brick/math/releases/tag/0.3.2) - 2015-06-07\n\n`BigInteger` and `BigDecimal` now have a `getSign()` method that returns:\n- `-1` if the number is negative\n- `0` if the number is zero\n- `1` if the number is positive\n\n## [0.3.1](https://github.com/brick/math/releases/tag/0.3.1) - 2015-06-05\n\nMinor performance improvements\n\n## [0.3.0](https://github.com/brick/math/releases/tag/0.3.0) - 2015-06-04\n\nThe `$roundingMode` and `$scale` parameters have been swapped in `BigDecimal::dividedBy()`.\n\n## [0.2.2](https://github.com/brick/math/releases/tag/0.2.2) - 2015-06-04\n\nStronger immutability guarantee for `BigInteger` and `BigDecimal`.\n\nSo far, it would have been possible to break immutability of these classes by calling the `unserialize()` internal function. This release fixes that.\n\n## [0.2.1](https://github.com/brick/math/releases/tag/0.2.1) - 2015-06-02\n\nAdded `BigDecimal::divideAndRemainder()`\n\n## [0.2.0](https://github.com/brick/math/releases/tag/0.2.0) - 2015-05-22\n\n- `min()` and `max()` do not accept an `array` anymore, but a variable number of parameters\n- **minimum PHP version is now 5.6**\n- continuous integration with PHP 7\n\n## [0.1.1](https://github.com/brick/math/releases/tag/0.1.1) - 2014-09-01\n\n- Added `BigInteger::power()`\n- Added HHVM support\n\n## [0.1.0](https://github.com/brick/math/releases/tag/0.1.0) - 2014-08-31\n\nFirst beta release.\n\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/BigNumber.php","ext":"php","size":16224,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math;\n\nuse Brick\\Math\\Exception\\DivisionByZeroException;\nuse Brick\\Math\\Exception\\MathException;\nuse Brick\\Math\\Exception\\NumberFormatException;\nuse Brick\\Math\\Exception\\RoundingNecessaryException;\nuse Override;\n\n/**\n * Common interface for arbitrary-precision rational numbers.\n *\n * @psalm-immutable\n */\nabstract class BigNumber implements \\JsonSerializable\n{\n    /**\n     * The regular expression used to parse integer or decimal numbers.\n     */\n    private const PARSE_REGEXP_NUMERICAL =\n        '/^' .\n            '(?<sign>[\\-\\+])?' .\n            '(?<integral>[0-9]+)?' .\n            '(?<point>\\.)?' .\n            '(?<fractional>[0-9]+)?' .\n            '(?:[eE](?<exponent>[\\-\\+]?[0-9]+))?' .\n        '$/';\n\n    /**\n     * The regular expression used to parse rational numbers.\n     */\n    private const PARSE_REGEXP_RATIONAL =\n        '/^' .\n            '(?<sign>[\\-\\+])?' .\n            '(?<numerator>[0-9]+)' .\n            '\\/?' .\n            '(?<denominator>[0-9]+)' .\n        '$/';\n\n    /**\n     * Creates a BigNumber of the given value.\n     *\n     * The concrete return type is dependent on the given value, with the following rules:\n     *\n     * - BigNumber instances are returned as is\n     * - integer numbers are returned as BigInteger\n     * - floating point numbers are converted to a string then parsed as such\n     * - strings containing a `/` character are returned as BigRational\n     * - strings containing a `.` character or using an exponential notation are returned as BigDecimal\n     * - strings containing only digits with an optional leading `+` or `-` sign are returned as BigInteger\n     *\n     * @throws NumberFormatException If the format of the number is not valid.\n     * @throws DivisionByZeroException If the value represents a rational number with a denominator of zero.\n     * @throws RoundingNecessaryException If the value cannot be converted to an instance of the subclass without rounding.\n     *\n     * @psalm-pure\n     */\n    final public static function of(BigNumber|int|float|string $value) : static\n    {\n        $value = self::_of($value);\n\n        if (static::class === BigNumber::class) {\n            // https://github.com/vimeo/psalm/issues/10309\n            assert($value instanceof static);\n\n            return $value;\n        }\n\n        return static::from($value);\n    }\n\n    /**\n     * @throws NumberFormatException If the format of the number is not valid.\n     * @throws DivisionByZeroException If the value represents a rational number with a denominator of zero.\n     *\n     * @psalm-pure\n     */\n    private static function _of(BigNumber|int|float|string $value) : BigNumber\n    {\n        if ($value instanceof BigNumber) {\n            return $value;\n        }\n\n        if (\\is_int($value)) {\n            return new BigInteger((string) $value);\n        }\n\n        if (is_float($value)) {\n            $value = (string) $value;\n        }\n\n        if (str_contains($value, '/')) {\n            // Rational number\n            if (\\preg_match(self::PARSE_REGEXP_RATIONAL, $value, $matches, PREG_UNMATCHED_AS_NULL) !== 1) {\n                throw NumberFormatException::invalidFormat($value);\n            }\n\n            $sign        = $matches['sign'];\n            $numerator   = $matches['numerator'];\n            $denominator = $matches['denominator'];\n\n            assert($numerator !== null);\n            assert($denominator !== null);\n\n            $numerator   = self::cleanUp($sign, $numerator);\n            $denominator = self::cleanUp(null, $denominator);\n\n            if ($denominator === '0') {\n                throw DivisionByZeroException::denominatorMustNotBeZero();\n            }\n\n            return new BigRational(\n                new BigInteger($numerator),\n                new BigInteger($denominator),\n                false\n            );\n        } else {\n            // Integer or decimal number\n            if (\\preg_match(self::PARSE_REGEXP_NUMERICAL, $value, $matches, PREG_UNMATCHED_AS_NULL) !== 1) {\n                throw NumberFormatException::invalidFormat($value);\n            }\n\n            $sign = $matches['sign'];\n            $point = $matches['point'];\n            $integral = $matches['integral'];\n            $fractional = $matches['fractional'];\n            $exponent = $matches['exponent'];\n\n            if ($integral === null && $fractional === null) {\n                throw NumberFormatException::invalidFormat($value);\n            }\n\n            if ($integral === null) {\n                $integral = '0';\n            }\n\n            if ($point !== null || $exponent !== null) {\n                $fractional = ($fractional ?? '');\n                $exponent = ($exponent !== null) ? (int)$exponent : 0;\n\n                if ($exponent === PHP_INT_MIN || $exponent === PHP_INT_MAX) {\n                    throw new NumberFormatException('Exponent too large.');\n                }\n\n                $unscaledValue = self::cleanUp($sign, $integral . $fractional);\n\n                $scale = \\strlen($fractional) - $exponent;\n\n                if ($scale < 0) {\n                    if ($unscaledValue !== '0') {\n                        $unscaledValue .= \\str_repeat('0', -$scale);\n                    }\n                    $scale = 0;\n                }\n\n                return new BigDecimal($unscaledValue, $scale);\n            }\n\n            $integral = self::cleanUp($sign, $integral);\n\n            return new BigInteger($integral);\n        }\n    }\n\n    /**\n     * Overridden by subclasses to convert a BigNumber to an instance of the subclass.\n     *\n     * @throws RoundingNecessaryException If the value cannot be converted.\n     *\n     * @psalm-pure\n     */\n    abstract protected static function from(BigNumber $number): static;\n\n    /**\n     * Proxy method to access BigInteger's protected constructor from sibling classes.\n     *\n     * @internal\n     * @psalm-pure\n     */\n    final protected function newBigInteger(string $value) : BigInteger\n    {\n        return new BigInteger($value);\n    }\n\n    /**\n     * Proxy method to access BigDecimal's protected constructor from sibling classes.\n     *\n     * @internal\n     * @psalm-pure\n     */\n    final protected function newBigDecimal(string $value, int $scale = 0) : BigDecimal\n    {\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Proxy method to access BigRational's protected constructor from sibling classes.\n     *\n     * @internal\n     * @psalm-pure\n     */\n    final protected function newBigRational(BigInteger $numerator, BigInteger $denominator, bool $checkDenominator) : BigRational\n    {\n        return new BigRational($numerator, $denominator, $checkDenominator);\n    }\n\n    /**\n     * Returns the minimum of the given values.\n     *\n     * @param BigNumber|int|float|string ...$values The numbers to compare. All the numbers need to be convertible\n     *                                              to an instance of the class this method is called on.\n     *\n     * @throws \\InvalidArgumentException If no values are given.\n     * @throws MathException             If an argument is not valid.\n     *\n     * @psalm-pure\n     */\n    final public static function min(BigNumber|int|float|string ...$values) : static\n    {\n        $min = null;\n\n        foreach ($values as $value) {\n            $value = static::of($value);\n\n            if ($min === null || $value->isLessThan($min)) {\n                $min = $value;\n            }\n        }\n\n        if ($min === null) {\n            throw new \\InvalidArgumentException(__METHOD__ . '() expects at least one value.');\n        }\n\n        return $min;\n    }\n\n    /**\n     * Returns the maximum of the given values.\n     *\n     * @param BigNumber|int|float|string ...$values The numbers to compare. All the numbers need to be convertible\n     *                                              to an instance of the class this method is called on.\n     *\n     * @throws \\InvalidArgumentException If no values are given.\n     * @throws MathException             If an argument is not valid.\n     *\n     * @psalm-pure\n     */\n    final public static function max(BigNumber|int|float|string ...$values) : static\n    {\n        $max = null;\n\n        foreach ($values as $value) {\n            $value = static::of($value);\n\n            if ($max === null || $value->isGreaterThan($max)) {\n                $max = $value;\n            }\n        }\n\n        if ($max === null) {\n            throw new \\InvalidArgumentException(__METHOD__ . '() expects at least one value.');\n        }\n\n        return $max;\n    }\n\n    /**\n     * Returns the sum of the given values.\n     *\n     * @param BigNumber|int|float|string ...$values The numbers to add. All the numbers need to be convertible\n     *                                              to an instance of the class this method is called on.\n     *\n     * @throws \\InvalidArgumentException If no values are given.\n     * @throws MathException             If an argument is not valid.\n     *\n     * @psalm-pure\n     */\n    final public static function sum(BigNumber|int|float|string ...$values) : static\n    {\n        /** @var static|null $sum */\n        $sum = null;\n\n        foreach ($values as $value) {\n            $value = static::of($value);\n\n            $sum = $sum === null ? $value : self::add($sum, $value);\n        }\n\n        if ($sum === null) {\n            throw new \\InvalidArgumentException(__METHOD__ . '() expects at least one value.');\n        }\n\n        return $sum;\n    }\n\n    /**\n     * Adds two BigNumber instances in the correct order to avoid a RoundingNecessaryException.\n     *\n     * @todo This could be better resolved by creating an abstract protected method in BigNumber, and leaving to\n     *       concrete classes the responsibility to perform the addition themselves or delegate it to the given number,\n     *       depending on their ability to perform the operation. This will also require a version bump because we're\n     *       potentially breaking custom BigNumber implementations (if any...)\n     *\n     * @psalm-pure\n     */\n    private static function add(BigNumber $a, BigNumber $b) : BigNumber\n    {\n        if ($a instanceof BigRational) {\n            return $a->plus($b);\n        }\n\n        if ($b instanceof BigRational) {\n            return $b->plus($a);\n        }\n\n        if ($a instanceof BigDecimal) {\n            return $a->plus($b);\n        }\n\n        if ($b instanceof BigDecimal) {\n            return $b->plus($a);\n        }\n\n        /** @var BigInteger $a */\n\n        return $a->plus($b);\n    }\n\n    /**\n     * Removes optional leading zeros and applies sign.\n     *\n     * @param string|null $sign   The sign, '+' or '-', optional. Null is allowed for convenience and treated as '+'.\n     * @param string      $number The number, validated as a non-empty string of digits.\n     *\n     * @psalm-pure\n     */\n    private static function cleanUp(string|null $sign, string $number) : string\n    {\n        $number = \\ltrim($number, '0');\n\n        if ($number === '') {\n            return '0';\n        }\n\n        return $sign === '-' ? '-' . $number : $number;\n    }\n\n    /**\n     * Checks if this number is equal to the given one.\n     */\n    final public function isEqualTo(BigNumber|int|float|string $that) : bool\n    {\n        return $this->compareTo($that) === 0;\n    }\n\n    /**\n     * Checks if this number is strictly lower than the given one.\n     */\n    final public function isLessThan(BigNumber|int|float|string $that) : bool\n    {\n        return $this->compareTo($that) < 0;\n    }\n\n    /**\n     * Checks if this number is lower than or equal to the given one.\n     */\n    final public function isLessThanOrEqualTo(BigNumber|int|float|string $that) : bool\n    {\n        return $this->compareTo($that) <= 0;\n    }\n\n    /**\n     * Checks if this number is strictly greater than the given one.\n     */\n    final public function isGreaterThan(BigNumber|int|float|string $that) : bool\n    {\n        return $this->compareTo($that) > 0;\n    }\n\n    /**\n     * Checks if this number is greater than or equal to the given one.\n     */\n    final public function isGreaterThanOrEqualTo(BigNumber|int|float|string $that) : bool\n    {\n        return $this->compareTo($that) >= 0;\n    }\n\n    /**\n     * Checks if this number equals zero.\n     */\n    final public function isZero() : bool\n    {\n        return $this->getSign() === 0;\n    }\n\n    /**\n     * Checks if this number is strictly negative.\n     */\n    final public function isNegative() : bool\n    {\n        return $this->getSign() < 0;\n    }\n\n    /**\n     * Checks if this number is negative or zero.\n     */\n    final public function isNegativeOrZero() : bool\n    {\n        return $this->getSign() <= 0;\n    }\n\n    /**\n     * Checks if this number is strictly positive.\n     */\n    final public function isPositive() : bool\n    {\n        return $this->getSign() > 0;\n    }\n\n    /**\n     * Checks if this number is positive or zero.\n     */\n    final public function isPositiveOrZero() : bool\n    {\n        return $this->getSign() >= 0;\n    }\n\n    /**\n     * Returns the sign of this number.\n     *\n     * @psalm-return -1|0|1\n     *\n     * @return int -1 if the number is negative, 0 if zero, 1 if positive.\n     */\n    abstract public function getSign() : int;\n\n    /**\n     * Compares this number to the given one.\n     *\n     * @psalm-return -1|0|1\n     *\n     * @return int -1 if `$this` is lower than, 0 if equal to, 1 if greater than `$that`.\n     *\n     * @throws MathException If the number is not valid.\n     */\n    abstract public function compareTo(BigNumber|int|float|string $that) : int;\n\n    /**\n     * Converts this number to a BigInteger.\n     *\n     * @throws RoundingNecessaryException If this number cannot be converted to a BigInteger without rounding.\n     */\n    abstract public function toBigInteger() : BigInteger;\n\n    /**\n     * Converts this number to a BigDecimal.\n     *\n     * @throws RoundingNecessaryException If this number cannot be converted to a BigDecimal without rounding.\n     */\n    abstract public function toBigDecimal() : BigDecimal;\n\n    /**\n     * Converts this number to a BigRational.\n     */\n    abstract public function toBigRational() : BigRational;\n\n    /**\n     * Converts this number to a BigDecimal with the given scale, using rounding if necessary.\n     *\n     * @param int          $scale        The scale of the resulting `BigDecimal`.\n     * @param RoundingMode $roundingMode An optional rounding mode, defaults to UNNECESSARY.\n     *\n     * @throws RoundingNecessaryException If this number cannot be converted to the given scale without rounding.\n     *                                    This only applies when RoundingMode::UNNECESSARY is used.\n     */\n    abstract public function toScale(int $scale, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigDecimal;\n\n    /**\n     * Returns the exact value of this number as a native integer.\n     *\n     * If this number cannot be converted to a native integer without losing precision, an exception is thrown.\n     * Note that the acceptable range for an integer depends on the platform and differs for 32-bit and 64-bit.\n     *\n     * @throws MathException If this number cannot be exactly converted to a native integer.\n     */\n    abstract public function toInt() : int;\n\n    /**\n     * Returns an approximation of this number as a floating-point value.\n     *\n     * Note that this method can discard information as the precision of a floating-point value\n     * is inherently limited.\n     *\n     * If the number is greater than the largest representable floating point number, positive infinity is returned.\n     * If the number is less than the smallest representable floating point number, negative infinity is returned.\n     */\n    abstract public function toFloat() : float;\n\n    /**\n     * Returns a string representation of this number.\n     *\n     * The output of this method can be parsed by the `of()` factory method;\n     * this will yield an object equal to this one, without any information loss.\n     */\n    abstract public function __toString() : string;\n\n    #[Override]\n    final public function jsonSerialize() : string\n    {\n        return $this->__toString();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/RoundingMode.php","ext":"php","size":3574,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math;\n\n/**\n * Specifies a rounding behavior for numerical operations capable of discarding precision.\n *\n * Each rounding mode indicates how the least significant returned digit of a rounded result\n * is to be calculated. If fewer digits are returned than the digits needed to represent the\n * exact numerical result, the discarded digits will be referred to as the discarded fraction\n * regardless the digits' contribution to the value of the number. In other words, considered\n * as a numerical value, the discarded fraction could have an absolute value greater than one.\n */\nenum RoundingMode\n{\n    /**\n     * Asserts that the requested operation has an exact result, hence no rounding is necessary.\n     *\n     * If this rounding mode is specified on an operation that yields a result that\n     * cannot be represented at the requested scale, a RoundingNecessaryException is thrown.\n     */\n    case UNNECESSARY;\n\n    /**\n     * Rounds away from zero.\n     *\n     * Always increments the digit prior to a nonzero discarded fraction.\n     * Note that this rounding mode never decreases the magnitude of the calculated value.\n     */\n    case UP;\n\n    /**\n     * Rounds towards zero.\n     *\n     * Never increments the digit prior to a discarded fraction (i.e., truncates).\n     * Note that this rounding mode never increases the magnitude of the calculated value.\n     */\n    case DOWN;\n\n    /**\n     * Rounds towards positive infinity.\n     *\n     * If the result is positive, behaves as for UP; if negative, behaves as for DOWN.\n     * Note that this rounding mode never decreases the calculated value.\n     */\n    case CEILING;\n\n    /**\n     * Rounds towards negative infinity.\n     *\n     * If the result is positive, behave as for DOWN; if negative, behave as for UP.\n     * Note that this rounding mode never increases the calculated value.\n     */\n    case FLOOR;\n\n    /**\n     * Rounds towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round up.\n     *\n     * Behaves as for UP if the discarded fraction is >= 0.5; otherwise, behaves as for DOWN.\n     * Note that this is the rounding mode commonly taught at school.\n     */\n    case HALF_UP;\n\n    /**\n     * Rounds towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round down.\n     *\n     * Behaves as for UP if the discarded fraction is > 0.5; otherwise, behaves as for DOWN.\n     */\n    case HALF_DOWN;\n\n    /**\n     * Rounds towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round towards positive infinity.\n     *\n     * If the result is positive, behaves as for HALF_UP; if negative, behaves as for HALF_DOWN.\n     */\n    case HALF_CEILING;\n\n    /**\n     * Rounds towards \"nearest neighbor\" unless both neighbors are equidistant, in which case round towards negative infinity.\n     *\n     * If the result is positive, behaves as for HALF_DOWN; if negative, behaves as for HALF_UP.\n     */\n    case HALF_FLOOR;\n\n    /**\n     * Rounds towards the \"nearest neighbor\" unless both neighbors are equidistant, in which case rounds towards the even neighbor.\n     *\n     * Behaves as for HALF_UP if the digit to the left of the discarded fraction is odd;\n     * behaves as for HALF_DOWN if it's even.\n     *\n     * Note that this is the rounding mode that statistically minimizes\n     * cumulative error when applied repeatedly over a sequence of calculations.\n     * It is sometimes known as \"Banker's rounding\", and is chiefly used in the USA.\n     */\n    case HALF_EVEN;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/BigRational.php","ext":"php","size":12002,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math;\n\nuse Brick\\Math\\Exception\\DivisionByZeroException;\nuse Brick\\Math\\Exception\\MathException;\nuse Brick\\Math\\Exception\\NumberFormatException;\nuse Brick\\Math\\Exception\\RoundingNecessaryException;\nuse Override;\n\n/**\n * An arbitrarily large rational number.\n *\n * This class is immutable.\n *\n * @psalm-immutable\n */\nfinal class BigRational extends BigNumber\n{\n    /**\n     * The numerator.\n     */\n    private readonly BigInteger $numerator;\n\n    /**\n     * The denominator. Always strictly positive.\n     */\n    private readonly BigInteger $denominator;\n\n    /**\n     * Protected constructor. Use a factory method to obtain an instance.\n     *\n     * @param BigInteger $numerator        The numerator.\n     * @param BigInteger $denominator      The denominator.\n     * @param bool       $checkDenominator Whether to check the denominator for negative and zero.\n     *\n     * @throws DivisionByZeroException If the denominator is zero.\n     */\n    protected function __construct(BigInteger $numerator, BigInteger $denominator, bool $checkDenominator)\n    {\n        if ($checkDenominator) {\n            if ($denominator->isZero()) {\n                throw DivisionByZeroException::denominatorMustNotBeZero();\n            }\n\n            if ($denominator->isNegative()) {\n                $numerator   = $numerator->negated();\n                $denominator = $denominator->negated();\n            }\n        }\n\n        $this->numerator   = $numerator;\n        $this->denominator = $denominator;\n    }\n\n    /**\n     * @psalm-pure\n     */\n    #[Override]\n    protected static function from(BigNumber $number): static\n    {\n        return $number->toBigRational();\n    }\n\n    /**\n     * Creates a BigRational out of a numerator and a denominator.\n     *\n     * If the denominator is negative, the signs of both the numerator and the denominator\n     * will be inverted to ensure that the denominator is always positive.\n     *\n     * @param BigNumber|int|float|string $numerator   The numerator. Must be convertible to a BigInteger.\n     * @param BigNumber|int|float|string $denominator The denominator. Must be convertible to a BigInteger.\n     *\n     * @throws NumberFormatException      If an argument does not represent a valid number.\n     * @throws RoundingNecessaryException If an argument represents a non-integer number.\n     * @throws DivisionByZeroException    If the denominator is zero.\n     *\n     * @psalm-pure\n     */\n    public static function nd(\n        BigNumber|int|float|string $numerator,\n        BigNumber|int|float|string $denominator,\n    ) : BigRational {\n        $numerator   = BigInteger::of($numerator);\n        $denominator = BigInteger::of($denominator);\n\n        return new BigRational($numerator, $denominator, true);\n    }\n\n    /**\n     * Returns a BigRational representing zero.\n     *\n     * @psalm-pure\n     */\n    public static function zero() : BigRational\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigRational|null $zero\n         */\n        static $zero;\n\n        if ($zero === null) {\n            $zero = new BigRational(BigInteger::zero(), BigInteger::one(), false);\n        }\n\n        return $zero;\n    }\n\n    /**\n     * Returns a BigRational representing one.\n     *\n     * @psalm-pure\n     */\n    public static function one() : BigRational\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigRational|null $one\n         */\n        static $one;\n\n        if ($one === null) {\n            $one = new BigRational(BigInteger::one(), BigInteger::one(), false);\n        }\n\n        return $one;\n    }\n\n    /**\n     * Returns a BigRational representing ten.\n     *\n     * @psalm-pure\n     */\n    public static function ten() : BigRational\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigRational|null $ten\n         */\n        static $ten;\n\n        if ($ten === null) {\n            $ten = new BigRational(BigInteger::ten(), BigInteger::one(), false);\n        }\n\n        return $ten;\n    }\n\n    public function getNumerator() : BigInteger\n    {\n        return $this->numerator;\n    }\n\n    public function getDenominator() : BigInteger\n    {\n        return $this->denominator;\n    }\n\n    /**\n     * Returns the quotient of the division of the numerator by the denominator.\n     */\n    public function quotient() : BigInteger\n    {\n        return $this->numerator->quotient($this->denominator);\n    }\n\n    /**\n     * Returns the remainder of the division of the numerator by the denominator.\n     */\n    public function remainder() : BigInteger\n    {\n        return $this->numerator->remainder($this->denominator);\n    }\n\n    /**\n     * Returns the quotient and remainder of the division of the numerator by the denominator.\n     *\n     * @return BigInteger[]\n     *\n     * @psalm-return array{BigInteger, BigInteger}\n     */\n    public function quotientAndRemainder() : array\n    {\n        return $this->numerator->quotientAndRemainder($this->denominator);\n    }\n\n    /**\n     * Returns the sum of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The number to add.\n     *\n     * @throws MathException If the number is not valid.\n     */\n    public function plus(BigNumber|int|float|string $that) : BigRational\n    {\n        $that = BigRational::of($that);\n\n        $numerator   = $this->numerator->multipliedBy($that->denominator);\n        $numerator   = $numerator->plus($that->numerator->multipliedBy($this->denominator));\n        $denominator = $this->denominator->multipliedBy($that->denominator);\n\n        return new BigRational($numerator, $denominator, false);\n    }\n\n    /**\n     * Returns the difference of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The number to subtract.\n     *\n     * @throws MathException If the number is not valid.\n     */\n    public function minus(BigNumber|int|float|string $that) : BigRational\n    {\n        $that = BigRational::of($that);\n\n        $numerator   = $this->numerator->multipliedBy($that->denominator);\n        $numerator   = $numerator->minus($that->numerator->multipliedBy($this->denominator));\n        $denominator = $this->denominator->multipliedBy($that->denominator);\n\n        return new BigRational($numerator, $denominator, false);\n    }\n\n    /**\n     * Returns the product of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The multiplier.\n     *\n     * @throws MathException If the multiplier is not a valid number.\n     */\n    public function multipliedBy(BigNumber|int|float|string $that) : BigRational\n    {\n        $that = BigRational::of($that);\n\n        $numerator   = $this->numerator->multipliedBy($that->numerator);\n        $denominator = $this->denominator->multipliedBy($that->denominator);\n\n        return new BigRational($numerator, $denominator, false);\n    }\n\n    /**\n     * Returns the result of the division of this number by the given one.\n     *\n     * @param BigNumber|int|float|string $that The divisor.\n     *\n     * @throws MathException If the divisor is not a valid number, or is zero.\n     */\n    public function dividedBy(BigNumber|int|float|string $that) : BigRational\n    {\n        $that = BigRational::of($that);\n\n        $numerator   = $this->numerator->multipliedBy($that->denominator);\n        $denominator = $this->denominator->multipliedBy($that->numerator);\n\n        return new BigRational($numerator, $denominator, true);\n    }\n\n    /**\n     * Returns this number exponentiated to the given value.\n     *\n     * @throws \\InvalidArgumentException If the exponent is not in the range 0 to 1,000,000.\n     */\n    public function power(int $exponent) : BigRational\n    {\n        if ($exponent === 0) {\n            $one = BigInteger::one();\n\n            return new BigRational($one, $one, false);\n        }\n\n        if ($exponent === 1) {\n            return $this;\n        }\n\n        return new BigRational(\n            $this->numerator->power($exponent),\n            $this->denominator->power($exponent),\n            false\n        );\n    }\n\n    /**\n     * Returns the reciprocal of this BigRational.\n     *\n     * The reciprocal has the numerator and denominator swapped.\n     *\n     * @throws DivisionByZeroException If the numerator is zero.\n     */\n    public function reciprocal() : BigRational\n    {\n        return new BigRational($this->denominator, $this->numerator, true);\n    }\n\n    /**\n     * Returns the absolute value of this BigRational.\n     */\n    public function abs() : BigRational\n    {\n        return new BigRational($this->numerator->abs(), $this->denominator, false);\n    }\n\n    /**\n     * Returns the negated value of this BigRational.\n     */\n    public function negated() : BigRational\n    {\n        return new BigRational($this->numerator->negated(), $this->denominator, false);\n    }\n\n    /**\n     * Returns the simplified value of this BigRational.\n     */\n    public function simplified() : BigRational\n    {\n        $gcd = $this->numerator->gcd($this->denominator);\n\n        $numerator = $this->numerator->quotient($gcd);\n        $denominator = $this->denominator->quotient($gcd);\n\n        return new BigRational($numerator, $denominator, false);\n    }\n\n    #[Override]\n    public function compareTo(BigNumber|int|float|string $that) : int\n    {\n        return $this->minus($that)->getSign();\n    }\n\n    #[Override]\n    public function getSign() : int\n    {\n        return $this->numerator->getSign();\n    }\n\n    #[Override]\n    public function toBigInteger() : BigInteger\n    {\n        $simplified = $this->simplified();\n\n        if (! $simplified->denominator->isEqualTo(1)) {\n            throw new RoundingNecessaryException('This rational number cannot be represented as an integer value without rounding.');\n        }\n\n        return $simplified->numerator;\n    }\n\n    #[Override]\n    public function toBigDecimal() : BigDecimal\n    {\n        return $this->numerator->toBigDecimal()->exactlyDividedBy($this->denominator);\n    }\n\n    #[Override]\n    public function toBigRational() : BigRational\n    {\n        return $this;\n    }\n\n    #[Override]\n    public function toScale(int $scale, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigDecimal\n    {\n        return $this->numerator->toBigDecimal()->dividedBy($this->denominator, $scale, $roundingMode);\n    }\n\n    #[Override]\n    public function toInt() : int\n    {\n        return $this->toBigInteger()->toInt();\n    }\n\n    #[Override]\n    public function toFloat() : float\n    {\n        $simplified = $this->simplified();\n        return $simplified->numerator->toFloat() / $simplified->denominator->toFloat();\n    }\n\n    #[Override]\n    public function __toString() : string\n    {\n        $numerator   = (string) $this->numerator;\n        $denominator = (string) $this->denominator;\n\n        if ($denominator === '1') {\n            return $numerator;\n        }\n\n        return $numerator . '/' . $denominator;\n    }\n\n    /**\n     * This method is required for serializing the object and SHOULD NOT be accessed directly.\n     *\n     * @internal\n     *\n     * @return array{numerator: BigInteger, denominator: BigInteger}\n     */\n    public function __serialize(): array\n    {\n        return ['numerator' => $this->numerator, 'denominator' => $this->denominator];\n    }\n\n    /**\n     * This method is only here to allow unserializing the object and cannot be accessed directly.\n     *\n     * @internal\n     * @psalm-suppress RedundantPropertyInitializationCheck\n     *\n     * @param array{numerator: BigInteger, denominator: BigInteger} $data\n     *\n     * @throws \\LogicException\n     */\n    public function __unserialize(array $data): void\n    {\n        if (isset($this->numerator)) {\n            throw new \\LogicException('__unserialize() is an internal function, it must not be called directly.');\n        }\n\n        $this->numerator = $data['numerator'];\n        $this->denominator = $data['denominator'];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Internal/Calculator.php","ext":"php","size":19136,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Internal;\n\nuse Brick\\Math\\Exception\\RoundingNecessaryException;\nuse Brick\\Math\\RoundingMode;\n\n/**\n * Performs basic operations on arbitrary size integers.\n *\n * Unless otherwise specified, all parameters must be validated as non-empty strings of digits,\n * without leading zero, and with an optional leading minus sign if the number is not zero.\n *\n * Any other parameter format will lead to undefined behaviour.\n * All methods must return strings respecting this format, unless specified otherwise.\n *\n * @internal\n *\n * @psalm-immutable\n */\nabstract class Calculator\n{\n    /**\n     * The maximum exponent value allowed for the pow() method.\n     */\n    public const MAX_POWER = 1_000_000;\n\n    /**\n     * The alphabet for converting from and to base 2 to 36, lowercase.\n     */\n    public const ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\n\n    /**\n     * The Calculator instance in use.\n     */\n    private static ?Calculator $instance = null;\n\n    /**\n     * Sets the Calculator instance to use.\n     *\n     * An instance is typically set only in unit tests: the autodetect is usually the best option.\n     *\n     * @param Calculator|null $calculator The calculator instance, or NULL to revert to autodetect.\n     */\n    final public static function set(?Calculator $calculator) : void\n    {\n        self::$instance = $calculator;\n    }\n\n    /**\n     * Returns the Calculator instance to use.\n     *\n     * If none has been explicitly set, the fastest available implementation will be returned.\n     *\n     * @psalm-pure\n     * @psalm-suppress ImpureStaticProperty\n     */\n    final public static function get() : Calculator\n    {\n        if (self::$instance === null) {\n            /** @psalm-suppress ImpureMethodCall */\n            self::$instance = self::detect();\n        }\n\n        return self::$instance;\n    }\n\n    /**\n     * Returns the fastest available Calculator implementation.\n     *\n     * @codeCoverageIgnore\n     */\n    private static function detect() : Calculator\n    {\n        if (\\extension_loaded('gmp')) {\n            return new Calculator\\GmpCalculator();\n        }\n\n        if (\\extension_loaded('bcmath')) {\n            return new Calculator\\BcMathCalculator();\n        }\n\n        return new Calculator\\NativeCalculator();\n    }\n\n    /**\n     * Extracts the sign & digits of the operands.\n     *\n     * @return array{bool, bool, string, string} Whether $a and $b are negative, followed by their digits.\n     */\n    final protected function init(string $a, string $b) : array\n    {\n        return [\n            $aNeg = ($a[0] === '-'),\n            $bNeg = ($b[0] === '-'),\n\n            $aNeg ? \\substr($a, 1) : $a,\n            $bNeg ? \\substr($b, 1) : $b,\n        ];\n    }\n\n    /**\n     * Returns the absolute value of a number.\n     */\n    final public function abs(string $n) : string\n    {\n        return ($n[0] === '-') ? \\substr($n, 1) : $n;\n    }\n\n    /**\n     * Negates a number.\n     */\n    final public function neg(string $n) : string\n    {\n        if ($n === '0') {\n            return '0';\n        }\n\n        if ($n[0] === '-') {\n            return \\substr($n, 1);\n        }\n\n        return '-' . $n;\n    }\n\n    /**\n     * Compares two numbers.\n     *\n     * @psalm-return -1|0|1\n     *\n     * @return int -1 if the first number is less than, 0 if equal to, 1 if greater than the second number.\n     */\n    final public function cmp(string $a, string $b) : int\n    {\n        [$aNeg, $bNeg, $aDig, $bDig] = $this->init($a, $b);\n\n        if ($aNeg && ! $bNeg) {\n            return -1;\n        }\n\n        if ($bNeg && ! $aNeg) {\n            return 1;\n        }\n\n        $aLen = \\strlen($aDig);\n        $bLen = \\strlen($bDig);\n\n        if ($aLen < $bLen) {\n            $result = -1;\n        } elseif ($aLen > $bLen) {\n            $result = 1;\n        } else {\n            $result = $aDig <=> $bDig;\n        }\n\n        return $aNeg ? -$result : $result;\n    }\n\n    /**\n     * Adds two numbers.\n     */\n    abstract public function add(string $a, string $b) : string;\n\n    /**\n     * Subtracts two numbers.\n     */\n    abstract public function sub(string $a, string $b) : string;\n\n    /**\n     * Multiplies two numbers.\n     */\n    abstract public function mul(string $a, string $b) : string;\n\n    /**\n     * Returns the quotient of the division of two numbers.\n     *\n     * @param string $a The dividend.\n     * @param string $b The divisor, must not be zero.\n     *\n     * @return string The quotient.\n     */\n    abstract public function divQ(string $a, string $b) : string;\n\n    /**\n     * Returns the remainder of the division of two numbers.\n     *\n     * @param string $a The dividend.\n     * @param string $b The divisor, must not be zero.\n     *\n     * @return string The remainder.\n     */\n    abstract public function divR(string $a, string $b) : string;\n\n    /**\n     * Returns the quotient and remainder of the division of two numbers.\n     *\n     * @param string $a The dividend.\n     * @param string $b The divisor, must not be zero.\n     *\n     * @return array{string, string} An array containing the quotient and remainder.\n     */\n    abstract public function divQR(string $a, string $b) : array;\n\n    /**\n     * Exponentiates a number.\n     *\n     * @param string $a The base number.\n     * @param int    $e The exponent, validated as an integer between 0 and MAX_POWER.\n     *\n     * @return string The power.\n     */\n    abstract public function pow(string $a, int $e) : string;\n\n    /**\n     * @param string $b The modulus; must not be zero.\n     */\n    public function mod(string $a, string $b) : string\n    {\n        return $this->divR($this->add($this->divR($a, $b), $b), $b);\n    }\n\n    /**\n     * Returns the modular multiplicative inverse of $x modulo $m.\n     *\n     * If $x has no multiplicative inverse mod m, this method must return null.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library has built-in support.\n     *\n     * @param string $m The modulus; must not be negative or zero.\n     */\n    public function modInverse(string $x, string $m) : ?string\n    {\n        if ($m === '1') {\n            return '0';\n        }\n\n        $modVal = $x;\n\n        if ($x[0] === '-' || ($this->cmp($this->abs($x), $m) >= 0)) {\n            $modVal = $this->mod($x, $m);\n        }\n\n        [$g, $x] = $this->gcdExtended($modVal, $m);\n\n        if ($g !== '1') {\n            return null;\n        }\n\n        return $this->mod($this->add($this->mod($x, $m), $m), $m);\n    }\n\n    /**\n     * Raises a number into power with modulo.\n     *\n     * @param string $base The base number; must be positive or zero.\n     * @param string $exp  The exponent; must be positive or zero.\n     * @param string $mod  The modulus; must be strictly positive.\n     */\n    abstract public function modPow(string $base, string $exp, string $mod) : string;\n\n    /**\n     * Returns the greatest common divisor of the two numbers.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for GCD calculations.\n     *\n     * @return string The GCD, always positive, or zero if both arguments are zero.\n     */\n    public function gcd(string $a, string $b) : string\n    {\n        if ($a === '0') {\n            return $this->abs($b);\n        }\n\n        if ($b === '0') {\n            return $this->abs($a);\n        }\n\n        return $this->gcd($b, $this->divR($a, $b));\n    }\n\n    /**\n     * @return array{string, string, string} GCD, X, Y\n     */\n    private function gcdExtended(string $a, string $b) : array\n    {\n        if ($a === '0') {\n            return [$b, '0', '1'];\n        }\n\n        [$gcd, $x1, $y1] = $this->gcdExtended($this->mod($b, $a), $a);\n\n        $x = $this->sub($y1, $this->mul($this->divQ($b, $a), $x1));\n        $y = $x1;\n\n        return [$gcd, $x, $y];\n    }\n\n    /**\n     * Returns the square root of the given number, rounded down.\n     *\n     * The result is the largest x such that x² ≤ n.\n     * The input MUST NOT be negative.\n     */\n    abstract public function sqrt(string $n) : string;\n\n    /**\n     * Converts a number from an arbitrary base.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for base conversion.\n     *\n     * @param string $number The number, positive or zero, non-empty, case-insensitively validated for the given base.\n     * @param int    $base   The base of the number, validated from 2 to 36.\n     *\n     * @return string The converted number, following the Calculator conventions.\n     */\n    public function fromBase(string $number, int $base) : string\n    {\n        return $this->fromArbitraryBase(\\strtolower($number), self::ALPHABET, $base);\n    }\n\n    /**\n     * Converts a number to an arbitrary base.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for base conversion.\n     *\n     * @param string $number The number to convert, following the Calculator conventions.\n     * @param int    $base   The base to convert to, validated from 2 to 36.\n     *\n     * @return string The converted number, lowercase.\n     */\n    public function toBase(string $number, int $base) : string\n    {\n        $negative = ($number[0] === '-');\n\n        if ($negative) {\n            $number = \\substr($number, 1);\n        }\n\n        $number = $this->toArbitraryBase($number, self::ALPHABET, $base);\n\n        if ($negative) {\n            return '-' . $number;\n        }\n\n        return $number;\n    }\n\n    /**\n     * Converts a non-negative number in an arbitrary base using a custom alphabet, to base 10.\n     *\n     * @param string $number   The number to convert, validated as a non-empty string,\n     *                         containing only chars in the given alphabet/base.\n     * @param string $alphabet The alphabet that contains every digit, validated as 2 chars minimum.\n     * @param int    $base     The base of the number, validated from 2 to alphabet length.\n     *\n     * @return string The number in base 10, following the Calculator conventions.\n     */\n    final public function fromArbitraryBase(string $number, string $alphabet, int $base) : string\n    {\n        // remove leading \"zeros\"\n        $number = \\ltrim($number, $alphabet[0]);\n\n        if ($number === '') {\n            return '0';\n        }\n\n        // optimize for \"one\"\n        if ($number === $alphabet[1]) {\n            return '1';\n        }\n\n        $result = '0';\n        $power = '1';\n\n        $base = (string) $base;\n\n        for ($i = \\strlen($number) - 1; $i >= 0; $i--) {\n            $index = \\strpos($alphabet, $number[$i]);\n\n            if ($index !== 0) {\n                $result = $this->add($result, ($index === 1)\n                    ? $power\n                    : $this->mul($power, (string) $index)\n                );\n            }\n\n            if ($i !== 0) {\n                $power = $this->mul($power, $base);\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Converts a non-negative number to an arbitrary base using a custom alphabet.\n     *\n     * @param string $number   The number to convert, positive or zero, following the Calculator conventions.\n     * @param string $alphabet The alphabet that contains every digit, validated as 2 chars minimum.\n     * @param int    $base     The base to convert to, validated from 2 to alphabet length.\n     *\n     * @return string The converted number in the given alphabet.\n     */\n    final public function toArbitraryBase(string $number, string $alphabet, int $base) : string\n    {\n        if ($number === '0') {\n            return $alphabet[0];\n        }\n\n        $base = (string) $base;\n        $result = '';\n\n        while ($number !== '0') {\n            [$number, $remainder] = $this->divQR($number, $base);\n            $remainder = (int) $remainder;\n\n            $result .= $alphabet[$remainder];\n        }\n\n        return \\strrev($result);\n    }\n\n    /**\n     * Performs a rounded division.\n     *\n     * Rounding is performed when the remainder of the division is not zero.\n     *\n     * @param string       $a            The dividend.\n     * @param string       $b            The divisor, must not be zero.\n     * @param RoundingMode $roundingMode The rounding mode.\n     *\n     * @throws \\InvalidArgumentException  If the rounding mode is invalid.\n     * @throws RoundingNecessaryException If RoundingMode::UNNECESSARY is provided but rounding is necessary.\n     *\n     * @psalm-suppress ImpureFunctionCall\n     */\n    final public function divRound(string $a, string $b, RoundingMode $roundingMode) : string\n    {\n        [$quotient, $remainder] = $this->divQR($a, $b);\n\n        $hasDiscardedFraction = ($remainder !== '0');\n        $isPositiveOrZero = ($a[0] === '-') === ($b[0] === '-');\n\n        $discardedFractionSign = function() use ($remainder, $b) : int {\n            $r = $this->abs($this->mul($remainder, '2'));\n            $b = $this->abs($b);\n\n            return $this->cmp($r, $b);\n        };\n\n        $increment = false;\n\n        switch ($roundingMode) {\n            case RoundingMode::UNNECESSARY:\n                if ($hasDiscardedFraction) {\n                    throw RoundingNecessaryException::roundingNecessary();\n                }\n                break;\n\n            case RoundingMode::UP:\n                $increment = $hasDiscardedFraction;\n                break;\n\n            case RoundingMode::DOWN:\n                break;\n\n            case RoundingMode::CEILING:\n                $increment = $hasDiscardedFraction && $isPositiveOrZero;\n                break;\n\n            case RoundingMode::FLOOR:\n                $increment = $hasDiscardedFraction && ! $isPositiveOrZero;\n                break;\n\n            case RoundingMode::HALF_UP:\n                $increment = $discardedFractionSign() >= 0;\n                break;\n\n            case RoundingMode::HALF_DOWN:\n                $increment = $discardedFractionSign() > 0;\n                break;\n\n            case RoundingMode::HALF_CEILING:\n                $increment = $isPositiveOrZero ? $discardedFractionSign() >= 0 : $discardedFractionSign() > 0;\n                break;\n\n            case RoundingMode::HALF_FLOOR:\n                $increment = $isPositiveOrZero ? $discardedFractionSign() > 0 : $discardedFractionSign() >= 0;\n                break;\n\n            case RoundingMode::HALF_EVEN:\n                $lastDigit = (int) $quotient[-1];\n                $lastDigitIsEven = ($lastDigit % 2 === 0);\n                $increment = $lastDigitIsEven ? $discardedFractionSign() > 0 : $discardedFractionSign() >= 0;\n                break;\n\n            default:\n                throw new \\InvalidArgumentException('Invalid rounding mode.');\n        }\n\n        if ($increment) {\n            return $this->add($quotient, $isPositiveOrZero ? '1' : '-1');\n        }\n\n        return $quotient;\n    }\n\n    /**\n     * Calculates bitwise AND of two numbers.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for bitwise operations.\n     */\n    public function and(string $a, string $b) : string\n    {\n        return $this->bitwise('and', $a, $b);\n    }\n\n    /**\n     * Calculates bitwise OR of two numbers.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for bitwise operations.\n     */\n    public function or(string $a, string $b) : string\n    {\n        return $this->bitwise('or', $a, $b);\n    }\n\n    /**\n     * Calculates bitwise XOR of two numbers.\n     *\n     * This method can be overridden by the concrete implementation if the underlying library\n     * has built-in support for bitwise operations.\n     */\n    public function xor(string $a, string $b) : string\n    {\n        return $this->bitwise('xor', $a, $b);\n    }\n\n    /**\n     * Performs a bitwise operation on a decimal number.\n     *\n     * @param 'and'|'or'|'xor' $operator The operator to use.\n     * @param string           $a        The left operand.\n     * @param string           $b        The right operand.\n     */\n    private function bitwise(string $operator, string $a, string $b) : string\n    {\n        [$aNeg, $bNeg, $aDig, $bDig] = $this->init($a, $b);\n\n        $aBin = $this->toBinary($aDig);\n        $bBin = $this->toBinary($bDig);\n\n        $aLen = \\strlen($aBin);\n        $bLen = \\strlen($bBin);\n\n        if ($aLen > $bLen) {\n            $bBin = \\str_repeat(\"\\x00\", $aLen - $bLen) . $bBin;\n        } elseif ($bLen > $aLen) {\n            $aBin = \\str_repeat(\"\\x00\", $bLen - $aLen) . $aBin;\n        }\n\n        if ($aNeg) {\n            $aBin = $this->twosComplement($aBin);\n        }\n        if ($bNeg) {\n            $bBin = $this->twosComplement($bBin);\n        }\n\n        $value = match ($operator) {\n            'and' => $aBin & $bBin,\n            'or' => $aBin | $bBin,\n            'xor' => $aBin ^ $bBin,\n        };\n\n        $negative = match ($operator) {\n            'and' => $aNeg and $bNeg,\n            'or' => $aNeg or $bNeg,\n            'xor' => $aNeg xor $bNeg,\n        };\n\n        if ($negative) {\n            $value = $this->twosComplement($value);\n        }\n\n        $result = $this->toDecimal($value);\n\n        return $negative ? $this->neg($result) : $result;\n    }\n\n    /**\n     * @param string $number A positive, binary number.\n     */\n    private function twosComplement(string $number) : string\n    {\n        $xor = \\str_repeat(\"\\xff\", \\strlen($number));\n\n        $number ^= $xor;\n\n        for ($i = \\strlen($number) - 1; $i >= 0; $i--) {\n            $byte = \\ord($number[$i]);\n\n            if (++$byte !== 256) {\n                $number[$i] = \\chr($byte);\n                break;\n            }\n\n            $number[$i] = \"\\x00\";\n\n            if ($i === 0) {\n                $number = \"\\x01\" . $number;\n            }\n        }\n\n        return $number;\n    }\n\n    /**\n     * Converts a decimal number to a binary string.\n     *\n     * @param string $number The number to convert, positive or zero, only digits.\n     */\n    private function toBinary(string $number) : string\n    {\n        $result = '';\n\n        while ($number !== '0') {\n            [$number, $remainder] = $this->divQR($number, '256');\n            $result .= \\chr((int) $remainder);\n        }\n\n        return \\strrev($result);\n    }\n\n    /**\n     * Returns the positive decimal representation of a binary number.\n     *\n     * @param string $bytes The bytes representing the number.\n     */\n    private function toDecimal(string $bytes) : string\n    {\n        $result = '0';\n        $power = '1';\n\n        for ($i = \\strlen($bytes) - 1; $i >= 0; $i--) {\n            $index = \\ord($bytes[$i]);\n\n            if ($index !== 0) {\n                $result = $this->add($result, ($index === 1)\n                    ? $power\n                    : $this->mul($power, (string) $index)\n                );\n            }\n\n            if ($i !== 0) {\n                $power = $this->mul($power, '256');\n            }\n        }\n\n        return $result;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Internal/Calculator/BcMathCalculator.php","ext":"php","size":1430,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Internal\\Calculator;\n\nuse Brick\\Math\\Internal\\Calculator;\nuse Override;\n\n/**\n * Calculator implementation built around the bcmath library.\n *\n * @internal\n *\n * @psalm-immutable\n */\nclass BcMathCalculator extends Calculator\n{\n    #[Override]\n    public function add(string $a, string $b) : string\n    {\n        return \\bcadd($a, $b, 0);\n    }\n\n    #[Override]\n    public function sub(string $a, string $b) : string\n    {\n        return \\bcsub($a, $b, 0);\n    }\n\n    #[Override]\n    public function mul(string $a, string $b) : string\n    {\n        return \\bcmul($a, $b, 0);\n    }\n\n    #[Override]\n    public function divQ(string $a, string $b) : string\n    {\n        return \\bcdiv($a, $b, 0);\n    }\n\n    #[Override]\n    public function divR(string $a, string $b) : string\n    {\n        return \\bcmod($a, $b, 0);\n    }\n\n    #[Override]\n    public function divQR(string $a, string $b) : array\n    {\n        $q = \\bcdiv($a, $b, 0);\n        $r = \\bcmod($a, $b, 0);\n\n        return [$q, $r];\n    }\n\n    #[Override]\n    public function pow(string $a, int $e) : string\n    {\n        return \\bcpow($a, (string) $e, 0);\n    }\n\n    #[Override]\n    public function modPow(string $base, string $exp, string $mod) : string\n    {\n        return \\bcpowmod($base, $exp, $mod, 0);\n    }\n\n    #[Override]\n    public function sqrt(string $n) : string\n    {\n        return \\bcsqrt($n, 0);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Internal/Calculator/NativeCalculator.php","ext":"php","size":14311,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Internal\\Calculator;\n\nuse Brick\\Math\\Internal\\Calculator;\nuse Override;\n\n/**\n * Calculator implementation using only native PHP code.\n *\n * @internal\n *\n * @psalm-immutable\n */\nclass NativeCalculator extends Calculator\n{\n    /**\n     * The max number of digits the platform can natively add, subtract, multiply or divide without overflow.\n     * For multiplication, this represents the max sum of the lengths of both operands.\n     *\n     * In addition, it is assumed that an extra digit can hold a carry (1) without overflowing.\n     * Example: 32-bit: max number 1,999,999,999 (9 digits + carry)\n     *          64-bit: max number 1,999,999,999,999,999,999 (18 digits + carry)\n     */\n    private readonly int $maxDigits;\n\n    /**\n     * @codeCoverageIgnore\n     */\n    public function __construct()\n    {\n        $this->maxDigits = match (PHP_INT_SIZE) {\n            4 => 9,\n            8 => 18,\n            default => throw new \\RuntimeException('The platform is not 32-bit or 64-bit as expected.')\n        };\n    }\n\n    #[Override]\n    public function add(string $a, string $b) : string\n    {\n        /**\n         * @psalm-var numeric-string $a\n         * @psalm-var numeric-string $b\n         */\n        $result = $a + $b;\n\n        if (is_int($result)) {\n            return (string) $result;\n        }\n\n        if ($a === '0') {\n            return $b;\n        }\n\n        if ($b === '0') {\n            return $a;\n        }\n\n        [$aNeg, $bNeg, $aDig, $bDig] = $this->init($a, $b);\n\n        $result = $aNeg === $bNeg ? $this->doAdd($aDig, $bDig) : $this->doSub($aDig, $bDig);\n\n        if ($aNeg) {\n            $result = $this->neg($result);\n        }\n\n        return $result;\n    }\n\n    #[Override]\n    public function sub(string $a, string $b) : string\n    {\n        return $this->add($a, $this->neg($b));\n    }\n\n    #[Override]\n    public function mul(string $a, string $b) : string\n    {\n        /**\n         * @psalm-var numeric-string $a\n         * @psalm-var numeric-string $b\n         */\n        $result = $a * $b;\n\n        if (is_int($result)) {\n            return (string) $result;\n        }\n\n        if ($a === '0' || $b === '0') {\n            return '0';\n        }\n\n        if ($a === '1') {\n            return $b;\n        }\n\n        if ($b === '1') {\n            return $a;\n        }\n\n        if ($a === '-1') {\n            return $this->neg($b);\n        }\n\n        if ($b === '-1') {\n            return $this->neg($a);\n        }\n\n        [$aNeg, $bNeg, $aDig, $bDig] = $this->init($a, $b);\n\n        $result = $this->doMul($aDig, $bDig);\n\n        if ($aNeg !== $bNeg) {\n            $result = $this->neg($result);\n        }\n\n        return $result;\n    }\n\n    #[Override]\n    public function divQ(string $a, string $b) : string\n    {\n        return $this->divQR($a, $b)[0];\n    }\n\n    #[Override]\n    public function divR(string $a, string $b): string\n    {\n        return $this->divQR($a, $b)[1];\n    }\n\n    #[Override]\n    public function divQR(string $a, string $b) : array\n    {\n        if ($a === '0') {\n            return ['0', '0'];\n        }\n\n        if ($a === $b) {\n            return ['1', '0'];\n        }\n\n        if ($b === '1') {\n            return [$a, '0'];\n        }\n\n        if ($b === '-1') {\n            return [$this->neg($a), '0'];\n        }\n\n        /** @psalm-var numeric-string $a */\n        $na = $a * 1; // cast to number\n\n        if (is_int($na)) {\n            /** @psalm-var numeric-string $b */\n            $nb = $b * 1;\n\n            if (is_int($nb)) {\n                // the only division that may overflow is PHP_INT_MIN / -1,\n                // which cannot happen here as we've already handled a divisor of -1 above.\n                $q = intdiv($na, $nb);\n                $r = $na % $nb;\n\n                return [\n                    (string) $q,\n                    (string) $r\n                ];\n            }\n        }\n\n        [$aNeg, $bNeg, $aDig, $bDig] = $this->init($a, $b);\n\n        [$q, $r] = $this->doDiv($aDig, $bDig);\n\n        if ($aNeg !== $bNeg) {\n            $q = $this->neg($q);\n        }\n\n        if ($aNeg) {\n            $r = $this->neg($r);\n        }\n\n        return [$q, $r];\n    }\n\n    #[Override]\n    public function pow(string $a, int $e) : string\n    {\n        if ($e === 0) {\n            return '1';\n        }\n\n        if ($e === 1) {\n            return $a;\n        }\n\n        $odd = $e % 2;\n        $e -= $odd;\n\n        $aa = $this->mul($a, $a);\n\n        /** @psalm-suppress PossiblyInvalidArgument We're sure that $e / 2 is an int now */\n        $result = $this->pow($aa, $e / 2);\n\n        if ($odd === 1) {\n            $result = $this->mul($result, $a);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Algorithm from: https://www.geeksforgeeks.org/modular-exponentiation-power-in-modular-arithmetic/\n     */\n    #[Override]\n    public function modPow(string $base, string $exp, string $mod) : string\n    {\n        // special case: the algorithm below fails with 0 power 0 mod 1 (returns 1 instead of 0)\n        if ($base === '0' && $exp === '0' && $mod === '1') {\n            return '0';\n        }\n\n        // special case: the algorithm below fails with power 0 mod 1 (returns 1 instead of 0)\n        if ($exp === '0' && $mod === '1') {\n            return '0';\n        }\n\n        $x = $base;\n\n        $res = '1';\n\n        // numbers are positive, so we can use remainder instead of modulo\n        $x = $this->divR($x, $mod);\n\n        while ($exp !== '0') {\n            if (in_array($exp[-1], ['1', '3', '5', '7', '9'])) { // odd\n                $res = $this->divR($this->mul($res, $x), $mod);\n            }\n\n            $exp = $this->divQ($exp, '2');\n            $x = $this->divR($this->mul($x, $x), $mod);\n        }\n\n        return $res;\n    }\n\n    /**\n     * Adapted from https://cp-algorithms.com/num_methods/roots_newton.html\n     */\n    #[Override]\n    public function sqrt(string $n) : string\n    {\n        if ($n === '0') {\n            return '0';\n        }\n\n        // initial approximation\n        $x = \\str_repeat('9', \\intdiv(\\strlen($n), 2) ?: 1);\n\n        $decreased = false;\n\n        for (;;) {\n            $nx = $this->divQ($this->add($x, $this->divQ($n, $x)), '2');\n\n            if ($x === $nx || $this->cmp($nx, $x) > 0 && $decreased) {\n                break;\n            }\n\n            $decreased = $this->cmp($nx, $x) < 0;\n            $x = $nx;\n        }\n\n        return $x;\n    }\n\n    /**\n     * Performs the addition of two non-signed large integers.\n     */\n    private function doAdd(string $a, string $b) : string\n    {\n        [$a, $b, $length] = $this->pad($a, $b);\n\n        $carry = 0;\n        $result = '';\n\n        for ($i = $length - $this->maxDigits;; $i -= $this->maxDigits) {\n            $blockLength = $this->maxDigits;\n\n            if ($i < 0) {\n                $blockLength += $i;\n                /** @psalm-suppress LoopInvalidation */\n                $i = 0;\n            }\n\n            /** @psalm-var numeric-string $blockA */\n            $blockA = \\substr($a, $i, $blockLength);\n\n            /** @psalm-var numeric-string $blockB */\n            $blockB = \\substr($b, $i, $blockLength);\n\n            $sum = (string) ($blockA + $blockB + $carry);\n            $sumLength = \\strlen($sum);\n\n            if ($sumLength > $blockLength) {\n                $sum = \\substr($sum, 1);\n                $carry = 1;\n            } else {\n                if ($sumLength < $blockLength) {\n                    $sum = \\str_repeat('0', $blockLength - $sumLength) . $sum;\n                }\n                $carry = 0;\n            }\n\n            $result = $sum . $result;\n\n            if ($i === 0) {\n                break;\n            }\n        }\n\n        if ($carry === 1) {\n            $result = '1' . $result;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Performs the subtraction of two non-signed large integers.\n     */\n    private function doSub(string $a, string $b) : string\n    {\n        if ($a === $b) {\n            return '0';\n        }\n\n        // Ensure that we always subtract to a positive result: biggest minus smallest.\n        $cmp = $this->doCmp($a, $b);\n\n        $invert = ($cmp === -1);\n\n        if ($invert) {\n            $c = $a;\n            $a = $b;\n            $b = $c;\n        }\n\n        [$a, $b, $length] = $this->pad($a, $b);\n\n        $carry = 0;\n        $result = '';\n\n        $complement = 10 ** $this->maxDigits;\n\n        for ($i = $length - $this->maxDigits;; $i -= $this->maxDigits) {\n            $blockLength = $this->maxDigits;\n\n            if ($i < 0) {\n                $blockLength += $i;\n                /** @psalm-suppress LoopInvalidation */\n                $i = 0;\n            }\n\n            /** @psalm-var numeric-string $blockA */\n            $blockA = \\substr($a, $i, $blockLength);\n\n            /** @psalm-var numeric-string $blockB */\n            $blockB = \\substr($b, $i, $blockLength);\n\n            $sum = $blockA - $blockB - $carry;\n\n            if ($sum < 0) {\n                $sum += $complement;\n                $carry = 1;\n            } else {\n                $carry = 0;\n            }\n\n            $sum = (string) $sum;\n            $sumLength = \\strlen($sum);\n\n            if ($sumLength < $blockLength) {\n                $sum = \\str_repeat('0', $blockLength - $sumLength) . $sum;\n            }\n\n            $result = $sum . $result;\n\n            if ($i === 0) {\n                break;\n            }\n        }\n\n        // Carry cannot be 1 when the loop ends, as a > b\n        assert($carry === 0);\n\n        $result = \\ltrim($result, '0');\n\n        if ($invert) {\n            $result = $this->neg($result);\n        }\n\n        return $result;\n    }\n\n    /**\n     * Performs the multiplication of two non-signed large integers.\n     */\n    private function doMul(string $a, string $b) : string\n    {\n        $x = \\strlen($a);\n        $y = \\strlen($b);\n\n        $maxDigits = \\intdiv($this->maxDigits, 2);\n        $complement = 10 ** $maxDigits;\n\n        $result = '0';\n\n        for ($i = $x - $maxDigits;; $i -= $maxDigits) {\n            $blockALength = $maxDigits;\n\n            if ($i < 0) {\n                $blockALength += $i;\n                /** @psalm-suppress LoopInvalidation */\n                $i = 0;\n            }\n\n            $blockA = (int) \\substr($a, $i, $blockALength);\n\n            $line = '';\n            $carry = 0;\n\n            for ($j = $y - $maxDigits;; $j -= $maxDigits) {\n                $blockBLength = $maxDigits;\n\n                if ($j < 0) {\n                    $blockBLength += $j;\n                    /** @psalm-suppress LoopInvalidation */\n                    $j = 0;\n                }\n\n                $blockB = (int) \\substr($b, $j, $blockBLength);\n\n                $mul = $blockA * $blockB + $carry;\n                $value = $mul % $complement;\n                $carry = ($mul - $value) / $complement;\n\n                $value = (string) $value;\n                $value = \\str_pad($value, $maxDigits, '0', STR_PAD_LEFT);\n\n                $line = $value . $line;\n\n                if ($j === 0) {\n                    break;\n                }\n            }\n\n            if ($carry !== 0) {\n                $line = $carry . $line;\n            }\n\n            $line = \\ltrim($line, '0');\n\n            if ($line !== '') {\n                $line .= \\str_repeat('0', $x - $blockALength - $i);\n                $result = $this->add($result, $line);\n            }\n\n            if ($i === 0) {\n                break;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Performs the division of two non-signed large integers.\n     *\n     * @return string[] The quotient and remainder.\n     */\n    private function doDiv(string $a, string $b) : array\n    {\n        $cmp = $this->doCmp($a, $b);\n\n        if ($cmp === -1) {\n            return ['0', $a];\n        }\n\n        $x = \\strlen($a);\n        $y = \\strlen($b);\n\n        // we now know that a >= b && x >= y\n\n        $q = '0'; // quotient\n        $r = $a; // remainder\n        $z = $y; // focus length, always $y or $y+1\n\n        /** @psalm-var numeric-string $b */\n        $nb = $b * 1; // cast to number\n        // performance optimization in cases where the remainder will never cause int overflow\n        if (is_int(($nb - 1) * 10 + 9)) {\n            $r = (int) \\substr($a, 0, $z - 1);\n\n            for ($i = $z - 1; $i < $x; $i++) {\n                $n = $r * 10 + (int) $a[$i];\n                /** @psalm-var int $nb */\n                $q .= \\intdiv($n, $nb);\n                $r = $n % $nb;\n            }\n\n            return [\\ltrim($q, '0') ?: '0', (string) $r];\n        }\n\n        for (;;) {\n            $focus = \\substr($a, 0, $z);\n\n            $cmp = $this->doCmp($focus, $b);\n\n            if ($cmp === -1) {\n                if ($z === $x) { // remainder < dividend\n                    break;\n                }\n\n                $z++;\n            }\n\n            $zeros = \\str_repeat('0', $x - $z);\n\n            $q = $this->add($q, '1' . $zeros);\n            $a = $this->sub($a, $b . $zeros);\n\n            $r = $a;\n\n            if ($r === '0') { // remainder == 0\n                break;\n            }\n\n            $x = \\strlen($a);\n\n            if ($x < $y) { // remainder < dividend\n                break;\n            }\n\n            $z = $y;\n        }\n\n        return [$q, $r];\n    }\n\n    /**\n     * Compares two non-signed large numbers.\n     *\n     * @psalm-return -1|0|1\n     */\n    private function doCmp(string $a, string $b) : int\n    {\n        $x = \\strlen($a);\n        $y = \\strlen($b);\n\n        $cmp = $x <=> $y;\n\n        if ($cmp !== 0) {\n            return $cmp;\n        }\n\n        return \\strcmp($a, $b) <=> 0; // enforce -1|0|1\n    }\n\n    /**\n     * Pads the left of one of the given numbers with zeros if necessary to make both numbers the same length.\n     *\n     * The numbers must only consist of digits, without leading minus sign.\n     *\n     * @return array{string, string, int}\n     */\n    private function pad(string $a, string $b) : array\n    {\n        $x = \\strlen($a);\n        $y = \\strlen($b);\n\n        if ($x > $y) {\n            $b = \\str_repeat('0', $x - $y) . $b;\n\n            return [$a, $b, $x];\n        }\n\n        if ($x < $y) {\n            $a = \\str_repeat('0', $y - $x) . $a;\n\n            return [$a, $b, $y];\n        }\n\n        return [$a, $b, $x];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Internal/Calculator/GmpCalculator.php","ext":"php","size":2590,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Internal\\Calculator;\n\nuse Brick\\Math\\Internal\\Calculator;\nuse Override;\n\n/**\n * Calculator implementation built around the GMP library.\n *\n * @internal\n *\n * @psalm-immutable\n */\nclass GmpCalculator extends Calculator\n{\n    #[Override]\n    public function add(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_add($a, $b));\n    }\n\n    #[Override]\n    public function sub(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_sub($a, $b));\n    }\n\n    #[Override]\n    public function mul(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_mul($a, $b));\n    }\n\n    #[Override]\n    public function divQ(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_div_q($a, $b));\n    }\n\n    #[Override]\n    public function divR(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_div_r($a, $b));\n    }\n\n    #[Override]\n    public function divQR(string $a, string $b) : array\n    {\n        [$q, $r] = \\gmp_div_qr($a, $b);\n\n        return [\n            \\gmp_strval($q),\n            \\gmp_strval($r)\n        ];\n    }\n\n    #[Override]\n    public function pow(string $a, int $e) : string\n    {\n        return \\gmp_strval(\\gmp_pow($a, $e));\n    }\n\n    #[Override]\n    public function modInverse(string $x, string $m) : ?string\n    {\n        $result = \\gmp_invert($x, $m);\n\n        if ($result === false) {\n            return null;\n        }\n\n        return \\gmp_strval($result);\n    }\n\n    #[Override]\n    public function modPow(string $base, string $exp, string $mod) : string\n    {\n        return \\gmp_strval(\\gmp_powm($base, $exp, $mod));\n    }\n\n    #[Override]\n    public function gcd(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_gcd($a, $b));\n    }\n\n    #[Override]\n    public function fromBase(string $number, int $base) : string\n    {\n        return \\gmp_strval(\\gmp_init($number, $base));\n    }\n\n    #[Override]\n    public function toBase(string $number, int $base) : string\n    {\n        return \\gmp_strval($number, $base);\n    }\n\n    #[Override]\n    public function and(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_and($a, $b));\n    }\n\n    #[Override]\n    public function or(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_or($a, $b));\n    }\n\n    #[Override]\n    public function xor(string $a, string $b) : string\n    {\n        return \\gmp_strval(\\gmp_xor($a, $b));\n    }\n\n    #[Override]\n    public function sqrt(string $n) : string\n    {\n        return \\gmp_strval(\\gmp_sqrt($n));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/BigDecimal.php","ext":"php","size":22508,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math;\n\nuse Brick\\Math\\Exception\\DivisionByZeroException;\nuse Brick\\Math\\Exception\\MathException;\nuse Brick\\Math\\Exception\\NegativeNumberException;\nuse Brick\\Math\\Internal\\Calculator;\nuse Override;\n\n/**\n * Immutable, arbitrary-precision signed decimal numbers.\n *\n * @psalm-immutable\n */\nfinal class BigDecimal extends BigNumber\n{\n    /**\n     * The unscaled value of this decimal number.\n     *\n     * This is a string of digits with an optional leading minus sign.\n     * No leading zero must be present.\n     * No leading minus sign must be present if the value is 0.\n     */\n    private readonly string $value;\n\n    /**\n     * The scale (number of digits after the decimal point) of this decimal number.\n     *\n     * This must be zero or more.\n     */\n    private readonly int $scale;\n\n    /**\n     * Protected constructor. Use a factory method to obtain an instance.\n     *\n     * @param string $value The unscaled value, validated.\n     * @param int    $scale The scale, validated.\n     */\n    protected function __construct(string $value, int $scale = 0)\n    {\n        $this->value = $value;\n        $this->scale = $scale;\n    }\n\n    /**\n     * @psalm-pure\n     */\n    #[Override]\n    protected static function from(BigNumber $number): static\n    {\n        return $number->toBigDecimal();\n    }\n\n    /**\n     * Creates a BigDecimal from an unscaled value and a scale.\n     *\n     * Example: `(12345, 3)` will result in the BigDecimal `12.345`.\n     *\n     * @param BigNumber|int|float|string $value The unscaled value. Must be convertible to a BigInteger.\n     * @param int                        $scale The scale of the number. If negative, the scale will be set to zero\n     *                                          and the unscaled value will be adjusted accordingly.\n     *\n     * @psalm-pure\n     */\n    public static function ofUnscaledValue(BigNumber|int|float|string $value, int $scale = 0) : BigDecimal\n    {\n        $value = (string) BigInteger::of($value);\n\n        if ($scale < 0) {\n            if ($value !== '0') {\n                $value .= \\str_repeat('0', -$scale);\n            }\n            $scale = 0;\n        }\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns a BigDecimal representing zero, with a scale of zero.\n     *\n     * @psalm-pure\n     */\n    public static function zero() : BigDecimal\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigDecimal|null $zero\n         */\n        static $zero;\n\n        if ($zero === null) {\n            $zero = new BigDecimal('0');\n        }\n\n        return $zero;\n    }\n\n    /**\n     * Returns a BigDecimal representing one, with a scale of zero.\n     *\n     * @psalm-pure\n     */\n    public static function one() : BigDecimal\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigDecimal|null $one\n         */\n        static $one;\n\n        if ($one === null) {\n            $one = new BigDecimal('1');\n        }\n\n        return $one;\n    }\n\n    /**\n     * Returns a BigDecimal representing ten, with a scale of zero.\n     *\n     * @psalm-pure\n     */\n    public static function ten() : BigDecimal\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigDecimal|null $ten\n         */\n        static $ten;\n\n        if ($ten === null) {\n            $ten = new BigDecimal('10');\n        }\n\n        return $ten;\n    }\n\n    /**\n     * Returns the sum of this number and the given one.\n     *\n     * The result has a scale of `max($this->scale, $that->scale)`.\n     *\n     * @param BigNumber|int|float|string $that The number to add. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the number is not valid, or is not convertible to a BigDecimal.\n     */\n    public function plus(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->value === '0' && $that->scale <= $this->scale) {\n            return $this;\n        }\n\n        if ($this->value === '0' && $this->scale <= $that->scale) {\n            return $that;\n        }\n\n        [$a, $b] = $this->scaleValues($this, $that);\n\n        $value = Calculator::get()->add($a, $b);\n        $scale = $this->scale > $that->scale ? $this->scale : $that->scale;\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns the difference of this number and the given one.\n     *\n     * The result has a scale of `max($this->scale, $that->scale)`.\n     *\n     * @param BigNumber|int|float|string $that The number to subtract. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the number is not valid, or is not convertible to a BigDecimal.\n     */\n    public function minus(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->value === '0' && $that->scale <= $this->scale) {\n            return $this;\n        }\n\n        [$a, $b] = $this->scaleValues($this, $that);\n\n        $value = Calculator::get()->sub($a, $b);\n        $scale = $this->scale > $that->scale ? $this->scale : $that->scale;\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns the product of this number and the given one.\n     *\n     * The result has a scale of `$this->scale + $that->scale`.\n     *\n     * @param BigNumber|int|float|string $that The multiplier. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the multiplier is not a valid number, or is not convertible to a BigDecimal.\n     */\n    public function multipliedBy(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->value === '1' && $that->scale === 0) {\n            return $this;\n        }\n\n        if ($this->value === '1' && $this->scale === 0) {\n            return $that;\n        }\n\n        $value = Calculator::get()->mul($this->value, $that->value);\n        $scale = $this->scale + $that->scale;\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns the result of the division of this number by the given one, at the given scale.\n     *\n     * @param BigNumber|int|float|string $that         The divisor.\n     * @param int|null                   $scale        The desired scale, or null to use the scale of this number.\n     * @param RoundingMode               $roundingMode An optional rounding mode, defaults to UNNECESSARY.\n     *\n     * @throws \\InvalidArgumentException If the scale or rounding mode is invalid.\n     * @throws MathException             If the number is invalid, is zero, or rounding was necessary.\n     */\n    public function dividedBy(BigNumber|int|float|string $that, ?int $scale = null, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->isZero()) {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        if ($scale === null) {\n            $scale = $this->scale;\n        } elseif ($scale < 0) {\n            throw new \\InvalidArgumentException('Scale cannot be negative.');\n        }\n\n        if ($that->value === '1' && $that->scale === 0 && $scale === $this->scale) {\n            return $this;\n        }\n\n        $p = $this->valueWithMinScale($that->scale + $scale);\n        $q = $that->valueWithMinScale($this->scale - $scale);\n\n        $result = Calculator::get()->divRound($p, $q, $roundingMode);\n\n        return new BigDecimal($result, $scale);\n    }\n\n    /**\n     * Returns the exact result of the division of this number by the given one.\n     *\n     * The scale of the result is automatically calculated to fit all the fraction digits.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the divisor is not a valid number, is not convertible to a BigDecimal, is zero,\n     *                       or the result yields an infinite number of digits.\n     */\n    public function exactlyDividedBy(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        [, $b] = $this->scaleValues($this, $that);\n\n        $d = \\rtrim($b, '0');\n        $scale = \\strlen($b) - \\strlen($d);\n\n        $calculator = Calculator::get();\n\n        foreach ([5, 2] as $prime) {\n            for (;;) {\n                $lastDigit = (int) $d[-1];\n\n                if ($lastDigit % $prime !== 0) {\n                    break;\n                }\n\n                $d = $calculator->divQ($d, (string) $prime);\n                $scale++;\n            }\n        }\n\n        return $this->dividedBy($that, $scale)->stripTrailingZeros();\n    }\n\n    /**\n     * Returns this number exponentiated to the given value.\n     *\n     * The result has a scale of `$this->scale * $exponent`.\n     *\n     * @throws \\InvalidArgumentException If the exponent is not in the range 0 to 1,000,000.\n     */\n    public function power(int $exponent) : BigDecimal\n    {\n        if ($exponent === 0) {\n            return BigDecimal::one();\n        }\n\n        if ($exponent === 1) {\n            return $this;\n        }\n\n        if ($exponent < 0 || $exponent > Calculator::MAX_POWER) {\n            throw new \\InvalidArgumentException(\\sprintf(\n                'The exponent %d is not in the range 0 to %d.',\n                $exponent,\n                Calculator::MAX_POWER\n            ));\n        }\n\n        return new BigDecimal(Calculator::get()->pow($this->value, $exponent), $this->scale * $exponent);\n    }\n\n    /**\n     * Returns the quotient of the division of this number by the given one.\n     *\n     * The quotient has a scale of `0`.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the divisor is not a valid decimal number, or is zero.\n     */\n    public function quotient(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->isZero()) {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $p = $this->valueWithMinScale($that->scale);\n        $q = $that->valueWithMinScale($this->scale);\n\n        $quotient = Calculator::get()->divQ($p, $q);\n\n        return new BigDecimal($quotient, 0);\n    }\n\n    /**\n     * Returns the remainder of the division of this number by the given one.\n     *\n     * The remainder has a scale of `max($this->scale, $that->scale)`.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigDecimal.\n     *\n     * @throws MathException If the divisor is not a valid decimal number, or is zero.\n     */\n    public function remainder(BigNumber|int|float|string $that) : BigDecimal\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->isZero()) {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $p = $this->valueWithMinScale($that->scale);\n        $q = $that->valueWithMinScale($this->scale);\n\n        $remainder = Calculator::get()->divR($p, $q);\n\n        $scale = $this->scale > $that->scale ? $this->scale : $that->scale;\n\n        return new BigDecimal($remainder, $scale);\n    }\n\n    /**\n     * Returns the quotient and remainder of the division of this number by the given one.\n     *\n     * The quotient has a scale of `0`, and the remainder has a scale of `max($this->scale, $that->scale)`.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigDecimal.\n     *\n     * @return BigDecimal[] An array containing the quotient and the remainder.\n     *\n     * @psalm-return array{BigDecimal, BigDecimal}\n     *\n     * @throws MathException If the divisor is not a valid decimal number, or is zero.\n     */\n    public function quotientAndRemainder(BigNumber|int|float|string $that) : array\n    {\n        $that = BigDecimal::of($that);\n\n        if ($that->isZero()) {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $p = $this->valueWithMinScale($that->scale);\n        $q = $that->valueWithMinScale($this->scale);\n\n        [$quotient, $remainder] = Calculator::get()->divQR($p, $q);\n\n        $scale = $this->scale > $that->scale ? $this->scale : $that->scale;\n\n        $quotient = new BigDecimal($quotient, 0);\n        $remainder = new BigDecimal($remainder, $scale);\n\n        return [$quotient, $remainder];\n    }\n\n    /**\n     * Returns the square root of this number, rounded down to the given number of decimals.\n     *\n     * @throws \\InvalidArgumentException If the scale is negative.\n     * @throws NegativeNumberException If this number is negative.\n     */\n    public function sqrt(int $scale) : BigDecimal\n    {\n        if ($scale < 0) {\n            throw new \\InvalidArgumentException('Scale cannot be negative.');\n        }\n\n        if ($this->value === '0') {\n            return new BigDecimal('0', $scale);\n        }\n\n        if ($this->value[0] === '-') {\n            throw new NegativeNumberException('Cannot calculate the square root of a negative number.');\n        }\n\n        $value = $this->value;\n        $addDigits = 2 * $scale - $this->scale;\n\n        if ($addDigits > 0) {\n            // add zeros\n            $value .= \\str_repeat('0', $addDigits);\n        } elseif ($addDigits < 0) {\n            // trim digits\n            if (-$addDigits >= \\strlen($this->value)) {\n                // requesting a scale too low, will always yield a zero result\n                return new BigDecimal('0', $scale);\n            }\n\n            $value = \\substr($value, 0, $addDigits);\n        }\n\n        $value = Calculator::get()->sqrt($value);\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns a copy of this BigDecimal with the decimal point moved $n places to the left.\n     */\n    public function withPointMovedLeft(int $n) : BigDecimal\n    {\n        if ($n === 0) {\n            return $this;\n        }\n\n        if ($n < 0) {\n            return $this->withPointMovedRight(-$n);\n        }\n\n        return new BigDecimal($this->value, $this->scale + $n);\n    }\n\n    /**\n     * Returns a copy of this BigDecimal with the decimal point moved $n places to the right.\n     */\n    public function withPointMovedRight(int $n) : BigDecimal\n    {\n        if ($n === 0) {\n            return $this;\n        }\n\n        if ($n < 0) {\n            return $this->withPointMovedLeft(-$n);\n        }\n\n        $value = $this->value;\n        $scale = $this->scale - $n;\n\n        if ($scale < 0) {\n            if ($value !== '0') {\n                $value .= \\str_repeat('0', -$scale);\n            }\n            $scale = 0;\n        }\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns a copy of this BigDecimal with any trailing zeros removed from the fractional part.\n     */\n    public function stripTrailingZeros() : BigDecimal\n    {\n        if ($this->scale === 0) {\n            return $this;\n        }\n\n        $trimmedValue = \\rtrim($this->value, '0');\n\n        if ($trimmedValue === '') {\n            return BigDecimal::zero();\n        }\n\n        $trimmableZeros = \\strlen($this->value) - \\strlen($trimmedValue);\n\n        if ($trimmableZeros === 0) {\n            return $this;\n        }\n\n        if ($trimmableZeros > $this->scale) {\n            $trimmableZeros = $this->scale;\n        }\n\n        $value = \\substr($this->value, 0, -$trimmableZeros);\n        $scale = $this->scale - $trimmableZeros;\n\n        return new BigDecimal($value, $scale);\n    }\n\n    /**\n     * Returns the absolute value of this number.\n     */\n    public function abs() : BigDecimal\n    {\n        return $this->isNegative() ? $this->negated() : $this;\n    }\n\n    /**\n     * Returns the negated value of this number.\n     */\n    public function negated() : BigDecimal\n    {\n        return new BigDecimal(Calculator::get()->neg($this->value), $this->scale);\n    }\n\n    #[Override]\n    public function compareTo(BigNumber|int|float|string $that) : int\n    {\n        $that = BigNumber::of($that);\n\n        if ($that instanceof BigInteger) {\n            $that = $that->toBigDecimal();\n        }\n\n        if ($that instanceof BigDecimal) {\n            [$a, $b] = $this->scaleValues($this, $that);\n\n            return Calculator::get()->cmp($a, $b);\n        }\n\n        return - $that->compareTo($this);\n    }\n\n    #[Override]\n    public function getSign() : int\n    {\n        return ($this->value === '0') ? 0 : (($this->value[0] === '-') ? -1 : 1);\n    }\n\n    public function getUnscaledValue() : BigInteger\n    {\n        return self::newBigInteger($this->value);\n    }\n\n    public function getScale() : int\n    {\n        return $this->scale;\n    }\n\n    /**\n     * Returns the number of significant digits in the number.\n     *\n     * This is the number of digits to both sides of the decimal point, stripped of leading zeros.\n     * The sign has no impact on the result.\n     *\n     * Examples:\n     *   0 => 0\n     *   0.0 => 0\n     *   123 => 3\n     *   123.456 => 6\n     *   0.00123 => 3\n     *   0.0012300 => 5\n     */\n    public function getPrecision(): int\n    {\n        $value = $this->value;\n\n        if ($value === '0') {\n            return 0;\n        }\n\n        $length = \\strlen($value);\n\n        return ($value[0] === '-') ? $length - 1 : $length;\n    }\n\n    /**\n     * Returns a string representing the integral part of this decimal number.\n     *\n     * Example: `-123.456` => `-123`.\n     */\n    public function getIntegralPart() : string\n    {\n        if ($this->scale === 0) {\n            return $this->value;\n        }\n\n        $value = $this->getUnscaledValueWithLeadingZeros();\n\n        return \\substr($value, 0, -$this->scale);\n    }\n\n    /**\n     * Returns a string representing the fractional part of this decimal number.\n     *\n     * If the scale is zero, an empty string is returned.\n     *\n     * Examples: `-123.456` => '456', `123` => ''.\n     */\n    public function getFractionalPart() : string\n    {\n        if ($this->scale === 0) {\n            return '';\n        }\n\n        $value = $this->getUnscaledValueWithLeadingZeros();\n\n        return \\substr($value, -$this->scale);\n    }\n\n    /**\n     * Returns whether this decimal number has a non-zero fractional part.\n     */\n    public function hasNonZeroFractionalPart() : bool\n    {\n        return $this->getFractionalPart() !== \\str_repeat('0', $this->scale);\n    }\n\n    #[Override]\n    public function toBigInteger() : BigInteger\n    {\n        $zeroScaleDecimal = $this->scale === 0 ? $this : $this->dividedBy(1, 0);\n\n        return self::newBigInteger($zeroScaleDecimal->value);\n    }\n\n    #[Override]\n    public function toBigDecimal() : BigDecimal\n    {\n        return $this;\n    }\n\n    #[Override]\n    public function toBigRational() : BigRational\n    {\n        $numerator = self::newBigInteger($this->value);\n        $denominator = self::newBigInteger('1' . \\str_repeat('0', $this->scale));\n\n        return self::newBigRational($numerator, $denominator, false);\n    }\n\n    #[Override]\n    public function toScale(int $scale, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigDecimal\n    {\n        if ($scale === $this->scale) {\n            return $this;\n        }\n\n        return $this->dividedBy(BigDecimal::one(), $scale, $roundingMode);\n    }\n\n    #[Override]\n    public function toInt() : int\n    {\n        return $this->toBigInteger()->toInt();\n    }\n\n    #[Override]\n    public function toFloat() : float\n    {\n        return (float) (string) $this;\n    }\n\n    /**\n     * @return numeric-string\n     */\n    #[Override]\n    public function __toString() : string\n    {\n        if ($this->scale === 0) {\n            /** @var numeric-string */\n            return $this->value;\n        }\n\n        $value = $this->getUnscaledValueWithLeadingZeros();\n\n        /** @var numeric-string */\n        return \\substr($value, 0, -$this->scale) . '.' . \\substr($value, -$this->scale);\n    }\n\n    /**\n     * This method is required for serializing the object and SHOULD NOT be accessed directly.\n     *\n     * @internal\n     *\n     * @return array{value: string, scale: int}\n     */\n    public function __serialize(): array\n    {\n        return ['value' => $this->value, 'scale' => $this->scale];\n    }\n\n    /**\n     * This method is only here to allow unserializing the object and cannot be accessed directly.\n     *\n     * @internal\n     * @psalm-suppress RedundantPropertyInitializationCheck\n     *\n     * @param array{value: string, scale: int} $data\n     *\n     * @throws \\LogicException\n     */\n    public function __unserialize(array $data): void\n    {\n        if (isset($this->value)) {\n            throw new \\LogicException('__unserialize() is an internal function, it must not be called directly.');\n        }\n\n        $this->value = $data['value'];\n        $this->scale = $data['scale'];\n    }\n\n    /**\n     * Puts the internal values of the given decimal numbers on the same scale.\n     *\n     * @return array{string, string} The scaled integer values of $x and $y.\n     */\n    private function scaleValues(BigDecimal $x, BigDecimal $y) : array\n    {\n        $a = $x->value;\n        $b = $y->value;\n\n        if ($b !== '0' && $x->scale > $y->scale) {\n            $b .= \\str_repeat('0', $x->scale - $y->scale);\n        } elseif ($a !== '0' && $x->scale < $y->scale) {\n            $a .= \\str_repeat('0', $y->scale - $x->scale);\n        }\n\n        return [$a, $b];\n    }\n\n    private function valueWithMinScale(int $scale) : string\n    {\n        $value = $this->value;\n\n        if ($this->value !== '0' && $scale > $this->scale) {\n            $value .= \\str_repeat('0', $scale - $this->scale);\n        }\n\n        return $value;\n    }\n\n    /**\n     * Adds leading zeros if necessary to the unscaled value to represent the full decimal number.\n     */\n    private function getUnscaledValueWithLeadingZeros() : string\n    {\n        $value = $this->value;\n        $targetLength = $this->scale + 1;\n        $negative = ($value[0] === '-');\n        $length = \\strlen($value);\n\n        if ($negative) {\n            $length--;\n        }\n\n        if ($length >= $targetLength) {\n            return $this->value;\n        }\n\n        if ($negative) {\n            $value = \\substr($value, 1);\n        }\n\n        $value = \\str_pad($value, $targetLength, '0', STR_PAD_LEFT);\n\n        if ($negative) {\n            $value = '-' . $value;\n        }\n\n        return $value;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/BigInteger.php","ext":"php","size":33075,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math;\n\nuse Brick\\Math\\Exception\\DivisionByZeroException;\nuse Brick\\Math\\Exception\\IntegerOverflowException;\nuse Brick\\Math\\Exception\\MathException;\nuse Brick\\Math\\Exception\\NegativeNumberException;\nuse Brick\\Math\\Exception\\NumberFormatException;\nuse Brick\\Math\\Internal\\Calculator;\nuse Override;\n\n/**\n * An arbitrary-size integer.\n *\n * All methods accepting a number as a parameter accept either a BigInteger instance,\n * an integer, or a string representing an arbitrary size integer.\n *\n * @psalm-immutable\n */\nfinal class BigInteger extends BigNumber\n{\n    /**\n     * The value, as a string of digits with optional leading minus sign.\n     *\n     * No leading zeros must be present.\n     * No leading minus sign must be present if the number is zero.\n     */\n    private readonly string $value;\n\n    /**\n     * Protected constructor. Use a factory method to obtain an instance.\n     *\n     * @param string $value A string of digits, with optional leading minus sign.\n     */\n    protected function __construct(string $value)\n    {\n        $this->value = $value;\n    }\n\n    /**\n     * @psalm-pure\n     */\n    #[Override]\n    protected static function from(BigNumber $number): static\n    {\n        return $number->toBigInteger();\n    }\n\n    /**\n     * Creates a number from a string in a given base.\n     *\n     * The string can optionally be prefixed with the `+` or `-` sign.\n     *\n     * Bases greater than 36 are not supported by this method, as there is no clear consensus on which of the lowercase\n     * or uppercase characters should come first. Instead, this method accepts any base up to 36, and does not\n     * differentiate lowercase and uppercase characters, which are considered equal.\n     *\n     * For bases greater than 36, and/or custom alphabets, use the fromArbitraryBase() method.\n     *\n     * @param string $number The number to convert, in the given base.\n     * @param int    $base   The base of the number, between 2 and 36.\n     *\n     * @throws NumberFormatException     If the number is empty, or contains invalid chars for the given base.\n     * @throws \\InvalidArgumentException If the base is out of range.\n     *\n     * @psalm-pure\n     */\n    public static function fromBase(string $number, int $base) : BigInteger\n    {\n        if ($number === '') {\n            throw new NumberFormatException('The number cannot be empty.');\n        }\n\n        if ($base < 2 || $base > 36) {\n            throw new \\InvalidArgumentException(\\sprintf('Base %d is not in range 2 to 36.', $base));\n        }\n\n        if ($number[0] === '-') {\n            $sign = '-';\n            $number = \\substr($number, 1);\n        } elseif ($number[0] === '+') {\n            $sign = '';\n            $number = \\substr($number, 1);\n        } else {\n            $sign = '';\n        }\n\n        if ($number === '') {\n            throw new NumberFormatException('The number cannot be empty.');\n        }\n\n        $number = \\ltrim($number, '0');\n\n        if ($number === '') {\n            // The result will be the same in any base, avoid further calculation.\n            return BigInteger::zero();\n        }\n\n        if ($number === '1') {\n            // The result will be the same in any base, avoid further calculation.\n            return new BigInteger($sign . '1');\n        }\n\n        $pattern = '/[^' . \\substr(Calculator::ALPHABET, 0, $base) . ']/';\n\n        if (\\preg_match($pattern, \\strtolower($number), $matches) === 1) {\n            throw new NumberFormatException(\\sprintf('\"%s\" is not a valid character in base %d.', $matches[0], $base));\n        }\n\n        if ($base === 10) {\n            // The number is usable as is, avoid further calculation.\n            return new BigInteger($sign . $number);\n        }\n\n        $result = Calculator::get()->fromBase($number, $base);\n\n        return new BigInteger($sign . $result);\n    }\n\n    /**\n     * Parses a string containing an integer in an arbitrary base, using a custom alphabet.\n     *\n     * Because this method accepts an alphabet with any character, including dash, it does not handle negative numbers.\n     *\n     * @param string $number   The number to parse.\n     * @param string $alphabet The alphabet, for example '01' for base 2, or '01234567' for base 8.\n     *\n     * @throws NumberFormatException     If the given number is empty or contains invalid chars for the given alphabet.\n     * @throws \\InvalidArgumentException If the alphabet does not contain at least 2 chars.\n     *\n     * @psalm-pure\n     */\n    public static function fromArbitraryBase(string $number, string $alphabet) : BigInteger\n    {\n        if ($number === '') {\n            throw new NumberFormatException('The number cannot be empty.');\n        }\n\n        $base = \\strlen($alphabet);\n\n        if ($base < 2) {\n            throw new \\InvalidArgumentException('The alphabet must contain at least 2 chars.');\n        }\n\n        $pattern = '/[^' . \\preg_quote($alphabet, '/') . ']/';\n\n        if (\\preg_match($pattern, $number, $matches) === 1) {\n            throw NumberFormatException::charNotInAlphabet($matches[0]);\n        }\n\n        $number = Calculator::get()->fromArbitraryBase($number, $alphabet, $base);\n\n        return new BigInteger($number);\n    }\n\n    /**\n     * Translates a string of bytes containing the binary representation of a BigInteger into a BigInteger.\n     *\n     * The input string is assumed to be in big-endian byte-order: the most significant byte is in the zeroth element.\n     *\n     * If `$signed` is true, the input is assumed to be in two's-complement representation, and the leading bit is\n     * interpreted as a sign bit. If `$signed` is false, the input is interpreted as an unsigned number, and the\n     * resulting BigInteger will always be positive or zero.\n     *\n     * This method can be used to retrieve a number exported by `toBytes()`, as long as the `$signed` flags match.\n     *\n     * @param string $value  The byte string.\n     * @param bool   $signed Whether to interpret as a signed number in two's-complement representation with a leading\n     *                       sign bit.\n     *\n     * @throws NumberFormatException If the string is empty.\n     */\n    public static function fromBytes(string $value, bool $signed = true) : BigInteger\n    {\n        if ($value === '') {\n            throw new NumberFormatException('The byte string must not be empty.');\n        }\n\n        $twosComplement = false;\n\n        if ($signed) {\n            $x = \\ord($value[0]);\n\n            if (($twosComplement = ($x >= 0x80))) {\n                $value = ~$value;\n            }\n        }\n\n        $number = self::fromBase(\\bin2hex($value), 16);\n\n        if ($twosComplement) {\n            return $number->plus(1)->negated();\n        }\n\n        return $number;\n    }\n\n    /**\n     * Generates a pseudo-random number in the range 0 to 2^numBits - 1.\n     *\n     * Using the default random bytes generator, this method is suitable for cryptographic use.\n     *\n     * @psalm-param (callable(int): string)|null $randomBytesGenerator\n     *\n     * @param int           $numBits              The number of bits.\n     * @param callable|null $randomBytesGenerator A function that accepts a number of bytes as an integer, and returns a\n     *                                            string of random bytes of the given length. Defaults to the\n     *                                            `random_bytes()` function.\n     *\n     * @throws \\InvalidArgumentException If $numBits is negative.\n     */\n    public static function randomBits(int $numBits, ?callable $randomBytesGenerator = null) : BigInteger\n    {\n        if ($numBits < 0) {\n            throw new \\InvalidArgumentException('The number of bits cannot be negative.');\n        }\n\n        if ($numBits === 0) {\n            return BigInteger::zero();\n        }\n\n        if ($randomBytesGenerator === null) {\n            $randomBytesGenerator = random_bytes(...);\n        }\n\n        /** @var int<1, max> $byteLength */\n        $byteLength = \\intdiv($numBits - 1, 8) + 1;\n\n        $extraBits = ($byteLength * 8 - $numBits);\n        $bitmask   = \\chr(0xFF >> $extraBits);\n\n        $randomBytes    = $randomBytesGenerator($byteLength);\n        $randomBytes[0] = $randomBytes[0] & $bitmask;\n\n        return self::fromBytes($randomBytes, false);\n    }\n\n    /**\n     * Generates a pseudo-random number between `$min` and `$max`.\n     *\n     * Using the default random bytes generator, this method is suitable for cryptographic use.\n     *\n     * @psalm-param (callable(int): string)|null $randomBytesGenerator\n     *\n     * @param BigNumber|int|float|string $min                  The lower bound. Must be convertible to a BigInteger.\n     * @param BigNumber|int|float|string $max                  The upper bound. Must be convertible to a BigInteger.\n     * @param callable|null              $randomBytesGenerator A function that accepts a number of bytes as an integer,\n     *                                                         and returns a string of random bytes of the given length.\n     *                                                         Defaults to the `random_bytes()` function.\n     *\n     * @throws MathException If one of the parameters cannot be converted to a BigInteger,\n     *                       or `$min` is greater than `$max`.\n     */\n    public static function randomRange(\n        BigNumber|int|float|string $min,\n        BigNumber|int|float|string $max,\n        ?callable $randomBytesGenerator = null\n    ) : BigInteger {\n        $min = BigInteger::of($min);\n        $max = BigInteger::of($max);\n\n        if ($min->isGreaterThan($max)) {\n            throw new MathException('$min cannot be greater than $max.');\n        }\n\n        if ($min->isEqualTo($max)) {\n            return $min;\n        }\n\n        $diff      = $max->minus($min);\n        $bitLength = $diff->getBitLength();\n\n        // try until the number is in range (50% to 100% chance of success)\n        do {\n            $randomNumber = self::randomBits($bitLength, $randomBytesGenerator);\n        } while ($randomNumber->isGreaterThan($diff));\n\n        return $randomNumber->plus($min);\n    }\n\n    /**\n     * Returns a BigInteger representing zero.\n     *\n     * @psalm-pure\n     */\n    public static function zero() : BigInteger\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigInteger|null $zero\n         */\n        static $zero;\n\n        if ($zero === null) {\n            $zero = new BigInteger('0');\n        }\n\n        return $zero;\n    }\n\n    /**\n     * Returns a BigInteger representing one.\n     *\n     * @psalm-pure\n     */\n    public static function one() : BigInteger\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigInteger|null $one\n         */\n        static $one;\n\n        if ($one === null) {\n            $one = new BigInteger('1');\n        }\n\n        return $one;\n    }\n\n    /**\n     * Returns a BigInteger representing ten.\n     *\n     * @psalm-pure\n     */\n    public static function ten() : BigInteger\n    {\n        /**\n         * @psalm-suppress ImpureStaticVariable\n         * @var BigInteger|null $ten\n         */\n        static $ten;\n\n        if ($ten === null) {\n            $ten = new BigInteger('10');\n        }\n\n        return $ten;\n    }\n\n    public static function gcdMultiple(BigInteger $a, BigInteger ...$n): BigInteger\n    {\n        $result = $a;\n\n        foreach ($n as $next) {\n            $result = $result->gcd($next);\n\n            if ($result->isEqualTo(1)) {\n                return $result;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Returns the sum of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The number to add. Must be convertible to a BigInteger.\n     *\n     * @throws MathException If the number is not valid, or is not convertible to a BigInteger.\n     */\n    public function plus(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '0') {\n            return $this;\n        }\n\n        if ($this->value === '0') {\n            return $that;\n        }\n\n        $value = Calculator::get()->add($this->value, $that->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the difference of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The number to subtract. Must be convertible to a BigInteger.\n     *\n     * @throws MathException If the number is not valid, or is not convertible to a BigInteger.\n     */\n    public function minus(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '0') {\n            return $this;\n        }\n\n        $value = Calculator::get()->sub($this->value, $that->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the product of this number and the given one.\n     *\n     * @param BigNumber|int|float|string $that The multiplier. Must be convertible to a BigInteger.\n     *\n     * @throws MathException If the multiplier is not a valid number, or is not convertible to a BigInteger.\n     */\n    public function multipliedBy(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '1') {\n            return $this;\n        }\n\n        if ($this->value === '1') {\n            return $that;\n        }\n\n        $value = Calculator::get()->mul($this->value, $that->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the result of the division of this number by the given one.\n     *\n     * @param BigNumber|int|float|string $that         The divisor. Must be convertible to a BigInteger.\n     * @param RoundingMode               $roundingMode An optional rounding mode, defaults to UNNECESSARY.\n     *\n     * @throws MathException If the divisor is not a valid number, is not convertible to a BigInteger, is zero,\n     *                       or RoundingMode::UNNECESSARY is used and the remainder is not zero.\n     */\n    public function dividedBy(BigNumber|int|float|string $that, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '1') {\n            return $this;\n        }\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $result = Calculator::get()->divRound($this->value, $that->value, $roundingMode);\n\n        return new BigInteger($result);\n    }\n\n    /**\n     * Returns this number exponentiated to the given value.\n     *\n     * @throws \\InvalidArgumentException If the exponent is not in the range 0 to 1,000,000.\n     */\n    public function power(int $exponent) : BigInteger\n    {\n        if ($exponent === 0) {\n            return BigInteger::one();\n        }\n\n        if ($exponent === 1) {\n            return $this;\n        }\n\n        if ($exponent < 0 || $exponent > Calculator::MAX_POWER) {\n            throw new \\InvalidArgumentException(\\sprintf(\n                'The exponent %d is not in the range 0 to %d.',\n                $exponent,\n                Calculator::MAX_POWER\n            ));\n        }\n\n        return new BigInteger(Calculator::get()->pow($this->value, $exponent));\n    }\n\n    /**\n     * Returns the quotient of the division of this number by the given one.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigInteger.\n     *\n     * @throws DivisionByZeroException If the divisor is zero.\n     */\n    public function quotient(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '1') {\n            return $this;\n        }\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $quotient = Calculator::get()->divQ($this->value, $that->value);\n\n        return new BigInteger($quotient);\n    }\n\n    /**\n     * Returns the remainder of the division of this number by the given one.\n     *\n     * The remainder, when non-zero, has the same sign as the dividend.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigInteger.\n     *\n     * @throws DivisionByZeroException If the divisor is zero.\n     */\n    public function remainder(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '1') {\n            return BigInteger::zero();\n        }\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        $remainder = Calculator::get()->divR($this->value, $that->value);\n\n        return new BigInteger($remainder);\n    }\n\n    /**\n     * Returns the quotient and remainder of the division of this number by the given one.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigInteger.\n     *\n     * @return BigInteger[] An array containing the quotient and the remainder.\n     *\n     * @psalm-return array{BigInteger, BigInteger}\n     *\n     * @throws DivisionByZeroException If the divisor is zero.\n     */\n    public function quotientAndRemainder(BigNumber|int|float|string $that) : array\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::divisionByZero();\n        }\n\n        [$quotient, $remainder] = Calculator::get()->divQR($this->value, $that->value);\n\n        return [\n            new BigInteger($quotient),\n            new BigInteger($remainder)\n        ];\n    }\n\n    /**\n     * Returns the modulo of this number and the given one.\n     *\n     * The modulo operation yields the same result as the remainder operation when both operands are of the same sign,\n     * and may differ when signs are different.\n     *\n     * The result of the modulo operation, when non-zero, has the same sign as the divisor.\n     *\n     * @param BigNumber|int|float|string $that The divisor. Must be convertible to a BigInteger.\n     *\n     * @throws DivisionByZeroException If the divisor is zero.\n     */\n    public function mod(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '0') {\n            throw DivisionByZeroException::modulusMustNotBeZero();\n        }\n\n        $value = Calculator::get()->mod($this->value, $that->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the modular multiplicative inverse of this BigInteger modulo $m.\n     *\n     * @throws DivisionByZeroException If $m is zero.\n     * @throws NegativeNumberException If $m is negative.\n     * @throws MathException           If this BigInteger has no multiplicative inverse mod m (that is, this BigInteger\n     *                                 is not relatively prime to m).\n     */\n    public function modInverse(BigInteger $m) : BigInteger\n    {\n        if ($m->value === '0') {\n            throw DivisionByZeroException::modulusMustNotBeZero();\n        }\n\n        if ($m->isNegative()) {\n            throw new NegativeNumberException('Modulus must not be negative.');\n        }\n\n        if ($m->value === '1') {\n            return BigInteger::zero();\n        }\n\n        $value = Calculator::get()->modInverse($this->value, $m->value);\n\n        if ($value === null) {\n            throw new MathException('Unable to compute the modInverse for the given modulus.');\n        }\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns this number raised into power with modulo.\n     *\n     * This operation only works on positive numbers.\n     *\n     * @param BigNumber|int|float|string $exp The exponent. Must be positive or zero.\n     * @param BigNumber|int|float|string $mod The modulus. Must be strictly positive.\n     *\n     * @throws NegativeNumberException If any of the operands is negative.\n     * @throws DivisionByZeroException If the modulus is zero.\n     */\n    public function modPow(BigNumber|int|float|string $exp, BigNumber|int|float|string $mod) : BigInteger\n    {\n        $exp = BigInteger::of($exp);\n        $mod = BigInteger::of($mod);\n\n        if ($this->isNegative() || $exp->isNegative() || $mod->isNegative()) {\n            throw new NegativeNumberException('The operands cannot be negative.');\n        }\n\n        if ($mod->isZero()) {\n            throw DivisionByZeroException::modulusMustNotBeZero();\n        }\n\n        $result = Calculator::get()->modPow($this->value, $exp->value, $mod->value);\n\n        return new BigInteger($result);\n    }\n\n    /**\n     * Returns the greatest common divisor of this number and the given one.\n     *\n     * The GCD is always positive, unless both operands are zero, in which case it is zero.\n     *\n     * @param BigNumber|int|float|string $that The operand. Must be convertible to an integer number.\n     */\n    public function gcd(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        if ($that->value === '0' && $this->value[0] !== '-') {\n            return $this;\n        }\n\n        if ($this->value === '0' && $that->value[0] !== '-') {\n            return $that;\n        }\n\n        $value = Calculator::get()->gcd($this->value, $that->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the integer square root number of this number, rounded down.\n     *\n     * The result is the largest x such that x² ≤ n.\n     *\n     * @throws NegativeNumberException If this number is negative.\n     */\n    public function sqrt() : BigInteger\n    {\n        if ($this->value[0] === '-') {\n            throw new NegativeNumberException('Cannot calculate the square root of a negative number.');\n        }\n\n        $value = Calculator::get()->sqrt($this->value);\n\n        return new BigInteger($value);\n    }\n\n    /**\n     * Returns the absolute value of this number.\n     */\n    public function abs() : BigInteger\n    {\n        return $this->isNegative() ? $this->negated() : $this;\n    }\n\n    /**\n     * Returns the inverse of this number.\n     */\n    public function negated() : BigInteger\n    {\n        return new BigInteger(Calculator::get()->neg($this->value));\n    }\n\n    /**\n     * Returns the integer bitwise-and combined with another integer.\n     *\n     * This method returns a negative BigInteger if and only if both operands are negative.\n     *\n     * @param BigNumber|int|float|string $that The operand. Must be convertible to an integer number.\n     */\n    public function and(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        return new BigInteger(Calculator::get()->and($this->value, $that->value));\n    }\n\n    /**\n     * Returns the integer bitwise-or combined with another integer.\n     *\n     * This method returns a negative BigInteger if and only if either of the operands is negative.\n     *\n     * @param BigNumber|int|float|string $that The operand. Must be convertible to an integer number.\n     */\n    public function or(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        return new BigInteger(Calculator::get()->or($this->value, $that->value));\n    }\n\n    /**\n     * Returns the integer bitwise-xor combined with another integer.\n     *\n     * This method returns a negative BigInteger if and only if exactly one of the operands is negative.\n     *\n     * @param BigNumber|int|float|string $that The operand. Must be convertible to an integer number.\n     */\n    public function xor(BigNumber|int|float|string $that) : BigInteger\n    {\n        $that = BigInteger::of($that);\n\n        return new BigInteger(Calculator::get()->xor($this->value, $that->value));\n    }\n\n    /**\n     * Returns the bitwise-not of this BigInteger.\n     */\n    public function not() : BigInteger\n    {\n        return $this->negated()->minus(1);\n    }\n\n    /**\n     * Returns the integer left shifted by a given number of bits.\n     */\n    public function shiftedLeft(int $distance) : BigInteger\n    {\n        if ($distance === 0) {\n            return $this;\n        }\n\n        if ($distance < 0) {\n            return $this->shiftedRight(- $distance);\n        }\n\n        return $this->multipliedBy(BigInteger::of(2)->power($distance));\n    }\n\n    /**\n     * Returns the integer right shifted by a given number of bits.\n     */\n    public function shiftedRight(int $distance) : BigInteger\n    {\n        if ($distance === 0) {\n            return $this;\n        }\n\n        if ($distance < 0) {\n            return $this->shiftedLeft(- $distance);\n        }\n\n        $operand = BigInteger::of(2)->power($distance);\n\n        if ($this->isPositiveOrZero()) {\n            return $this->quotient($operand);\n        }\n\n        return $this->dividedBy($operand, RoundingMode::UP);\n    }\n\n    /**\n     * Returns the number of bits in the minimal two's-complement representation of this BigInteger, excluding a sign bit.\n     *\n     * For positive BigIntegers, this is equivalent to the number of bits in the ordinary binary representation.\n     * Computes (ceil(log2(this < 0 ? -this : this+1))).\n     */\n    public function getBitLength() : int\n    {\n        if ($this->value === '0') {\n            return 0;\n        }\n\n        if ($this->isNegative()) {\n            return $this->abs()->minus(1)->getBitLength();\n        }\n\n        return \\strlen($this->toBase(2));\n    }\n\n    /**\n     * Returns the index of the rightmost (lowest-order) one bit in this BigInteger.\n     *\n     * Returns -1 if this BigInteger contains no one bits.\n     */\n    public function getLowestSetBit() : int\n    {\n        $n = $this;\n        $bitLength = $this->getBitLength();\n\n        for ($i = 0; $i <= $bitLength; $i++) {\n            if ($n->isOdd()) {\n                return $i;\n            }\n\n            $n = $n->shiftedRight(1);\n        }\n\n        return -1;\n    }\n\n    /**\n     * Returns whether this number is even.\n     */\n    public function isEven() : bool\n    {\n        return \\in_array($this->value[-1], ['0', '2', '4', '6', '8'], true);\n    }\n\n    /**\n     * Returns whether this number is odd.\n     */\n    public function isOdd() : bool\n    {\n        return \\in_array($this->value[-1], ['1', '3', '5', '7', '9'], true);\n    }\n\n    /**\n     * Returns true if and only if the designated bit is set.\n     *\n     * Computes ((this & (1<<n)) != 0).\n     *\n     * @param int $n The bit to test, 0-based.\n     *\n     * @throws \\InvalidArgumentException If the bit to test is negative.\n     */\n    public function testBit(int $n) : bool\n    {\n        if ($n < 0) {\n            throw new \\InvalidArgumentException('The bit to test cannot be negative.');\n        }\n\n        return $this->shiftedRight($n)->isOdd();\n    }\n\n    #[Override]\n    public function compareTo(BigNumber|int|float|string $that) : int\n    {\n        $that = BigNumber::of($that);\n\n        if ($that instanceof BigInteger) {\n            return Calculator::get()->cmp($this->value, $that->value);\n        }\n\n        return - $that->compareTo($this);\n    }\n\n    #[Override]\n    public function getSign() : int\n    {\n        return ($this->value === '0') ? 0 : (($this->value[0] === '-') ? -1 : 1);\n    }\n\n    #[Override]\n    public function toBigInteger() : BigInteger\n    {\n        return $this;\n    }\n\n    #[Override]\n    public function toBigDecimal() : BigDecimal\n    {\n        return self::newBigDecimal($this->value);\n    }\n\n    #[Override]\n    public function toBigRational() : BigRational\n    {\n        return self::newBigRational($this, BigInteger::one(), false);\n    }\n\n    #[Override]\n    public function toScale(int $scale, RoundingMode $roundingMode = RoundingMode::UNNECESSARY) : BigDecimal\n    {\n        return $this->toBigDecimal()->toScale($scale, $roundingMode);\n    }\n\n    #[Override]\n    public function toInt() : int\n    {\n        $intValue = (int) $this->value;\n\n        if ($this->value !== (string) $intValue) {\n            throw IntegerOverflowException::toIntOverflow($this);\n        }\n\n        return $intValue;\n    }\n\n    #[Override]\n    public function toFloat() : float\n    {\n        return (float) $this->value;\n    }\n\n    /**\n     * Returns a string representation of this number in the given base.\n     *\n     * The output will always be lowercase for bases greater than 10.\n     *\n     * @throws \\InvalidArgumentException If the base is out of range.\n     */\n    public function toBase(int $base) : string\n    {\n        if ($base === 10) {\n            return $this->value;\n        }\n\n        if ($base < 2 || $base > 36) {\n            throw new \\InvalidArgumentException(\\sprintf('Base %d is out of range [2, 36]', $base));\n        }\n\n        return Calculator::get()->toBase($this->value, $base);\n    }\n\n    /**\n     * Returns a string representation of this number in an arbitrary base with a custom alphabet.\n     *\n     * Because this method accepts an alphabet with any character, including dash, it does not handle negative numbers;\n     * a NegativeNumberException will be thrown when attempting to call this method on a negative number.\n     *\n     * @param string $alphabet The alphabet, for example '01' for base 2, or '01234567' for base 8.\n     *\n     * @throws NegativeNumberException   If this number is negative.\n     * @throws \\InvalidArgumentException If the given alphabet does not contain at least 2 chars.\n     */\n    public function toArbitraryBase(string $alphabet) : string\n    {\n        $base = \\strlen($alphabet);\n\n        if ($base < 2) {\n            throw new \\InvalidArgumentException('The alphabet must contain at least 2 chars.');\n        }\n\n        if ($this->value[0] === '-') {\n            throw new NegativeNumberException(__FUNCTION__ . '() does not support negative numbers.');\n        }\n\n        return Calculator::get()->toArbitraryBase($this->value, $alphabet, $base);\n    }\n\n    /**\n     * Returns a string of bytes containing the binary representation of this BigInteger.\n     *\n     * The string is in big-endian byte-order: the most significant byte is in the zeroth element.\n     *\n     * If `$signed` is true, the output will be in two's-complement representation, and a sign bit will be prepended to\n     * the output. If `$signed` is false, no sign bit will be prepended, and this method will throw an exception if the\n     * number is negative.\n     *\n     * The string will contain the minimum number of bytes required to represent this BigInteger, including a sign bit\n     * if `$signed` is true.\n     *\n     * This representation is compatible with the `fromBytes()` factory method, as long as the `$signed` flags match.\n     *\n     * @param bool $signed Whether to output a signed number in two's-complement representation with a leading sign bit.\n     *\n     * @throws NegativeNumberException If $signed is false, and the number is negative.\n     */\n    public function toBytes(bool $signed = true) : string\n    {\n        if (! $signed && $this->isNegative()) {\n            throw new NegativeNumberException('Cannot convert a negative number to a byte string when $signed is false.');\n        }\n\n        $hex = $this->abs()->toBase(16);\n\n        if (\\strlen($hex) % 2 !== 0) {\n            $hex = '0' . $hex;\n        }\n\n        $baseHexLength = \\strlen($hex);\n\n        if ($signed) {\n            if ($this->isNegative()) {\n                $bin = \\hex2bin($hex);\n                assert($bin !== false);\n\n                $hex = \\bin2hex(~$bin);\n                $hex = self::fromBase($hex, 16)->plus(1)->toBase(16);\n\n                $hexLength = \\strlen($hex);\n\n                if ($hexLength < $baseHexLength) {\n                    $hex = \\str_repeat('0', $baseHexLength - $hexLength) . $hex;\n                }\n\n                if ($hex[0] < '8') {\n                    $hex = 'FF' . $hex;\n                }\n            } else {\n                if ($hex[0] >= '8') {\n                    $hex = '00' . $hex;\n                }\n            }\n        }\n\n        return \\hex2bin($hex);\n    }\n\n    /**\n     * @return numeric-string\n     */\n    #[Override]\n    public function __toString() : string\n    {\n        /** @var numeric-string */\n        return $this->value;\n    }\n\n    /**\n     * This method is required for serializing the object and SHOULD NOT be accessed directly.\n     *\n     * @internal\n     *\n     * @return array{value: string}\n     */\n    public function __serialize(): array\n    {\n        return ['value' => $this->value];\n    }\n\n    /**\n     * This method is only here to allow unserializing the object and cannot be accessed directly.\n     *\n     * @internal\n     * @psalm-suppress RedundantPropertyInitializationCheck\n     *\n     * @param array{value: string} $data\n     *\n     * @throws \\LogicException\n     */\n    public function __unserialize(array $data): void\n    {\n        if (isset($this->value)) {\n            throw new \\LogicException('__unserialize() is an internal function, it must not be called directly.');\n        }\n\n        $this->value = $data['value'];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/DivisionByZeroException.php","ext":"php","size":736,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\n/**\n * Exception thrown when a division by zero occurs.\n */\nclass DivisionByZeroException extends MathException\n{\n    /**\n     * @psalm-pure\n     */\n    public static function divisionByZero() : DivisionByZeroException\n    {\n        return new self('Division by zero.');\n    }\n\n    /**\n     * @psalm-pure\n     */\n    public static function modulusMustNotBeZero() : DivisionByZeroException\n    {\n        return new self('The modulus must not be zero.');\n    }\n\n    /**\n     * @psalm-pure\n     */\n    public static function denominatorMustNotBeZero() : DivisionByZeroException\n    {\n        return new self('The denominator of a rational number cannot be zero.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/MathException.php","ext":"php","size":163,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\n/**\n * Base class for all math exceptions.\n */\nclass MathException extends \\RuntimeException\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/RoundingNecessaryException.php","ext":"php","size":459,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\n/**\n * Exception thrown when a number cannot be represented at the requested scale without rounding.\n */\nclass RoundingNecessaryException extends MathException\n{\n    /**\n     * @psalm-pure\n     */\n    public static function roundingNecessary() : RoundingNecessaryException\n    {\n        return new self('Rounding is necessary to represent the result of the operation at this scale.');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/NegativeNumberException.php","ext":"php","size":248,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\n/**\n * Exception thrown when attempting to perform an unsupported operation, such as a square root, on a negative number.\n */\nclass NegativeNumberException extends MathException\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/NumberFormatException.php","ext":"php","size":969,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\n/**\n * Exception thrown when attempting to create a number from a string with an invalid format.\n */\nclass NumberFormatException extends MathException\n{\n    public static function invalidFormat(string $value) : self\n    {\n        return new self(\\sprintf(\n            'The given value \"%s\" does not represent a valid number.',\n            $value,\n        ));\n    }\n\n    /**\n     * @param string $char The failing character.\n     *\n     * @psalm-pure\n     */\n    public static function charNotInAlphabet(string $char) : self\n    {\n        $ord = \\ord($char);\n\n        if ($ord < 32 || $ord > 126) {\n            $char = \\strtoupper(\\dechex($ord));\n\n            if ($ord < 10) {\n                $char = '0' . $char;\n            }\n        } else {\n            $char = '\"' . $char . '\"';\n        }\n\n        return new self(\\sprintf('Char %s is not a valid character in the given alphabet.', $char));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/brick/math/src/Exception/IntegerOverflowException.php","ext":"php","size":526,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Brick\\Math\\Exception;\n\nuse Brick\\Math\\BigInteger;\n\n/**\n * Exception thrown when an integer overflow occurs.\n */\nclass IntegerOverflowException extends MathException\n{\n    /**\n     * @psalm-pure\n     */\n    public static function toIntOverflow(BigInteger $value) : IntegerOverflowException\n    {\n        $message = '%s is out of range %d to %d and cannot be represented as an integer.';\n\n        return new self(\\sprintf($message, (string) $value, PHP_INT_MIN, PHP_INT_MAX));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/autoload.php","ext":"php","size":748,"mtime":1756373564,"type":"text","content":"<?php\n\n// autoload.php @generated by Composer\n\nif (PHP_VERSION_ID < 50600) {\n    if (!headers_sent()) {\n        header('HTTP/1.1 500 Internal Server Error');\n    }\n    $err = 'Composer 2.3.0 dropped support for autoloading on PHP <5.6 and you are running '.PHP_VERSION.', please upgrade PHP or use Composer 2.2 LTS via \"composer self-update --2.2\". Aborting.'.PHP_EOL;\n    if (!ini_get('display_errors')) {\n        if (PHP_SAPI === 'cli' || PHP_SAPI === 'phpdbg') {\n            fwrite(STDERR, $err);\n        } elseif (!headers_sent()) {\n            echo $err;\n        }\n    }\n    throw new RuntimeException($err);\n}\n\nrequire_once __DIR__ . '/composer/autoload_real.php';\n\nreturn ComposerAutoloaderInit6d98b74f597e7674b4e502dab72fafa7::getLoader();\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/docs/PSR7-Usage.md","ext":"md","size":5492,"mtime":1756373564,"type":"text","content":"### PSR-7 Usage\n\nAll PSR-7 applications comply with these interfaces \nThey were created to establish a standard between middleware implementations.\n\n> `RequestInterface`, `ServerRequestInterface`, `ResponseInterface` extend `MessageInterface`  because the `Request` and the `Response` are `HTTP Messages`.\n> When using `ServerRequestInterface`, both `RequestInterface` and `Psr\\Http\\Message\\MessageInterface` methods are considered.\n\n\nThe following examples will illustrate how basic operations are done in PSR-7.\n\n##### Examples\n\n\nFor this examples to work (at least) a PSR-7 implementation package is required. (eg: zendframework/zend-diactoros, guzzlehttp/psr7, slim/slim, etc)\nAll PSR-7 implementations should have the same behaviour.\n\nThe following will be assumed: \n`$request` is an object of `Psr\\Http\\Message\\RequestInterface` and\n\n`$response` is an object implementing `Psr\\Http\\Message\\RequestInterface`\n\n\n### Working with HTTP Headers\n\n#### Adding headers to response:\n\n```php\n$response->withHeader('My-Custom-Header', 'My Custom Message');\n```\n\n#### Appending values to headers\n\n```php\n$response->withAddedHeader('My-Custom-Header', 'The second message');\n```\n\n#### Checking if header exists:\n\n```php\n$request->hasHeader('My-Custom-Header'); // will return false\n$response->hasHeader('My-Custom-Header'); // will return true\n```\n\n> Note: My-Custom-Header was only added in the Response\n\n#### Getting comma-separated values from a header (also applies to request)\n\n```php\n// getting value from request headers\n$request->getHeaderLine('Content-Type'); // will return: \"text/html; charset=UTF-8\"\n// getting value from response headers\n$response->getHeaderLine('My-Custom-Header'); // will return:  \"My Custom Message; The second message\"\n```\n\n#### Getting array of value from a header (also applies to request)\n```php\n// getting value from request headers\n$request->getHeader('Content-Type'); // will return: [\"text/html\", \"charset=UTF-8\"]\n// getting value from response headers\n$response->getHeader('My-Custom-Header'); // will return:  [\"My Custom Message\",  \"The second message\"]\n```\n\n#### Removing headers from HTTP Messages\n```php\n// removing a header from Request, removing deprecated \"Content-MD5\" header\n$request->withoutHeader('Content-MD5'); \n\n// removing a header from Response\n// effect: the browser won't know the size of the stream\n// the browser will download the stream till it ends\n$response->withoutHeader('Content-Length');\n```\n\n### Working with HTTP Message Body\n\nWhen working with the PSR-7 there are two methods of implementation:\n#### 1. Getting the body separately\n\n> This method makes the body handling easier to understand and is useful when repeatedly calling body methods. (You only call `getBody()` once). Using this method mistakes like `$response->write()` are also prevented.\n\n```php\n$body = $response->getBody();\n// operations on body, eg. read, write, seek\n// ...\n// replacing the old body\n$response->withBody($body); \n// this last statement is optional as we working with objects\n// in this case the \"new\" body is same with the \"old\" one\n// the $body variable has the same value as the one in $request, only the reference is passed\n```\n\n#### 2. Working directly on response\n\n> This method is useful when only performing few operations as the `$request->getBody()` statement fragment is required\n\n```php\n$response->getBody()->write('hello');\n```\n\n### Getting the body contents\n\nThe following snippet gets the contents of a stream contents.\n> Note: Streams must be rewinded, if content was written into streams, it will be ignored when calling `getContents()` because the stream pointer is set to the last character, which is `\\0` - meaning end of stream.\n```php \n$body = $response->getBody();\n$body->rewind(); // or $body->seek(0);\n$bodyText = $body->getContents();\n```\n> Note: If `$body->seek(1)` is called before `$body->getContents()`, the first character will be ommited as the starting pointer is set to `1`, not `0`. This is why using `$body->rewind()` is recommended.\n\n### Append to body\n\n```php\n$response->getBody()->write('Hello'); // writing directly\n$body = $request->getBody(); // which is a `StreamInterface`\n$body->write('xxxxx');\n```\n\n### Prepend to body\nPrepending is different when it comes to streams. The content must be copied before writing the content to be prepended.\nThe following example will explain the behaviour of streams.\n\n```php\n// assuming our response is initially empty\n$body = $repsonse->getBody();\n// writing the string \"abcd\"\n$body->write('abcd');\n\n// seeking to start of stream\n$body->seek(0);\n// writing 'ef'\n$body->write('ef'); // at this point the stream contains \"efcd\"\n```\n\n#### Prepending by rewriting separately\n\n```php\n// assuming our response body stream only contains: \"abcd\"\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // abcd\n// seeking the stream to beginning\n$body->rewind();\n$body->write('ef'); // stream contains \"efcd\"\n$body->write($contents); // stream contains \"efabcd\"\n```\n\n> Note: `getContents()` seeks the stream while reading it, therefore if the second `rewind()` method call was not present the stream would have resulted in `abcdefabcd` because the `write()` method appends to stream if not preceeded by `rewind()` or `seek(0)`.\n\n#### Prepending by using contents as a string\n```php\n$body = $response->getBody();\n$body->rewind();\n$contents = $body->getContents(); // efabcd\n$contents = 'ef'.$contents;\n$body->rewind();\n$body->write($contents);\n```\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/docs/PSR7-Interfaces.md","ext":"md","size":9548,"mtime":1756373564,"type":"text","content":"# Interfaces\n\nThe purpose of this list is to help in finding the methods when working with PSR-7. This can be considered as a cheatsheet for PSR-7 interfaces.\n\nThe interfaces defined in PSR-7 are the following:\n\n| Class Name | Description |\n|---|---|\n| [Psr\\Http\\Message\\MessageInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessagemessageinterface) | Representation of a HTTP message |\n| [Psr\\Http\\Message\\RequestInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessagerequestinterface) | Representation of an outgoing, client-side request. |\n| [Psr\\Http\\Message\\ServerRequestInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessageserverrequestinterface) | Representation of an incoming, server-side HTTP request. | \n| [Psr\\Http\\Message\\ResponseInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessageresponseinterface) | Representation of an outgoing, server-side response. |\n| [Psr\\Http\\Message\\StreamInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessagestreaminterface) | Describes a data stream |\n| [Psr\\Http\\Message\\UriInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessageuriinterface) | Value object representing a URI. |\n| [Psr\\Http\\Message\\UploadedFileInterface](http://www.php-fig.org/psr/psr-7/#psrhttpmessageuploadedfileinterface) | Value object representing a file uploaded through an HTTP request. |\n\n## `Psr\\Http\\Message\\MessageInterface` Methods\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getProtocolVersion()`             | Retrieve HTTP protocol version          |  1.0 or 1.1 |\n| `withProtocolVersion($version)`    | Returns new message instance with given HTTP protocol version          |      |\n| `getHeaders()`                     | Retrieve all HTTP Headers               | [Request Header List](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Request_fields), [Response Header List](https://en.wikipedia.org/wiki/List_of_HTTP_header_fields#Response_fields)      |\n| `hasHeader($name)`                 | Checks if HTTP Header with given name exists  | |\n| `getHeader($name)`                 | Retrieves a array with the values for a single header | |\n| `getHeaderLine($name)`             | Retrieves a comma-separated string of the values for a single header |  |\n| `withHeader($name, $value)`        | Returns new message instance with given HTTP Header | if the header existed in the original instance, replaces the header value from the original message with the value provided when creating the new instance. |\n| `withAddedHeader($name, $value)`   | Returns new message instance with appended value to given header | If header already exists value will be appended, if not a new header will be created |\n| `withoutHeader($name)`             | Removes HTTP Header with given name| |\n| `getBody()`                        | Retrieves the HTTP Message Body | Returns object implementing `StreamInterface`|\n| `withBody(StreamInterface $body)`  | Returns new message instance with given HTTP Message Body | |\n\n\n## `Psr\\Http\\Message\\RequestInterface` Methods\n\nSame methods as `Psr\\Http\\Message\\MessageInterface`  + the following methods:\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getRequestTarget()`                | Retrieves the message's request target              | origin-form, absolute-form, authority-form, asterisk-form ([RFC7230](https://www.rfc-editor.org/rfc/rfc7230.txt)) |\n| `withRequestTarget($requestTarget)` | Return a new message instance with the specific request-target |      |\n| `getMethod()`                       | Retrieves the HTTP method of the request.  |  GET, HEAD, POST, PUT, DELETE, CONNECT, OPTIONS, TRACE (defined in [RFC7231](https://tools.ietf.org/html/rfc7231)), PATCH (defined in [RFC5789](https://tools.ietf.org/html/rfc5789)) |\n| `withMethod($method)`               | Returns a new message instance with the provided HTTP method  | |\n| `getUri()`                 | Retrieves the URI instance | |\n| `withUri(UriInterface $uri, $preserveHost = false)` | Returns a new message instance with the provided URI |  |\n\n\n## `Psr\\Http\\Message\\ServerRequestInterface` Methods\n\nSame methods as `Psr\\Http\\Message\\RequestInterface`  + the following methods:\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getServerParams() `               | Retrieve server parameters  | Typically derived from `$_SERVER`  |\n| `getCookieParams()`                | Retrieves cookies sent by the client to the server. | Typically derived from `$_COOKIES` |\n| `withCookieParams(array $cookies)` |  Returns a new request instance with the specified cookies      |   | \n| `withQueryParams(array $query)` | Returns a new request instance with the specified query string arguments  |  |\n| `getUploadedFiles()` | Retrieve normalized file upload data  |  |\n| `withUploadedFiles(array $uploadedFiles)` | Returns a new request instance with the specified uploaded files  |  |\n| `getParsedBody()` | Retrieve any parameters provided in the request body  |  |\n| `withParsedBody($data)` | Returns a new request instance with the specified body parameters  |  |\n| `getAttributes()` | Retrieve attributes derived from the request  |  |\n| `getAttribute($name, $default = null)` | Retrieve a single derived request attribute  |  |\n| `withAttribute($name, $value)` | Returns a new request instance with the specified derived request attribute  |  |\n| `withoutAttribute($name)` | Returns a new request instance that without the specified derived request attribute  |  |\n\n## `Psr\\Http\\Message\\ResponseInterface` Methods:\n\nSame methods as `Psr\\Http\\Message\\MessageInterface`  + the following methods:\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getStatusCode()` | Gets the response status code. | |\n| `withStatus($code, $reasonPhrase = '')` | Returns a new response instance with the specified status code and, optionally, reason phrase. | |\n| `getReasonPhrase()` | Gets the response reason phrase associated with the status code. | |\n\n##  `Psr\\Http\\Message\\StreamInterface` Methods\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `__toString()` | Reads all data from the stream into a string, from the beginning to end. | |\n| `close()` | Closes the stream and any underlying resources. | |\n| `detach()` | Separates any underlying resources from the stream. | |\n| `getSize()` | Get the size of the stream if known. | |\n| `eof()` | Returns true if the stream is at the end of the stream.| |\n| `isSeekable()` |  Returns whether or not the stream is seekable. | |\n| `seek($offset, $whence = SEEK_SET)` | Seek to a position in the stream. | |\n| `rewind()` | Seek to the beginning of the stream. | |\n| `isWritable()` | Returns whether or not the stream is writable. | |\n| `write($string)` | Write data to the stream. | |\n| `isReadable()` | Returns whether or not the stream is readable. | |\n| `read($length)` | Read data from the stream. | |\n| `getContents()` | Returns the remaining contents in a string | |\n| `getMetadata($key = null)()` | Get stream metadata as an associative array or retrieve a specific key. | |\n\n## `Psr\\Http\\Message\\UriInterface` Methods\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getScheme()` | Retrieve the scheme component of the URI. | |\n| `getAuthority()` | Retrieve the authority component of the URI. | |\n| `getUserInfo()` | Retrieve the user information component of the URI. | |\n| `getHost()` | Retrieve the host component of the URI. | |\n| `getPort()` | Retrieve the port component of the URI. | |\n| `getPath()` | Retrieve the path component of the URI. | |\n| `getQuery()` | Retrieve the query string of the URI. | |\n| `getFragment()` | Retrieve the fragment component of the URI. | |\n| `withScheme($scheme)` | Return an instance with the specified scheme. | |\n| `withUserInfo($user, $password = null)` | Return an instance with the specified user information. | |\n| `withHost($host)` | Return an instance with the specified host. | |\n| `withPort($port)` | Return an instance with the specified port. | |\n| `withPath($path)` | Return an instance with the specified path. | |\n| `withQuery($query)` | Return an instance with the specified query string. | |\n| `withFragment($fragment)` | Return an instance with the specified URI fragment. | |\n| `__toString()` | Return the string representation as a URI reference. | |\n\n## `Psr\\Http\\Message\\UploadedFileInterface` Methods\n\n| Method Name                        | Description | Notes |\n|------------------------------------| ----------- | ----- |\n| `getStream()` | Retrieve a stream representing the uploaded file. | |\n| `moveTo($targetPath)` | Move the uploaded file to a new location. | |\n| `getSize()` | Retrieve the file size. | |\n| `getError()` | Retrieve the error associated with the uploaded file. | |\n| `getClientFilename()` | Retrieve the filename sent by the client. | |\n| `getClientMediaType()` | Retrieve the media type sent by the client. | |\n\n> `RequestInterface`, `ServerRequestInterface`, `ResponseInterface` extend `MessageInterface`  because the `Request` and the `Response` are `HTTP Messages`.\n> When using `ServerRequestInterface`, both `RequestInterface` and `Psr\\Http\\Message\\MessageInterface` methods are considered.\n\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/CHANGELOG.md","ext":"md","size":1075,"mtime":1756373564,"type":"text","content":"# Changelog\n\nAll notable changes to this project will be documented in this file, in reverse chronological order by release.\n\n## 1.0.1 - 2016-08-06\n\n### Added\n\n- Nothing.\n\n### Deprecated\n\n- Nothing.\n\n### Removed\n\n- Nothing.\n\n### Fixed\n\n- Updated all `@return self` annotation references in interfaces to use\n  `@return static`, which more closelly follows the semantics of the\n  specification.\n- Updated the `MessageInterface::getHeaders()` return annotation to use the\n  value `string[][]`, indicating the format is a nested array of strings.\n- Updated the `@link` annotation for `RequestInterface::withRequestTarget()`\n  to point to the correct section of RFC 7230.\n- Updated the `ServerRequestInterface::withUploadedFiles()` parameter annotation\n  to add the parameter name (`$uploadedFiles`).\n- Updated a `@throws` annotation for the `UploadedFileInterface::moveTo()`\n  method to correctly reference the method parameter (it was referencing an\n  incorrect parameter name previously).\n\n## 1.0.0 - 2016-05-18\n\nInitial stable release; reflects accepted PSR-7 specification.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/ServerRequestInterface.php","ext":"php","size":10298,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Representation of an incoming, server-side HTTP request.\n *\n * Per the HTTP specification, this interface includes properties for\n * each of the following:\n *\n * - Protocol version\n * - HTTP method\n * - URI\n * - Headers\n * - Message body\n *\n * Additionally, it encapsulates all data as it has arrived to the\n * application from the CGI and/or PHP environment, including:\n *\n * - The values represented in $_SERVER.\n * - Any cookies provided (generally via $_COOKIE)\n * - Query string arguments (generally via $_GET, or as parsed via parse_str())\n * - Upload files, if any (as represented by $_FILES)\n * - Deserialized body parameters (generally from $_POST)\n *\n * $_SERVER values MUST be treated as immutable, as they represent application\n * state at the time of request; as such, no methods are provided to allow\n * modification of those values. The other values provide such methods, as they\n * can be restored from $_SERVER or the request body, and may need treatment\n * during the application (e.g., body parameters may be deserialized based on\n * content type).\n *\n * Additionally, this interface recognizes the utility of introspecting a\n * request to derive and match additional parameters (e.g., via URI path\n * matching, decrypting cookie values, deserializing non-form-encoded body\n * content, matching authorization headers to users, etc). These parameters\n * are stored in an \"attributes\" property.\n *\n * Requests are considered immutable; all methods that might change state MUST\n * be implemented such that they retain the internal state of the current\n * message and return an instance that contains the changed state.\n */\ninterface ServerRequestInterface extends RequestInterface\n{\n    /**\n     * Retrieve server parameters.\n     *\n     * Retrieves data related to the incoming request environment,\n     * typically derived from PHP's $_SERVER superglobal. The data IS NOT\n     * REQUIRED to originate from $_SERVER.\n     *\n     * @return array\n     */\n    public function getServerParams(): array;\n\n    /**\n     * Retrieve cookies.\n     *\n     * Retrieves cookies sent by the client to the server.\n     *\n     * The data MUST be compatible with the structure of the $_COOKIE\n     * superglobal.\n     *\n     * @return array\n     */\n    public function getCookieParams(): array;\n\n    /**\n     * Return an instance with the specified cookies.\n     *\n     * The data IS NOT REQUIRED to come from the $_COOKIE superglobal, but MUST\n     * be compatible with the structure of $_COOKIE. Typically, this data will\n     * be injected at instantiation.\n     *\n     * This method MUST NOT update the related Cookie header of the request\n     * instance, nor related values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated cookie values.\n     *\n     * @param array $cookies Array of key/value pairs representing cookies.\n     * @return static\n     */\n    public function withCookieParams(array $cookies): ServerRequestInterface;\n\n    /**\n     * Retrieve query string arguments.\n     *\n     * Retrieves the deserialized query string arguments, if any.\n     *\n     * Note: the query params might not be in sync with the URI or server\n     * params. If you need to ensure you are only getting the original\n     * values, you may need to parse the query string from `getUri()->getQuery()`\n     * or from the `QUERY_STRING` server param.\n     *\n     * @return array\n     */\n    public function getQueryParams(): array;\n\n    /**\n     * Return an instance with the specified query string arguments.\n     *\n     * These values SHOULD remain immutable over the course of the incoming\n     * request. They MAY be injected during instantiation, such as from PHP's\n     * $_GET superglobal, or MAY be derived from some other value such as the\n     * URI. In cases where the arguments are parsed from the URI, the data\n     * MUST be compatible with what PHP's parse_str() would return for\n     * purposes of how duplicate query parameters are handled, and how nested\n     * sets are handled.\n     *\n     * Setting query string arguments MUST NOT change the URI stored by the\n     * request, nor the values in the server params.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated query string arguments.\n     *\n     * @param array $query Array of query string arguments, typically from\n     *     $_GET.\n     * @return static\n     */\n    public function withQueryParams(array $query): ServerRequestInterface;\n\n    /**\n     * Retrieve normalized file upload data.\n     *\n     * This method returns upload metadata in a normalized tree, with each leaf\n     * an instance of Psr\\Http\\Message\\UploadedFileInterface.\n     *\n     * These values MAY be prepared from $_FILES or the message body during\n     * instantiation, or MAY be injected via withUploadedFiles().\n     *\n     * @return array An array tree of UploadedFileInterface instances; an empty\n     *     array MUST be returned if no data is present.\n     */\n    public function getUploadedFiles(): array;\n\n    /**\n     * Create a new instance with the specified uploaded files.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param array $uploadedFiles An array tree of UploadedFileInterface instances.\n     * @return static\n     * @throws \\InvalidArgumentException if an invalid structure is provided.\n     */\n    public function withUploadedFiles(array $uploadedFiles): ServerRequestInterface;\n\n    /**\n     * Retrieve any parameters provided in the request body.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, this method MUST\n     * return the contents of $_POST.\n     *\n     * Otherwise, this method may return any results of deserializing\n     * the request body content; as parsing returns structured content, the\n     * potential types MUST be arrays or objects only. A null value indicates\n     * the absence of body content.\n     *\n     * @return null|array|object The deserialized body parameters, if any.\n     *     These will typically be an array or object.\n     */\n    public function getParsedBody();\n\n    /**\n     * Return an instance with the specified body parameters.\n     *\n     * These MAY be injected during instantiation.\n     *\n     * If the request Content-Type is either application/x-www-form-urlencoded\n     * or multipart/form-data, and the request method is POST, use this method\n     * ONLY to inject the contents of $_POST.\n     *\n     * The data IS NOT REQUIRED to come from $_POST, but MUST be the results of\n     * deserializing the request body content. Deserialization/parsing returns\n     * structured data, and, as such, this method ONLY accepts arrays or objects,\n     * or a null value if nothing was available to parse.\n     *\n     * As an example, if content negotiation determines that the request data\n     * is a JSON payload, this method could be used to create a request\n     * instance with the deserialized parameters.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated body parameters.\n     *\n     * @param null|array|object $data The deserialized body data. This will\n     *     typically be in an array or object.\n     * @return static\n     * @throws \\InvalidArgumentException if an unsupported argument type is\n     *     provided.\n     */\n    public function withParsedBody($data): ServerRequestInterface;\n\n    /**\n     * Retrieve attributes derived from the request.\n     *\n     * The request \"attributes\" may be used to allow injection of any\n     * parameters derived from the request: e.g., the results of path\n     * match operations; the results of decrypting cookies; the results of\n     * deserializing non-form-encoded message bodies; etc. Attributes\n     * will be application and request specific, and CAN be mutable.\n     *\n     * @return array Attributes derived from the request.\n     */\n    public function getAttributes(): array;\n\n    /**\n     * Retrieve a single derived request attribute.\n     *\n     * Retrieves a single derived request attribute as described in\n     * getAttributes(). If the attribute has not been previously set, returns\n     * the default value as provided.\n     *\n     * This method obviates the need for a hasAttribute() method, as it allows\n     * specifying a default value to return if the attribute is not found.\n     *\n     * @see getAttributes()\n     * @param string $name The attribute name.\n     * @param mixed $default Default value to return if the attribute does not exist.\n     * @return mixed\n     */\n    public function getAttribute(string $name, $default = null);\n\n    /**\n     * Return an instance with the specified derived request attribute.\n     *\n     * This method allows setting a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated attribute.\n     *\n     * @see getAttributes()\n     * @param string $name The attribute name.\n     * @param mixed $value The value of the attribute.\n     * @return static\n     */\n    public function withAttribute(string $name, $value): ServerRequestInterface;\n\n    /**\n     * Return an instance that removes the specified derived request attribute.\n     *\n     * This method allows removing a single derived request attribute as\n     * described in getAttributes().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the attribute.\n     *\n     * @see getAttributes()\n     * @param string $name The attribute name.\n     * @return static\n     */\n    public function withoutAttribute(string $name): ServerRequestInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/UriInterface.php","ext":"php","size":12831,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Value object representing a URI.\n *\n * This interface is meant to represent URIs according to RFC 3986 and to\n * provide methods for most common operations. Additional functionality for\n * working with URIs can be provided on top of the interface or externally.\n * Its primary use is for HTTP requests, but may also be used in other\n * contexts.\n *\n * Instances of this interface are considered immutable; all methods that\n * might change state MUST be implemented such that they retain the internal\n * state of the current instance and return an instance that contains the\n * changed state.\n *\n * Typically the Host header will be also be present in the request message.\n * For server-side requests, the scheme will typically be discoverable in the\n * server parameters.\n *\n * @link http://tools.ietf.org/html/rfc3986 (the URI specification)\n */\ninterface UriInterface\n{\n    /**\n     * Retrieve the scheme component of the URI.\n     *\n     * If no scheme is present, this method MUST return an empty string.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.1.\n     *\n     * The trailing \":\" character is not part of the scheme and MUST NOT be\n     * added.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.1\n     * @return string The URI scheme.\n     */\n    public function getScheme(): string;\n\n    /**\n     * Retrieve the authority component of the URI.\n     *\n     * If no authority information is present, this method MUST return an empty\n     * string.\n     *\n     * The authority syntax of the URI is:\n     *\n     * <pre>\n     * [user-info@]host[:port]\n     * </pre>\n     *\n     * If the port component is not set or is the standard port for the current\n     * scheme, it SHOULD NOT be included.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2\n     * @return string The URI authority, in \"[user-info@]host[:port]\" format.\n     */\n    public function getAuthority(): string;\n\n    /**\n     * Retrieve the user information component of the URI.\n     *\n     * If no user information is present, this method MUST return an empty\n     * string.\n     *\n     * If a user is present in the URI, this will return that value;\n     * additionally, if the password is also present, it will be appended to the\n     * user value, with a colon (\":\") separating the values.\n     *\n     * The trailing \"@\" character is not part of the user information and MUST\n     * NOT be added.\n     *\n     * @return string The URI user information, in \"username[:password]\" format.\n     */\n    public function getUserInfo(): string;\n\n    /**\n     * Retrieve the host component of the URI.\n     *\n     * If no host is present, this method MUST return an empty string.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.2.2.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @return string The URI host.\n     */\n    public function getHost(): string;\n\n    /**\n     * Retrieve the port component of the URI.\n     *\n     * If a port is present, and it is non-standard for the current scheme,\n     * this method MUST return it as an integer. If the port is the standard port\n     * used with the current scheme, this method SHOULD return null.\n     *\n     * If no port is present, and no scheme is present, this method MUST return\n     * a null value.\n     *\n     * If no port is present, but a scheme is present, this method MAY return\n     * the standard port for that scheme, but SHOULD return null.\n     *\n     * @return null|int The URI port.\n     */\n    public function getPort(): ?int;\n\n    /**\n     * Retrieve the path component of the URI.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * Normally, the empty path \"\" and absolute path \"/\" are considered equal as\n     * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n     * do this normalization because in contexts with a trimmed base path, e.g.\n     * the front controller, this difference becomes significant. It's the task\n     * of the user to handle both \"\" and \"/\".\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.3.\n     *\n     * As an example, if the value should include a slash (\"/\") not intended as\n     * delimiter between path segments, that value MUST be passed in encoded\n     * form (e.g., \"%2F\") to the instance.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.3\n     * @return string The URI path.\n     */\n    public function getPath(): string;\n\n    /**\n     * Retrieve the query string of the URI.\n     *\n     * If no query string is present, this method MUST return an empty string.\n     *\n     * The leading \"?\" character is not part of the query and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.4.\n     *\n     * As an example, if a value in a key/value pair of the query string should\n     * include an ampersand (\"&\") not intended as a delimiter between values,\n     * that value MUST be passed in encoded form (e.g., \"%26\") to the instance.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.4\n     * @return string The URI query string.\n     */\n    public function getQuery(): string;\n\n    /**\n     * Retrieve the fragment component of the URI.\n     *\n     * If no fragment is present, this method MUST return an empty string.\n     *\n     * The leading \"#\" character is not part of the fragment and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.5.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.5\n     * @return string The URI fragment.\n     */\n    public function getFragment(): string;\n\n    /**\n     * Return an instance with the specified scheme.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified scheme.\n     *\n     * Implementations MUST support the schemes \"http\" and \"https\" case\n     * insensitively, and MAY accommodate other schemes if required.\n     *\n     * An empty scheme is equivalent to removing the scheme.\n     *\n     * @param string $scheme The scheme to use with the new instance.\n     * @return static A new instance with the specified scheme.\n     * @throws \\InvalidArgumentException for invalid or unsupported schemes.\n     */\n    public function withScheme(string $scheme): UriInterface;\n\n    /**\n     * Return an instance with the specified user information.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified user information.\n     *\n     * Password is optional, but the user information MUST include the\n     * user; an empty string for the user is equivalent to removing user\n     * information.\n     *\n     * @param string $user The user name to use for authority.\n     * @param null|string $password The password associated with $user.\n     * @return static A new instance with the specified user information.\n     */\n    public function withUserInfo(string $user, ?string $password = null): UriInterface;\n\n    /**\n     * Return an instance with the specified host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified host.\n     *\n     * An empty host value is equivalent to removing the host.\n     *\n     * @param string $host The hostname to use with the new instance.\n     * @return static A new instance with the specified host.\n     * @throws \\InvalidArgumentException for invalid hostnames.\n     */\n    public function withHost(string $host): UriInterface;\n\n    /**\n     * Return an instance with the specified port.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified port.\n     *\n     * Implementations MUST raise an exception for ports outside the\n     * established TCP and UDP port ranges.\n     *\n     * A null value provided for the port is equivalent to removing the port\n     * information.\n     *\n     * @param null|int $port The port to use with the new instance; a null value\n     *     removes the port information.\n     * @return static A new instance with the specified port.\n     * @throws \\InvalidArgumentException for invalid ports.\n     */\n    public function withPort(?int $port): UriInterface;\n\n    /**\n     * Return an instance with the specified path.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified path.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * If the path is intended to be domain-relative rather than path relative then\n     * it must begin with a slash (\"/\"). Paths not starting with a slash (\"/\")\n     * are assumed to be relative to some base path known to the application or\n     * consumer.\n     *\n     * Users can provide both encoded and decoded path characters.\n     * Implementations ensure the correct encoding as outlined in getPath().\n     *\n     * @param string $path The path to use with the new instance.\n     * @return static A new instance with the specified path.\n     * @throws \\InvalidArgumentException for invalid paths.\n     */\n    public function withPath(string $path): UriInterface;\n\n    /**\n     * Return an instance with the specified query string.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified query string.\n     *\n     * Users can provide both encoded and decoded query characters.\n     * Implementations ensure the correct encoding as outlined in getQuery().\n     *\n     * An empty query string value is equivalent to removing the query string.\n     *\n     * @param string $query The query string to use with the new instance.\n     * @return static A new instance with the specified query string.\n     * @throws \\InvalidArgumentException for invalid query strings.\n     */\n    public function withQuery(string $query): UriInterface;\n\n    /**\n     * Return an instance with the specified URI fragment.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified URI fragment.\n     *\n     * Users can provide both encoded and decoded fragment characters.\n     * Implementations ensure the correct encoding as outlined in getFragment().\n     *\n     * An empty fragment value is equivalent to removing the fragment.\n     *\n     * @param string $fragment The fragment to use with the new instance.\n     * @return static A new instance with the specified fragment.\n     */\n    public function withFragment(string $fragment): UriInterface;\n\n    /**\n     * Return the string representation as a URI reference.\n     *\n     * Depending on which components of the URI are present, the resulting\n     * string is either a full URI or relative reference according to RFC 3986,\n     * Section 4.1. The method concatenates the various components of the URI,\n     * using the appropriate delimiters:\n     *\n     * - If a scheme is present, it MUST be suffixed by \":\".\n     * - If an authority is present, it MUST be prefixed by \"//\".\n     * - The path can be concatenated without delimiters. But there are two\n     *   cases where the path has to be adjusted to make the URI reference\n     *   valid as PHP does not allow to throw an exception in __toString():\n     *     - If the path is rootless and an authority is present, the path MUST\n     *       be prefixed by \"/\".\n     *     - If the path is starting with more than one \"/\" and no authority is\n     *       present, the starting slashes MUST be reduced to one.\n     * - If a query is present, it MUST be prefixed by \"?\".\n     * - If a fragment is present, it MUST be prefixed by \"#\".\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     * @return string\n     */\n    public function __toString(): string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/MessageInterface.php","ext":"php","size":7102,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * HTTP messages consist of requests from a client to a server and responses\n * from a server to a client. This interface defines the methods common to\n * each.\n *\n * Messages are considered immutable; all methods that might change state MUST\n * be implemented such that they retain the internal state of the current\n * message and return an instance that contains the changed state.\n *\n * @link http://www.ietf.org/rfc/rfc7230.txt\n * @link http://www.ietf.org/rfc/rfc7231.txt\n */\ninterface MessageInterface\n{\n    /**\n     * Retrieves the HTTP protocol version as a string.\n     *\n     * The string MUST contain only the HTTP version number (e.g., \"1.1\", \"1.0\").\n     *\n     * @return string HTTP protocol version.\n     */\n    public function getProtocolVersion(): string;\n\n    /**\n     * Return an instance with the specified HTTP protocol version.\n     *\n     * The version string MUST contain only the HTTP version number (e.g.,\n     * \"1.1\", \"1.0\").\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new protocol version.\n     *\n     * @param string $version HTTP protocol version\n     * @return static\n     */\n    public function withProtocolVersion(string $version): MessageInterface;\n\n    /**\n     * Retrieves all message header values.\n     *\n     * The keys represent the header name as it will be sent over the wire, and\n     * each value is an array of strings associated with the header.\n     *\n     *     // Represent the headers as a string\n     *     foreach ($message->getHeaders() as $name => $values) {\n     *         echo $name . \": \" . implode(\", \", $values);\n     *     }\n     *\n     *     // Emit headers iteratively:\n     *     foreach ($message->getHeaders() as $name => $values) {\n     *         foreach ($values as $value) {\n     *             header(sprintf('%s: %s', $name, $value), false);\n     *         }\n     *     }\n     *\n     * While header names are not case-sensitive, getHeaders() will preserve the\n     * exact case in which headers were originally specified.\n     *\n     * @return string[][] Returns an associative array of the message's headers. Each\n     *     key MUST be a header name, and each value MUST be an array of strings\n     *     for that header.\n     */\n    public function getHeaders(): array;\n\n    /**\n     * Checks if a header exists by the given case-insensitive name.\n     *\n     * @param string $name Case-insensitive header field name.\n     * @return bool Returns true if any header names match the given header\n     *     name using a case-insensitive string comparison. Returns false if\n     *     no matching header name is found in the message.\n     */\n    public function hasHeader(string $name): bool;\n\n    /**\n     * Retrieves a message header value by the given case-insensitive name.\n     *\n     * This method returns an array of all the header values of the given\n     * case-insensitive header name.\n     *\n     * If the header does not appear in the message, this method MUST return an\n     * empty array.\n     *\n     * @param string $name Case-insensitive header field name.\n     * @return string[] An array of string values as provided for the given\n     *    header. If the header does not appear in the message, this method MUST\n     *    return an empty array.\n     */\n    public function getHeader(string $name): array;\n\n    /**\n     * Retrieves a comma-separated string of the values for a single header.\n     *\n     * This method returns all of the header values of the given\n     * case-insensitive header name as a string concatenated together using\n     * a comma.\n     *\n     * NOTE: Not all header values may be appropriately represented using\n     * comma concatenation. For such headers, use getHeader() instead\n     * and supply your own delimiter when concatenating.\n     *\n     * If the header does not appear in the message, this method MUST return\n     * an empty string.\n     *\n     * @param string $name Case-insensitive header field name.\n     * @return string A string of values as provided for the given header\n     *    concatenated together using a comma. If the header does not appear in\n     *    the message, this method MUST return an empty string.\n     */\n    public function getHeaderLine(string $name): string;\n\n    /**\n     * Return an instance with the provided value replacing the specified header.\n     *\n     * While header names are case-insensitive, the casing of the header will\n     * be preserved by this function, and returned from getHeaders().\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new and/or updated header and value.\n     *\n     * @param string $name Case-insensitive header field name.\n     * @param string|string[] $value Header value(s).\n     * @return static\n     * @throws \\InvalidArgumentException for invalid header names or values.\n     */\n    public function withHeader(string $name, $value): MessageInterface;\n\n    /**\n     * Return an instance with the specified header appended with the given value.\n     *\n     * Existing values for the specified header will be maintained. The new\n     * value(s) will be appended to the existing list. If the header did not\n     * exist previously, it will be added.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new header and/or value.\n     *\n     * @param string $name Case-insensitive header field name to add.\n     * @param string|string[] $value Header value(s).\n     * @return static\n     * @throws \\InvalidArgumentException for invalid header names or values.\n     */\n    public function withAddedHeader(string $name, $value): MessageInterface;\n\n    /**\n     * Return an instance without the specified header.\n     *\n     * Header resolution MUST be done without case-sensitivity.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that removes\n     * the named header.\n     *\n     * @param string $name Case-insensitive header field name to remove.\n     * @return static\n     */\n    public function withoutHeader(string $name): MessageInterface;\n\n    /**\n     * Gets the body of the message.\n     *\n     * @return StreamInterface Returns the body as a stream.\n     */\n    public function getBody(): StreamInterface;\n\n    /**\n     * Return an instance with the specified message body.\n     *\n     * The body MUST be a StreamInterface object.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return a new instance that has the\n     * new body stream.\n     *\n     * @param StreamInterface $body Body.\n     * @return static\n     * @throws \\InvalidArgumentException When the body is not valid.\n     */\n    public function withBody(StreamInterface $body): MessageInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/UploadedFileInterface.php","ext":"php","size":4748,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Value object representing a file uploaded through an HTTP request.\n *\n * Instances of this interface are considered immutable; all methods that\n * might change state MUST be implemented such that they retain the internal\n * state of the current instance and return an instance that contains the\n * changed state.\n */\ninterface UploadedFileInterface\n{\n    /**\n     * Retrieve a stream representing the uploaded file.\n     *\n     * This method MUST return a StreamInterface instance, representing the\n     * uploaded file. The purpose of this method is to allow utilizing native PHP\n     * stream functionality to manipulate the file upload, such as\n     * stream_copy_to_stream() (though the result will need to be decorated in a\n     * native PHP stream wrapper to work with such functions).\n     *\n     * If the moveTo() method has been called previously, this method MUST raise\n     * an exception.\n     *\n     * @return StreamInterface Stream representation of the uploaded file.\n     * @throws \\RuntimeException in cases when no stream is available or can be\n     *     created.\n     */\n    public function getStream(): StreamInterface;\n\n    /**\n     * Move the uploaded file to a new location.\n     *\n     * Use this method as an alternative to move_uploaded_file(). This method is\n     * guaranteed to work in both SAPI and non-SAPI environments.\n     * Implementations must determine which environment they are in, and use the\n     * appropriate method (move_uploaded_file(), rename(), or a stream\n     * operation) to perform the operation.\n     *\n     * $targetPath may be an absolute path, or a relative path. If it is a\n     * relative path, resolution should be the same as used by PHP's rename()\n     * function.\n     *\n     * The original file or stream MUST be removed on completion.\n     *\n     * If this method is called more than once, any subsequent calls MUST raise\n     * an exception.\n     *\n     * When used in an SAPI environment where $_FILES is populated, when writing\n     * files via moveTo(), is_uploaded_file() and move_uploaded_file() SHOULD be\n     * used to ensure permissions and upload status are verified correctly.\n     *\n     * If you wish to move to a stream, use getStream(), as SAPI operations\n     * cannot guarantee writing to stream destinations.\n     *\n     * @see http://php.net/is_uploaded_file\n     * @see http://php.net/move_uploaded_file\n     * @param string $targetPath Path to which to move the uploaded file.\n     * @throws \\InvalidArgumentException if the $targetPath specified is invalid.\n     * @throws \\RuntimeException on any error during the move operation, or on\n     *     the second or subsequent call to the method.\n     */\n    public function moveTo(string $targetPath): void;\n    \n    /**\n     * Retrieve the file size.\n     *\n     * Implementations SHOULD return the value stored in the \"size\" key of\n     * the file in the $_FILES array if available, as PHP calculates this based\n     * on the actual size transmitted.\n     *\n     * @return int|null The file size in bytes or null if unknown.\n     */\n    public function getSize(): ?int;\n    \n    /**\n     * Retrieve the error associated with the uploaded file.\n     *\n     * The return value MUST be one of PHP's UPLOAD_ERR_XXX constants.\n     *\n     * If the file was uploaded successfully, this method MUST return\n     * UPLOAD_ERR_OK.\n     *\n     * Implementations SHOULD return the value stored in the \"error\" key of\n     * the file in the $_FILES array.\n     *\n     * @see http://php.net/manual/en/features.file-upload.errors.php\n     * @return int One of PHP's UPLOAD_ERR_XXX constants.\n     */\n    public function getError(): int;\n    \n    /**\n     * Retrieve the filename sent by the client.\n     *\n     * Do not trust the value returned by this method. A client could send\n     * a malicious filename with the intention to corrupt or hack your\n     * application.\n     *\n     * Implementations SHOULD return the value stored in the \"name\" key of\n     * the file in the $_FILES array.\n     *\n     * @return string|null The filename sent by the client or null if none\n     *     was provided.\n     */\n    public function getClientFilename(): ?string;\n    \n    /**\n     * Retrieve the media type sent by the client.\n     *\n     * Do not trust the value returned by this method. A client could send\n     * a malicious media type with the intention to corrupt or hack your\n     * application.\n     *\n     * Implementations SHOULD return the value stored in the \"type\" key of\n     * the file in the $_FILES array.\n     *\n     * @return string|null The media type sent by the client or null if none\n     *     was provided.\n     */\n    public function getClientMediaType(): ?string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/ResponseInterface.php","ext":"php","size":2634,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Representation of an outgoing, server-side response.\n *\n * Per the HTTP specification, this interface includes properties for\n * each of the following:\n *\n * - Protocol version\n * - Status code and reason phrase\n * - Headers\n * - Message body\n *\n * Responses are considered immutable; all methods that might change state MUST\n * be implemented such that they retain the internal state of the current\n * message and return an instance that contains the changed state.\n */\ninterface ResponseInterface extends MessageInterface\n{\n    /**\n     * Gets the response status code.\n     *\n     * The status code is a 3-digit integer result code of the server's attempt\n     * to understand and satisfy the request.\n     *\n     * @return int Status code.\n     */\n    public function getStatusCode(): int;\n\n    /**\n     * Return an instance with the specified status code and, optionally, reason phrase.\n     *\n     * If no reason phrase is specified, implementations MAY choose to default\n     * to the RFC 7231 or IANA recommended reason phrase for the response's\n     * status code.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * updated status and reason phrase.\n     *\n     * @link http://tools.ietf.org/html/rfc7231#section-6\n     * @link http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n     * @param int $code The 3-digit integer result code to set.\n     * @param string $reasonPhrase The reason phrase to use with the\n     *     provided status code; if none is provided, implementations MAY\n     *     use the defaults as suggested in the HTTP specification.\n     * @return static\n     * @throws \\InvalidArgumentException For invalid status code arguments.\n     */\n    public function withStatus(int $code, string $reasonPhrase = ''): ResponseInterface;\n\n    /**\n     * Gets the response reason phrase associated with the status code.\n     *\n     * Because a reason phrase is not a required element in a response\n     * status line, the reason phrase value MAY be null. Implementations MAY\n     * choose to return the default RFC 7231 recommended reason phrase (or those\n     * listed in the IANA HTTP Status Code Registry) for the response's\n     * status code.\n     *\n     * @link http://tools.ietf.org/html/rfc7231#section-6\n     * @link http://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n     * @return string Reason phrase; must return an empty string if none present.\n     */\n    public function getReasonPhrase(): string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/StreamInterface.php","ext":"php","size":4860,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Describes a data stream.\n *\n * Typically, an instance will wrap a PHP stream; this interface provides\n * a wrapper around the most common operations, including serialization of\n * the entire stream to a string.\n */\ninterface StreamInterface\n{\n    /**\n     * Reads all data from the stream into a string, from the beginning to end.\n     *\n     * This method MUST attempt to seek to the beginning of the stream before\n     * reading data and read the stream until the end is reached.\n     *\n     * Warning: This could attempt to load a large amount of data into memory.\n     *\n     * This method MUST NOT raise an exception in order to conform with PHP's\n     * string casting operations.\n     *\n     * @see http://php.net/manual/en/language.oop5.magic.php#object.tostring\n     * @return string\n     */\n    public function __toString(): string;\n\n    /**\n     * Closes the stream and any underlying resources.\n     *\n     * @return void\n     */\n    public function close(): void;\n\n    /**\n     * Separates any underlying resources from the stream.\n     *\n     * After the stream has been detached, the stream is in an unusable state.\n     *\n     * @return resource|null Underlying PHP stream, if any\n     */\n    public function detach();\n\n    /**\n     * Get the size of the stream if known.\n     *\n     * @return int|null Returns the size in bytes if known, or null if unknown.\n     */\n    public function getSize(): ?int;\n\n    /**\n     * Returns the current position of the file read/write pointer\n     *\n     * @return int Position of the file pointer\n     * @throws \\RuntimeException on error.\n     */\n    public function tell(): int;\n\n    /**\n     * Returns true if the stream is at the end of the stream.\n     *\n     * @return bool\n     */\n    public function eof(): bool;\n\n    /**\n     * Returns whether or not the stream is seekable.\n     *\n     * @return bool\n     */\n    public function isSeekable(): bool;\n\n    /**\n     * Seek to a position in the stream.\n     *\n     * @link http://www.php.net/manual/en/function.fseek.php\n     * @param int $offset Stream offset\n     * @param int $whence Specifies how the cursor position will be calculated\n     *     based on the seek offset. Valid values are identical to the built-in\n     *     PHP $whence values for `fseek()`.  SEEK_SET: Set position equal to\n     *     offset bytes SEEK_CUR: Set position to current location plus offset\n     *     SEEK_END: Set position to end-of-stream plus offset.\n     * @throws \\RuntimeException on failure.\n     */\n    public function seek(int $offset, int $whence = SEEK_SET): void;\n\n    /**\n     * Seek to the beginning of the stream.\n     *\n     * If the stream is not seekable, this method will raise an exception;\n     * otherwise, it will perform a seek(0).\n     *\n     * @see seek()\n     * @link http://www.php.net/manual/en/function.fseek.php\n     * @throws \\RuntimeException on failure.\n     */\n    public function rewind(): void;\n\n    /**\n     * Returns whether or not the stream is writable.\n     *\n     * @return bool\n     */\n    public function isWritable(): bool;\n\n    /**\n     * Write data to the stream.\n     *\n     * @param string $string The string that is to be written.\n     * @return int Returns the number of bytes written to the stream.\n     * @throws \\RuntimeException on failure.\n     */\n    public function write(string $string): int;\n\n    /**\n     * Returns whether or not the stream is readable.\n     *\n     * @return bool\n     */\n    public function isReadable(): bool;\n\n    /**\n     * Read data from the stream.\n     *\n     * @param int $length Read up to $length bytes from the object and return\n     *     them. Fewer than $length bytes may be returned if underlying stream\n     *     call returns fewer bytes.\n     * @return string Returns the data read from the stream, or an empty string\n     *     if no bytes are available.\n     * @throws \\RuntimeException if an error occurs.\n     */\n    public function read(int $length): string;\n\n    /**\n     * Returns the remaining contents in a string\n     *\n     * @return string\n     * @throws \\RuntimeException if unable to read or an error occurs while\n     *     reading.\n     */\n    public function getContents(): string;\n\n    /**\n     * Get stream metadata as an associative array or retrieve a specific key.\n     *\n     * The keys returned are identical to the keys returned from PHP's\n     * stream_get_meta_data() function.\n     *\n     * @link http://php.net/manual/en/function.stream-get-meta-data.php\n     * @param string|null $key Specific metadata to retrieve.\n     * @return array|mixed|null Returns an associative array if no key is\n     *     provided. Returns a specific key value if a key is provided and the\n     *     value is found, or null if the key is not found.\n     */\n    public function getMetadata(?string $key = null);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-message/src/RequestInterface.php","ext":"php","size":4919,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\n/**\n * Representation of an outgoing, client-side request.\n *\n * Per the HTTP specification, this interface includes properties for\n * each of the following:\n *\n * - Protocol version\n * - HTTP method\n * - URI\n * - Headers\n * - Message body\n *\n * During construction, implementations MUST attempt to set the Host header from\n * a provided URI if no Host header is provided.\n *\n * Requests are considered immutable; all methods that might change state MUST\n * be implemented such that they retain the internal state of the current\n * message and return an instance that contains the changed state.\n */\ninterface RequestInterface extends MessageInterface\n{\n    /**\n     * Retrieves the message's request target.\n     *\n     * Retrieves the message's request-target either as it will appear (for\n     * clients), as it appeared at request (for servers), or as it was\n     * specified for the instance (see withRequestTarget()).\n     *\n     * In most cases, this will be the origin-form of the composed URI,\n     * unless a value was provided to the concrete implementation (see\n     * withRequestTarget() below).\n     *\n     * If no URI is available, and no request-target has been specifically\n     * provided, this method MUST return the string \"/\".\n     *\n     * @return string\n     */\n    public function getRequestTarget(): string;\n\n    /**\n     * Return an instance with the specific request-target.\n     *\n     * If the request needs a non-origin-form request-target — e.g., for\n     * specifying an absolute-form, authority-form, or asterisk-form —\n     * this method may be used to create an instance with the specified\n     * request-target, verbatim.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request target.\n     *\n     * @link http://tools.ietf.org/html/rfc7230#section-5.3 (for the various\n     *     request-target forms allowed in request messages)\n     * @param string $requestTarget\n     * @return static\n     */\n    public function withRequestTarget(string $requestTarget): RequestInterface;\n\n\n    /**\n     * Retrieves the HTTP method of the request.\n     *\n     * @return string Returns the request method.\n     */\n    public function getMethod(): string;\n\n    /**\n     * Return an instance with the provided HTTP method.\n     *\n     * While HTTP method names are typically all uppercase characters, HTTP\n     * method names are case-sensitive and thus implementations SHOULD NOT\n     * modify the given string.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * changed request method.\n     *\n     * @param string $method Case-sensitive method.\n     * @return static\n     * @throws \\InvalidArgumentException for invalid HTTP methods.\n     */\n    public function withMethod(string $method): RequestInterface;\n\n    /**\n     * Retrieves the URI instance.\n     *\n     * This method MUST return a UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @return UriInterface Returns a UriInterface instance\n     *     representing the URI of the request.\n     */\n    public function getUri(): UriInterface;\n\n    /**\n     * Returns an instance with the provided URI.\n     *\n     * This method MUST update the Host header of the returned request by\n     * default if the URI contains a host component. If the URI does not\n     * contain a host component, any pre-existing Host header MUST be carried\n     * over to the returned request.\n     *\n     * You can opt-in to preserving the original state of the Host header by\n     * setting `$preserveHost` to `true`. When `$preserveHost` is set to\n     * `true`, this method interacts with the Host header in the following ways:\n     *\n     * - If the Host header is missing or empty, and the new URI contains\n     *   a host component, this method MUST update the Host header in the returned\n     *   request.\n     * - If the Host header is missing or empty, and the new URI does not contain a\n     *   host component, this method MUST NOT update the Host header in the returned\n     *   request.\n     * - If a Host header is present and non-empty, this method MUST NOT update\n     *   the Host header in the returned request.\n     *\n     * This method MUST be implemented in such a way as to retain the\n     * immutability of the message, and MUST return an instance that has the\n     * new UriInterface instance.\n     *\n     * @link http://tools.ietf.org/html/rfc3986#section-4.3\n     * @param UriInterface $uri New request URI to use.\n     * @param bool $preserveHost Preserve the original state of the Host header.\n     * @return static\n     */\n    public function withUri(UriInterface $uri, bool $preserveHost = false): RequestInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/event-dispatcher/src/StoppableEventInterface.php","ext":"php","size":785,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Psr\\EventDispatcher;\n\n/**\n * An Event whose processing may be interrupted when the event has been handled.\n *\n * A Dispatcher implementation MUST check to determine if an Event\n * is marked as stopped after each listener is called.  If it is then it should\n * return immediately without calling any further Listeners.\n */\ninterface StoppableEventInterface\n{\n    /**\n     * Is propagation stopped?\n     *\n     * This will typically only be used by the Dispatcher to determine if the\n     * previous listener halted propagation.\n     *\n     * @return bool\n     *   True if the Event is complete and no further listeners should be called.\n     *   False to continue calling listeners.\n     */\n    public function isPropagationStopped(): bool;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/event-dispatcher/src/ListenerProviderInterface.php","ext":"php","size":524,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Psr\\EventDispatcher;\n\n/**\n * Mapper from an event to the listeners that are applicable to that event.\n */\ninterface ListenerProviderInterface\n{\n    /**\n     * @param object $event\n     *   An event for which to return the relevant listeners.\n     * @return iterable<callable>\n     *   An iterable (array, iterator, or generator) of callables.  Each\n     *   callable MUST be type-compatible with $event.\n     */\n    public function getListenersForEvent(object $event): iterable;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/event-dispatcher/src/EventDispatcherInterface.php","ext":"php","size":432,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Psr\\EventDispatcher;\n\n/**\n * Defines a dispatcher for events.\n */\ninterface EventDispatcherInterface\n{\n    /**\n     * Provide all relevant listeners with an event to process.\n     *\n     * @param object $event\n     *   The object to process.\n     *\n     * @return object\n     *   The Event that was passed, now modified by listeners.\n     */\n    public function dispatch(object $event);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/container/src/ContainerExceptionInterface.php","ext":"php","size":184,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Container;\n\nuse Throwable;\n\n/**\n * Base interface representing a generic exception in a container.\n */\ninterface ContainerExceptionInterface extends Throwable\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/container/src/NotFoundExceptionInterface.php","ext":"php","size":158,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Container;\n\n/**\n * No entry was found in the container.\n */\ninterface NotFoundExceptionInterface extends ContainerExceptionInterface\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/container/src/ContainerInterface.php","ext":"php","size":1046,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Psr\\Container;\n\n/**\n * Describes the interface of a container that exposes methods to read its entries.\n */\ninterface ContainerInterface\n{\n    /**\n     * Finds an entry of the container by its identifier and returns it.\n     *\n     * @param string $id Identifier of the entry to look for.\n     *\n     * @throws NotFoundExceptionInterface  No entry was found for **this** identifier.\n     * @throws ContainerExceptionInterface Error while retrieving the entry.\n     *\n     * @return mixed Entry.\n     */\n    public function get(string $id);\n\n    /**\n     * Returns true if the container can return an entry for the given identifier.\n     * Returns false otherwise.\n     *\n     * `has($id)` returning true does not mean that `get($id)` will not throw an exception.\n     * It does however mean that `get($id)` will not throw a `NotFoundExceptionInterface`.\n     *\n     * @param string $id Identifier of the entry to look for.\n     *\n     * @return bool\n     */\n    public function has(string $id): bool;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/clock/CHANGELOG.md","ext":"md","size":206,"mtime":1756373564,"type":"text","content":"# Changelog\n\nAll notable changes to this project will be documented in this file, in reverse chronological order by release.\n\n## 1.0.0\n\nFirst stable release after PSR-20 acceptance\n\n## 0.1.0\n\nFirst release\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/clock/src/ClockInterface.php","ext":"php","size":206,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Clock;\n\nuse DateTimeImmutable;\n\ninterface ClockInterface\n{\n    /**\n     * Returns the current time as a DateTimeImmutable Object\n     */\n    public function now(): DateTimeImmutable;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/NullLogger.php","ext":"php","size":732,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * This Logger can be used to avoid conditional log calls.\n *\n * Logging should always be optional, and if no logger is provided to your\n * library creating a NullLogger instance to have something to throw logs at\n * is a good way to avoid littering your code with `if ($this->logger) { }`\n * blocks.\n */\nclass NullLogger extends AbstractLogger\n{\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed  $level\n     * @param string|\\Stringable $message\n     * @param array $context\n     *\n     * @return void\n     *\n     * @throws \\Psr\\Log\\InvalidArgumentException\n     */\n    public function log($level, string|\\Stringable $message, array $context = [])\n    {\n        // noop\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/LoggerAwareInterface.php","ext":"php","size":297,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes a logger-aware instance.\n */\ninterface LoggerAwareInterface\n{\n    /**\n     * Sets a logger instance on the object.\n     *\n     * @param LoggerInterface $logger\n     *\n     * @return void\n     */\n    public function setLogger(LoggerInterface $logger);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/AbstractLogger.php","ext":"php","size":414,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * This is a simple Logger implementation that other Loggers can inherit from.\n *\n * It simply delegates all log-level-specific methods to the `log` method to\n * reduce boilerplate code that a simple Logger that does the same thing with\n * messages regardless of the error level has to implement.\n */\nabstract class AbstractLogger implements LoggerInterface\n{\n    use LoggerTrait;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/LoggerAwareTrait.php","ext":"php","size":426,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * Basic Implementation of LoggerAwareInterface.\n */\ntrait LoggerAwareTrait\n{\n    /**\n     * The logger instance.\n     *\n     * @var LoggerInterface|null\n     */\n    protected ?LoggerInterface $logger = null;\n\n    /**\n     * Sets a logger.\n     *\n     * @param LoggerInterface $logger\n     */\n    public function setLogger(LoggerInterface $logger)\n    {\n        $this->logger = $logger;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/LogLevel.php","ext":"php","size":336,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes log levels.\n */\nclass LogLevel\n{\n    const EMERGENCY = 'emergency';\n    const ALERT     = 'alert';\n    const CRITICAL  = 'critical';\n    const ERROR     = 'error';\n    const WARNING   = 'warning';\n    const NOTICE    = 'notice';\n    const INFO      = 'info';\n    const DEBUG     = 'debug';\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/LoggerInterface.php","ext":"php","size":3339,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * Describes a logger instance.\n *\n * The message MUST be a string or object implementing __toString().\n *\n * The message MAY contain placeholders in the form: {foo} where foo\n * will be replaced by the context data in key \"foo\".\n *\n * The context array can contain arbitrary data. The only assumption that\n * can be made by implementors is that if an Exception instance is given\n * to produce a stack trace, it MUST be in a key named \"exception\".\n *\n * See https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md\n * for the full interface specification.\n */\ninterface LoggerInterface\n{\n    /**\n     * System is unusable.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function emergency(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Action must be taken immediately.\n     *\n     * Example: Entire website down, database unavailable, etc. This should\n     * trigger the SMS alerts and wake you up.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function alert(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Critical conditions.\n     *\n     * Example: Application component unavailable, unexpected exception.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function critical(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Runtime errors that do not require immediate action but should typically\n     * be logged and monitored.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function error(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Exceptional occurrences that are not errors.\n     *\n     * Example: Use of deprecated APIs, poor use of an API, undesirable things\n     * that are not necessarily wrong.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function warning(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Normal but significant events.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function notice(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Interesting events.\n     *\n     * Example: User logs in, SQL logs.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function info(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Detailed debug information.\n     *\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     */\n    public function debug(string|\\Stringable $message, array $context = []);\n\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed   $level\n     * @param string|\\Stringable $message\n     * @param mixed[] $context\n     *\n     * @return void\n     *\n     * @throws \\Psr\\Log\\InvalidArgumentException\n     */\n    public function log($level, string|\\Stringable $message, array $context = []);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/InvalidArgumentException.php","ext":"php","size":96,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\nclass InvalidArgumentException extends \\InvalidArgumentException\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/log/src/LoggerTrait.php","ext":"php","size":3649,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Log;\n\n/**\n * This is a simple Logger trait that classes unable to extend AbstractLogger\n * (because they extend another class, etc) can include.\n *\n * It simply delegates all log-level-specific methods to the `log` method to\n * reduce boilerplate code that a simple Logger that does the same thing with\n * messages regardless of the error level has to implement.\n */\ntrait LoggerTrait\n{\n    /**\n     * System is unusable.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function emergency(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::EMERGENCY, $message, $context);\n    }\n\n    /**\n     * Action must be taken immediately.\n     *\n     * Example: Entire website down, database unavailable, etc. This should\n     * trigger the SMS alerts and wake you up.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function alert(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::ALERT, $message, $context);\n    }\n\n    /**\n     * Critical conditions.\n     *\n     * Example: Application component unavailable, unexpected exception.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function critical(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::CRITICAL, $message, $context);\n    }\n\n    /**\n     * Runtime errors that do not require immediate action but should typically\n     * be logged and monitored.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function error(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::ERROR, $message, $context);\n    }\n\n    /**\n     * Exceptional occurrences that are not errors.\n     *\n     * Example: Use of deprecated APIs, poor use of an API, undesirable things\n     * that are not necessarily wrong.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function warning(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::WARNING, $message, $context);\n    }\n\n    /**\n     * Normal but significant events.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function notice(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::NOTICE, $message, $context);\n    }\n\n    /**\n     * Interesting events.\n     *\n     * Example: User logs in, SQL logs.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function info(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::INFO, $message, $context);\n    }\n\n    /**\n     * Detailed debug information.\n     *\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     */\n    public function debug(string|\\Stringable $message, array $context = [])\n    {\n        $this->log(LogLevel::DEBUG, $message, $context);\n    }\n\n    /**\n     * Logs with an arbitrary level.\n     *\n     * @param mixed  $level\n     * @param string|\\Stringable $message\n     * @param array  $context\n     *\n     * @return void\n     *\n     * @throws \\Psr\\Log\\InvalidArgumentException\n     */\n    abstract public function log($level, string|\\Stringable $message, array $context = []);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/ServerRequestFactoryInterface.php","ext":"php","size":927,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface ServerRequestFactoryInterface\n{\n    /**\n     * Create a new server request.\n     *\n     * Note that server-params are taken precisely as given - no parsing/processing\n     * of the given values is performed, and, in particular, no attempt is made to\n     * determine the HTTP method or URI, which must be provided explicitly.\n     *\n     * @param string $method The HTTP method associated with the request.\n     * @param UriInterface|string $uri The URI associated with the request. If\n     *     the value is a string, the factory MUST create a UriInterface\n     *     instance based on it.\n     * @param array $serverParams Array of SAPI parameters with which to seed\n     *     the generated request instance.\n     *\n     * @return ServerRequestInterface\n     */\n    public function createServerRequest(string $method, $uri, array $serverParams = []): ServerRequestInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/RequestFactoryInterface.php","ext":"php","size":499,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface RequestFactoryInterface\n{\n    /**\n     * Create a new request.\n     *\n     * @param string $method The HTTP method associated with the request.\n     * @param UriInterface|string $uri The URI associated with the request. If\n     *     the value is a string, the factory MUST create a UriInterface\n     *     instance based on it.\n     *\n     * @return RequestInterface\n     */\n    public function createRequest(string $method, $uri): RequestInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/StreamFactoryInterface.php","ext":"php","size":1418,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface StreamFactoryInterface\n{\n    /**\n     * Create a new stream from a string.\n     *\n     * The stream SHOULD be created with a temporary resource.\n     *\n     * @param string $content String content with which to populate the stream.\n     *\n     * @return StreamInterface\n     */\n    public function createStream(string $content = ''): StreamInterface;\n\n    /**\n     * Create a stream from an existing file.\n     *\n     * The file MUST be opened using the given mode, which may be any mode\n     * supported by the `fopen` function.\n     *\n     * The `$filename` MAY be any string supported by `fopen()`.\n     *\n     * @param string $filename Filename or stream URI to use as basis of stream.\n     * @param string $mode Mode with which to open the underlying filename/stream.\n     *\n     * @return StreamInterface\n     * @throws \\RuntimeException If the file cannot be opened.\n     * @throws \\InvalidArgumentException If the mode is invalid.\n     */\n    public function createStreamFromFile(string $filename, string $mode = 'r'): StreamInterface;\n\n    /**\n     * Create a new stream from an existing resource.\n     *\n     * The stream MUST be readable and may be writable.\n     *\n     * @param resource $resource PHP resource to use as basis of stream.\n     *\n     * @return StreamInterface\n     */\n    public function createStreamFromResource($resource): StreamInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/UploadedFileFactoryInterface.php","ext":"php","size":1128,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface UploadedFileFactoryInterface\n{\n    /**\n     * Create a new uploaded file.\n     *\n     * If a size is not provided it will be determined by checking the size of\n     * the file.\n     *\n     * @see http://php.net/manual/features.file-upload.post-method.php\n     * @see http://php.net/manual/features.file-upload.errors.php\n     *\n     * @param StreamInterface $stream Underlying stream representing the\n     *     uploaded file content.\n     * @param int|null $size in bytes\n     * @param int $error PHP file upload error\n     * @param string|null $clientFilename Filename as provided by the client, if any.\n     * @param string|null $clientMediaType Media type as provided by the client, if any.\n     *\n     * @return UploadedFileInterface\n     *\n     * @throws \\InvalidArgumentException If the file resource is not readable.\n     */\n    public function createUploadedFile(\n        StreamInterface $stream,\n        ?int $size = null,\n        int $error = \\UPLOAD_ERR_OK,\n        ?string $clientFilename = null,\n        ?string $clientMediaType = null\n    ): UploadedFileInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/UriFactoryInterface.php","ext":"php","size":325,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface UriFactoryInterface\n{\n    /**\n     * Create a new URI.\n     *\n     * @param string $uri\n     *\n     * @return UriInterface\n     *\n     * @throws \\InvalidArgumentException If the given URI cannot be parsed.\n     */\n    public function createUri(string $uri = ''): UriInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/psr/http-factory/src/ResponseFactoryInterface.php","ext":"php","size":546,"mtime":1756373564,"type":"text","content":"<?php\n\nnamespace Psr\\Http\\Message;\n\ninterface ResponseFactoryInterface\n{\n    /**\n     * Create a new response.\n     *\n     * @param int $code HTTP status code; defaults to 200\n     * @param string $reasonPhrase Reason phrase to associate with status code\n     *     in generated response; if none is provided implementations MAY use\n     *     the defaults as suggested in the HTTP specification.\n     *\n     * @return ResponseInterface\n     */\n    public function createResponse(int $code = 200, string $reasonPhrase = ''): ResponseInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Dotenv.php","ext":"php","size":8267,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv;\n\nuse Dotenv\\Exception\\InvalidPathException;\nuse Dotenv\\Loader\\Loader;\nuse Dotenv\\Loader\\LoaderInterface;\nuse Dotenv\\Parser\\Parser;\nuse Dotenv\\Parser\\ParserInterface;\nuse Dotenv\\Repository\\Adapter\\ArrayAdapter;\nuse Dotenv\\Repository\\Adapter\\PutenvAdapter;\nuse Dotenv\\Repository\\RepositoryBuilder;\nuse Dotenv\\Repository\\RepositoryInterface;\nuse Dotenv\\Store\\StoreBuilder;\nuse Dotenv\\Store\\StoreInterface;\nuse Dotenv\\Store\\StringStore;\n\nclass Dotenv\n{\n    /**\n     * The store instance.\n     *\n     * @var \\Dotenv\\Store\\StoreInterface\n     */\n    private $store;\n\n    /**\n     * The parser instance.\n     *\n     * @var \\Dotenv\\Parser\\ParserInterface\n     */\n    private $parser;\n\n    /**\n     * The loader instance.\n     *\n     * @var \\Dotenv\\Loader\\LoaderInterface\n     */\n    private $loader;\n\n    /**\n     * The repository instance.\n     *\n     * @var \\Dotenv\\Repository\\RepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * Create a new dotenv instance.\n     *\n     * @param \\Dotenv\\Store\\StoreInterface           $store\n     * @param \\Dotenv\\Parser\\ParserInterface         $parser\n     * @param \\Dotenv\\Loader\\LoaderInterface         $loader\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     *\n     * @return void\n     */\n    public function __construct(\n        StoreInterface $store,\n        ParserInterface $parser,\n        LoaderInterface $loader,\n        RepositoryInterface $repository\n    ) {\n        $this->store = $store;\n        $this->parser = $parser;\n        $this->loader = $loader;\n        $this->repository = $repository;\n    }\n\n    /**\n     * Create a new dotenv instance.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param string|string[]                        $paths\n     * @param string|string[]|null                   $names\n     * @param bool                                   $shortCircuit\n     * @param string|null                            $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function create(RepositoryInterface $repository, $paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $builder = $names === null ? StoreBuilder::createWithDefaultName() : StoreBuilder::createWithNoNames();\n\n        foreach ((array) $paths as $path) {\n            $builder = $builder->addPath($path);\n        }\n\n        foreach ((array) $names as $name) {\n            $builder = $builder->addName($name);\n        }\n\n        if ($shortCircuit) {\n            $builder = $builder->shortCircuit();\n        }\n\n        return new self($builder->fileEncoding($fileEncoding)->make(), new Parser(), new Loader(), $repository);\n    }\n\n    /**\n     * Create a new mutable dotenv instance with default repository.\n     *\n     * @param string|string[]      $paths\n     * @param string|string[]|null $names\n     * @param bool                 $shortCircuit\n     * @param string|null          $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function createMutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $repository = RepositoryBuilder::createWithDefaultAdapters()->make();\n\n        return self::create($repository, $paths, $names, $shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Create a new mutable dotenv instance with default repository with the putenv adapter.\n     *\n     * @param string|string[]      $paths\n     * @param string|string[]|null $names\n     * @param bool                 $shortCircuit\n     * @param string|null          $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function createUnsafeMutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $repository = RepositoryBuilder::createWithDefaultAdapters()\n            ->addAdapter(PutenvAdapter::class)\n            ->make();\n\n        return self::create($repository, $paths, $names, $shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Create a new immutable dotenv instance with default repository.\n     *\n     * @param string|string[]      $paths\n     * @param string|string[]|null $names\n     * @param bool                 $shortCircuit\n     * @param string|null          $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function createImmutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $repository = RepositoryBuilder::createWithDefaultAdapters()->immutable()->make();\n\n        return self::create($repository, $paths, $names, $shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Create a new immutable dotenv instance with default repository with the putenv adapter.\n     *\n     * @param string|string[]      $paths\n     * @param string|string[]|null $names\n     * @param bool                 $shortCircuit\n     * @param string|null          $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function createUnsafeImmutable($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $repository = RepositoryBuilder::createWithDefaultAdapters()\n            ->addAdapter(PutenvAdapter::class)\n            ->immutable()\n            ->make();\n\n        return self::create($repository, $paths, $names, $shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Create a new dotenv instance with an array backed repository.\n     *\n     * @param string|string[]      $paths\n     * @param string|string[]|null $names\n     * @param bool                 $shortCircuit\n     * @param string|null          $fileEncoding\n     *\n     * @return \\Dotenv\\Dotenv\n     */\n    public static function createArrayBacked($paths, $names = null, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $repository = RepositoryBuilder::createWithNoAdapters()->addAdapter(ArrayAdapter::class)->make();\n\n        return self::create($repository, $paths, $names, $shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Parse the given content and resolve nested variables.\n     *\n     * This method behaves just like load(), only without mutating your actual\n     * environment. We do this by using an array backed repository.\n     *\n     * @param string $content\n     *\n     * @throws \\Dotenv\\Exception\\InvalidFileException\n     *\n     * @return array<string, string|null>\n     */\n    public static function parse(string $content)\n    {\n        $repository = RepositoryBuilder::createWithNoAdapters()->addAdapter(ArrayAdapter::class)->make();\n\n        $phpdotenv = new self(new StringStore($content), new Parser(), new Loader(), $repository);\n\n        return $phpdotenv->load();\n    }\n\n    /**\n     * Read and load environment file(s).\n     *\n     * @throws \\Dotenv\\Exception\\InvalidPathException|\\Dotenv\\Exception\\InvalidEncodingException|\\Dotenv\\Exception\\InvalidFileException\n     *\n     * @return array<string, string|null>\n     */\n    public function load()\n    {\n        $entries = $this->parser->parse($this->store->read());\n\n        return $this->loader->load($this->repository, $entries);\n    }\n\n    /**\n     * Read and load environment file(s), silently failing if no files can be read.\n     *\n     * @throws \\Dotenv\\Exception\\InvalidEncodingException|\\Dotenv\\Exception\\InvalidFileException\n     *\n     * @return array<string, string|null>\n     */\n    public function safeLoad()\n    {\n        try {\n            return $this->load();\n        } catch (InvalidPathException $e) {\n            // suppressing exception\n            return [];\n        }\n    }\n\n    /**\n     * Required ensures that the specified variables exist, and returns a new validator object.\n     *\n     * @param string|string[] $variables\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function required($variables)\n    {\n        return (new Validator($this->repository, (array) $variables))->required();\n    }\n\n    /**\n     * Returns a new validator object that won't check if the specified variables exist.\n     *\n     * @param string|string[] $variables\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function ifPresent($variables)\n    {\n        return new Validator($this->repository, (array) $variables);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Loader/LoaderInterface.php","ext":"php","size":458,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Loader;\n\nuse Dotenv\\Repository\\RepositoryInterface;\n\ninterface LoaderInterface\n{\n    /**\n     * Load the given entries into the repository.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param \\Dotenv\\Parser\\Entry[]                 $entries\n     *\n     * @return array<string, string|null>\n     */\n    public function load(RepositoryInterface $repository, array $entries);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Loader/Loader.php","ext":"php","size":1490,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Loader;\n\nuse Dotenv\\Parser\\Entry;\nuse Dotenv\\Parser\\Value;\nuse Dotenv\\Repository\\RepositoryInterface;\n\nfinal class Loader implements LoaderInterface\n{\n    /**\n     * Load the given entries into the repository.\n     *\n     * We'll substitute any nested variables, and send each variable to the\n     * repository, with the effect of actually mutating the environment.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param \\Dotenv\\Parser\\Entry[]                 $entries\n     *\n     * @return array<string, string|null>\n     */\n    public function load(RepositoryInterface $repository, array $entries)\n    {\n        /** @var array<string, string|null> */\n        return \\array_reduce($entries, static function (array $vars, Entry $entry) use ($repository) {\n            $name = $entry->getName();\n\n            $value = $entry->getValue()->map(static function (Value $value) use ($repository) {\n                return Resolver::resolve($repository, $value);\n            });\n\n            if ($value->isDefined()) {\n                $inner = $value->get();\n                if ($repository->set($name, $inner)) {\n                    return \\array_merge($vars, [$name => $inner]);\n                }\n            } else {\n                if ($repository->clear($name)) {\n                    return \\array_merge($vars, [$name => null]);\n                }\n            }\n\n            return $vars;\n        }, []);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Loader/Resolver.php","ext":"php","size":1766,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Loader;\n\nuse Dotenv\\Parser\\Value;\nuse Dotenv\\Repository\\RepositoryInterface;\nuse Dotenv\\Util\\Regex;\nuse Dotenv\\Util\\Str;\nuse PhpOption\\Option;\n\nfinal class Resolver\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Resolve the nested variables in the given value.\n     *\n     * Replaces ${varname} patterns in the allowed positions in the variable\n     * value by an existing environment variable.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param \\Dotenv\\Parser\\Value                   $value\n     *\n     * @return string\n     */\n    public static function resolve(RepositoryInterface $repository, Value $value)\n    {\n        return \\array_reduce($value->getVars(), static function (string $s, int $i) use ($repository) {\n            return Str::substr($s, 0, $i).self::resolveVariable($repository, Str::substr($s, $i));\n        }, $value->getChars());\n    }\n\n    /**\n     * Resolve a single nested variable.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param string                                 $str\n     *\n     * @return string\n     */\n    private static function resolveVariable(RepositoryInterface $repository, string $str)\n    {\n        return Regex::replaceCallback(\n            '/\\A\\${([a-zA-Z0-9_.]+)}/',\n            static function (array $matches) use ($repository) {\n                /** @var string */\n                return Option::fromValue($repository->get($matches[1]))->getOrElse($matches[0]);\n            },\n            $str,\n            1\n        )->success()->getOrElse($str);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Validator.php","ext":"php","size":5187,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv;\n\nuse Dotenv\\Exception\\ValidationException;\nuse Dotenv\\Repository\\RepositoryInterface;\nuse Dotenv\\Util\\Regex;\nuse Dotenv\\Util\\Str;\n\nclass Validator\n{\n    /**\n     * The environment repository instance.\n     *\n     * @var \\Dotenv\\Repository\\RepositoryInterface\n     */\n    private $repository;\n\n    /**\n     * The variables to validate.\n     *\n     * @var string[]\n     */\n    private $variables;\n\n    /**\n     * Create a new validator instance.\n     *\n     * @param \\Dotenv\\Repository\\RepositoryInterface $repository\n     * @param string[]                               $variables\n     *\n     * @return void\n     */\n    public function __construct(RepositoryInterface $repository, array $variables)\n    {\n        $this->repository = $repository;\n        $this->variables = $variables;\n    }\n\n    /**\n     * Assert that each variable is present.\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function required()\n    {\n        return $this->assert(\n            static function (?string $value) {\n                return $value !== null;\n            },\n            'is missing'\n        );\n    }\n\n    /**\n     * Assert that each variable is not empty.\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function notEmpty()\n    {\n        return $this->assertNullable(\n            static function (string $value) {\n                return Str::len(\\trim($value)) > 0;\n            },\n            'is empty'\n        );\n    }\n\n    /**\n     * Assert that each specified variable is an integer.\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function isInteger()\n    {\n        return $this->assertNullable(\n            static function (string $value) {\n                return \\ctype_digit($value);\n            },\n            'is not an integer'\n        );\n    }\n\n    /**\n     * Assert that each specified variable is a boolean.\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function isBoolean()\n    {\n        return $this->assertNullable(\n            static function (string $value) {\n                if ($value === '') {\n                    return false;\n                }\n\n                return \\filter_var($value, \\FILTER_VALIDATE_BOOLEAN, \\FILTER_NULL_ON_FAILURE) !== null;\n            },\n            'is not a boolean'\n        );\n    }\n\n    /**\n     * Assert that each variable is amongst the given choices.\n     *\n     * @param string[] $choices\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function allowedValues(array $choices)\n    {\n        return $this->assertNullable(\n            static function (string $value) use ($choices) {\n                return \\in_array($value, $choices, true);\n            },\n            \\sprintf('is not one of [%s]', \\implode(', ', $choices))\n        );\n    }\n\n    /**\n     * Assert that each variable matches the given regular expression.\n     *\n     * @param string $regex\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function allowedRegexValues(string $regex)\n    {\n        return $this->assertNullable(\n            static function (string $value) use ($regex) {\n                return Regex::matches($regex, $value)->success()->getOrElse(false);\n            },\n            \\sprintf('does not match \"%s\"', $regex)\n        );\n    }\n\n    /**\n     * Assert that the callback returns true for each variable.\n     *\n     * @param callable(?string):bool $callback\n     * @param string                 $message\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function assert(callable $callback, string $message)\n    {\n        $failing = [];\n\n        foreach ($this->variables as $variable) {\n            if ($callback($this->repository->get($variable)) === false) {\n                $failing[] = \\sprintf('%s %s', $variable, $message);\n            }\n        }\n\n        if (\\count($failing) > 0) {\n            throw new ValidationException(\\sprintf(\n                'One or more environment variables failed assertions: %s.',\n                \\implode(', ', $failing)\n            ));\n        }\n\n        return $this;\n    }\n\n    /**\n     * Assert that the callback returns true for each variable.\n     *\n     * Skip checking null variable values.\n     *\n     * @param callable(string):bool $callback\n     * @param string                $message\n     *\n     * @throws \\Dotenv\\Exception\\ValidationException\n     *\n     * @return \\Dotenv\\Validator\n     */\n    public function assertNullable(callable $callback, string $message)\n    {\n        return $this->assert(\n            static function (?string $value) use ($callback) {\n                if ($value === null) {\n                    return true;\n                }\n\n                return $callback($value);\n            },\n            $message\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/Parser.php","ext":"php","size":1749,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nuse Dotenv\\Exception\\InvalidFileException;\nuse Dotenv\\Util\\Regex;\nuse GrahamCampbell\\ResultType\\Result;\nuse GrahamCampbell\\ResultType\\Success;\n\nfinal class Parser implements ParserInterface\n{\n    /**\n     * Parse content into an entry array.\n     *\n     * @param string $content\n     *\n     * @throws \\Dotenv\\Exception\\InvalidFileException\n     *\n     * @return \\Dotenv\\Parser\\Entry[]\n     */\n    public function parse(string $content)\n    {\n        return Regex::split(\"/(\\r\\n|\\n|\\r)/\", $content)->mapError(static function () {\n            return 'Could not split into separate lines.';\n        })->flatMap(static function (array $lines) {\n            return self::process(Lines::process($lines));\n        })->mapError(static function (string $error) {\n            throw new InvalidFileException(\\sprintf('Failed to parse dotenv file. %s', $error));\n        })->success()->get();\n    }\n\n    /**\n     * Convert the raw entries into proper entries.\n     *\n     * @param string[] $entries\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Entry[], string>\n     */\n    private static function process(array $entries)\n    {\n        /** @var \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Entry[], string> */\n        return \\array_reduce($entries, static function (Result $result, string $raw) {\n            return $result->flatMap(static function (array $entries) use ($raw) {\n                return EntryParser::parse($raw)->map(static function (Entry $entry) use ($entries) {\n                    /** @var \\Dotenv\\Parser\\Entry[] */\n                    return \\array_merge($entries, [$entry]);\n                });\n            });\n        }, Success::create([]));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/Value.php","ext":"php","size":1588,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nuse Dotenv\\Util\\Str;\n\nfinal class Value\n{\n    /**\n     * The string representation of the parsed value.\n     *\n     * @var string\n     */\n    private $chars;\n\n    /**\n     * The locations of the variables in the value.\n     *\n     * @var int[]\n     */\n    private $vars;\n\n    /**\n     * Internal constructor for a value.\n     *\n     * @param string $chars\n     * @param int[]  $vars\n     *\n     * @return void\n     */\n    private function __construct(string $chars, array $vars)\n    {\n        $this->chars = $chars;\n        $this->vars = $vars;\n    }\n\n    /**\n     * Create an empty value instance.\n     *\n     * @return \\Dotenv\\Parser\\Value\n     */\n    public static function blank()\n    {\n        return new self('', []);\n    }\n\n    /**\n     * Create a new value instance, appending the characters.\n     *\n     * @param string $chars\n     * @param bool   $var\n     *\n     * @return \\Dotenv\\Parser\\Value\n     */\n    public function append(string $chars, bool $var)\n    {\n        return new self(\n            $this->chars.$chars,\n            $var ? \\array_merge($this->vars, [Str::len($this->chars)]) : $this->vars\n        );\n    }\n\n    /**\n     * Get the string representation of the parsed value.\n     *\n     * @return string\n     */\n    public function getChars()\n    {\n        return $this->chars;\n    }\n\n    /**\n     * Get the locations of the variables in the value.\n     *\n     * @return int[]\n     */\n    public function getVars()\n    {\n        $vars = $this->vars;\n\n        \\rsort($vars);\n\n        return $vars;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/ParserInterface.php","ext":"php","size":334,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\ninterface ParserInterface\n{\n    /**\n     * Parse content into an entry array.\n     *\n     * @param string $content\n     *\n     * @throws \\Dotenv\\Exception\\InvalidFileException\n     *\n     * @return \\Dotenv\\Parser\\Entry[]\n     */\n    public function parse(string $content);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/Lines.php","ext":"php","size":3148,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nuse Dotenv\\Util\\Regex;\nuse Dotenv\\Util\\Str;\n\nfinal class Lines\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Process the array of lines of environment variables.\n     *\n     * This will produce an array of raw entries, one per variable.\n     *\n     * @param string[] $lines\n     *\n     * @return string[]\n     */\n    public static function process(array $lines)\n    {\n        $output = [];\n        $multiline = false;\n        $multilineBuffer = [];\n\n        foreach ($lines as $line) {\n            [$multiline, $line, $multilineBuffer] = self::multilineProcess($multiline, $line, $multilineBuffer);\n\n            if (!$multiline && !self::isCommentOrWhitespace($line)) {\n                $output[] = $line;\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Used to make all multiline variable process.\n     *\n     * @param bool     $multiline\n     * @param string   $line\n     * @param string[] $buffer\n     *\n     * @return array{bool,string, string[]}\n     */\n    private static function multilineProcess(bool $multiline, string $line, array $buffer)\n    {\n        $startsOnCurrentLine = $multiline ? false : self::looksLikeMultilineStart($line);\n\n        // check if $line can be multiline variable\n        if ($startsOnCurrentLine) {\n            $multiline = true;\n        }\n\n        if ($multiline) {\n            \\array_push($buffer, $line);\n\n            if (self::looksLikeMultilineStop($line, $startsOnCurrentLine)) {\n                $multiline = false;\n                $line = \\implode(\"\\n\", $buffer);\n                $buffer = [];\n            }\n        }\n\n        return [$multiline, $line, $buffer];\n    }\n\n    /**\n     * Determine if the given line can be the start of a multiline variable.\n     *\n     * @param string $line\n     *\n     * @return bool\n     */\n    private static function looksLikeMultilineStart(string $line)\n    {\n        return Str::pos($line, '=\"')->map(static function () use ($line) {\n            return self::looksLikeMultilineStop($line, true) === false;\n        })->getOrElse(false);\n    }\n\n    /**\n     * Determine if the given line can be the start of a multiline variable.\n     *\n     * @param string $line\n     * @param bool   $started\n     *\n     * @return bool\n     */\n    private static function looksLikeMultilineStop(string $line, bool $started)\n    {\n        if ($line === '\"') {\n            return true;\n        }\n\n        return Regex::occurrences('/(?=([^\\\\\\\\]\"))/', \\str_replace('\\\\\\\\', '', $line))->map(static function (int $count) use ($started) {\n            return $started ? $count > 1 : $count >= 1;\n        })->success()->getOrElse(false);\n    }\n\n    /**\n     * Determine if the line in the file is a comment or whitespace.\n     *\n     * @param string $line\n     *\n     * @return bool\n     */\n    private static function isCommentOrWhitespace(string $line)\n    {\n        $line = \\trim($line);\n\n        return $line === '' || (isset($line[0]) && $line[0] === '#');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/Lexer.php","ext":"php","size":1272,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nfinal class Lexer\n{\n    /**\n     * The regex for each type of token.\n     */\n    private const PATTERNS = [\n        '[\\r\\n]{1,1000}', '[^\\S\\r\\n]{1,1000}', '\\\\\\\\', '\\'', '\"', '\\\\#', '\\\\$', '([^(\\s\\\\\\\\\\'\"\\\\#\\\\$)]|\\\\(|\\\\)){1,1000}',\n    ];\n\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Convert content into a token stream.\n     *\n     * Multibyte string processing is not needed here, and nether is error\n     * handling, for performance reasons.\n     *\n     * @param string $content\n     *\n     * @return \\Generator<string>\n     */\n    public static function lex(string $content)\n    {\n        static $regex;\n\n        if ($regex === null) {\n            $regex = '(('.\\implode(')|(', self::PATTERNS).'))A';\n        }\n\n        $offset = 0;\n\n        while (isset($content[$offset])) {\n            if (!\\preg_match($regex, $content, $matches, 0, $offset)) {\n                throw new \\Error(\\sprintf('Lexer encountered unexpected character [%s].', $content[$offset]));\n            }\n\n            $offset += \\strlen($matches[0]);\n\n            yield $matches[0];\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/Entry.php","ext":"php","size":1015,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nuse PhpOption\\Option;\n\nfinal class Entry\n{\n    /**\n     * The entry name.\n     *\n     * @var string\n     */\n    private $name;\n\n    /**\n     * The entry value.\n     *\n     * @var \\Dotenv\\Parser\\Value|null\n     */\n    private $value;\n\n    /**\n     * Create a new entry instance.\n     *\n     * @param string                    $name\n     * @param \\Dotenv\\Parser\\Value|null $value\n     *\n     * @return void\n     */\n    public function __construct(string $name, ?Value $value = null)\n    {\n        $this->name = $name;\n        $this->value = $value;\n    }\n\n    /**\n     * Get the entry name.\n     *\n     * @return string\n     */\n    public function getName()\n    {\n        return $this->name;\n    }\n\n    /**\n     * Get the entry value.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Parser\\Value>\n     */\n    public function getValue()\n    {\n        /** @var \\PhpOption\\Option<\\Dotenv\\Parser\\Value> */\n        return Option::fromValue($this->value);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Parser/EntryParser.php","ext":"php","size":12533,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Parser;\n\nuse Dotenv\\Util\\Regex;\nuse Dotenv\\Util\\Str;\nuse GrahamCampbell\\ResultType\\Error;\nuse GrahamCampbell\\ResultType\\Result;\nuse GrahamCampbell\\ResultType\\Success;\n\nfinal class EntryParser\n{\n    private const INITIAL_STATE = 0;\n    private const UNQUOTED_STATE = 1;\n    private const SINGLE_QUOTED_STATE = 2;\n    private const DOUBLE_QUOTED_STATE = 3;\n    private const ESCAPE_SEQUENCE_STATE = 4;\n    private const WHITESPACE_STATE = 5;\n    private const COMMENT_STATE = 6;\n    private const REJECT_STATES = [self::SINGLE_QUOTED_STATE, self::DOUBLE_QUOTED_STATE, self::ESCAPE_SEQUENCE_STATE];\n\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Parse a raw entry into a proper entry.\n     *\n     * That is, turn a raw environment variable entry into a name and possibly\n     * a value. We wrap the answer in a result type.\n     *\n     * @param string $entry\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Entry, string>\n     */\n    public static function parse(string $entry)\n    {\n        return self::splitStringIntoParts($entry)->flatMap(static function (array $parts) {\n            [$name, $value] = $parts;\n\n            return self::parseName($name)->flatMap(static function (string $name) use ($value) {\n                /** @var Result<Value|null, string> */\n                $parsedValue = $value === null ? Success::create(null) : self::parseValue($value);\n\n                return $parsedValue->map(static function (?Value $value) use ($name) {\n                    return new Entry($name, $value);\n                });\n            });\n        });\n    }\n\n    /**\n     * Split the compound string into parts.\n     *\n     * @param string $line\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<array{string, string|null},string>\n     */\n    private static function splitStringIntoParts(string $line)\n    {\n        /** @var array{string, string|null} */\n        $result = Str::pos($line, '=')->map(static function () use ($line) {\n            return \\array_map('trim', \\explode('=', $line, 2));\n        })->getOrElse([$line, null]);\n\n        if ($result[0] === '') {\n            /** @var \\GrahamCampbell\\ResultType\\Result<array{string, string|null},string> */\n            return Error::create(self::getErrorMessage('an unexpected equals', $line));\n        }\n\n        /** @var \\GrahamCampbell\\ResultType\\Result<array{string, string|null},string> */\n        return Success::create($result);\n    }\n\n    /**\n     * Parse the given variable name.\n     *\n     * That is, strip the optional quotes and leading \"export\" from the\n     * variable name. We wrap the answer in a result type.\n     *\n     * @param string $name\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<string, string>\n     */\n    private static function parseName(string $name)\n    {\n        if (Str::len($name) > 8 && Str::substr($name, 0, 6) === 'export' && \\ctype_space(Str::substr($name, 6, 1))) {\n            $name = \\ltrim(Str::substr($name, 6));\n        }\n\n        if (self::isQuotedName($name)) {\n            $name = Str::substr($name, 1, -1);\n        }\n\n        if (!self::isValidName($name)) {\n            /** @var \\GrahamCampbell\\ResultType\\Result<string, string> */\n            return Error::create(self::getErrorMessage('an invalid name', $name));\n        }\n\n        /** @var \\GrahamCampbell\\ResultType\\Result<string, string> */\n        return Success::create($name);\n    }\n\n    /**\n     * Is the given variable name quoted?\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    private static function isQuotedName(string $name)\n    {\n        if (Str::len($name) < 3) {\n            return false;\n        }\n\n        $first = Str::substr($name, 0, 1);\n        $last = Str::substr($name, -1, 1);\n\n        return ($first === '\"' && $last === '\"') || ($first === '\\'' && $last === '\\'');\n    }\n\n    /**\n     * Is the given variable name valid?\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    private static function isValidName(string $name)\n    {\n        return Regex::matches('~(*UTF8)\\A[\\p{Ll}\\p{Lu}\\p{M}\\p{N}_.]+\\z~', $name)->success()->getOrElse(false);\n    }\n\n    /**\n     * Parse the given variable value.\n     *\n     * This has the effect of stripping quotes and comments, dealing with\n     * special characters, and locating nested variables, but not resolving\n     * them. Formally, we run a finite state automaton with an output tape: a\n     * transducer. We wrap the answer in a result type.\n     *\n     * @param string $value\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Value, string>\n     */\n    private static function parseValue(string $value)\n    {\n        if (\\trim($value) === '') {\n            /** @var \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Value, string> */\n            return Success::create(Value::blank());\n        }\n\n        return \\array_reduce(\\iterator_to_array(Lexer::lex($value)), static function (Result $data, string $token) {\n            return $data->flatMap(static function (array $data) use ($token) {\n                return self::processToken($data[1], $token)->map(static function (array $val) use ($data) {\n                    return [$data[0]->append($val[0], $val[1]), $val[2]];\n                });\n            });\n        }, Success::create([Value::blank(), self::INITIAL_STATE]))->flatMap(static function (array $result) {\n            /** @psalm-suppress DocblockTypeContradiction */\n            if (in_array($result[1], self::REJECT_STATES, true)) {\n                /** @var \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Value, string> */\n                return Error::create('a missing closing quote');\n            }\n\n            /** @var \\GrahamCampbell\\ResultType\\Result<\\Dotenv\\Parser\\Value, string> */\n            return Success::create($result[0]);\n        })->mapError(static function (string $err) use ($value) {\n            return self::getErrorMessage($err, $value);\n        });\n    }\n\n    /**\n     * Process the given token.\n     *\n     * @param int    $state\n     * @param string $token\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string>\n     */\n    private static function processToken(int $state, string $token)\n    {\n        switch ($state) {\n            case self::INITIAL_STATE:\n                if ($token === '\\'') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::SINGLE_QUOTED_STATE]);\n                } elseif ($token === '\"') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::DOUBLE_QUOTED_STATE]);\n                } elseif ($token === '#') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::COMMENT_STATE]);\n                } elseif ($token === '$') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, true, self::UNQUOTED_STATE]);\n                } else {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::UNQUOTED_STATE]);\n                }\n            case self::UNQUOTED_STATE:\n                if ($token === '#') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::COMMENT_STATE]);\n                } elseif (\\ctype_space($token)) {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::WHITESPACE_STATE]);\n                } elseif ($token === '$') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, true, self::UNQUOTED_STATE]);\n                } else {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::UNQUOTED_STATE]);\n                }\n            case self::SINGLE_QUOTED_STATE:\n                if ($token === '\\'') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::WHITESPACE_STATE]);\n                } else {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::SINGLE_QUOTED_STATE]);\n                }\n            case self::DOUBLE_QUOTED_STATE:\n                if ($token === '\"') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::WHITESPACE_STATE]);\n                } elseif ($token === '\\\\') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::ESCAPE_SEQUENCE_STATE]);\n                } elseif ($token === '$') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, true, self::DOUBLE_QUOTED_STATE]);\n                } else {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::DOUBLE_QUOTED_STATE]);\n                }\n            case self::ESCAPE_SEQUENCE_STATE:\n                if ($token === '\"' || $token === '\\\\') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::DOUBLE_QUOTED_STATE]);\n                } elseif ($token === '$') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create([$token, false, self::DOUBLE_QUOTED_STATE]);\n                } else {\n                    $first = Str::substr($token, 0, 1);\n                    if (\\in_array($first, ['f', 'n', 'r', 't', 'v'], true)) {\n                        /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                        return Success::create([\\stripcslashes('\\\\'.$first).Str::substr($token, 1), false, self::DOUBLE_QUOTED_STATE]);\n                    } else {\n                        /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                        return Error::create('an unexpected escape sequence');\n                    }\n                }\n            case self::WHITESPACE_STATE:\n                if ($token === '#') {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::COMMENT_STATE]);\n                } elseif (!\\ctype_space($token)) {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Error::create('unexpected whitespace');\n                } else {\n                    /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                    return Success::create(['', false, self::WHITESPACE_STATE]);\n                }\n            case self::COMMENT_STATE:\n                /** @var \\GrahamCampbell\\ResultType\\Result<array{string, bool, int}, string> */\n                return Success::create(['', false, self::COMMENT_STATE]);\n            default:\n                throw new \\Error('Parser entered invalid state.');\n        }\n    }\n\n    /**\n     * Generate a friendly error message.\n     *\n     * @param string $cause\n     * @param string $subject\n     *\n     * @return string\n     */\n    private static function getErrorMessage(string $cause, string $subject)\n    {\n        return \\sprintf(\n            'Encountered %s at [%s].',\n            $cause,\n            \\strtok($subject, \"\\n\")\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/StringStore.php","ext":"php","size":589,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store;\n\nfinal class StringStore implements StoreInterface\n{\n    /**\n     * The file content.\n     *\n     * @var string\n     */\n    private $content;\n\n    /**\n     * Create a new string store instance.\n     *\n     * @param string $content\n     *\n     * @return void\n     */\n    public function __construct(string $content)\n    {\n        $this->content = $content;\n    }\n\n    /**\n     * Read the content of the environment file(s).\n     *\n     * @return string\n     */\n    public function read()\n    {\n        return $this->content;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/File/Reader.php","ext":"php","size":2104,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store\\File;\n\nuse Dotenv\\Exception\\InvalidEncodingException;\nuse Dotenv\\Util\\Str;\nuse PhpOption\\Option;\n\n/**\n * @internal\n */\nfinal class Reader\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Read the file(s), and return their raw content.\n     *\n     * We provide the file path as the key, and its content as the value. If\n     * short circuit mode is enabled, then the returned array with have length\n     * at most one. File paths that couldn't be read are omitted entirely.\n     *\n     * @param string[]    $filePaths\n     * @param bool        $shortCircuit\n     * @param string|null $fileEncoding\n     *\n     * @throws \\Dotenv\\Exception\\InvalidEncodingException\n     *\n     * @return array<string, string>\n     */\n    public static function read(array $filePaths, bool $shortCircuit = true, ?string $fileEncoding = null)\n    {\n        $output = [];\n\n        foreach ($filePaths as $filePath) {\n            $content = self::readFromFile($filePath, $fileEncoding);\n            if ($content->isDefined()) {\n                $output[$filePath] = $content->get();\n                if ($shortCircuit) {\n                    break;\n                }\n            }\n        }\n\n        return $output;\n    }\n\n    /**\n     * Read the given file.\n     *\n     * @param string      $path\n     * @param string|null $encoding\n     *\n     * @throws \\Dotenv\\Exception\\InvalidEncodingException\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    private static function readFromFile(string $path, ?string $encoding = null)\n    {\n        /** @var Option<string> */\n        $content = Option::fromValue(@\\file_get_contents($path), false);\n\n        return $content->flatMap(static function (string $content) use ($encoding) {\n            return Str::utf8($content, $encoding)->mapError(static function (string $error) {\n                throw new InvalidEncodingException($error);\n            })->success();\n        });\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/File/Paths.php","ext":"php","size":748,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store\\File;\n\n/**\n * @internal\n */\nfinal class Paths\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Returns the full paths to the files.\n     *\n     * @param string[] $paths\n     * @param string[] $names\n     *\n     * @return string[]\n     */\n    public static function filePaths(array $paths, array $names)\n    {\n        $files = [];\n\n        foreach ($paths as $path) {\n            foreach ($names as $name) {\n                $files[] = \\rtrim($path, \\DIRECTORY_SEPARATOR).\\DIRECTORY_SEPARATOR.$name;\n            }\n        }\n\n        return $files;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/StoreBuilder.php","ext":"php","size":3172,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store;\n\nuse Dotenv\\Store\\File\\Paths;\n\nfinal class StoreBuilder\n{\n    /**\n     * The of default name.\n     */\n    private const DEFAULT_NAME = '.env';\n\n    /**\n     * The paths to search within.\n     *\n     * @var string[]\n     */\n    private $paths;\n\n    /**\n     * The file names to search for.\n     *\n     * @var string[]\n     */\n    private $names;\n\n    /**\n     * Should file loading short circuit?\n     *\n     * @var bool\n     */\n    private $shortCircuit;\n\n    /**\n     * The file encoding.\n     *\n     * @var string|null\n     */\n    private $fileEncoding;\n\n    /**\n     * Create a new store builder instance.\n     *\n     * @param string[]    $paths\n     * @param string[]    $names\n     * @param bool        $shortCircuit\n     * @param string|null $fileEncoding\n     *\n     * @return void\n     */\n    private function __construct(array $paths = [], array $names = [], bool $shortCircuit = false, ?string $fileEncoding = null)\n    {\n        $this->paths = $paths;\n        $this->names = $names;\n        $this->shortCircuit = $shortCircuit;\n        $this->fileEncoding = $fileEncoding;\n    }\n\n    /**\n     * Create a new store builder instance with no names.\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public static function createWithNoNames()\n    {\n        return new self();\n    }\n\n    /**\n     * Create a new store builder instance with the default name.\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public static function createWithDefaultName()\n    {\n        return new self([], [self::DEFAULT_NAME]);\n    }\n\n    /**\n     * Creates a store builder with the given path added.\n     *\n     * @param string $path\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public function addPath(string $path)\n    {\n        return new self(\\array_merge($this->paths, [$path]), $this->names, $this->shortCircuit, $this->fileEncoding);\n    }\n\n    /**\n     * Creates a store builder with the given name added.\n     *\n     * @param string $name\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public function addName(string $name)\n    {\n        return new self($this->paths, \\array_merge($this->names, [$name]), $this->shortCircuit, $this->fileEncoding);\n    }\n\n    /**\n     * Creates a store builder with short circuit mode enabled.\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public function shortCircuit()\n    {\n        return new self($this->paths, $this->names, true, $this->fileEncoding);\n    }\n\n    /**\n     * Creates a store builder with the specified file encoding.\n     *\n     * @param string|null $fileEncoding\n     *\n     * @return \\Dotenv\\Store\\StoreBuilder\n     */\n    public function fileEncoding(?string $fileEncoding = null)\n    {\n        return new self($this->paths, $this->names, $this->shortCircuit, $fileEncoding);\n    }\n\n    /**\n     * Creates a new store instance.\n     *\n     * @return \\Dotenv\\Store\\StoreInterface\n     */\n    public function make()\n    {\n        return new FileStore(\n            Paths::filePaths($this->paths, $this->names),\n            $this->shortCircuit,\n            $this->fileEncoding\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/FileStore.php","ext":"php","size":1680,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store;\n\nuse Dotenv\\Exception\\InvalidPathException;\nuse Dotenv\\Store\\File\\Reader;\n\nfinal class FileStore implements StoreInterface\n{\n    /**\n     * The file paths.\n     *\n     * @var string[]\n     */\n    private $filePaths;\n\n    /**\n     * Should file loading short circuit?\n     *\n     * @var bool\n     */\n    private $shortCircuit;\n\n    /**\n     * The file encoding.\n     *\n     * @var string|null\n     */\n    private $fileEncoding;\n\n    /**\n     * Create a new file store instance.\n     *\n     * @param string[]    $filePaths\n     * @param bool        $shortCircuit\n     * @param string|null $fileEncoding\n     *\n     * @return void\n     */\n    public function __construct(array $filePaths, bool $shortCircuit, ?string $fileEncoding = null)\n    {\n        $this->filePaths = $filePaths;\n        $this->shortCircuit = $shortCircuit;\n        $this->fileEncoding = $fileEncoding;\n    }\n\n    /**\n     * Read the content of the environment file(s).\n     *\n     * @throws \\Dotenv\\Exception\\InvalidEncodingException|\\Dotenv\\Exception\\InvalidPathException\n     *\n     * @return string\n     */\n    public function read()\n    {\n        if ($this->filePaths === []) {\n            throw new InvalidPathException('At least one environment file path must be provided.');\n        }\n\n        $contents = Reader::read($this->filePaths, $this->shortCircuit, $this->fileEncoding);\n\n        if (\\count($contents) > 0) {\n            return \\implode(\"\\n\", $contents);\n        }\n\n        throw new InvalidPathException(\n            \\sprintf('Unable to read any of the environment file(s) at [%s].', \\implode(', ', $this->filePaths))\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Store/StoreInterface.php","ext":"php","size":316,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Store;\n\ninterface StoreInterface\n{\n    /**\n     * Read the content of the environment file(s).\n     *\n     * @throws \\Dotenv\\Exception\\InvalidEncodingException|\\Dotenv\\Exception\\InvalidPathException\n     *\n     * @return string\n     */\n    public function read();\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Exception/InvalidPathException.php","ext":"php","size":200,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Exception;\n\nuse InvalidArgumentException;\n\nfinal class InvalidPathException extends InvalidArgumentException implements ExceptionInterface\n{\n    //\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Exception/ExceptionInterface.php","ext":"php","size":136,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Exception;\n\nuse Throwable;\n\ninterface ExceptionInterface extends Throwable\n{\n    //\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Exception/InvalidEncodingException.php","ext":"php","size":204,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Exception;\n\nuse InvalidArgumentException;\n\nfinal class InvalidEncodingException extends InvalidArgumentException implements ExceptionInterface\n{\n    //\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Exception/InvalidFileException.php","ext":"php","size":200,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Exception;\n\nuse InvalidArgumentException;\n\nfinal class InvalidFileException extends InvalidArgumentException implements ExceptionInterface\n{\n    //\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Exception/ValidationException.php","ext":"php","size":183,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Exception;\n\nuse RuntimeException;\n\nfinal class ValidationException extends RuntimeException implements ExceptionInterface\n{\n    //\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Util/Regex.php","ext":"php","size":3152,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Util;\n\nuse GrahamCampbell\\ResultType\\Error;\nuse GrahamCampbell\\ResultType\\Success;\n\n/**\n * @internal\n */\nfinal class Regex\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Perform a preg match, wrapping up the result.\n     *\n     * @param string $pattern\n     * @param string $subject\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<bool, string>\n     */\n    public static function matches(string $pattern, string $subject)\n    {\n        return self::pregAndWrap(static function (string $subject) use ($pattern) {\n            return @\\preg_match($pattern, $subject) === 1;\n        }, $subject);\n    }\n\n    /**\n     * Perform a preg match all, wrapping up the result.\n     *\n     * @param string $pattern\n     * @param string $subject\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<int, string>\n     */\n    public static function occurrences(string $pattern, string $subject)\n    {\n        return self::pregAndWrap(static function (string $subject) use ($pattern) {\n            return (int) @\\preg_match_all($pattern, $subject);\n        }, $subject);\n    }\n\n    /**\n     * Perform a preg replace callback, wrapping up the result.\n     *\n     * @param string                     $pattern\n     * @param callable(string[]): string $callback\n     * @param string                     $subject\n     * @param int|null                   $limit\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<string, string>\n     */\n    public static function replaceCallback(string $pattern, callable $callback, string $subject, ?int $limit = null)\n    {\n        return self::pregAndWrap(static function (string $subject) use ($pattern, $callback, $limit) {\n            return (string) @\\preg_replace_callback($pattern, $callback, $subject, $limit ?? -1);\n        }, $subject);\n    }\n\n    /**\n     * Perform a preg split, wrapping up the result.\n     *\n     * @param string $pattern\n     * @param string $subject\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<string[], string>\n     */\n    public static function split(string $pattern, string $subject)\n    {\n        return self::pregAndWrap(static function (string $subject) use ($pattern) {\n            /** @var string[] */\n            return (array) @\\preg_split($pattern, $subject);\n        }, $subject);\n    }\n\n    /**\n     * Perform a preg operation, wrapping up the result.\n     *\n     * @template V\n     *\n     * @param callable(string): V $operation\n     * @param string              $subject\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<V, string>\n     */\n    private static function pregAndWrap(callable $operation, string $subject)\n    {\n        $result = $operation($subject);\n\n        if (\\preg_last_error() !== \\PREG_NO_ERROR) {\n            /** @var \\GrahamCampbell\\ResultType\\Result<V,string> */\n            return Error::create(\\preg_last_error_msg());\n        }\n\n        /** @var \\GrahamCampbell\\ResultType\\Result<V,string> */\n        return Success::create($result);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Util/Str.php","ext":"php","size":2792,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Util;\n\nuse GrahamCampbell\\ResultType\\Error;\nuse GrahamCampbell\\ResultType\\Success;\nuse PhpOption\\Option;\n\n/**\n * @internal\n */\nfinal class Str\n{\n    /**\n     * This class is a singleton.\n     *\n     * @codeCoverageIgnore\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Convert a string to UTF-8 from the given encoding.\n     *\n     * @param string      $input\n     * @param string|null $encoding\n     *\n     * @return \\GrahamCampbell\\ResultType\\Result<string, string>\n     */\n    public static function utf8(string $input, ?string $encoding = null)\n    {\n        if ($encoding !== null && !\\in_array($encoding, \\mb_list_encodings(), true)) {\n            /** @var \\GrahamCampbell\\ResultType\\Result<string, string> */\n            return Error::create(\n                \\sprintf('Illegal character encoding [%s] specified.', $encoding)\n            );\n        }\n\n        $converted = $encoding === null ?\n            @\\mb_convert_encoding($input, 'UTF-8') :\n            @\\mb_convert_encoding($input, 'UTF-8', $encoding);\n\n        if (!is_string($converted)) {\n            /** @var \\GrahamCampbell\\ResultType\\Result<string, string> */\n            return Error::create(\n                \\sprintf('Conversion from encoding [%s] failed.', $encoding ?? 'NULL')\n            );\n        }\n\n        /**\n         * this is for support UTF-8 with BOM encoding\n         * @see https://en.wikipedia.org/wiki/Byte_order_mark\n         * @see https://github.com/vlucas/phpdotenv/issues/500\n         */\n        if (\\substr($converted, 0, 3) == \"\\xEF\\xBB\\xBF\") {\n            $converted = \\substr($converted, 3);\n        }\n\n        /** @var \\GrahamCampbell\\ResultType\\Result<string, string> */\n        return Success::create($converted);\n    }\n\n    /**\n     * Search for a given substring of the input.\n     *\n     * @param string $haystack\n     * @param string $needle\n     *\n     * @return \\PhpOption\\Option<int>\n     */\n    public static function pos(string $haystack, string $needle)\n    {\n        /** @var \\PhpOption\\Option<int> */\n        return Option::fromValue(\\mb_strpos($haystack, $needle, 0, 'UTF-8'), false);\n    }\n\n    /**\n     * Grab the specified substring of the input.\n     *\n     * @param string   $input\n     * @param int      $start\n     * @param int|null $length\n     *\n     * @return string\n     */\n    public static function substr(string $input, int $start, ?int $length = null)\n    {\n        return \\mb_substr($input, $start, $length, 'UTF-8');\n    }\n\n    /**\n     * Compute the length of the given string.\n     *\n     * @param string $input\n     *\n     * @return int\n     */\n    public static function len(string $input)\n    {\n        return \\mb_strlen($input, 'UTF-8');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/AdapterRepository.php","ext":"php","size":2394,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository;\n\nuse Dotenv\\Repository\\Adapter\\ReaderInterface;\nuse Dotenv\\Repository\\Adapter\\WriterInterface;\nuse InvalidArgumentException;\n\nfinal class AdapterRepository implements RepositoryInterface\n{\n    /**\n     * The reader to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\ReaderInterface\n     */\n    private $reader;\n\n    /**\n     * The writer to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface\n     */\n    private $writer;\n\n    /**\n     * Create a new adapter repository instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface $reader\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface $writer\n     *\n     * @return void\n     */\n    public function __construct(ReaderInterface $reader, WriterInterface $writer)\n    {\n        $this->reader = $reader;\n        $this->writer = $writer;\n    }\n\n    /**\n     * Determine if the given environment variable is defined.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    public function has(string $name)\n    {\n        return '' !== $name && $this->reader->read($name)->isDefined();\n    }\n\n    /**\n     * Get an environment variable.\n     *\n     * @param string $name\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return string|null\n     */\n    public function get(string $name)\n    {\n        if ('' === $name) {\n            throw new InvalidArgumentException('Expected name to be a non-empty string.');\n        }\n\n        return $this->reader->read($name)->getOrElse(null);\n    }\n\n    /**\n     * Set an environment variable.\n     *\n     * @param string $name\n     * @param string $value\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return bool\n     */\n    public function set(string $name, string $value)\n    {\n        if ('' === $name) {\n            throw new InvalidArgumentException('Expected name to be a non-empty string.');\n        }\n\n        return $this->writer->write($name, $value);\n    }\n\n    /**\n     * Clear an environment variable.\n     *\n     * @param string $name\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return bool\n     */\n    public function clear(string $name)\n    {\n        if ('' === $name) {\n            throw new InvalidArgumentException('Expected name to be a non-empty string.');\n        }\n\n        return $this->writer->delete($name);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/MultiWriter.php","ext":"php","size":1300,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nfinal class MultiWriter implements WriterInterface\n{\n    /**\n     * The set of writers to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface[]\n     */\n    private $writers;\n\n    /**\n     * Create a new multi-writer instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface[] $writers\n     *\n     * @return void\n     */\n    public function __construct(array $writers)\n    {\n        $this->writers = $writers;\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        foreach ($this->writers as $writers) {\n            if (!$writers->write($name, $value)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        foreach ($this->writers as $writers) {\n            if (!$writers->delete($name)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/WriterInterface.php","ext":"php","size":518,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\ninterface WriterInterface\n{\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value);\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/MultiReader.php","ext":"php","size":969,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\None;\n\nfinal class MultiReader implements ReaderInterface\n{\n    /**\n     * The set of readers to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\ReaderInterface[]\n     */\n    private $readers;\n\n    /**\n     * Create a new multi-reader instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface[] $readers\n     *\n     * @return void\n     */\n    public function __construct(array $readers)\n    {\n        $this->readers = $readers;\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        foreach ($this->readers as $reader) {\n            $result = $reader->read($name);\n            if ($result->isDefined()) {\n                return $result;\n            }\n        }\n\n        return None::create();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/PutenvAdapter.php","ext":"php","size":1893,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\None;\nuse PhpOption\\Option;\nuse PhpOption\\Some;\n\nfinal class PutenvAdapter implements AdapterInterface\n{\n    /**\n     * Create a new putenv adapter instance.\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create()\n    {\n        if (self::isSupported()) {\n            /** @var \\PhpOption\\Option<AdapterInterface> */\n            return Some::create(new self());\n        }\n\n        return None::create();\n    }\n\n    /**\n     * Determines if the adapter is supported.\n     *\n     * @return bool\n     */\n    private static function isSupported()\n    {\n        return \\function_exists('getenv') && \\function_exists('putenv');\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        /** @var \\PhpOption\\Option<string> */\n        return Option::fromValue(\\getenv($name), false)->filter(static function ($value) {\n            return \\is_string($value);\n        });\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        \\putenv(\"$name=$value\");\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        \\putenv($name);\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ArrayAdapter.php","ext":"php","size":1611,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\Option;\nuse PhpOption\\Some;\n\nfinal class ArrayAdapter implements AdapterInterface\n{\n    /**\n     * The variables and their values.\n     *\n     * @var array<string, string>\n     */\n    private $variables;\n\n    /**\n     * Create a new array adapter instance.\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        $this->variables = [];\n    }\n\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create()\n    {\n        /** @var \\PhpOption\\Option<AdapterInterface> */\n        return Some::create(new self());\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        return Option::fromArraysValue($this->variables, $name);\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        $this->variables[$name] = $value;\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        unset($this->variables[$name]);\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ServerConstAdapter.php","ext":"php","size":1958,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\Option;\nuse PhpOption\\Some;\n\nfinal class ServerConstAdapter implements AdapterInterface\n{\n    /**\n     * Create a new server const adapter instance.\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create()\n    {\n        /** @var \\PhpOption\\Option<AdapterInterface> */\n        return Some::create(new self());\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        /** @var \\PhpOption\\Option<string> */\n        return Option::fromArraysValue($_SERVER, $name)\n            ->filter(static function ($value) {\n                return \\is_scalar($value);\n            })\n            ->map(static function ($value) {\n                if ($value === false) {\n                    return 'false';\n                }\n\n                if ($value === true) {\n                    return 'true';\n                }\n\n                /** @psalm-suppress PossiblyInvalidCast */\n                return (string) $value;\n            });\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        $_SERVER[$name] = $value;\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        unset($_SERVER[$name]);\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/EnvConstAdapter.php","ext":"php","size":1943,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\Option;\nuse PhpOption\\Some;\n\nfinal class EnvConstAdapter implements AdapterInterface\n{\n    /**\n     * Create a new env const adapter instance.\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create()\n    {\n        /** @var \\PhpOption\\Option<AdapterInterface> */\n        return Some::create(new self());\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        /** @var \\PhpOption\\Option<string> */\n        return Option::fromArraysValue($_ENV, $name)\n            ->filter(static function ($value) {\n                return \\is_scalar($value);\n            })\n            ->map(static function ($value) {\n                if ($value === false) {\n                    return 'false';\n                }\n\n                if ($value === true) {\n                    return 'true';\n                }\n\n                /** @psalm-suppress PossiblyInvalidCast */\n                return (string) $value;\n            });\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        $_ENV[$name] = $value;\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        unset($_ENV[$name]);\n\n        return true;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/GuardedWriter.php","ext":"php","size":1875,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nfinal class GuardedWriter implements WriterInterface\n{\n    /**\n     * The inner writer to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface\n     */\n    private $writer;\n\n    /**\n     * The variable name allow list.\n     *\n     * @var string[]\n     */\n    private $allowList;\n\n    /**\n     * Create a new guarded writer instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface $writer\n     * @param string[]                                   $allowList\n     *\n     * @return void\n     */\n    public function __construct(WriterInterface $writer, array $allowList)\n    {\n        $this->writer = $writer;\n        $this->allowList = $allowList;\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        // Don't set non-allowed variables\n        if (!$this->isAllowed($name)) {\n            return false;\n        }\n\n        // Set the value on the inner writer\n        return $this->writer->write($name, $value);\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        // Don't clear non-allowed variables\n        if (!$this->isAllowed($name)) {\n            return false;\n        }\n\n        // Set the value on the inner writer\n        return $this->writer->delete($name);\n    }\n\n    /**\n     * Determine if the given variable is allowed.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    private function isAllowed(string $name)\n    {\n        return \\in_array($name, $this->allowList, true);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ReaderInterface.php","ext":"php","size":300,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\ninterface ReaderInterface\n{\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ReplacingWriter.php","ext":"php","size":2212,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nfinal class ReplacingWriter implements WriterInterface\n{\n    /**\n     * The inner writer to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface\n     */\n    private $writer;\n\n    /**\n     * The inner reader to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\ReaderInterface\n     */\n    private $reader;\n\n    /**\n     * The record of seen variables.\n     *\n     * @var array<string, string>\n     */\n    private $seen;\n\n    /**\n     * Create a new replacement writer instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface $writer\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface $reader\n     *\n     * @return void\n     */\n    public function __construct(WriterInterface $writer, ReaderInterface $reader)\n    {\n        $this->writer = $writer;\n        $this->reader = $reader;\n        $this->seen = [];\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        if ($this->exists($name)) {\n            return $this->writer->write($name, $value);\n        }\n\n        // succeed if nothing to do\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        if ($this->exists($name)) {\n            return $this->writer->delete($name);\n        }\n\n        // succeed if nothing to do\n        return true;\n    }\n\n    /**\n     * Does the given environment variable exist.\n     *\n     * Returns true if it currently exists, or existed at any point in the past\n     * that we are aware of.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    private function exists(string $name)\n    {\n        if (isset($this->seen[$name])) {\n            return true;\n        }\n\n        if ($this->reader->read($name)->isDefined()) {\n            $this->seen[$name] = '';\n\n            return true;\n        }\n\n        return false;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ApacheAdapter.php","ext":"php","size":1974,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nuse PhpOption\\None;\nuse PhpOption\\Option;\nuse PhpOption\\Some;\n\nfinal class ApacheAdapter implements AdapterInterface\n{\n    /**\n     * Create a new apache adapter instance.\n     *\n     * @return void\n     */\n    private function __construct()\n    {\n        //\n    }\n\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create()\n    {\n        if (self::isSupported()) {\n            /** @var \\PhpOption\\Option<AdapterInterface> */\n            return Some::create(new self());\n        }\n\n        return None::create();\n    }\n\n    /**\n     * Determines if the adapter is supported.\n     *\n     * This happens if PHP is running as an Apache module.\n     *\n     * @return bool\n     */\n    private static function isSupported()\n    {\n        return \\function_exists('apache_getenv') && \\function_exists('apache_setenv');\n    }\n\n    /**\n     * Read an environment variable, if it exists.\n     *\n     * @param non-empty-string $name\n     *\n     * @return \\PhpOption\\Option<string>\n     */\n    public function read(string $name)\n    {\n        /** @var \\PhpOption\\Option<string> */\n        return Option::fromValue(apache_getenv($name))->filter(static function ($value) {\n            return \\is_string($value) && $value !== '';\n        });\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        return apache_setenv($name, $value);\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        return apache_setenv($name, '');\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/ImmutableWriter.php","ext":"php","size":2543,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\nfinal class ImmutableWriter implements WriterInterface\n{\n    /**\n     * The inner writer to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface\n     */\n    private $writer;\n\n    /**\n     * The inner reader to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\ReaderInterface\n     */\n    private $reader;\n\n    /**\n     * The record of loaded variables.\n     *\n     * @var array<string, string>\n     */\n    private $loaded;\n\n    /**\n     * Create a new immutable writer instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface $writer\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface $reader\n     *\n     * @return void\n     */\n    public function __construct(WriterInterface $writer, ReaderInterface $reader)\n    {\n        $this->writer = $writer;\n        $this->reader = $reader;\n        $this->loaded = [];\n    }\n\n    /**\n     * Write to an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     * @param string           $value\n     *\n     * @return bool\n     */\n    public function write(string $name, string $value)\n    {\n        // Don't overwrite existing environment variables\n        // Ruby's dotenv does this with `ENV[key] ||= value`\n        if ($this->isExternallyDefined($name)) {\n            return false;\n        }\n\n        // Set the value on the inner writer\n        if (!$this->writer->write($name, $value)) {\n            return false;\n        }\n\n        // Record that we have loaded the variable\n        $this->loaded[$name] = '';\n\n        return true;\n    }\n\n    /**\n     * Delete an environment variable, if possible.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    public function delete(string $name)\n    {\n        // Don't clear existing environment variables\n        if ($this->isExternallyDefined($name)) {\n            return false;\n        }\n\n        // Clear the value on the inner writer\n        if (!$this->writer->delete($name)) {\n            return false;\n        }\n\n        // Leave the variable as fair game\n        unset($this->loaded[$name]);\n\n        return true;\n    }\n\n    /**\n     * Determine if the given variable is externally defined.\n     *\n     * That is, is it an \"existing\" variable.\n     *\n     * @param non-empty-string $name\n     *\n     * @return bool\n     */\n    private function isExternallyDefined(string $name)\n    {\n        return $this->reader->read($name)->isDefined() && !isset($this->loaded[$name]);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/Adapter/AdapterInterface.php","ext":"php","size":346,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository\\Adapter;\n\ninterface AdapterInterface extends ReaderInterface, WriterInterface\n{\n    /**\n     * Create a new instance of the adapter, if it is available.\n     *\n     * @return \\PhpOption\\Option<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    public static function create();\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/RepositoryInterface.php","ext":"php","size":933,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository;\n\ninterface RepositoryInterface\n{\n    /**\n     * Determine if the given environment variable is defined.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    public function has(string $name);\n\n    /**\n     * Get an environment variable.\n     *\n     * @param string $name\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return string|null\n     */\n    public function get(string $name);\n\n    /**\n     * Set an environment variable.\n     *\n     * @param string $name\n     * @param string $value\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return bool\n     */\n    public function set(string $name, string $value);\n\n    /**\n     * Clear an environment variable.\n     *\n     * @param string $name\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return bool\n     */\n    public function clear(string $name);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/vlucas/phpdotenv/src/Repository/RepositoryBuilder.php","ext":"php","size":8219,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\nnamespace Dotenv\\Repository;\n\nuse Dotenv\\Repository\\Adapter\\AdapterInterface;\nuse Dotenv\\Repository\\Adapter\\EnvConstAdapter;\nuse Dotenv\\Repository\\Adapter\\GuardedWriter;\nuse Dotenv\\Repository\\Adapter\\ImmutableWriter;\nuse Dotenv\\Repository\\Adapter\\MultiReader;\nuse Dotenv\\Repository\\Adapter\\MultiWriter;\nuse Dotenv\\Repository\\Adapter\\ReaderInterface;\nuse Dotenv\\Repository\\Adapter\\ServerConstAdapter;\nuse Dotenv\\Repository\\Adapter\\WriterInterface;\nuse InvalidArgumentException;\nuse PhpOption\\Some;\nuse ReflectionClass;\n\nfinal class RepositoryBuilder\n{\n    /**\n     * The set of default adapters.\n     */\n    private const DEFAULT_ADAPTERS = [\n        ServerConstAdapter::class,\n        EnvConstAdapter::class,\n    ];\n\n    /**\n     * The set of readers to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\ReaderInterface[]\n     */\n    private $readers;\n\n    /**\n     * The set of writers to use.\n     *\n     * @var \\Dotenv\\Repository\\Adapter\\WriterInterface[]\n     */\n    private $writers;\n\n    /**\n     * Are we immutable?\n     *\n     * @var bool\n     */\n    private $immutable;\n\n    /**\n     * The variable name allow list.\n     *\n     * @var string[]|null\n     */\n    private $allowList;\n\n    /**\n     * Create a new repository builder instance.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface[] $readers\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface[] $writers\n     * @param bool                                         $immutable\n     * @param string[]|null                                $allowList\n     *\n     * @return void\n     */\n    private function __construct(array $readers = [], array $writers = [], bool $immutable = false, ?array $allowList = null)\n    {\n        $this->readers = $readers;\n        $this->writers = $writers;\n        $this->immutable = $immutable;\n        $this->allowList = $allowList;\n    }\n\n    /**\n     * Create a new repository builder instance with no adapters added.\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public static function createWithNoAdapters()\n    {\n        return new self();\n    }\n\n    /**\n     * Create a new repository builder instance with the default adapters added.\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public static function createWithDefaultAdapters()\n    {\n        $adapters = \\iterator_to_array(self::defaultAdapters());\n\n        return new self($adapters, $adapters);\n    }\n\n    /**\n     * Return the array of default adapters.\n     *\n     * @return \\Generator<\\Dotenv\\Repository\\Adapter\\AdapterInterface>\n     */\n    private static function defaultAdapters()\n    {\n        foreach (self::DEFAULT_ADAPTERS as $adapter) {\n            $instance = $adapter::create();\n            if ($instance->isDefined()) {\n                yield $instance->get();\n            }\n        }\n    }\n\n    /**\n     * Determine if the given name if of an adapterclass.\n     *\n     * @param string $name\n     *\n     * @return bool\n     */\n    private static function isAnAdapterClass(string $name)\n    {\n        if (!\\class_exists($name)) {\n            return false;\n        }\n\n        return (new ReflectionClass($name))->implementsInterface(AdapterInterface::class);\n    }\n\n    /**\n     * Creates a repository builder with the given reader added.\n     *\n     * Accepts either a reader instance, or a class-string for an adapter. If\n     * the adapter is not supported, then we silently skip adding it.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\ReaderInterface|string $reader\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public function addReader($reader)\n    {\n        if (!(\\is_string($reader) && self::isAnAdapterClass($reader)) && !($reader instanceof ReaderInterface)) {\n            throw new InvalidArgumentException(\n                \\sprintf(\n                    'Expected either an instance of %s or a class-string implementing %s',\n                    ReaderInterface::class,\n                    AdapterInterface::class\n                )\n            );\n        }\n\n        $optional = Some::create($reader)->flatMap(static function ($reader) {\n            return \\is_string($reader) ? $reader::create() : Some::create($reader);\n        });\n\n        $readers = \\array_merge($this->readers, \\iterator_to_array($optional));\n\n        return new self($readers, $this->writers, $this->immutable, $this->allowList);\n    }\n\n    /**\n     * Creates a repository builder with the given writer added.\n     *\n     * Accepts either a writer instance, or a class-string for an adapter. If\n     * the adapter is not supported, then we silently skip adding it.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface|string $writer\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public function addWriter($writer)\n    {\n        if (!(\\is_string($writer) && self::isAnAdapterClass($writer)) && !($writer instanceof WriterInterface)) {\n            throw new InvalidArgumentException(\n                \\sprintf(\n                    'Expected either an instance of %s or a class-string implementing %s',\n                    WriterInterface::class,\n                    AdapterInterface::class\n                )\n            );\n        }\n\n        $optional = Some::create($writer)->flatMap(static function ($writer) {\n            return \\is_string($writer) ? $writer::create() : Some::create($writer);\n        });\n\n        $writers = \\array_merge($this->writers, \\iterator_to_array($optional));\n\n        return new self($this->readers, $writers, $this->immutable, $this->allowList);\n    }\n\n    /**\n     * Creates a repository builder with the given adapter added.\n     *\n     * Accepts either an adapter instance, or a class-string for an adapter. If\n     * the adapter is not supported, then we silently skip adding it. We will\n     * add the adapter as both a reader and a writer.\n     *\n     * @param \\Dotenv\\Repository\\Adapter\\WriterInterface|string $adapter\n     *\n     * @throws \\InvalidArgumentException\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public function addAdapter($adapter)\n    {\n        if (!(\\is_string($adapter) && self::isAnAdapterClass($adapter)) && !($adapter instanceof AdapterInterface)) {\n            throw new InvalidArgumentException(\n                \\sprintf(\n                    'Expected either an instance of %s or a class-string implementing %s',\n                    WriterInterface::class,\n                    AdapterInterface::class\n                )\n            );\n        }\n\n        $optional = Some::create($adapter)->flatMap(static function ($adapter) {\n            return \\is_string($adapter) ? $adapter::create() : Some::create($adapter);\n        });\n\n        $readers = \\array_merge($this->readers, \\iterator_to_array($optional));\n        $writers = \\array_merge($this->writers, \\iterator_to_array($optional));\n\n        return new self($readers, $writers, $this->immutable, $this->allowList);\n    }\n\n    /**\n     * Creates a repository builder with mutability enabled.\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public function immutable()\n    {\n        return new self($this->readers, $this->writers, true, $this->allowList);\n    }\n\n    /**\n     * Creates a repository builder with the given allow list.\n     *\n     * @param string[]|null $allowList\n     *\n     * @return \\Dotenv\\Repository\\RepositoryBuilder\n     */\n    public function allowList(?array $allowList = null)\n    {\n        return new self($this->readers, $this->writers, $this->immutable, $allowList);\n    }\n\n    /**\n     * Creates a new repository instance.\n     *\n     * @return \\Dotenv\\Repository\\RepositoryInterface\n     */\n    public function make()\n    {\n        $reader = new MultiReader($this->readers);\n        $writer = new MultiWriter($this->writers);\n\n        if ($this->immutable) {\n            $writer = new ImmutableWriter($writer, $reader);\n        }\n\n        if ($this->allowList !== null) {\n            $writer = new GuardedWriter($writer, $this->allowList);\n        }\n\n        return new AdapterRepository($reader, $writer);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriResolver.php","ext":"php","size":1981,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Deprecated;\nuse League\\Uri\\Contracts\\UriInterface;\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\n\n/**\n * @deprecated since version 7.0.0\n * @codeCoverageIgnore\n * @see BaseUri\n */\nfinal class UriResolver\n{\n    /**\n     * Resolves a URI against a base URI using RFC3986 rules.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter or silence them apart from validating its own parameters.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::resolve() instead', since:'league/uri:7.0.0')]\n    public static function resolve(Psr7UriInterface|UriInterface $uri, Psr7UriInterface|UriInterface $baseUri): Psr7UriInterface|UriInterface\n    {\n        return BaseUri::from($baseUri)->resolve($uri)->getUri();\n    }\n\n    /**\n     * Relativizes a URI according to a base URI.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter or silence them apart from validating its own parameters.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::relativize() instead', since:'league/uri:7.0.0')]\n    public static function relativize(Psr7UriInterface|UriInterface $uri, Psr7UriInterface|UriInterface $baseUri): Psr7UriInterface|UriInterface\n    {\n        return BaseUri::from($baseUri)->relativize($uri)->getUri();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/BaseUri.php","ext":"php","size":19898,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Deprecated;\nuse JsonSerializable;\nuse League\\Uri\\Contracts\\UriAccess;\nuse League\\Uri\\Contracts\\UriInspector;\nuse League\\Uri\\Contracts\\UriInterface;\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\Idna\\Converter as IdnaConverter;\nuse League\\Uri\\IPv4\\Converter as IPv4Converter;\nuse League\\Uri\\IPv6\\Converter as IPv6Converter;\nuse Psr\\Http\\Message\\UriFactoryInterface;\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\nuse Stringable;\n\nuse function array_pop;\nuse function array_reduce;\nuse function count;\nuse function explode;\nuse function implode;\nuse function in_array;\nuse function preg_match;\nuse function rawurldecode;\nuse function str_repeat;\nuse function str_replace;\nuse function strpos;\nuse function substr;\n\n/**\n * @phpstan-import-type ComponentMap from UriInterface\n * @deprecated since version 7.6.0\n *\n * @see Modifier\n * @see Uri\n */\nclass BaseUri implements Stringable, JsonSerializable, UriAccess\n{\n    /** @var array<string,int> */\n    final protected const WHATWG_SPECIAL_SCHEMES = ['ftp' => 1, 'http' => 1, 'https' => 1, 'ws' => 1, 'wss' => 1];\n\n    /** @var array<string,int> */\n    final protected const DOT_SEGMENTS = ['.' => 1, '..' => 1];\n\n    protected readonly Psr7UriInterface|UriInterface|null $origin;\n    protected readonly ?string $nullValue;\n\n    /**\n     * @param UriFactoryInterface|null $uriFactory Deprecated, will be removed in the next major release\n     */\n    final protected function __construct(\n        protected readonly Psr7UriInterface|UriInterface $uri,\n        protected readonly ?UriFactoryInterface $uriFactory\n    ) {\n        $this->nullValue = $this->uri instanceof Psr7UriInterface ? '' : null;\n        $this->origin = $this->computeOrigin($this->uri, $this->nullValue);\n    }\n\n    public static function from(Stringable|string $uri, ?UriFactoryInterface $uriFactory = null): static\n    {\n        $uri = static::formatHost(static::filterUri($uri, $uriFactory));\n        return new static($uri, $uriFactory);\n    }\n\n    public function withUriFactory(UriFactoryInterface $uriFactory): static\n    {\n        return new static($this->uri, $uriFactory);\n    }\n\n    public function withoutUriFactory(): static\n    {\n        return new static($this->uri, null);\n    }\n\n    public function getUri(): Psr7UriInterface|UriInterface\n    {\n        return $this->uri;\n    }\n\n    public function getUriString(): string\n    {\n        return $this->uri->__toString();\n    }\n\n    public function jsonSerialize(): string\n    {\n        return $this->uri->__toString();\n    }\n\n    public function __toString(): string\n    {\n        return $this->uri->__toString();\n    }\n\n    public function origin(): ?self\n    {\n        return match (null) {\n            $this->origin => null,\n            default => new self($this->origin, $this->uriFactory),\n        };\n    }\n\n    /**\n     * Returns the Unix filesystem path.\n     *\n     * The method will return null if a scheme is present and is not the `file` scheme\n     */\n    public function unixPath(): ?string\n    {\n        return match ($this->uri->getScheme()) {\n            'file', $this->nullValue => rawurldecode($this->uri->getPath()),\n            default => null,\n        };\n    }\n\n    /**\n     * Returns the Windows filesystem path.\n     *\n     * The method will return null if a scheme is present and is not the `file` scheme\n     */\n    public function windowsPath(): ?string\n    {\n        static $regexpWindowsPath = ',^(?<root>[a-zA-Z]:),';\n\n        if (!in_array($this->uri->getScheme(), ['file', $this->nullValue], true)) {\n            return null;\n        }\n\n        $originalPath = $this->uri->getPath();\n        $path = $originalPath;\n        if ('/' === ($path[0] ?? '')) {\n            $path = substr($path, 1);\n        }\n\n        if (1 === preg_match($regexpWindowsPath, $path, $matches)) {\n            $root = $matches['root'];\n            $path = substr($path, strlen($root));\n\n            return $root.str_replace('/', '\\\\', rawurldecode($path));\n        }\n\n        $host = $this->uri->getHost();\n\n        return match ($this->nullValue) {\n            $host => str_replace('/', '\\\\', rawurldecode($originalPath)),\n            default => '\\\\\\\\'.$host.'\\\\'.str_replace('/', '\\\\', rawurldecode($path)),\n        };\n    }\n\n    /**\n     * Returns a string representation of a File URI according to RFC8089.\n     *\n     * The method will return null if the URI scheme is not the `file` scheme\n     */\n    public function toRfc8089(): ?string\n    {\n        $path = $this->uri->getPath();\n\n        return match (true) {\n            'file' !== $this->uri->getScheme() => null,\n            in_array($this->uri->getAuthority(), ['', null, 'localhost'], true) => 'file:'.match (true) {\n                '' === $path,\n                '/' === $path[0] => $path,\n                default => '/'.$path,\n            },\n            default => (string) $this->uri,\n        };\n    }\n\n    /**\n     * Tells whether the `file` scheme base URI represents a local file.\n     */\n    public function isLocalFile(): bool\n    {\n        return match (true) {\n            'file' !== $this->uri->getScheme() => false,\n            in_array($this->uri->getAuthority(), ['', null, 'localhost'], true) => true,\n            default => false,\n        };\n    }\n\n    /**\n     * Tells whether the URI is opaque or not.\n     *\n     * A URI is opaque if and only if it is absolute\n     * and does not have an authority path.\n     */\n    public function isOpaque(): bool\n    {\n        return $this->nullValue === $this->uri->getAuthority()\n            && $this->isAbsolute();\n    }\n\n    /**\n     * Tells whether two URI do not share the same origin.\n     */\n    public function isCrossOrigin(Stringable|string $uri): bool\n    {\n        if (null === $this->origin) {\n            return true;\n        }\n\n        $uri = static::filterUri($uri);\n        $uriOrigin = $this->computeOrigin($uri, $uri instanceof Psr7UriInterface ? '' : null);\n\n        return match(true) {\n            null === $uriOrigin,\n            $uriOrigin->__toString() !== $this->origin->__toString() => true,\n            default => false,\n        };\n    }\n\n    /**\n     * Tells whether the URI is absolute.\n     */\n    public function isAbsolute(): bool\n    {\n        return $this->nullValue !== $this->uri->getScheme();\n    }\n\n    /**\n     * Tells whether the URI is a network path.\n     */\n    public function isNetworkPath(): bool\n    {\n        return $this->nullValue === $this->uri->getScheme()\n            && $this->nullValue !== $this->uri->getAuthority();\n    }\n\n    /**\n     * Tells whether the URI is an absolute path.\n     */\n    public function isAbsolutePath(): bool\n    {\n        return $this->nullValue === $this->uri->getScheme()\n            && $this->nullValue === $this->uri->getAuthority()\n            && '/' === ($this->uri->getPath()[0] ?? '');\n    }\n\n    /**\n     * Tells whether the URI is a relative path.\n     */\n    public function isRelativePath(): bool\n    {\n        return $this->nullValue === $this->uri->getScheme()\n            && $this->nullValue === $this->uri->getAuthority()\n            && '/' !== ($this->uri->getPath()[0] ?? '');\n    }\n\n    /**\n     * Tells whether both URI refers to the same document.\n     */\n    public function isSameDocument(Stringable|string $uri): bool\n    {\n        return self::normalizedUri($this->uri)->isSameDocument(self::normalizedUri($uri));\n    }\n\n    private static function normalizedUri(Stringable|string $uri): Uri\n    {\n        $uri = ($uri instanceof Uri) ? $uri : Uri::new($uri);\n        $host = $uri->getHost();\n        if (null === $host || Ipv4Converter::fromEnvironment()->isIpv4($host) || IPv6Converter::isIpv6($host)) {\n            return $uri;\n        }\n\n        /** @var Uri $uri */\n        $uri = $uri->withHost(IdnaConverter::toUnicode((string) Ipv6Converter::compress($host))->domain());\n\n        return $uri;\n    }\n\n    /**\n     * Tells whether the URI contains an Internationalized Domain Name (IDN).\n     */\n    public function hasIdn(): bool\n    {\n        return IdnaConverter::isIdn($this->uri->getHost());\n    }\n\n    /**\n     * Tells whether the URI contains an IPv4 regardless if it is mapped or native.\n     */\n    public function hasIPv4(): bool\n    {\n        return IPv4Converter::fromEnvironment()->isIpv4($this->uri->getHost());\n    }\n\n    /**\n     * Resolves a URI against a base URI using RFC3986 rules.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter or silence them apart from validating its own parameters.\n     */\n    public function resolve(Stringable|string $uri): static\n    {\n        $resolved = UriString::resolve($uri, $this->uri->__toString());\n\n        return new static(match ($this->uriFactory) {\n            null => Uri::new($resolved),\n            default => $this->uriFactory->createUri($resolved),\n        }, $this->uriFactory);\n    }\n\n    /**\n     * Relativize a URI according to a base URI.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter of silence them apart from validating its own parameters.\n     */\n    public function relativize(Stringable|string $uri): static\n    {\n        $uri = static::formatHost(static::filterUri($uri, $this->uriFactory));\n        if ($this->canNotBeRelativize($uri)) {\n            return new static($uri, $this->uriFactory);\n        }\n\n        $null = $uri instanceof Psr7UriInterface ? '' : null;\n        $uri = $uri->withScheme($null)->withPort(null)->withUserInfo($null)->withHost($null);\n        $targetPath = $uri->getPath();\n        $basePath = $this->uri->getPath();\n\n        return new static(\n            match (true) {\n                $targetPath !== $basePath => $uri->withPath(static::relativizePath($targetPath, $basePath)),\n                static::componentEquals('query', $uri) => $uri->withPath('')->withQuery($null),\n                $null === $uri->getQuery() => $uri->withPath(static::formatPathWithEmptyBaseQuery($targetPath)),\n                default => $uri->withPath(''),\n            },\n            $this->uriFactory\n        );\n    }\n\n    final protected function computeOrigin(Psr7UriInterface|UriInterface $uri, ?string $nullValue): Psr7UriInterface|UriInterface|null\n    {\n        if ($uri instanceof UriInspector) {\n            return Uri::tryNew($uri->getOrigin());\n        }\n\n        $origin = Uri::tryNew($uri)?->getOrigin();\n        if (null === $origin) {\n            return null;\n        }\n\n        $components = UriString::parse($origin);\n\n        return $uri\n                ->withFragment($nullValue)\n                ->withQuery($nullValue)\n                ->withPath('')\n                ->withScheme('localhost')\n                ->withHost((string) $components['host'])\n                ->withPort($components['port'])\n                ->withScheme((string) $components['scheme'])\n                ->withUserInfo($nullValue);\n    }\n\n    /**\n     * Input URI normalization to allow Stringable and string URI.\n     */\n    final protected static function filterUri(Stringable|string $uri, UriFactoryInterface|null $uriFactory = null): Psr7UriInterface|UriInterface\n    {\n        return match (true) {\n            $uri instanceof UriAccess => $uri->getUri(),\n            $uri instanceof Psr7UriInterface,\n            $uri instanceof UriInterface => $uri,\n            $uriFactory instanceof UriFactoryInterface => $uriFactory->createUri((string) $uri),\n            default => Uri::new($uri),\n        };\n    }\n\n    /**\n     * Tells whether the component value from both URI object equals.\n     *\n     * @pqram 'query'|'authority'|'scheme' $property\n     */\n    final protected function componentEquals(string $property, Psr7UriInterface|UriInterface $uri): bool\n    {\n        $getComponent = function (string $property, Psr7UriInterface|UriInterface $uri): ?string {\n            $component = match ($property) {\n                'query' => $uri->getQuery(),\n                'authority' => $uri->getAuthority(),\n                default => $uri->getScheme(),\n            };\n\n            return match (true) {\n                $uri instanceof UriInterface, '' !== $component => $component,\n                default => null,\n            };\n        };\n\n        return $getComponent($property, $uri) === $getComponent($property, $this->uri);\n    }\n\n    /**\n     * Filter the URI object.\n     */\n    final protected static function formatHost(Psr7UriInterface|UriInterface $uri): Psr7UriInterface|UriInterface\n    {\n        $host = $uri->getHost();\n        try {\n            $converted = IPv4Converter::fromEnvironment()->toDecimal($host);\n        } catch (MissingFeature) {\n            $converted = null;\n        }\n\n        if (false === filter_var($converted, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n            $converted = IPv6Converter::compress($host);\n        }\n\n        return match (true) {\n            null !== $converted => $uri->withHost($converted),\n            '' === $host,\n            $uri instanceof UriInterface => $uri,\n            default => $uri->withHost((string) Uri::fromComponents(['host' => $host])->getHost()),\n        };\n    }\n\n    /**\n     * Tells whether the submitted URI object can be relativized.\n     */\n    final protected function canNotBeRelativize(Psr7UriInterface|UriInterface $uri): bool\n    {\n        return !static::componentEquals('scheme', $uri)\n            || !static::componentEquals('authority', $uri)\n            || static::from($uri)->isRelativePath();\n    }\n\n    /**\n     * Relatives the URI for an authority-less target URI.\n     */\n    final protected static function relativizePath(string $path, string $basePath): string\n    {\n        $baseSegments = static::getSegments($basePath);\n        $targetSegments = static::getSegments($path);\n        $targetBasename = array_pop($targetSegments);\n        array_pop($baseSegments);\n        foreach ($baseSegments as $offset => $segment) {\n            if (!isset($targetSegments[$offset]) || $segment !== $targetSegments[$offset]) {\n                break;\n            }\n            unset($baseSegments[$offset], $targetSegments[$offset]);\n        }\n        $targetSegments[] = $targetBasename;\n\n        return static::formatPath(\n            str_repeat('../', count($baseSegments)).implode('/', $targetSegments),\n            $basePath\n        );\n    }\n\n    /**\n     * returns the path segments.\n     *\n     * @return string[]\n     */\n    final protected static function getSegments(string $path): array\n    {\n        return explode('/', match (true) {\n            '' === $path,\n            '/' !== $path[0] => $path,\n            default => substr($path, 1),\n        });\n    }\n\n    /**\n     * Formatting the path to keep a valid URI.\n     */\n    final protected static function formatPath(string $path, string $basePath): string\n    {\n        $colonPosition = strpos($path, ':');\n        $slashPosition = strpos($path, '/');\n\n        return match (true) {\n            '' === $path => match (true) {\n                '' === $basePath,\n                '/' === $basePath => $basePath,\n                default => './',\n            },\n            false === $colonPosition => $path,\n            false === $slashPosition,\n            $colonPosition < $slashPosition  =>  \"./$path\",\n            default => $path,\n        };\n    }\n\n    /**\n     * Formatting the path to keep a resolvable URI.\n     */\n    final protected static function formatPathWithEmptyBaseQuery(string $path): string\n    {\n        $targetSegments = static::getSegments($path);\n        $basename = $targetSegments[array_key_last($targetSegments)];\n\n        return '' === $basename ? './' : $basename;\n    }\n\n    /**\n     * Normalizes a URI for comparison; this URI string representation is not suitable for usage as per RFC guidelines.\n     *\n     * @deprecated since version 7.6.0\n     *\n     * @codeCoverageIgnore\n     */\n    #[Deprecated(message:'no longer used by the isSameDocument method', since:'league/uri-interfaces:7.6.0')]\n    final protected function normalize(Psr7UriInterface|UriInterface $uri): string\n    {\n        $newUri = $uri->withScheme($uri instanceof Psr7UriInterface ? '' : null);\n        if ('' === $newUri->__toString()) {\n            return '';\n        }\n\n        return UriString::normalize($newUri);\n    }\n\n\n    /**\n     * Remove dot segments from the URI path as per RFC specification.\n     *\n     * @deprecated since version 7.6.0\n     *\n     * @codeCoverageIgnore\n     */\n    #[Deprecated(message:'no longer used by the isSameDocument method', since:'league/uri-interfaces:7.6.0')]\n    final protected function removeDotSegments(string $path): string\n    {\n        if (!str_contains($path, '.')) {\n            return $path;\n        }\n\n        $reducer = function (array $carry, string $segment): array {\n            if ('..' === $segment) {\n                array_pop($carry);\n\n                return $carry;\n            }\n\n            if (!isset(static::DOT_SEGMENTS[$segment])) {\n                $carry[] = $segment;\n            }\n\n            return $carry;\n        };\n\n        $oldSegments = explode('/', $path);\n        $newPath = implode('/', array_reduce($oldSegments, $reducer(...), []));\n        if (isset(static::DOT_SEGMENTS[$oldSegments[array_key_last($oldSegments)]])) {\n            $newPath .= '/';\n        }\n\n        // @codeCoverageIgnoreStart\n        // added because some PSR-7 implementations do not respect RFC3986\n        if (str_starts_with($path, '/') && !str_starts_with($newPath, '/')) {\n            return '/'.$newPath;\n        }\n        // @codeCoverageIgnoreEnd\n\n        return $newPath;\n    }\n\n    /**\n     * Resolves an URI path and query component.\n     *\n     * @return array{0:string, 1:string|null}\n     *\n     * @deprecated since version 7.6.0\n     *\n     * @codeCoverageIgnore\n     */\n    #[Deprecated(message:'no longer used by the isSameDocument method', since:'league/uri-interfaces:7.6.0')]\n    final protected function resolvePathAndQuery(Psr7UriInterface|UriInterface $uri): array\n    {\n        $targetPath = $uri->getPath();\n        $null = $uri instanceof Psr7UriInterface ? '' : null;\n\n        if (str_starts_with($targetPath, '/')) {\n            return [$targetPath, $uri->getQuery()];\n        }\n\n        if ('' === $targetPath) {\n            $targetQuery = $uri->getQuery();\n            if ($null === $targetQuery) {\n                $targetQuery = $this->uri->getQuery();\n            }\n\n            $targetPath = $this->uri->getPath();\n            //@codeCoverageIgnoreStart\n            //because some PSR-7 Uri implementations allow this RFC3986 forbidden construction\n            if (null !== $this->uri->getAuthority() && !str_starts_with($targetPath, '/')) {\n                $targetPath = '/'.$targetPath;\n            }\n            //@codeCoverageIgnoreEnd\n\n            return [$targetPath, $targetQuery];\n        }\n\n        $basePath = $this->uri->getPath();\n        if (null !== $this->uri->getAuthority() && '' === $basePath) {\n            $targetPath = '/'.$targetPath;\n        }\n\n        if ('' !== $basePath) {\n            $segments = explode('/', $basePath);\n            array_pop($segments);\n            if ([] !== $segments) {\n                $targetPath = implode('/', $segments).'/'.$targetPath;\n            }\n        }\n\n        return [$targetPath, $uri->getQuery()];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/HttpFactory.php","ext":"php","size":539,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Psr\\Http\\Message\\UriFactoryInterface;\nuse Psr\\Http\\Message\\UriInterface;\n\nfinal class HttpFactory implements UriFactoryInterface\n{\n    public function createUri(string $uri = ''): UriInterface\n    {\n        return Http::new($uri);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/Template.php","ext":"php","size":4439,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse Deprecated;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\nuse function array_filter;\nuse function array_map;\nuse function array_reduce;\nuse function array_unique;\nuse function preg_match_all;\nuse function preg_replace;\nuse function str_contains;\nuse function str_replace;\n\nuse const PREG_SET_ORDER;\n\n/**\n * @internal The class exposes the internal representation of a Template and its usage\n */\nfinal class Template implements Stringable\n{\n    /**\n     * Expression regular expression pattern.\n     */\n    private const REGEXP_EXPRESSION_DETECTOR = '/(?<expression>\\{[^}]*})/x';\n\n    /** @var array<Expression> */\n    private readonly array $expressions;\n    /** @var array<string> */\n    public readonly array $variableNames;\n\n    private function __construct(public readonly string $value, Expression ...$expressions)\n    {\n        $this->expressions = $expressions;\n        $this->variableNames = array_unique(\n            array_merge(\n                ...array_map(\n                    static fn (Expression $expression): array => $expression->variableNames,\n                    $expressions\n                )\n            )\n        );\n    }\n\n    /**\n     * @throws SyntaxError if the template contains invalid expressions\n     * @throws SyntaxError if the template contains invalid variable specification\n     */\n    public static function new(Stringable|string $template): self\n    {\n        $template = (string) $template;\n        /** @var string $remainder */\n        $remainder = preg_replace(self::REGEXP_EXPRESSION_DETECTOR, '', $template);\n        if (str_contains($remainder, '{') || str_contains($remainder, '}')) {\n            throw new SyntaxError('The template \"'.$template.'\" contains invalid expressions.');\n        }\n\n        preg_match_all(self::REGEXP_EXPRESSION_DETECTOR, $template, $founds, PREG_SET_ORDER);\n\n        return new self($template, ...array_values(\n            array_reduce($founds, function (array $carry, array $found): array {\n                if (!isset($carry[$found['expression']])) {\n                    $carry[$found['expression']] = Expression::new($found['expression']);\n                }\n\n                return $carry;\n            }, [])\n        ));\n    }\n\n    /**\n     * @throws TemplateCanNotBeExpanded if the variables are invalid\n     */\n    public function expand(iterable $variables = []): string\n    {\n        if (!$variables instanceof VariableBag) {\n            $variables = new VariableBag($variables);\n        }\n\n        return $this->expandAll($variables);\n    }\n\n    /**\n     * @throws TemplateCanNotBeExpanded if the variables are invalid or missing\n     */\n    public function expandOrFail(iterable $variables = []): string\n    {\n        if (!$variables instanceof VariableBag) {\n            $variables = new VariableBag($variables);\n        }\n\n        $missing = array_filter($this->variableNames, fn (string $name): bool => !isset($variables[$name]));\n        if ([] !== $missing) {\n            throw TemplateCanNotBeExpanded::dueToMissingVariables(...$missing);\n        }\n\n        return $this->expandAll($variables);\n    }\n\n    private function expandAll(VariableBag $variables): string\n    {\n        return array_reduce(\n            $this->expressions,\n            fn (string $uri, Expression $expr): string => str_replace($expr->value, $expr->expand($variables), $uri),\n            $this->value\n        );\n    }\n\n    public function __toString(): string\n    {\n        return $this->value;\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @throws SyntaxError if the template contains invalid expressions\n     * @throws SyntaxError if the template contains invalid variable specification\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Template::new()\n     *\n     * Create a new instance from a string.\n     *\n     */\n    #[Deprecated(message:'use League\\Uri\\UriTemplate\\Template::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromString(Stringable|string $template): self\n    {\n        return self::new($template);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/VarSpecifier.php","ext":"php","size":2231,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse League\\Uri\\Exceptions\\SyntaxError;\n\nuse function preg_match;\n\n/**\n * @internal The class exposes the internal representation of a Var Specifier\n * @link https://www.rfc-editor.org/rfc/rfc6570#section-2.3\n */\nfinal class VarSpecifier\n{\n    /**\n     * Variables specification regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc6570#section-2.3\n     */\n    private const REGEXP_VARSPEC = '/^(?<name>(?:[A-z0-9_\\.]|%[0-9a-fA-F]{2})+)(?<modifier>\\:(?<position>\\d+)|\\*)?$/';\n\n    private const MODIFIER_POSITION_MAX_POSITION = 10_000;\n\n    private function __construct(\n        public readonly string $name,\n        public readonly string $modifier,\n        public readonly int $position\n    ) {\n    }\n\n    public static function new(string $specification): self\n    {\n        if (1 !== preg_match(self::REGEXP_VARSPEC, $specification, $parsed)) {\n            throw new SyntaxError('The variable specification \"'.$specification.'\" is invalid.');\n        }\n\n        $properties = ['name' => $parsed['name'], 'modifier' => $parsed['modifier'] ?? '', 'position' => $parsed['position'] ?? ''];\n\n        if ('' !== $properties['position']) {\n            $properties['position'] = (int) $properties['position'];\n            $properties['modifier'] = ':';\n        }\n\n        if ('' === $properties['position']) {\n            $properties['position'] = 0;\n        }\n\n        if (self::MODIFIER_POSITION_MAX_POSITION <= $properties['position']) {\n            throw new SyntaxError('The variable specification \"'.$specification.'\" is invalid the position modifier must be lower than 10000.');\n        }\n\n        return new self($properties['name'], $properties['modifier'], $properties['position']);\n    }\n\n    public function toString(): string\n    {\n        return $this->name.$this->modifier.match (true) {\n            0 < $this->position => $this->position,\n            default => '',\n        };\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/VariableBag.php","ext":"php","size":4008,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse ArrayAccess;\nuse Closure;\nuse Countable;\nuse IteratorAggregate;\nuse Stringable;\nuse Traversable;\n\nuse function array_filter;\nuse function is_bool;\nuse function is_scalar;\n\nuse const ARRAY_FILTER_USE_BOTH;\n\n/**\n * @internal The class exposes the internal representation of variable bags\n *\n * @phpstan-type InputValue string|bool|int|float|array<string|bool|int|float>\n *\n * @implements ArrayAccess<string, InputValue>\n * @implements IteratorAggregate<string, InputValue>\n */\nfinal class VariableBag implements ArrayAccess, Countable, IteratorAggregate\n{\n    /**\n     * @var array<string,string|array<string>>\n     */\n    private array $variables = [];\n\n    /**\n     * @param iterable<array-key, InputValue> $variables\n     */\n    public function __construct(iterable $variables = [])\n    {\n        foreach ($variables as $name => $value) {\n            $this->assign((string) $name, $value);\n        }\n    }\n\n    public function count(): int\n    {\n        return count($this->variables);\n    }\n\n    public function getIterator(): Traversable\n    {\n        yield from $this->variables;\n    }\n\n    public function offsetExists(mixed $offset): bool\n    {\n        return array_key_exists($offset, $this->variables);\n    }\n\n    public function offsetUnset(mixed $offset): void\n    {\n        unset($this->variables[$offset]);\n    }\n\n    public function offsetSet(mixed $offset, mixed $value): void\n    {\n        $this->assign($offset, $value); /* @phpstan-ignore-line */\n    }\n\n    public function offsetGet(mixed $offset): mixed\n    {\n        return $this->fetch($offset);\n    }\n\n    /**\n     * Tells whether the bag is empty or not.\n     */\n    public function isEmpty(): bool\n    {\n        return [] === $this->variables;\n    }\n\n    /**\n     * Tells whether the bag is empty or not.\n     */\n    public function isNotEmpty(): bool\n    {\n        return [] !== $this->variables;\n    }\n\n    public function equals(mixed $value): bool\n    {\n        return $value instanceof self\n            && $this->variables === $value->variables;\n    }\n\n    /**\n     * Fetches the variable value if none found returns null.\n     *\n     * @return null|string|array<string>\n     */\n    public function fetch(string $name): null|string|array\n    {\n        return $this->variables[$name] ?? null;\n    }\n\n    /**\n     * @param Stringable|InputValue $value\n     */\n    public function assign(string $name, Stringable|string|bool|int|float|array|null $value): void\n    {\n        $this->variables[$name] = $this->normalizeValue($value, $name, true);\n    }\n\n    /**\n     * @param Stringable|InputValue $value\n     *\n     * @throws TemplateCanNotBeExpanded if the value contains nested list\n     */\n    private function normalizeValue(\n        Stringable|string|float|int|bool|array|null $value,\n        string $name,\n        bool $isNestedListAllowed\n    ): array|string {\n        return match (true) {\n            is_bool($value) => true === $value ? '1' : '0',\n            (null === $value || is_scalar($value) || $value instanceof Stringable) => (string) $value,\n            !$isNestedListAllowed => throw TemplateCanNotBeExpanded::dueToNestedListOfValue($name),\n            default => array_map(fn ($var): array|string => self::normalizeValue($var, $name, false), $value),\n        };\n    }\n\n    /**\n     * Replaces elements from passed variables into the current instance.\n     */\n    public function replace(VariableBag $variables): self\n    {\n        return new self($this->variables + $variables->variables);\n    }\n\n    /**\n     * Filters elements using the closure.\n     */\n    public function filter(Closure $fn): self\n    {\n        return new self(array_filter($this->variables, $fn, ARRAY_FILTER_USE_BOTH));\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/Operator.php","ext":"php","size":6687,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse League\\Uri\\Encoder;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\nuse function implode;\nuse function is_array;\nuse function preg_match;\nuse function rawurlencode;\nuse function str_contains;\nuse function substr;\n\n/**\n * Processing behavior according to the expression type operator.\n *\n * @internal The class exposes the internal representation of an Operator and its usage\n *\n * @link https://www.rfc-editor.org/rfc/rfc6570#section-2.2\n * @link https://tools.ietf.org/html/rfc6570#appendix-A\n */\nenum Operator: string\n{\n    /**\n     * Expression regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc6570#section-2.2\n     */\n    private const REGEXP_EXPRESSION = '/^\\{(?:(?<operator>[\\.\\/;\\?&\\=,\\!@\\|\\+#])?(?<variables>[^\\}]*))\\}$/';\n\n    /**\n     * Reserved Operator characters.\n     *\n     * @link https://tools.ietf.org/html/rfc6570#section-2.2\n     */\n    private const RESERVED_OPERATOR = '=,!@|';\n\n    case None = '';\n    case ReservedChars = '+';\n    case Label = '.';\n    case Path = '/';\n    case PathParam = ';';\n    case Query = '?';\n    case QueryPair = '&';\n    case Fragment = '#';\n\n    public function first(): string\n    {\n        return match ($this) {\n            self::None, self::ReservedChars => '',\n            default => $this->value,\n        };\n    }\n\n    public function separator(): string\n    {\n        return match ($this) {\n            self::None, self::ReservedChars, self::Fragment => ',',\n            self::Query, self::QueryPair => '&',\n            default => $this->value,\n        };\n    }\n\n    public function isNamed(): bool\n    {\n        return match ($this) {\n            self::Query, self::PathParam, self::QueryPair => true,\n            default => false,\n        };\n    }\n\n    /**\n     * Removes percent encoding on reserved characters (used with + and # modifiers).\n     */\n    public function decode(string $var): string\n    {\n        return match ($this) {\n            Operator::ReservedChars, Operator::Fragment => (string) Encoder::encodeQueryOrFragment($var),\n            default => rawurlencode($var),\n        };\n    }\n\n    /**\n     * @throws SyntaxError if the expression is invalid\n     * @throws SyntaxError if the operator used in the expression is invalid\n     * @throws SyntaxError if the contained variable specifiers are invalid\n     *\n     * @return array{operator:Operator, variables:string}\n     */\n    public static function parseExpression(Stringable|string $expression): array\n    {\n        $expression = (string) $expression;\n        if (1 !== preg_match(self::REGEXP_EXPRESSION, $expression, $parts)) {\n            throw new SyntaxError('The expression \"'.$expression.'\" is invalid.');\n        }\n\n        /** @var array{operator:string, variables:string} $parts */\n        $parts = $parts + ['operator' => ''];\n        if ('' !== $parts['operator'] && str_contains(self::RESERVED_OPERATOR, $parts['operator'])) {\n            throw new SyntaxError('The operator used in the expression \"'.$expression.'\" is reserved.');\n        }\n\n        return [\n            'operator' => self::from($parts['operator']),\n            'variables' => $parts['variables'],\n        ];\n    }\n\n    /**\n     * Replaces an expression with the given variables.\n     *\n     * @throws TemplateCanNotBeExpanded if the variables is an array and a \":\" modifier needs to be applied\n     * @throws TemplateCanNotBeExpanded if the variables contains nested array values\n     */\n    public function expand(VarSpecifier $varSpecifier, VariableBag $variables): string\n    {\n        $value = $variables->fetch($varSpecifier->name);\n        if (null === $value) {\n            return '';\n        }\n\n        [$expanded, $actualQuery] = $this->inject($value, $varSpecifier);\n        if (!$actualQuery) {\n            return $expanded;\n        }\n\n        if ('&' !== $this->separator() && '' === $expanded) {\n            return $varSpecifier->name;\n        }\n\n        return $varSpecifier->name.'='.$expanded;\n    }\n\n    /**\n     * @param string|array<string> $value\n     *\n     * @return array{0:string, 1:bool}\n     */\n    private function inject(array|string $value, VarSpecifier $varSpec): array\n    {\n        if (is_array($value)) {\n            return $this->replaceList($value, $varSpec);\n        }\n\n        if (':' === $varSpec->modifier) {\n            $value = substr($value, 0, $varSpec->position);\n        }\n\n        return [$this->decode($value), $this->isNamed()];\n    }\n\n    /**\n     * Expands an expression using a list of values.\n     *\n     * @param array<string> $value\n     *\n     * @throws TemplateCanNotBeExpanded if the variables is an array and a \":\" modifier needs to be applied\n     *\n     * @return array{0:string, 1:bool}\n     */\n    private function replaceList(array $value, VarSpecifier $varSpec): array\n    {\n        if (':' === $varSpec->modifier) {\n            throw TemplateCanNotBeExpanded::dueToUnableToProcessValueListWithPrefix($varSpec->name);\n        }\n\n        if ([] === $value) {\n            return ['', false];\n        }\n\n        $pairs = [];\n        $isList = array_is_list($value);\n        $useQuery = $this->isNamed();\n        foreach ($value as $key => $var) {\n            if (!$isList) {\n                $key = rawurlencode((string) $key);\n            }\n\n            $var = $this->decode($var);\n            if ('*' === $varSpec->modifier) {\n                if (!$isList) {\n                    $var = $key.'='.$var;\n                } elseif ($key > 0 && $useQuery) {\n                    $var = $varSpec->name.'='.$var;\n                }\n            }\n\n            $pairs[$key] = $var;\n        }\n\n        if ('*' === $varSpec->modifier) {\n            if (!$isList) {\n                // Don't prepend the value name when using the `explode` modifier with an associative array.\n                $useQuery = false;\n            }\n\n            return [implode($this->separator(), $pairs), $useQuery];\n        }\n\n        if (!$isList) {\n            // When an associative array is encountered and the `explode` modifier is not set, then\n            // the result must be a comma separated list of keys followed by their respective values.\n            $retVal = [];\n            foreach ($pairs as $offset => $data) {\n                $retVal[$offset] = $offset.','.$data;\n            }\n            $pairs = $retVal;\n        }\n\n        return [implode(',', $pairs), $useQuery];\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/Expression.php","ext":"php","size":2960,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse Deprecated;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\nuse function array_filter;\nuse function array_map;\nuse function array_unique;\nuse function explode;\nuse function implode;\n\n/**\n * @internal The class exposes the internal representation of an Expression and its usage\n * @link https://www.rfc-editor.org/rfc/rfc6570#section-2.2\n */\nfinal class Expression\n{\n    /** @var array<VarSpecifier> */\n    private readonly array $varSpecifiers;\n    /** @var array<string> */\n    public readonly array $variableNames;\n    public readonly string $value;\n\n    private function __construct(public readonly Operator $operator, VarSpecifier ...$varSpecifiers)\n    {\n        $this->varSpecifiers = $varSpecifiers;\n        $this->variableNames = array_unique(\n            array_map(\n                static fn (VarSpecifier $varSpecifier): string => $varSpecifier->name,\n                $varSpecifiers\n            )\n        );\n        $this->value = '{'.$operator->value.implode(',', array_map(\n            static fn (VarSpecifier $varSpecifier): string => $varSpecifier->toString(),\n            $varSpecifiers\n        )).'}';\n    }\n\n    /**\n     * @throws SyntaxError if the expression is invalid\n     */\n    public static function new(Stringable|string $expression): self\n    {\n        $parts = Operator::parseExpression($expression);\n\n        return new Expression($parts['operator'], ...array_map(\n            static fn (string $varSpec): VarSpecifier => VarSpecifier::new($varSpec),\n            explode(',', $parts['variables'])\n        ));\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @throws SyntaxError if the expression is invalid\n     * @see Expression::new()\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     */\n    #[Deprecated(message:'use League\\Uri\\UriTemplate\\Exppression::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromString(Stringable|string $expression): self\n    {\n        return self::new($expression);\n    }\n\n    public function expand(VariableBag $variables): string\n    {\n        $expanded = implode(\n            $this->operator->separator(),\n            array_filter(\n                array_map(\n                    fn (VarSpecifier $varSpecifier): string => $this->operator->expand($varSpecifier, $variables),\n                    $this->varSpecifiers\n                ),\n                static fn ($value): bool => '' !== $value\n            )\n        );\n\n        return match ('') {\n            $expanded => '',\n            default => $this->operator->first().$expanded,\n        };\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate/TemplateCanNotBeExpanded.php","ext":"php","size":1351,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\UriTemplate;\n\nuse InvalidArgumentException;\nuse League\\Uri\\Contracts\\UriException;\n\nclass TemplateCanNotBeExpanded extends InvalidArgumentException implements UriException\n{\n    public readonly array $variablesNames;\n\n    public function __construct(string $message = '', string ...$variableNames)\n    {\n        parent::__construct($message, 0, null);\n\n        $this->variablesNames = $variableNames;\n    }\n\n    public static function dueToUnableToProcessValueListWithPrefix(string $variableName): self\n    {\n        return new self('The \":\" modifier cannot be applied on \"'.$variableName.'\" since it is a list of values.', $variableName);\n    }\n\n    public static function dueToNestedListOfValue(string $variableName): self\n    {\n        return new self('The \"'.$variableName.'\" cannot be a nested list.', $variableName);\n    }\n\n    public static function dueToMissingVariables(string ...$variableNames): self\n    {\n        return new self('The following required variables are missing: `'.implode('`, `', $variableNames).'`.', ...$variableNames);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriInfo.php","ext":"php","size":3409,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Deprecated;\nuse League\\Uri\\Contracts\\UriInterface;\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\n\n/**\n * @deprecated since version 7.0.0\n * @codeCoverageIgnore\n * @see BaseUri\n */\nfinal class UriInfo\n{\n    /**\n     * @codeCoverageIgnore\n     */\n    private function __construct()\n    {\n    }\n\n    /**\n     * Tells whether the URI represents an absolute URI.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isAbsolute() instead', since:'league/uri:7.0.0')]\n    public static function isAbsolute(Psr7UriInterface|UriInterface $uri): bool\n    {\n        return BaseUri::from($uri)->isAbsolute();\n    }\n\n    /**\n     * Tell whether the URI represents a network path.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isNetworkPath() instead', since:'league/uri:7.0.0')]\n    public static function isNetworkPath(Psr7UriInterface|UriInterface $uri): bool\n    {\n        return BaseUri::from($uri)->isNetworkPath();\n    }\n\n    /**\n     * Tells whether the URI represents an absolute path.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isAbsolutePath() instead', since:'league/uri:7.0.0')]\n    public static function isAbsolutePath(Psr7UriInterface|UriInterface $uri): bool\n    {\n        return BaseUri::from($uri)->isAbsolutePath();\n    }\n\n    /**\n     * Tell whether the URI represents a relative path.\n     *\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isRelativePath() instead', since:'league/uri:7.0.0')]\n    public static function isRelativePath(Psr7UriInterface|UriInterface $uri): bool\n    {\n        return BaseUri::from($uri)->isRelativePath();\n    }\n\n    /**\n     * Tells whether both URI refers to the same document.\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isSameDocument() instead', since:'league/uri:7.0.0')]\n    public static function isSameDocument(Psr7UriInterface|UriInterface $uri, Psr7UriInterface|UriInterface $baseUri): bool\n    {\n        return BaseUri::from($baseUri)->isSameDocument($uri);\n    }\n\n    /**\n     * Returns the URI origin property as defined by WHATWG URL living standard.\n     *\n     * {@see https://url.spec.whatwg.org/#origin}\n     *\n     * For URI without a special scheme the method returns null\n     * For URI with the file scheme the method will return null (as this is left to the implementation decision)\n     * For URI with a special scheme the method returns the scheme followed by its authority (without the userinfo part)\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::origin() instead', since:'league/uri:7.0.0')]\n    public static function getOrigin(Psr7UriInterface|UriInterface $uri): ?string\n    {\n        return BaseUri::from($uri)->origin()?->__toString();\n    }\n\n    /**\n     * Tells whether two URI do not share the same origin.\n     *\n     * @see UriInfo::getOrigin()\n     */\n    #[Deprecated(message:'use League\\Uri\\BaseUri::isCrossOrigin() instead', since:'league/uri:7.0.0')]\n    public static function isCrossOrigin(Psr7UriInterface|UriInterface $uri, Psr7UriInterface|UriInterface $baseUri): bool\n    {\n        return BaseUri::from($baseUri)->isCrossOrigin($uri);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/UriTemplate.php","ext":"php","size":4585,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Deprecated;\nuse League\\Uri\\Contracts\\UriException;\nuse League\\Uri\\Contracts\\UriInterface;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\UriTemplate\\Template;\nuse League\\Uri\\UriTemplate\\TemplateCanNotBeExpanded;\nuse League\\Uri\\UriTemplate\\VariableBag;\nuse Stringable;\n\nuse function array_fill_keys;\nuse function array_key_exists;\n\n/**\n * Defines the URI Template syntax and the process for expanding a URI Template into a URI reference.\n *\n * @link    https://tools.ietf.org/html/rfc6570\n * @package League\\Uri\n * @author  Ignace Nyamagana Butera <nyamsprod@gmail.com>\n * @since   6.1.0\n *\n * @phpstan-import-type InputValue from VariableBag\n */\nfinal class UriTemplate implements Stringable\n{\n    private readonly Template $template;\n    private readonly VariableBag $defaultVariables;\n\n    /**\n     * @throws SyntaxError if the template syntax is invalid\n     * @throws TemplateCanNotBeExpanded if the template or the variables are invalid\n     */\n    public function __construct(Stringable|string $template, iterable $defaultVariables = [])\n    {\n        $this->template = $template instanceof Template ? $template : Template::new($template);\n        $this->defaultVariables = $this->filterVariables($defaultVariables);\n    }\n\n    private function filterVariables(iterable $variables): VariableBag\n    {\n        if (!$variables instanceof VariableBag) {\n            $variables = new VariableBag($variables);\n        }\n\n        return $variables\n            ->filter(fn ($value, string|int $name) => array_key_exists(\n                $name,\n                array_fill_keys($this->template->variableNames, 1)\n            ));\n    }\n\n    /**\n     * Returns the string representation of the UriTemplate.\n     */\n    public function __toString(): string\n    {\n        return $this->template->value;\n    }\n\n    /**\n     * Returns the distinct variables placeholders used in the template.\n     *\n     * @return array<string>\n     */\n    public function getVariableNames(): array\n    {\n        return $this->template->variableNames;\n    }\n\n    /**\n     * @return array<string, InputValue>\n     */\n    public function getDefaultVariables(): array\n    {\n        return iterator_to_array($this->defaultVariables);\n    }\n\n    /**\n     * Returns a new instance with the updated default variables.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified default variables.\n     *\n     * If present, variables whose name is not part of the current template\n     * possible variable names are removed.\n     *\n     * @throws TemplateCanNotBeExpanded if the variables are invalid\n     */\n    public function withDefaultVariables(iterable $defaultVariables): self\n    {\n        $defaultVariables = $this->filterVariables($defaultVariables);\n        if ($this->defaultVariables->equals($defaultVariables)) {\n            return $this;\n        }\n\n        return new self($this->template, $defaultVariables);\n    }\n\n    /**\n     * @throws TemplateCanNotBeExpanded if the variables are invalid\n     * @throws UriException if the resulting expansion cannot be converted to a UriInterface instance\n     */\n    public function expand(iterable $variables = []): UriInterface\n    {\n        return Uri::new($this->template->expand(\n            $this->filterVariables($variables)->replace($this->defaultVariables)\n        ));\n    }\n\n    /**\n     * @throws TemplateCanNotBeExpanded if the variables are invalid or missing\n     * @throws UriException if the resulting expansion cannot be converted to a UriInterface instance\n     */\n    public function expandOrFail(iterable $variables = []): UriInterface\n    {\n        return Uri::new($this->template->expandOrFail(\n            $this->filterVariables($variables)->replace($this->defaultVariables)\n        ));\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.6.0\n     * @codeCoverageIgnore\n     * @see UriTemplate::toString()\n     *\n     * Create a new instance from the environment.\n     */\n    #[Deprecated(message:'use League\\Uri\\UriTemplate::__toString() instead', since:'league/uri:7.6.0')]\n    public function getTemplate(): string\n    {\n        return $this->__toString();\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/Http.php","ext":"php","size":10732,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Deprecated;\nuse Exception;\nuse JsonSerializable;\nuse League\\Uri\\Contracts\\Conditionable;\nuse League\\Uri\\Contracts\\UriException;\nuse League\\Uri\\Contracts\\UriInterface;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\UriTemplate\\TemplateCanNotBeExpanded;\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\nuse Stringable;\nuse Uri\\Rfc3986\\Uri as Rfc3986Uri;\n\nuse function is_bool;\n\n/**\n * @phpstan-import-type InputComponentMap from UriString\n */\nfinal class Http implements Stringable, Psr7UriInterface, JsonSerializable, Conditionable\n{\n    private readonly UriInterface $uri;\n\n    private function __construct(UriInterface $uri)\n    {\n        if (null === $uri->getScheme() && '' === $uri->getHost()) {\n            throw new SyntaxError('An URI without scheme cannot contain an empty host string according to PSR-7: '.$uri);\n        }\n\n        $port = $uri->getPort();\n        if (null !== $port && ($port < 0 || $port > 65535)) {\n            throw new SyntaxError('The URI port is outside the established TCP and UDP port ranges: '.$uri);\n        }\n\n        $this->uri = $this->normalizePsr7Uri($uri);\n    }\n\n    /**\n     * PSR-7 UriInterface makes the following normalization.\n     *\n     * Safely stringify input when possible for League UriInterface compatibility.\n     *\n     * Query, Fragment and User Info when undefined are normalized to the empty string\n     */\n    private function normalizePsr7Uri(UriInterface $uri): UriInterface\n    {\n        $components = [];\n        if ('' === $uri->getFragment()) {\n            $components['fragment'] = null;\n        }\n\n        if ('' === $uri->getQuery()) {\n            $components['query'] = null;\n        }\n\n        if ('' === $uri->getUserInfo()) {\n            $components['user'] = null;\n            $components['pass'] = null;\n        }\n\n        return match ($components) {\n            [] => $uri,\n            default => Uri::fromComponents([...$uri->toComponents(), ...$components]),\n        };\n    }\n\n    /**\n     * Create a new instance from a string or a stringable object.\n     */\n    public static function new(Rfc3986Uri|Stringable|string $uri = ''): self\n    {\n        return new self(Uri::new($uri));\n    }\n\n    /**\n     * Create a new instance from a string or a stringable structure or returns null on failure.\n     */\n    public static function tryNew(Rfc3986Uri|Stringable|string $uri = ''): ?self\n    {\n        try {\n            return self::new($uri);\n        } catch (UriException) {\n            return null;\n        }\n    }\n\n    /**\n     * Create a new instance from a hash of parse_url parts.\n     *\n     * @param InputComponentMap $components a hash representation of the URI similar\n     *                                      to PHP parse_url function result\n     */\n    public static function fromComponents(array $components): self\n    {\n        $components += [\n            'scheme' => null, 'user' => null, 'pass' => null, 'host' => null,\n            'port' => null, 'path' => '', 'query' => null, 'fragment' => null,\n        ];\n\n        if ('' === $components['user']) {\n            $components['user'] = null;\n        }\n\n        if ('' === $components['pass']) {\n            $components['pass'] = null;\n        }\n\n        if ('' === $components['query']) {\n            $components['query'] = null;\n        }\n\n        if ('' === $components['fragment']) {\n            $components['fragment'] = null;\n        }\n\n        return new self(Uri::fromComponents($components));\n    }\n\n    /**\n     * Create a new instance from the environment.\n     */\n    public static function fromServer(array $server): self\n    {\n        return new self(Uri::fromServer($server));\n    }\n\n    /**\n     * Create a new instance from a URI and a Base URI.\n     *\n     * The returned URI must be absolute.\n     */\n    public static function fromBaseUri(Rfc3986Uri|Stringable|string $uri, Rfc3986Uri|Stringable|string|null $baseUri = null): self\n    {\n        return new self(Uri::fromBaseUri($uri, $baseUri));\n    }\n\n    /**\n     * Creates a new instance from a template.\n     *\n     * @throws TemplateCanNotBeExpanded if the variables are invalid or missing\n     * @throws UriException if the variables are invalid or missing\n     */\n    public static function fromTemplate(Stringable|string $template, iterable $variables = []): self\n    {\n        return new self(Uri::fromTemplate($template, $variables));\n    }\n\n    public function getScheme(): string\n    {\n        return $this->uri->getScheme() ?? '';\n    }\n\n    public function getAuthority(): string\n    {\n        return $this->uri->getAuthority() ?? '';\n    }\n\n    public function getUserInfo(): string\n    {\n        return $this->uri->getUserInfo() ?? '';\n    }\n\n    public function getHost(): string\n    {\n        return $this->uri->getHost() ?? '';\n    }\n\n    public function getPort(): ?int\n    {\n        return $this->uri->getPort();\n    }\n\n    public function getPath(): string\n    {\n        return $this->uri->getPath();\n    }\n\n    public function getQuery(): string\n    {\n        return $this->uri->getQuery() ?? '';\n    }\n\n    public function getFragment(): string\n    {\n        return $this->uri->getFragment() ?? '';\n    }\n\n    public function __toString(): string\n    {\n        return $this->uri->toString();\n    }\n\n    public function jsonSerialize(): string\n    {\n        return $this->uri->toString();\n    }\n\n    /**\n     * Safely stringify input when possible for League UriInterface compatibility.\n     */\n    private function filterInput(string $str): ?string\n    {\n        return match ('') {\n            $str => null,\n            default => $str,\n        };\n    }\n\n    private function newInstance(UriInterface $uri): self\n    {\n        return match ($this->uri->toString()) {\n            $uri->toString() => $this,\n            default => new self($uri),\n        };\n    }\n\n    public function when(callable|bool $condition, callable $onSuccess, ?callable $onFail = null): static\n    {\n        if (!is_bool($condition)) {\n            $condition = $condition($this);\n        }\n\n        return match (true) {\n            $condition => $onSuccess($this),\n            null !== $onFail => $onFail($this),\n            default => $this,\n        } ?? $this;\n    }\n\n    public function withScheme(string $scheme): self\n    {\n        return $this->newInstance($this->uri->withScheme($this->filterInput($scheme)));\n    }\n\n    public function withUserInfo(string $user, ?string $password = null): self\n    {\n        return $this->newInstance($this->uri->withUserInfo($this->filterInput($user), $password));\n    }\n\n    public function withHost(string $host): self\n    {\n        return $this->newInstance($this->uri->withHost($this->filterInput($host)));\n    }\n\n    public function withPort(?int $port): self\n    {\n        return $this->newInstance($this->uri->withPort($port));\n    }\n\n    public function withPath(string $path): self\n    {\n        return $this->newInstance($this->uri->withPath($path));\n    }\n\n    public function withQuery(string $query): self\n    {\n        return $this->newInstance($this->uri->withQuery($this->filterInput($query)));\n    }\n\n    public function withFragment(string $fragment): self\n    {\n        return $this->newInstance($this->uri->withFragment($this->filterInput($fragment)));\n    }\n\n    /**\n     * @return array{uri: string}\n     */\n    public function __serialize(): array\n    {\n        return ['uri' => $this->uri->toString()];\n    }\n\n    /**\n     * @param array{uri: string} $data\n     *\n     * @throws Exception\n     */\n    public function __unserialize(array $data): void\n    {\n        $uri = self::new($data['uri'] ?? throw new Exception('The `uri` property is missing from the serialized object.'));\n\n        $this->uri = $uri->uri;\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Http::new()\n     *\n     * Create a new instance from a string.\n     */\n    #[Deprecated(message:'use League\\Uri\\Http::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromString(Stringable|string $uri = ''): self\n    {\n        return self::new($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Http::fromComponents()\n     *\n     * Create a new instance from a hash of parse_url parts.\n     *\n     * @param InputComponentMap $components a hash representation of the URI similar\n     *                                      to PHP parse_url function result\n     */\n    #[Deprecated(message:'use League\\Uri\\Http::fromComponents() instead', since:'league/uri:7.0.0')]\n    public static function createFromComponents(array $components): self\n    {\n        return self::fromComponents($components);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Http::fromServer()\n     *\n     * Create a new instance from the environment.\n     */\n    #[Deprecated(message:'use League\\Uri\\Http::fromServer() instead', since:'league/uri:7.0.0')]\n    public static function createFromServer(array $server): self\n    {\n        return self::fromServer($server);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Http::new()\n     *\n     * Create a new instance from a URI object.\n     */\n    #[Deprecated(message:'use League\\Uri\\Http::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromUri(Psr7UriInterface|UriInterface $uri): self\n    {\n        return self::new($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Http::fromBaseUri()\n     *\n     * Create a new instance from a URI and a Base URI.\n     *\n     * The returned URI must be absolute.\n     */\n    #[Deprecated(message:'use League\\Uri\\Http::fromBaseUri() instead', since:'league/uri:7.0.0')]\n    public static function createFromBaseUri(Stringable|string $uri, Stringable|string|null $baseUri = null): self\n    {\n        return self::fromBaseUri($uri, $baseUri);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri/Uri.php","ext":"php","size":66918,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Closure;\nuse Deprecated;\nuse Dom\\HTMLDocument;\nuse DOMDocument;\nuse DOMException;\nuse finfo;\nuse League\\Uri\\Contracts\\Conditionable;\nuse League\\Uri\\Contracts\\UriComponentInterface;\nuse League\\Uri\\Contracts\\UriException;\nuse League\\Uri\\Contracts\\UriInspector;\nuse League\\Uri\\Contracts\\UriInterface;\nuse League\\Uri\\Contracts\\UriRenderer;\nuse League\\Uri\\Exceptions\\ConversionFailed;\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\Idna\\Converter as IdnaConverter;\nuse League\\Uri\\IPv4\\Converter as IPv4Converter;\nuse League\\Uri\\IPv6\\Converter as IPv6Converter;\nuse League\\Uri\\UriTemplate\\TemplateCanNotBeExpanded;\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\nuse RuntimeException;\nuse SensitiveParameter;\nuse SplFileInfo;\nuse SplFileObject;\nuse Stringable;\nuse Throwable;\nuse TypeError;\nuse Uri\\Rfc3986\\Uri as Rfc3986Uri;\nuse Uri\\WhatWg\\Url as WhatWgUrl;\n\nuse function array_filter;\nuse function array_key_last;\nuse function array_map;\nuse function array_pop;\nuse function base64_decode;\nuse function base64_encode;\nuse function class_exists;\nuse function count;\nuse function explode;\nuse function feof;\nuse function file_get_contents;\nuse function filter_var;\nuse function fread;\nuse function implode;\nuse function in_array;\nuse function inet_pton;\nuse function is_array;\nuse function is_bool;\nuse function is_string;\nuse function ltrim;\nuse function preg_match;\nuse function preg_replace_callback;\nuse function rawurldecode;\nuse function rawurlencode;\nuse function restore_error_handler;\nuse function set_error_handler;\nuse function sprintf;\nuse function str_contains;\nuse function str_repeat;\nuse function str_replace;\nuse function str_starts_with;\nuse function strlen;\nuse function strpos;\nuse function strspn;\nuse function strtolower;\nuse function substr;\nuse function trim;\n\nuse const FILEINFO_MIME;\nuse const FILEINFO_MIME_TYPE;\nuse const FILTER_FLAG_IPV4;\nuse const FILTER_FLAG_IPV6;\nuse const FILTER_NULL_ON_FAILURE;\nuse const FILTER_VALIDATE_BOOLEAN;\nuse const FILTER_VALIDATE_IP;\n\n/**\n * @phpstan-import-type ComponentMap from UriString\n * @phpstan-import-type InputComponentMap from UriString\n */\nfinal class Uri implements Conditionable, UriInterface, UriRenderer, UriInspector\n{\n    /**\n     * RFC3986 invalid characters.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-2.2\n     *\n     * @var string\n     */\n    private const REGEXP_INVALID_CHARS = '/[\\x00-\\x1f\\x7f]/';\n\n    /**\n     * RFC3986 host identified by a registered name regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     *\n     * @var string\n     */\n    private const REGEXP_HOST_REGNAME = '/^(\n        (?<unreserved>[a-z\\d_~\\-\\.])|\n        (?<sub_delims>[!$&\\'()*+,;=])|\n        (?<encoded>%[A-F\\d]{2})\n    )+$/x';\n\n    /**\n     * RFC3986 delimiters of the generic URI components regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-2.2\n     *\n     * @var string\n     */\n    private const REGEXP_HOST_GEN_DELIMS = '/[:\\/?#\\[\\]@ ]/'; // Also includes space.\n\n    /**\n     * RFC3986 IPvFuture regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     *\n     * @var string\n     */\n    private const REGEXP_HOST_IP_FUTURE = '/^\n        v(?<version>[A-F\\d])+\\.\n        (?:\n            (?<unreserved>[a-z\\d_~\\-\\.])|\n            (?<sub_delims>[!$&\\'()*+,;=:])  # also include the : character\n        )+\n    $/ix';\n\n    /**\n     * RFC3986 IPvFuture host and port component.\n     *\n     * @var string\n     */\n    private const REGEXP_HOST_PORT = ',^(?<host>(\\[.*]|[^:])*)(:(?<port>[^/?#]*))?$,x';\n\n    /**\n     * Significant 10 bits of IP to detect Zone ID regular expression pattern.\n     *\n     * @var string\n     */\n    private const HOST_ADDRESS_BLOCK = \"\\xfe\\x80\";\n\n    /**\n     * Regular expression pattern to for file URI.\n     * <volume> contains the volume but not the volume separator.\n     * The volume separator may be URL-encoded (`|` as `%7C`) by ::formatPath(),\n     * so we account for that here.\n     *\n     * @var string\n     */\n    private const REGEXP_FILE_PATH = ',^(?<delim>/)?(?<volume>[a-zA-Z])(?:[:|\\|]|%7C)(?<rest>.*)?,';\n\n    /**\n     * Mimetype regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc2397\n     *\n     * @var string\n     */\n    private const REGEXP_MIMETYPE = ',^\\w+/[-.\\w]+(?:\\+[-.\\w]+)?$,';\n\n    /**\n     * Base64 content regular expression pattern.\n     *\n     * @link https://tools.ietf.org/html/rfc2397\n     *\n     * @var string\n     */\n    private const REGEXP_BINARY = ',(;|^)base64$,';\n\n    /**\n     * Windows filepath regular expression pattern.\n     * <root> contains both the volume and volume separator.\n     *\n     * @var string\n     */\n    private const REGEXP_WINDOW_PATH = ',^(?<root>[a-zA-Z][:|\\|]),';\n\n    /**\n     * Supported schemes and corresponding default port.\n     * @see https://github.com/python-hyper/hyperlink/blob/master/src/hyperlink/_url.py for the curating list definition\n     * @see https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml\n     * @see https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml\n     *\n     * @var array<string, int|null>\n     */\n    private const SCHEME_DEFAULT_PORT = [\n        'data' => null,\n        'file' => null,\n        'ftp' => 21,\n        'gopher' => 70,\n        'http' => 80,\n        'https' => 443,\n        'ws' => 80,\n        'wss' => 443,\n        'imap' => 143,\n        'ipp' => 631,\n        'ipps' => 631,\n        'irc' => 194,\n        'ircs' => 6697,\n        'ldap' => 389,\n        'ldaps' => 636,\n        'mms' => 1755,\n        'msrp' => 2855,\n        'msrps' => null,\n        'mtqp' => 1038,\n        'nfs' => 111,\n        'nntp' => 119,\n        'nntps' => 563,\n        'pop' => 110,\n        'prospero' => 1525,\n        'redis' => 6379,\n        'rsync' => 873,\n        'rtsp' => 554,\n        'rtsps' => 322,\n        'rtspu' => 5005,\n        'sftp' => 22,\n        'smb' => 445,\n        'snmp' => 161,\n        'ssh' => 22,\n        'steam' => null,\n        'svn' => 3690,\n        'telnet' => 23,\n        'ventrilo' => 3784,\n        'vnc' => 5900,\n        'wais' => 210,\n        'xmpp' => null,\n        'acap' => 674,\n        'afp' => 548,\n        'dict' => 2628,\n        'dns' => 53,\n    ];\n\n    /**\n     * Maximum number of cached items.\n     *\n     * @var int\n     */\n    private const MAXIMUM_CACHED_ITEMS = 100;\n\n    /**\n     * All ASCII letters sorted by typical frequency of occurrence.\n     *\n     * @var string\n     */\n    private const ASCII = \"\\x20\\x65\\x69\\x61\\x73\\x6E\\x74\\x72\\x6F\\x6C\\x75\\x64\\x5D\\x5B\\x63\\x6D\\x70\\x27\\x0A\\x67\\x7C\\x68\\x76\\x2E\\x66\\x62\\x2C\\x3A\\x3D\\x2D\\x71\\x31\\x30\\x43\\x32\\x2A\\x79\\x78\\x29\\x28\\x4C\\x39\\x41\\x53\\x2F\\x50\\x22\\x45\\x6A\\x4D\\x49\\x6B\\x33\\x3E\\x35\\x54\\x3C\\x44\\x34\\x7D\\x42\\x7B\\x38\\x46\\x77\\x52\\x36\\x37\\x55\\x47\\x4E\\x3B\\x4A\\x7A\\x56\\x23\\x48\\x4F\\x57\\x5F\\x26\\x21\\x4B\\x3F\\x58\\x51\\x25\\x59\\x5C\\x09\\x5A\\x2B\\x7E\\x5E\\x24\\x40\\x60\\x7F\\x00\\x01\\x02\\x03\\x04\\x05\\x06\\x07\\x08\\x0B\\x0C\\x0D\\x0E\\x0F\\x10\\x11\\x12\\x13\\x14\\x15\\x16\\x17\\x18\\x19\\x1A\\x1B\\x1C\\x1D\\x1E\\x1F\";\n\n    /** @var array<string,int> */\n    private const WHATWG_SPECIAL_SCHEMES = ['ftp' => 1, 'http' => 1, 'https' => 1, 'ws' => 1, 'wss' => 1];\n\n    private const ABOUT_BLANK = 'about:blank';\n\n    private readonly ?string $scheme;\n    private readonly ?string $user;\n    private readonly ?string $pass;\n    private readonly ?string $userInfo;\n    private readonly ?string $host;\n    private readonly ?int $port;\n    private readonly ?string $authority;\n    private readonly string $path;\n    private readonly ?string $query;\n    private readonly ?string $fragment;\n    private readonly string $uri;\n    private readonly ?string $origin;\n\n    private function __construct(\n        ?string $scheme,\n        ?string $user,\n        #[SensitiveParameter] ?string $pass,\n        ?string $host,\n        ?int $port,\n        string $path,\n        ?string $query,\n        ?string $fragment\n    ) {\n        $this->scheme = $this->formatScheme($scheme);\n        $this->user = Encoder::encodeUser($user);\n        $this->pass = Encoder::encodePassword($pass);\n        $this->host = $this->formatHost($host);\n        $this->port = $this->formatPort($port);\n        $this->path = $this->formatPath($path);\n        $this->query = Encoder::encodeQueryOrFragment($query);\n        $this->fragment = Encoder::encodeQueryOrFragment($fragment);\n        $this->userInfo = $this->formatUserInfo($this->user, $this->pass);\n        $this->authority = UriString::buildAuthority($this->toComponents());\n        $this->uri = UriString::buildUri($this->scheme, $this->authority, $this->path, $this->query, $this->fragment);\n        $this->assertValidState();\n        $this->origin = $this->setOrigin();\n    }\n\n    /**\n     * Format the Scheme and Host component.\n     *\n     * @throws SyntaxError if the scheme is invalid\n     */\n    private function formatScheme(?string $scheme): ?string\n    {\n        if (null === $scheme) {\n            return null;\n        }\n\n        $formattedScheme = strtolower($scheme);\n        static $cache = [];\n        if (isset($cache[$formattedScheme])) {\n            return $formattedScheme;\n        }\n\n        if (\n            !array_key_exists($formattedScheme, self::SCHEME_DEFAULT_PORT)\n            && !UriString::isValidScheme($formattedScheme)\n        ) {\n            throw new SyntaxError('The scheme `'.$scheme.'` is invalid.');\n        }\n\n        $cache[$formattedScheme] = 1;\n        if (self::MAXIMUM_CACHED_ITEMS < count($cache)) {\n            array_shift($cache);\n        }\n\n        return $formattedScheme;\n    }\n\n    /**\n     * Set the UserInfo component.\n     */\n    private function formatUserInfo(\n        ?string $user,\n        #[SensitiveParameter] ?string $password\n    ): ?string {\n        return match (null) {\n            $password => $user,\n            default => $user.':'.$password,\n        };\n    }\n\n    /**\n     * Validate and Format the Host component.\n     */\n    private function formatHost(?string $host): ?string\n    {\n        if (null === $host || '' === $host) {\n            return $host;\n        }\n\n        static $cache = [];\n        if (isset($cache[$host])) {\n            return $cache[$host];\n        }\n\n        $formattedHost = '[' === $host[0] ? $this->formatIp($host) : $this->formatRegisteredName($host);\n        $cache[$host] = $formattedHost;\n        if (self::MAXIMUM_CACHED_ITEMS < count($cache)) {\n            array_shift($cache);\n        }\n\n        return $formattedHost;\n    }\n\n    /**\n     * Validate and format a registered name.\n     *\n     * The host is converted to its ascii representation if needed\n     *\n     * @throws MissingFeature if the submitted host required missing or misconfigured IDN support\n     * @throws SyntaxError if the submitted host is not a valid registered name\n     * @throws ConversionFailed if the submitted IDN host cannot be converted to a valid ascii form\n     */\n    private function formatRegisteredName(string $host): string\n    {\n        $formattedHost = rawurldecode($host);\n        if ($formattedHost === $host) {\n            return match (1) {\n                preg_match(self::REGEXP_HOST_REGNAME, $formattedHost) => $formattedHost,\n                preg_match(self::REGEXP_HOST_GEN_DELIMS, $formattedHost) => throw new SyntaxError('The host `'.$host.'` is invalid : a registered name cannot contain URI delimiters or spaces.'),\n                default => IdnaConverter::toAsciiOrFail($host),\n            };\n        }\n\n        if (IdnaConverter::toAscii($formattedHost)->hasErrors()) {\n            throw new SyntaxError('The host `'.$host.'` is invalid : the registered name contains invalid characters.');\n        }\n\n        return (string) Encoder::normalizeHost($host);\n    }\n\n    /**\n     * Validate and Format the IPv6/IPvfuture host.\n     *\n     * @throws SyntaxError if the submitted host is not a valid IP host\n     */\n    private function formatIp(string $host): string\n    {\n        $ip = substr($host, 1, -1);\n        if (false !== filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return $host;\n        }\n\n        if (1 === preg_match(self::REGEXP_HOST_IP_FUTURE, $ip, $matches) && !in_array($matches['version'], ['4', '6'], true)) {\n            return $host;\n        }\n\n        $pos = strpos($ip, '%');\n        if (false === $pos) {\n            throw new SyntaxError('The host `'.$host.'` is invalid : the IP host is malformed.');\n        }\n\n        if (1 === preg_match(self::REGEXP_HOST_GEN_DELIMS, rawurldecode(substr($ip, $pos)))) {\n            throw new SyntaxError('The host `'.$host.'` is invalid : the IP host is malformed.');\n        }\n\n        $ip = substr($ip, 0, $pos);\n        if (false === filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            throw new SyntaxError('The host `'.$host.'` is invalid : the IP host is malformed.');\n        }\n\n        //Only the address block fe80::/10 can have a Zone ID attach to\n        //let's detect the link local significant 10 bits\n        if (str_starts_with((string)inet_pton($ip), self::HOST_ADDRESS_BLOCK)) {\n            return $host;\n        }\n\n        throw new SyntaxError('The host `'.$host.'` is invalid : the IP host is malformed.');\n    }\n\n    /**\n     * Format the Port component.\n     *\n     * @throws SyntaxError\n     */\n    private function formatPort(?int $port = null): ?int\n    {\n        $defaultPort = self::SCHEME_DEFAULT_PORT[$this->scheme] ?? null;\n\n        return match (true) {\n            null === $port, $defaultPort === $port => null,\n            0 > $port => throw new SyntaxError('The port `'.$port.'` is invalid.'),\n            default => $port,\n        };\n    }\n\n    /**\n     * Create a new instance from a string or a stringable structure or returns null on failure.\n     */\n    public static function tryNew(Stringable|string|null $uri = ''): ?self\n    {\n        if (null === $uri) {\n            return null;\n        }\n\n        try {\n            return self::new($uri);\n        } catch (Throwable) {\n            return null;\n        }\n    }\n\n    /**\n     * Create a new instance from a string.\n     */\n    public static function new(WhatWgUrl|Rfc3986Uri|Stringable|string $uri = ''): self\n    {\n        if ($uri instanceof Rfc3986Uri) {\n            return new self(\n                $uri->getRawScheme(),\n                $uri->getRawUsername(),\n                $uri->getRawPassword(),\n                $uri->getRawHost(),\n                $uri->getPort(),\n                $uri->getRawPath(),\n                $uri->getRawQuery(),\n                $uri->getRawFragment()\n            );\n        }\n\n        if ($uri instanceof WhatWgUrl) {\n            return new self(\n                $uri->getScheme(),\n                $uri->getUsername(),\n                $uri->getPassword(),\n                $uri->getAsciiHost(),\n                $uri->getPort(),\n                $uri->getPath(),\n                $uri->getQuery(),\n                $uri->getFragment(),\n            );\n        }\n\n        $uri = (string) $uri;\n        trim($uri) === $uri || throw new SyntaxError(sprintf('The uri `%s` contains invalid characters', $uri));\n\n        return new self(...UriString::parse(str_replace(' ', '%20', $uri)));\n    }\n\n    /**\n     * Returns a new instance from a URI and a Base URI.or null on failure.\n     *\n     * The returned URI must be absolute if a base URI is provided\n     */\n    public static function parse(WhatWgUrl|Rfc3986Uri|Stringable|string $uri, WhatWgUrl|Rfc3986Uri|Stringable|string|null $baseUri = null): ?self\n    {\n        try {\n            return null === $baseUri ? self::new($uri) : self::fromBaseUri($uri, $baseUri);\n        } catch (Throwable) {\n            return null;\n        }\n    }\n\n    /**\n     * Creates a new instance from a URI and a Base URI.\n     *\n     * The returned URI must be absolute.\n     */\n    public static function fromBaseUri(WhatWgUrl|Rfc3986Uri|Stringable|string $uri, WhatWgUrl|Rfc3986Uri|Stringable|string|null $baseUri = null): self\n    {\n        if ($uri instanceof Rfc3986Uri) {\n            $uri = $uri->toRawString();\n        }\n\n        if ($uri instanceof WhatWgUrl) {\n            $uri = $uri->toAsciiString();\n        }\n\n        if ($baseUri instanceof Rfc3986Uri) {\n            $baseUri = $baseUri->toRawString();\n        }\n\n        if ($baseUri instanceof WhatWgUrl) {\n            $baseUri = $baseUri->toAsciiString();\n        }\n\n        return self::new(UriString::resolve($uri, $baseUri));\n    }\n\n    /**\n     * Creates a new instance from a template.\n     *\n     * @throws TemplateCanNotBeExpanded if the variables are invalid or missing\n     * @throws UriException if the resulting expansion cannot be converted to a UriInterface instance\n     */\n    public static function fromTemplate(UriTemplate|Stringable|string $template, iterable $variables = []): self\n    {\n        return match (true) {\n            $template instanceof UriTemplate => self::new($template->expand($variables)),\n            $template instanceof UriTemplate\\Template => self::new($template->expand($variables)),\n            default => self::new(UriTemplate\\Template::new($template)->expand($variables)),\n        };\n    }\n\n    /**\n     * Create a new instance from a hash representation of the URI similar\n     * to PHP parse_url function result.\n     *\n     * @param InputComponentMap $components a hash representation of the URI similar to PHP parse_url function result\n     */\n    public static function fromComponents(array $components = []): self\n    {\n        $components += [\n            'scheme' => null, 'user' => null, 'pass' => null, 'host' => null,\n            'port' => null, 'path' => '', 'query' => null, 'fragment' => null,\n        ];\n\n        if (null === $components['path']) {\n            $components['path'] = '';\n        }\n\n        return new self(\n            $components['scheme'],\n            $components['user'],\n            $components['pass'],\n            $components['host'],\n            $components['port'],\n            $components['path'],\n            $components['query'],\n            $components['fragment']\n        );\n    }\n\n    /**\n     * Create a new instance from a data file path.\n     *\n     * @param SplFileInfo|SplFileObject|resource|Stringable|string $path\n     * @param ?resource $context\n     *\n     * @throws MissingFeature If ext/fileinfo is not installed\n     * @throws SyntaxError If the file does not exist or is not readable\n     */\n    public static function fromFileContents(mixed $path, $context = null): self\n    {\n        FeatureDetection::supportsFileDetection();\n        $finfo = new finfo(FILEINFO_MIME_TYPE);\n        $bufferSize = 8192;\n\n        /** @var Closure(SplFileobject): array{0:string, 1:string} $fromFileObject */\n        $fromFileObject = function (SplFileObject $path) use ($finfo, $bufferSize): array {\n            $raw = $path->fread($bufferSize);\n            if (false === $raw) {\n                throw new SyntaxError('The file `'.$path.'` does not exist or is not readable.');\n            }\n            $mimetype = (string) $finfo->buffer($raw);\n            while (!$path->eof()) {\n                $raw .= $path->fread($bufferSize);\n            }\n\n            return [$mimetype, $raw];\n        };\n\n        /** @var Closure(resource): array{0:string, 1:string} $fromResource */\n        $fromResource = function ($stream) use ($finfo, $path, $bufferSize): array {\n            set_error_handler(fn (int $errno, string $errstr, string $errfile, int $errline) => true);\n            $raw = fread($stream, $bufferSize);\n            if (false === $raw) {\n                throw new SyntaxError('The file `'.$path.'` does not exist or is not readable.');\n            }\n            $mimetype = (string) $finfo->buffer($raw);\n            while (!feof($stream)) {\n                $raw .= fread($stream, $bufferSize);\n            }\n            restore_error_handler();\n\n            return [$mimetype, $raw];\n        };\n\n        /** @var Closure(Stringable|string, resource|null): array{0:string, 1:string} $fromPath */\n        $fromPath = function (Stringable|string $path, $context) use ($finfo): array {\n            $path = (string) $path;\n            set_error_handler(fn (int $errno, string $errstr, string $errfile, int $errline) => true);\n            $raw = file_get_contents(filename: $path, context: $context);\n            restore_error_handler();\n            if (false === $raw) {\n                throw new SyntaxError('The file `'.$path.'` does not exist or is not readable.');\n            }\n            $mimetype = (string) $finfo->file(filename: $path, flags: FILEINFO_MIME, context: $context);\n\n            return [$mimetype, $raw];\n        };\n\n        [$mimetype, $raw] = match (true) {\n            $path instanceof SplFileObject => $fromFileObject($path),\n            $path instanceof SplFileInfo => $fromFileObject($path->openFile(mode: 'rb', context: $context)),\n            is_resource($path) => $fromResource($path),\n            $path instanceof Stringable,\n            is_string($path) => $fromPath($path, $context),\n            default => throw new TypeError('The path `'.$path.'` is not a valid resource.'),\n        };\n\n        return Uri::fromComponents([\n            'scheme' => 'data',\n            'path' => str_replace(' ', '', $mimetype.';base64,'.base64_encode($raw)),\n        ]);\n    }\n\n    /**\n     * Create a new instance from a data URI string.\n     *\n     * @throws SyntaxError If the parameter syntax is invalid\n     */\n    public static function fromData(string $data, string $mimetype = '', string $parameters = ''): self\n    {\n        static $regexpMimetype = ',^\\w+/[-.\\w]+(?:\\+[-.\\w]+)?$,';\n\n        $mimetype = match (true) {\n            '' === $mimetype => 'text/plain',\n            1 === preg_match($regexpMimetype, $mimetype) =>  $mimetype,\n            default => throw new SyntaxError('Invalid mimeType, `'.$mimetype.'`.'),\n        };\n\n        if ('' === $parameters) {\n            return self::fromComponents([\n                'scheme' => 'data',\n                'path' => self::formatDataPath($mimetype.','.rawurlencode($data)),\n            ]);\n        }\n\n        $isInvalidParameter = static function (string $parameter): bool {\n            $properties = explode('=', $parameter);\n\n            return 2 !== count($properties) || 'base64' === strtolower($properties[0]);\n        };\n\n        if (str_starts_with($parameters, ';')) {\n            $parameters = substr($parameters, 1);\n        }\n\n        return match ([]) {\n            array_filter(explode(';', $parameters), $isInvalidParameter) => self::fromComponents([\n               'scheme' => 'data',\n               'path' => self::formatDataPath($mimetype.';'.$parameters.','.rawurlencode($data)),\n            ]),\n            default => throw new SyntaxError(sprintf('Invalid mediatype parameters, `%s`.', $parameters))\n        };\n    }\n\n    /**\n     * Create a new instance from a Unix path string.\n     */\n    public static function fromUnixPath(Stringable|string $path): self\n    {\n        $path = implode('/', array_map(rawurlencode(...), explode('/', (string) $path)));\n\n        return Uri::fromComponents(match (true) {\n            '/' !== ($path[0] ?? '') => ['path' => $path],\n            default => ['path' => $path, 'scheme' => 'file', 'host' => ''],\n        });\n    }\n\n    /**\n     * Create a new instance from a local Windows path string.\n     */\n    public static function fromWindowsPath(Stringable|string $path): self\n    {\n        $root = '';\n        $path = (string) $path;\n        if (1 === preg_match(self::REGEXP_WINDOW_PATH, $path, $matches)) {\n            $root = substr($matches['root'], 0, -1).':';\n            $path = substr($path, strlen($root));\n        }\n        $path = str_replace('\\\\', '/', $path);\n        $path = implode('/', array_map(rawurlencode(...), explode('/', $path)));\n\n        //Local Windows absolute path\n        if ('' !== $root) {\n            return Uri::fromComponents(['path' => '/'.$root.$path, 'scheme' => 'file', 'host' => '']);\n        }\n\n        //UNC Windows Path\n        if (!str_starts_with($path, '//')) {\n            return Uri::fromComponents(['path' => $path]);\n        }\n\n        [$host, $path] = explode('/', substr($path, 2), 2) + [1 => ''];\n\n        return Uri::fromComponents(['host' => $host, 'path' => '/'.$path, 'scheme' => 'file']);\n    }\n\n    /**\n     * Creates a new instance from a RFC8089 compatible URI.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc8089\n     */\n    public static function fromRfc8089(Stringable|string $uri): UriInterface\n    {\n        $fileUri = self::new((string) preg_replace(',^(file:/)([^/].*)$,i', 'file:///$2', (string) $uri));\n        $scheme = $fileUri->getScheme();\n\n        return match (true) {\n            'file' !== $scheme => throw new SyntaxError('As per RFC8089, the URI scheme must be `file`.'),\n            'localhost' === $fileUri->getAuthority() => $fileUri->withHost(''),\n            default => $fileUri,\n        };\n    }\n\n    /**\n     * Create a new instance from the environment.\n     */\n    public static function fromServer(array $server): self\n    {\n        $components = ['scheme' => self::fetchScheme($server)];\n        [$components['user'], $components['pass']] = self::fetchUserInfo($server);\n        [$components['host'], $components['port']] = self::fetchHostname($server);\n        [$components['path'], $components['query']] = self::fetchRequestUri($server);\n\n        return Uri::fromComponents($components);\n    }\n\n    public static function fromMarkdownAnchor(Stringable|string $markdown, Stringable|string|null $baseUri = null): self\n    {\n        static $regexp = '/\n             \\[(?:[^]]*)]      #title attribute\n             \\((?<uri>[^)]*)\\) #href attribute\n         /x';\n        $markdown = trim((string) $markdown);\n        if (1 !== preg_match($regexp, $markdown, $matches)) {\n            throw new SyntaxError('The markdown string `'.$markdown.'` is not valid anchor markdown tag.');\n        }\n\n        if (null !== $baseUri) {\n            $baseUri = (string) $baseUri;\n        }\n\n        return match ($baseUri) {\n            self::ABOUT_BLANK, null => self::new($matches['uri']),\n            default => self::fromBaseUri($matches['uri'], $baseUri),\n        };\n    }\n\n    /**\n     * If the html content contains more than one anchor element, only the first one will be parsed.\n     *\n     * @throws DOMException\n     */\n    public static function fromHtmlAnchor(Stringable|string $html, Stringable|string|null $baseUri = null): self\n    {\n        $dom = self::loadDom($html);\n        $element = $dom->getElementsByTagName('a')->item(0);\n        if (null === $element) {\n            throw new DOMException('No anchor element was found in the content.');\n        }\n\n        $uri = $element->getAttribute('href');\n        if (null !== $baseUri) {\n            $baseUri = (string) $baseUri;\n        }\n\n        return match (true) {\n            !in_array($baseUri, [null, self::ABOUT_BLANK], true) => self::fromBaseUri($uri, $baseUri),\n            !in_array($dom->documentURI, [null, self::ABOUT_BLANK], true) => self::fromBaseUri($uri, $dom->documentURI),\n            default => self::new($uri),\n        };\n    }\n\n    /**\n     * @throws DOMException\n     * @throws Throwable\n     */\n    private static function loadDom(Stringable|string $html): DOMDocument|HTMLDocument\n    {\n        FeatureDetection::supportsDom();\n\n        $html = (string) $html;\n        if (class_exists(HTMLDocument::class)) {\n            try {\n                set_error_handler(fn (int $errno, string $errstr, string $errfile, int $errline) => true);\n\n                return HTMLDocument::createFromString($html);\n            } finally {\n                restore_error_handler();\n            }\n        }\n\n        set_error_handler(fn (int $errno, string $errstr, string $errfile, int $errline) => true);\n        $dom = new DOMDocument();\n        $result = $dom->loadHTML($html);\n        restore_error_handler();\n        if (false === $result) {\n            throw new DOMException('The content could not be parsed as a valid HTML content.');\n        }\n\n        return $dom;\n    }\n\n    /**\n     * Returns the environment scheme.\n     */\n    private static function fetchScheme(array $server): string\n    {\n        $server += ['HTTPS' => ''];\n\n        return match (true) {\n            false !== filter_var($server['HTTPS'], FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE) => 'https',\n            default => 'http',\n        };\n    }\n\n    /**\n     * Returns the environment user info.\n     *\n     * @return non-empty-array{0: ?string, 1: ?string}\n     */\n    private static function fetchUserInfo(array $server): array\n    {\n        $server += ['PHP_AUTH_USER' => null, 'PHP_AUTH_PW' => null, 'HTTP_AUTHORIZATION' => ''];\n        $user = $server['PHP_AUTH_USER'];\n        $pass = $server['PHP_AUTH_PW'];\n        if (str_starts_with(strtolower($server['HTTP_AUTHORIZATION']), 'basic')) {\n            $userinfo = base64_decode(substr($server['HTTP_AUTHORIZATION'], 6), true);\n            if (false === $userinfo) {\n                throw new SyntaxError('The user info could not be detected');\n            }\n            [$user, $pass] = explode(':', $userinfo, 2) + [1 => null];\n        }\n\n        if (null !== $user) {\n            $user = rawurlencode($user);\n        }\n\n        if (null !== $pass) {\n            $pass = rawurlencode($pass);\n        }\n\n        return [$user, $pass];\n    }\n\n    /**\n     * Returns the environment host.\n     *\n     * @throws SyntaxError If the host cannot be detected\n     *\n     * @return array{0:string|null, 1:int|null}\n     */\n    private static function fetchHostname(array $server): array\n    {\n        $server += ['SERVER_PORT' => null];\n        if (null !== $server['SERVER_PORT']) {\n            $server['SERVER_PORT'] = (int) $server['SERVER_PORT'];\n        }\n\n        if (isset($server['HTTP_HOST']) && 1 === preg_match(self::REGEXP_HOST_PORT, $server['HTTP_HOST'], $matches)) {\n            $matches += ['host' => null, 'port' => null];\n            if (null !== $matches['port']) {\n                $matches['port'] = (int) $matches['port'];\n            }\n\n            return [$matches['host'], $matches['port'] ?? $server['SERVER_PORT']];\n        }\n\n        if (!isset($server['SERVER_ADDR'])) {\n            throw new SyntaxError('The host could not be detected');\n        }\n\n        if (false === filter_var($server['SERVER_ADDR'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n            return ['['.$server['SERVER_ADDR'].']', $server['SERVER_PORT']];\n        }\n\n        return [$server['SERVER_ADDR'], $server['SERVER_PORT']];\n    }\n\n    /**\n     * Returns the environment path.\n     *\n     * @return list<?string>\n     */\n    private static function fetchRequestUri(array $server): array\n    {\n        $server += ['IIS_WasUrlRewritten' => null, 'UNENCODED_URL' => '', 'PHP_SELF' => '', 'QUERY_STRING' => null];\n        if ('1' === $server['IIS_WasUrlRewritten'] && '' !== $server['UNENCODED_URL']) {\n            return explode('?', $server['UNENCODED_URL'], 2) + [1 => null];\n        }\n\n        if (isset($server['REQUEST_URI'])) {\n            [$path] = explode('?', $server['REQUEST_URI'], 2);\n            $query = ('' !== $server['QUERY_STRING']) ? $server['QUERY_STRING'] : null;\n\n            return [$path, $query];\n        }\n\n        return [$server['PHP_SELF'], $server['QUERY_STRING']];\n    }\n\n    /**\n     * Format the Path component.\n     */\n    private function formatPath(string $path): string\n    {\n        return match ($this->scheme) {\n            'data' => Encoder::encodePath(self::formatDataPath($path)),\n            'file' => $this->formatFilePath(Encoder::encodePath($path)),\n            default => Encoder::encodePath($path),\n        };\n    }\n\n    /**\n     * Filter the Path component.\n     *\n     * @link https://tools.ietf.org/html/rfc2397\n     *\n     * @throws SyntaxError If the path is not compliant with RFC2397\n     */\n    private static function formatDataPath(string $path): string\n    {\n        if ('' == $path) {\n            return 'text/plain;charset=us-ascii,';\n        }\n\n        if (strlen($path) !== strspn($path, self::ASCII) || !str_contains($path, ',')) {\n            throw new SyntaxError('The path `'.$path.'` is invalid according to RFC2937.');\n        }\n\n        $parts = explode(',', $path, 2) + [1 => null];\n        $mediatype = explode(';', (string) $parts[0], 2) + [1 => null];\n        $data = (string) $parts[1];\n        $mimetype = $mediatype[0];\n        if (null === $mimetype || '' === $mimetype) {\n            $mimetype = 'text/plain';\n        }\n\n        $parameters = $mediatype[1];\n        if (null === $parameters || '' === $parameters) {\n            $parameters = 'charset=us-ascii';\n        }\n\n        self::assertValidPath($mimetype, $parameters, $data);\n\n        return $mimetype.';'.$parameters.','.$data;\n    }\n\n    /**\n     * Assert the path is a compliant with RFC2397.\n     *\n     * @link https://tools.ietf.org/html/rfc2397\n     *\n     * @throws SyntaxError If the mediatype or the data are not compliant with the RFC2397\n     */\n    private static function assertValidPath(string $mimetype, string $parameters, string $data): void\n    {\n        if (1 !== preg_match(self::REGEXP_MIMETYPE, $mimetype)) {\n            throw new SyntaxError('The path mimetype `'.$mimetype.'` is invalid.');\n        }\n\n        $isBinary = 1 === preg_match(self::REGEXP_BINARY, $parameters, $matches);\n        if ($isBinary) {\n            $parameters = substr($parameters, 0, - strlen($matches[0]));\n        }\n\n        $res = array_filter(array_filter(explode(';', $parameters), self::validateParameter(...)));\n        if ([] !== $res) {\n            throw new SyntaxError('The path parameters `'.$parameters.'` is invalid.');\n        }\n\n        if (!$isBinary) {\n            return;\n        }\n\n        $res = base64_decode($data, true);\n        if (false === $res || $data !== base64_encode($res)) {\n            throw new SyntaxError('The path data `'.$data.'` is invalid.');\n        }\n    }\n\n    /**\n     * Validate mediatype parameter.\n     */\n    private static function validateParameter(string $parameter): bool\n    {\n        $properties = explode('=', $parameter);\n\n        return 2 != count($properties) || 'base64' === strtolower($properties[0]);\n    }\n\n    /**\n     * Format path component for file scheme.\n     */\n    private function formatFilePath(string $path): string\n    {\n        return (string) preg_replace_callback(\n            self::REGEXP_FILE_PATH,\n            static fn (array $matches): string => $matches['delim'].$matches['volume'].(isset($matches['rest']) ? ':'.$matches['rest'] : ''),\n            $path\n        );\n    }\n\n    /**\n     * assert the URI internal state is valid.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3\n     * @link https://tools.ietf.org/html/rfc3986#section-3.3\n     *\n     * @throws SyntaxError if the URI is in an invalid state according to RFC3986\n     * @throws SyntaxError if the URI is in an invalid state according to scheme specific rules\n     */\n    private function assertValidState(): void\n    {\n        if (null !== $this->authority && ('' !== $this->path && '/' !== $this->path[0])) {\n            throw new SyntaxError('If an authority is present the path must be empty or start with a `/`.');\n        }\n\n        if (null === $this->authority && str_starts_with($this->path, '//')) {\n            throw new SyntaxError('If there is no authority the path `'.$this->path.'` cannot start with a `//`.');\n        }\n\n        $pos = strpos($this->path, ':');\n        if (null === $this->authority\n            && null === $this->scheme\n            && false !== $pos\n            && !str_contains(substr($this->path, 0, $pos), '/')\n        ) {\n            throw new SyntaxError('In absence of a scheme and an authority the first path segment cannot contain a colon (\":\") character.');\n        }\n\n        if (! match ($this->scheme) {\n            'blob' => $this->isUriWithoutAuthority(),\n            'data', 'about' => $this->isUriWithSchemeAndPathOnly(),\n            'file' => $this->isUriWithSchemeHostAndPathOnly(),\n            'ftp', 'gopher' => $this->isNonEmptyHostUriWithoutFragmentAndQuery(),\n            'http', 'https' => $this->isNonEmptyHostUri(),\n            'ws', 'wss' => $this->isNonEmptyHostUriWithoutFragment(),\n            default => true,\n        }) {\n            throw new SyntaxError('The uri `'.$this->uri.'` is invalid for the `'.$this->scheme.'` scheme.');\n        }\n    }\n\n    /**\n     * Sets the URI origin.\n     *\n     * The origin read-only property of the URL interface returns a string containing the Unicode serialization\n     * of the origin of the represented URL.\n     */\n    private function setOrigin(): ?string\n    {\n        try {\n            if ('blob' !== $this->scheme) {\n                if (!isset(static::WHATWG_SPECIAL_SCHEMES[$this->scheme])) {\n                    return null;\n                }\n\n                $host = $this->host;\n                $converted = $host;\n                if (null !== $converted) {\n                    try {\n                        $converted = IPv4Converter::fromEnvironment()->toDecimal($host);\n                    } catch (MissingFeature) {\n                        $converted = null;\n                    }\n\n                    if (false === filter_var($converted, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n                        $converted = IPv6Converter::compress($host);\n                    }\n\n                    /** @var string $converted */\n                    if ($converted !== $host) {\n                        $converted = Idna\\Converter::toAscii($converted)->domain();\n                    }\n                }\n\n                return $this\n                    ->withFragment(null)\n                    ->withQuery(null)\n                    ->withPath('')\n                    ->withUserInfo(null)\n                    ->withHost($converted)\n                    ->toString();\n            }\n\n            $components = UriString::parse($this->path);\n            $scheme = strtolower($components['scheme'] ?? '');\n            if (!isset(static::WHATWG_SPECIAL_SCHEMES[$scheme])) {\n                return null;\n            }\n\n            return self::fromComponents($components)->origin;\n        } catch (UriException) {\n            return null;\n        }\n    }\n\n    private function isUriWithoutAuthority(): bool\n    {\n        return null === $this->authority;\n    }\n\n    /**\n     * URI validation for URI schemes which allows only scheme and path components.\n     */\n    private function isUriWithSchemeAndPathOnly(): bool\n    {\n        return null === $this->authority\n            && null === $this->query\n            && null === $this->fragment;\n    }\n\n    /**\n     * URI validation for URI schemes which allows only scheme, host and path components.\n     */\n    private function isUriWithSchemeHostAndPathOnly(): bool\n    {\n        return null === $this->userInfo\n            && null === $this->port\n            && null === $this->query\n            && null === $this->fragment\n            && !('' != $this->scheme && null === $this->host);\n    }\n\n    /**\n     * URI validation for URI schemes which disallow the empty '' host.\n     */\n    private function isNonEmptyHostUri(): bool\n    {\n        return '' !== $this->host\n            && !(null !== $this->scheme && null === $this->host);\n    }\n\n    /**\n     * URI validation for URIs schemes which disallow the empty '' host\n     * and forbids the fragment component.\n     */\n    private function isNonEmptyHostUriWithoutFragment(): bool\n    {\n        return $this->isNonEmptyHostUri() && null === $this->fragment;\n    }\n\n    /**\n     * URI validation for URIs schemes which disallow the empty '' host\n     * and forbids fragment and query components.\n     */\n    private function isNonEmptyHostUriWithoutFragmentAndQuery(): bool\n    {\n        return $this->isNonEmptyHostUri() && null === $this->fragment && null === $this->query;\n    }\n\n    public function __toString(): string\n    {\n        return $this->toString();\n    }\n\n    public function jsonSerialize(): string\n    {\n        return $this->toString();\n    }\n\n    public function toString(): string\n    {\n        return $this->uri;\n    }\n\n    public function toDisplayString(): string\n    {\n        $components = $this->toComponents();\n\n        unset($components['port']);\n        if (null !== $components['host']) {\n            $components['host'] = IdnaConverter::toUnicode($components['host'])->domain();\n        }\n\n        if ('/' === $components['path'] && null !== $this->authority) {\n            $components['path'] = '';\n        }\n\n        $components['path'] = Encoder::decodePath($components['path']);\n        $components['user'] = Encoder::decodeNecessary($components['user']);\n        $components['pass'] = Encoder::decodeNecessary($components['pass']);\n        $components['query'] = Encoder::decodeQuery($components['query']);\n        $components['fragment'] = Encoder::decodeFragment($components['fragment']);\n\n        return UriString::build([\n            ...array_map(fn (string|null $value) => match (true) {\n                null === $value,\n                !str_contains($value, '%20') => $value,\n                default => str_replace('%20', ' ', $value),\n            }, $components),\n            ...['port' => $this->port],\n        ]);\n    }\n\n    /**\n     * Returns the markdown string representation of the anchor tag with the current instance as its href attribute.\n     */\n    public function toMarkdownAnchor(?string $linkTextTemplate = null): string\n    {\n        return '['.strtr($linkTextTemplate ?? '{uri}', ['{uri}' => $this->toDisplayString()]).']('.$this->toString().')';\n    }\n\n    /**\n     * Returns the HTML string representation of the anchor tag with the current instance as its href attribute.\n     *\n     * @param iterable<string, string|null|array<string>> $attributes an ordered map of key value. you must quote the value if needed\n     *\n     * @throws DOMException\n     */\n    public function toHtmlAnchor(?string $linkTextTemplate = null, iterable $attributes = []): string\n    {\n        FeatureDetection::supportsDom();\n\n        $doc = class_exists(HTMLDocument::class) ? HTMLDocument::createEmpty() : new DOMDocument(encoding:'utf-8');\n        $element = $doc->createElement('a');\n        $element->setAttribute('href', $this->toString());\n        $element->appendChild($doc->createTextNode(strtr($linkTextTemplate ?? '{uri}', ['{uri}' => $this->toDisplayString()])));\n\n        foreach ($attributes as $name => $value) {\n            if ('href' === strtolower($name) || null === $value) {\n                continue;\n            }\n\n            if (is_array($value)) {\n                $value = implode(' ', $value);\n            }\n\n            if (!is_string($value)) {\n                throw new TypeError('The attribute `'.$name.'` contains an invalid value.');\n            }\n\n            $value = trim($value);\n            if ('' === $value) {\n                continue;\n            }\n\n            $element->setAttribute($name, $value);\n        }\n\n        $html = $doc->saveHTML($element);\n        if (false === $html) {\n            throw new DOMException('The HTML generation failed.');\n        }\n\n        return $html;\n    }\n\n    /**\n     * Returns the Unix filesystem path.\n     *\n     * The method will return null if a scheme is present and is not the `file` scheme\n     */\n    public function toUnixPath(): ?string\n    {\n        return match ($this->scheme) {\n            'file', null => rawurldecode($this->path),\n            default => null,\n        };\n    }\n\n    /**\n     * Returns the Windows filesystem path.\n     *\n     * The method will return null if a scheme is present and is not the `file` scheme\n     */\n    public function toWindowsPath(): ?string\n    {\n        static $regexpWindowsPath = ',^(?<root>[a-zA-Z]:),';\n\n        if (!in_array($this->scheme, ['file', null], true)) {\n            return null;\n        }\n\n        $originalPath = $this->path;\n        $path = $originalPath;\n        if ('/' === ($path[0] ?? '')) {\n            $path = substr($path, 1);\n        }\n\n        if (1 === preg_match($regexpWindowsPath, $path, $matches)) {\n            $root = $matches['root'];\n            $path = substr($path, strlen($root));\n\n            return $root.str_replace('/', '\\\\', rawurldecode($path));\n        }\n\n        $host = $this->host;\n\n        return match (null) {\n            $host => str_replace('/', '\\\\', rawurldecode($originalPath)),\n            default => '\\\\\\\\'.$host.'\\\\'.str_replace('/', '\\\\', rawurldecode($path)),\n        };\n    }\n\n    /**\n     * Returns a string representation of a File URI according to RFC8089.\n     *\n     * The method will return null if the URI scheme is not the `file` scheme\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc8089\n     */\n    public function toRfc8089(): ?string\n    {\n        $path = $this->path;\n\n        return match (true) {\n            'file' !== $this->scheme => null,\n            in_array($this->authority, ['', null, 'localhost'], true) => 'file:'.match (true) {\n                '' === $path,\n                '/' === $path[0] => $path,\n                default => '/'.$path,\n            },\n            default => $this->toString(),\n        };\n    }\n\n    public function toFileContents(mixed $destination, $context = null): ?int\n    {\n        if ('data' !== $this->scheme) {\n            return null;\n        }\n\n        [$mediaType, $document] = explode(',', $this->path, 2) + [0 => '', 1 => null];\n        if (null === $document) {\n            throw new RuntimeException('Unable to extract the document part from the URI path.');\n        }\n\n        $data = match (true) {\n            str_ends_with((string) $mediaType, ';base64') => (string) base64_decode($document, true),\n            default => rawurldecode($document),\n        };\n\n        $res = match (true) {\n            $destination instanceof SplFileObject => $destination->fwrite($data),\n            $destination instanceof SplFileInfo => $destination->openFile(mode:'wb', context: $context)->fwrite($data),\n            is_resource($destination) => fwrite($destination, $data),\n            $destination instanceof Stringable,\n            is_string($destination) => (function () use ($destination, $data, $context): int|false {\n                set_error_handler(fn (int $errno, string $errstr, string $errfile, int $errline) => true);\n                $rsrc = fopen((string) $destination, mode:'wb', context: $context);\n                if (false === $rsrc) {\n                    restore_error_handler();\n                    throw new RuntimeException('Unable to open the destination file: '.$destination);\n                }\n\n                $bytes = fwrite($rsrc, $data);\n                fclose($rsrc);\n                restore_error_handler();\n\n                return $bytes;\n            })(),\n            default => throw new TypeError('Unsupported destination type; expected SplFileObject, SplFileInfo, resource or a string; '.(is_object($destination) ? $destination::class : gettype($destination)).' given.'),\n        };\n\n        if (false === $res) {\n            throw new RuntimeException('Unable to write to the destination file.');\n        }\n\n        return $res;\n    }\n\n    /**\n     * @return ComponentMap\n     */\n    public function toComponents(): array\n    {\n        return [\n            'scheme' => $this->scheme,\n            'user' => $this->user,\n            'pass' => $this->pass,\n            'host' => $this->host,\n            'port' => $this->port,\n            'path' => $this->path,\n            'query' => $this->query,\n            'fragment' => $this->fragment,\n        ];\n    }\n\n    public function getScheme(): ?string\n    {\n        return $this->scheme;\n    }\n\n    public function getAuthority(): ?string\n    {\n        return $this->authority;\n    }\n\n    /**\n     * Returns the user component encoded value.\n     *\n     * @see https://wiki.php.net/rfc/url_parsing_api\n     */\n    public function getUsername(): ?string\n    {\n        return $this->user;\n    }\n\n    public function getPassword(): ?string\n    {\n        return $this->pass;\n    }\n\n    public function getUserInfo(): ?string\n    {\n        return $this->userInfo;\n    }\n\n    public function getHost(): ?string\n    {\n        return $this->host;\n    }\n\n    public function getPort(): ?int\n    {\n        return $this->port;\n    }\n\n    public function getPath(): string\n    {\n        return match (true) {\n            str_starts_with($this->path, '//') => '/'.ltrim($this->path, '/'),\n            default => $this->path,\n        };\n    }\n\n    public function getQuery(): ?string\n    {\n        return $this->query;\n    }\n\n    public function getFragment(): ?string\n    {\n        return $this->fragment;\n    }\n\n    public function getOrigin(): ?string\n    {\n        return $this->origin;\n    }\n\n    public function when(callable|bool $condition, callable $onSuccess, ?callable $onFail = null): static\n    {\n        if (!is_bool($condition)) {\n            $condition = $condition($this);\n        }\n\n        return match (true) {\n            $condition => $onSuccess($this),\n            null !== $onFail => $onFail($this),\n            default => $this,\n        } ?? $this;\n    }\n\n    public function withScheme(Stringable|string|null $scheme): UriInterface\n    {\n        $scheme = $this->formatScheme($this->filterString($scheme));\n\n        return match ($scheme) {\n            $this->scheme => $this,\n            default => new self($scheme, $this->user, $this->pass, $this->host, $this->port, $this->path, $this->query, $this->fragment),\n        };\n    }\n\n    /**\n     * Filter a string.\n     *\n     * @throws SyntaxError if the submitted data cannot be converted to string\n     */\n    private function filterString(Stringable|string|null $str): ?string\n    {\n        $str = match (true) {\n            $str instanceof UriComponentInterface => $str->value(),\n            null === $str => null,\n            default => (string) $str,\n        };\n\n        return match (true) {\n            null === $str => null,\n            1 === preg_match(self::REGEXP_INVALID_CHARS, $str) => throw new SyntaxError('The component `'.$str.'` contains invalid characters.'),\n            default => $str,\n        };\n    }\n\n    public function withUserInfo(\n        Stringable|string|null $user,\n        #[SensitiveParameter] Stringable|string|null $password = null\n    ): UriInterface {\n        $user = Encoder::encodeUser($this->filterString($user));\n        $pass = Encoder::encodePassword($this->filterString($password));\n        $userInfo = ('' !== $user) ? $this->formatUserInfo($user, $pass) : null;\n\n        return match ($userInfo) {\n            $this->userInfo => $this,\n            default => new self($this->scheme, $user, $pass, $this->host, $this->port, $this->path, $this->query, $this->fragment),\n        };\n    }\n\n    public function withUsername(Stringable|string|null $user): UriInterface\n    {\n        return $this->withUserInfo($user, $this->pass);\n    }\n\n    public function withPassword(#[SensitiveParameter] Stringable|string|null $password): UriInterface\n    {\n        return match ($this->user) {\n            null => throw new SyntaxError('The password component can not be if the URI user component is not set.'),\n            default => $this->withUserInfo($this->user, $password),\n        };\n    }\n\n    public function withHost(Stringable|string|null $host): UriInterface\n    {\n        $host = $this->formatHost($this->filterString($host));\n\n        return match ($host) {\n            $this->host => $this,\n            default => new self($this->scheme, $this->user, $this->pass, $host, $this->port, $this->path, $this->query, $this->fragment),\n        };\n    }\n\n    public function withPort(int|null $port): UriInterface\n    {\n        $port = $this->formatPort($port);\n\n        return match ($port) {\n            $this->port => $this,\n            default => new self($this->scheme, $this->user, $this->pass, $this->host, $port, $this->path, $this->query, $this->fragment),\n        };\n    }\n\n    public function withPath(Stringable|string $path): UriInterface\n    {\n        $path = $this->formatPath(\n            $this->filterString($path) ?? throw new SyntaxError('The path component cannot be null.')\n        );\n\n        return match ($path) {\n            $this->path => $this,\n            default => new self($this->scheme, $this->user, $this->pass, $this->host, $this->port, $path, $this->query, $this->fragment),\n        };\n    }\n\n    public function withQuery(Stringable|string|null $query): UriInterface\n    {\n        $query = Encoder::encodeQueryOrFragment($this->filterString($query));\n\n        return match ($query) {\n            $this->query => $this,\n            default => new self($this->scheme, $this->user, $this->pass, $this->host, $this->port, $this->path, $query, $this->fragment),\n        };\n    }\n\n    public function withFragment(Stringable|string|null $fragment): UriInterface\n    {\n        $fragment = Encoder::encodeQueryOrFragment($this->filterString($fragment));\n\n        return match ($fragment) {\n            $this->fragment => $this,\n            default => new self($this->scheme, $this->user, $this->pass, $this->host, $this->port, $this->path, $this->query, $fragment),\n        };\n    }\n\n    /**\n     * Tells whether the `file` scheme base URI represents a local file.\n     */\n    public function isLocalFile(): bool\n    {\n        return match (true) {\n            'file' !== $this->scheme => false,\n            in_array($this->authority, ['', null, 'localhost'], true) => true,\n            default => false,\n        };\n    }\n\n    /**\n     * Tells whether the URI is opaque or not.\n     *\n     * A URI is opaque if and only if it is absolute\n     * and does not have an authority path.\n     */\n    public function isOpaque(): bool\n    {\n        return null === $this->authority\n            && null !== $this->scheme;\n    }\n\n    /**\n     * Tells whether two URI do not share the same origin.\n     */\n    public function isCrossOrigin(UriInterface|Stringable|string $uri): bool\n    {\n        if (null === $this->origin) {\n            return true;\n        }\n\n        $uri = self::tryNew($uri);\n        if (null === $uri || null === ($origin = $uri->getOrigin())) {\n            return true;\n        }\n\n        return $this->origin !== $origin;\n    }\n\n    public function isSameOrigin(Stringable|string $uri): bool\n    {\n        return ! $this->isCrossOrigin($uri);\n    }\n\n    /**\n     * Tells whether the URI is absolute.\n     */\n    public function isAbsolute(): bool\n    {\n        return null !== $this->scheme;\n    }\n\n    /**\n     * Tells whether the URI is a network path.\n     */\n    public function isNetworkPath(): bool\n    {\n        return null === $this->scheme\n            && null !== $this->authority;\n    }\n\n    /**\n     * Tells whether the URI is an absolute path.\n     */\n    public function isAbsolutePath(): bool\n    {\n        return null === $this->scheme\n            && null === $this->authority\n            && '/' === ($this->path[0] ?? '');\n    }\n\n    /**\n     * Tells whether the URI is a relative path.\n     */\n    public function isRelativePath(): bool\n    {\n        return null === $this->scheme\n            && null === $this->authority\n            && '/' !== ($this->path[0] ?? '');\n    }\n\n    /**\n     * Tells whether both URI refers to the same document.\n     */\n    public function isSameDocument(UriInterface|Stringable|Rfc3986Uri|WhatWgUrl|string $uri): bool\n    {\n        return $this->equals($uri);\n    }\n\n    public function equals(UriInterface|Stringable|Rfc3986Uri|WhatWgUrl|string $uri, ComparisonMode $comparisonMode = ComparisonMode::ExcludeFragment): bool\n    {\n        if (!$uri instanceof UriInterface && !$uri instanceof Rfc3986Uri && !$uri instanceof WhatWgUrl) {\n            $uri = self::tryNew($uri);\n        }\n\n        if (null === $uri) {\n            return false;\n        }\n\n        $baseUri = $this;\n        if (ComparisonMode::ExcludeFragment === $comparisonMode) {\n            $uri = $uri->withFragment(null);\n            $baseUri = $baseUri->withFragment(null);\n        }\n\n        return $baseUri->normalize()->toString() === match (true) {\n            $uri instanceof Rfc3986Uri => $uri->toString(),\n            $uri instanceof WhatWgUrl => $uri->toAsciiString(),\n            default => $uri->normalize()->toString(),\n        };\n    }\n\n    /**\n     * Normalize a URI by applying non-destructive and destructive normalization\n     * rules as defined in RFC3986 and RFC3987.\n     */\n    public function normalize(): UriInterface\n    {\n        $uriString = $this->toString();\n        if ('' === $uriString) {\n            return $this;\n        }\n\n        $normalizedUriString = UriString::normalize($uriString);\n        if ($normalizedUriString === $uriString) {\n            return $this;\n        }\n\n        return self::new($normalizedUriString);\n    }\n\n    /**\n     * Resolves a URI against a base URI using RFC3986 rules.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter or silence them apart from validating its own parameters.\n     */\n    public function resolve(Rfc3986Uri|Stringable|string $uri): UriInterface\n    {\n        if ($uri instanceof Rfc3986Uri) {\n            $uri = $uri->toRawString();\n        }\n\n        return self::new(UriString::resolve($uri, $this->toString()));\n    }\n\n    /**\n     * Relativize a URI according to a base URI.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter of silence them apart from validating its own parameters.\n     */\n    public function relativize(Rfc3986Uri|Stringable|string $uri): UriInterface\n    {\n        $uri = self::new($uri);\n\n        if (\n            $this->scheme !== $uri->getScheme() ||\n            $this->authority !== $uri->getAuthority() ||\n            $uri->isRelativePath()) {\n            return $uri;\n        }\n\n        $targetPath = $uri->getPath();\n        $basePath = $this->path;\n\n        $uri = $uri\n            ->withScheme(null)\n            ->withUserInfo(null)\n            ->withPort(null)\n            ->withHost(null);\n\n        return match (true) {\n            $targetPath !== $basePath => $uri->withPath(self::relativizePath($targetPath, $basePath)),\n            $this->query === $uri->getQuery() => $uri->withPath('')->withQuery(null),\n            null === $uri->getQuery() => $uri->withPath(self::formatPathWithEmptyBaseQuery($targetPath)),\n            default => $uri->withPath(''),\n        };\n    }\n\n    /**\n     * Formatting the path to keep a resolvable URI.\n     */\n    private static function formatPathWithEmptyBaseQuery(string $path): string\n    {\n        $targetSegments = self::getSegments($path);\n        $basename = $targetSegments[array_key_last($targetSegments)];\n\n        return '' === $basename ? './' : $basename;\n    }\n\n    /**\n     * Relatives the URI for an authority-less target URI.\n     */\n    private static function relativizePath(string $path, string $basePath): string\n    {\n        $baseSegments = self::getSegments($basePath);\n        $targetSegments = self::getSegments($path);\n        $targetBasename = array_pop($targetSegments);\n        array_pop($baseSegments);\n        foreach ($baseSegments as $offset => $segment) {\n            if (!isset($targetSegments[$offset]) || $segment !== $targetSegments[$offset]) {\n                break;\n            }\n            unset($baseSegments[$offset], $targetSegments[$offset]);\n        }\n        $targetSegments[] = $targetBasename;\n\n        return static::formatRelativePath(\n            str_repeat('../', count($baseSegments)).implode('/', $targetSegments),\n            $basePath\n        );\n    }\n\n    /**\n     * Formatting the path to keep a valid URI.\n     */\n    private static function formatRelativePath(string $path, string $basePath): string\n    {\n        $colonPosition = strpos($path, ':');\n        $slashPosition = strpos($path, '/');\n\n        return match (true) {\n            '' === $path => match (true) {\n                '' === $basePath,\n                '/' === $basePath => $basePath,\n                default => './',\n            },\n            false === $colonPosition => $path,\n            false === $slashPosition,\n            $colonPosition < $slashPosition  =>  \"./$path\",\n            default => $path,\n        };\n    }\n\n    /**\n     * returns the path segments.\n     *\n     * @return array<string>\n     */\n    private static function getSegments(string $path): array\n    {\n        return explode('/', match (true) {\n            '' === $path,\n            '/' !== $path[0] => $path,\n            default => substr($path, 1),\n        });\n    }\n\n    /**\n     * @return ComponentMap\n     */\n    public function __debugInfo(): array\n    {\n        return $this->toComponents();\n    }\n\n    /**\n     * @return array{uri: string}\n     */\n    public function __serialize(): array\n    {\n        return ['uri' => $this->toString()];\n    }\n\n    /**\n     * @param array{uri: string} $data\n     */\n    public function __unserialize(array $data): void\n    {\n        $uri = self::new($data['uri']);\n\n        $this->scheme = $uri->scheme;\n        $this->user = $uri->user;\n        $this->pass = $uri->pass;\n        $this->host = $uri->host;\n        $this->port = $uri->port;\n        $this->path = $uri->path;\n        $this->query = $uri->query;\n        $this->fragment = $uri->fragment;\n        $this->userInfo = $uri->userInfo;\n        $this->authority = $uri->authority;\n        $this->uri = $uri->uri;\n        $this->origin = $uri->origin;\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.5.0\n     * @codeCoverageIgnore\n     * @see Uri::toComponents()\n     *\n     * @return ComponentMap\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::toComponents() instead', since:'league/uri:7.5.0')]\n    public function getComponents(): array\n    {\n        return $this->toComponents();\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::new()\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromString(Stringable|string $uri = ''): self\n    {\n        return self::new($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::fromComponents()\n     *\n     * @param InputComponentMap $components a hash representation of the URI similar to PHP parse_url function result\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromComponents() instead', since:'league/uri:7.0.0')]\n    public static function createFromComponents(array $components = []): self\n    {\n        return self::fromComponents($components);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @param resource|null $context\n     *\n     * @throws MissingFeature If ext/fileinfo is not installed\n     * @throws SyntaxError If the file does not exist or is not readable\n     * @see Uri::fromFileContents()\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromDataPath() instead', since:'league/uri:7.0.0')]\n    public static function createFromDataPath(string $path, $context = null): self\n    {\n        return self::fromFileContents($path, $context);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::fromBaseUri()\n     *\n     * Creates a new instance from a URI and a Base URI.\n     *\n     * The returned URI must be absolute.\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromBaseUri() instead', since:'league/uri:7.0.0')]\n    public static function createFromBaseUri(\n        Stringable|UriInterface|String $uri,\n        Stringable|UriInterface|String|null $baseUri = null\n    ): UriInterface {\n        return self::fromBaseUri($uri, $baseUri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::fromUnixPath()\n     *\n     * Create a new instance from a Unix path string.\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromUnixPath() instead', since:'league/uri:7.0.0')]\n    public static function createFromUnixPath(string $uri = ''): self\n    {\n        return self::fromUnixPath($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::fromWindowsPath()\n     *\n     * Create a new instance from a local Windows path string.\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromWindowsPath() instead', since:'league/uri:7.0.0')]\n    public static function createFromWindowsPath(string $uri = ''): self\n    {\n        return self::fromWindowsPath($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::new()\n     *\n     * Create a new instance from a URI object.\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::new() instead', since:'league/uri:7.0.0')]\n    public static function createFromUri(Psr7UriInterface|UriInterface $uri): self\n    {\n        return self::new($uri);\n    }\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.0.0\n     * @codeCoverageIgnore\n     * @see Uri::fromServer()\n     *\n     * Create a new instance from the environment.\n     */\n    #[Deprecated(message:'use League\\Uri\\Uri::fromServer() instead', since:'league/uri:7.0.0')]\n    public static function createFromServer(array $server): self\n    {\n        return self::fromServer($server);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/ComparisonMode.php","ext":"php","size":372,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nenum ComparisonMode\n{\n    case IncludeFragment;\n    case ExcludeFragment;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/Conditionable.php","ext":"php","size":708,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\ninterface Conditionable\n{\n    /**\n     * Apply the callback if the given \"condition\" is (or resolves to) true.\n     *\n     * @param (callable(static): bool)|bool $condition\n     * @param callable(static): (static|null) $onSuccess\n     * @param ?callable(static): (static|null) $onFail\n     */\n    public function when(callable|bool $condition, callable $onSuccess, ?callable $onFail = null): static;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/IpHostInterface.php","ext":"php","size":1211,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\ninterface IpHostInterface extends HostInterface\n{\n    /**\n     * Tells whether the host is an IPv4 address.\n     */\n    public function isIpv4(): bool;\n\n    /**\n     * Tells whether the host is an IPv6 address.\n     */\n    public function isIpv6(): bool;\n\n    /**\n     * Tells whether the host is an IPv6 address.\n     */\n    public function isIpFuture(): bool;\n\n    /**\n     * Tells whether the host has a ZoneIdentifier.\n     *\n     * @see http://tools.ietf.org/html/rfc6874#section-4\n     */\n    public function hasZoneIdentifier(): bool;\n\n    /**\n     * Returns a host without its zone identifier according to RFC6874.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance without the host zone identifier according to RFC6874\n     *\n     * @see http://tools.ietf.org/html/rfc6874#section-4\n     */\n    public function withoutZoneIdentifier(): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriInterface.php","ext":"php","size":12245,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse JsonSerializable;\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\UriString;\nuse Stringable;\n\n/**\n * @phpstan-import-type ComponentMap from UriString\n *\n * @method string|null getUsername() returns the user component of the URI.\n * @method self withUsername(?string $user) returns a new URI instance with user component updated, if the user is set to null the password also will be set to null.\n * @method string|null getPassword() returns the scheme-specific information about how to gain authorization to access the resource.\n * @method self withPassword(?string $password) returns a new URI instance with password component updated, if the user is set to null the password also will be set to null.\n * @method array toComponents() returns an associative array containing all the URI components.\n * @method self normalize() returns a new URI instance with normalized components\n * @method self resolve(UriInterface $uri) resolves a URI against a base URI using RFC3986 rules\n * @method self relativize(UriInterface $uri) relativize a URI against a base URI using RFC3986 rules\n */\ninterface UriInterface extends JsonSerializable, Stringable\n{\n    /**\n     * Returns the string representation as a URI reference.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     */\n    public function __toString(): string;\n\n    /**\n     * Returns the string representation as a URI reference.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     */\n    public function toString(): string;\n\n    /**\n     * Returns the string representation as a URI reference.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     * @see ::__toString\n     */\n    public function jsonSerialize(): string;\n\n    /**\n     * Retrieve the scheme component of the URI.\n     *\n     * If no scheme is present, this method MUST return a null value.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.1.\n     *\n     * The trailing \":\" character is not part of the scheme and MUST NOT be\n     * added.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.1\n     */\n    public function getScheme(): ?string;\n\n    /**\n     * Retrieve the authority component of the URI.\n     *\n     * If no scheme is present, this method MUST return a null value.\n     *\n     * If the port component is not set or is the standard port for the current\n     * scheme, it SHOULD NOT be included.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2\n     */\n    public function getAuthority(): ?string;\n\n    /**\n     * Retrieve the user information component of the URI.\n     *\n     * If no scheme is present, this method MUST return a null value.\n     *\n     * If a user is present in the URI, this will return that value;\n     * additionally, if the password is also present, it will be appended to the\n     * user value, with a colon (\":\") separating the values.\n     *\n     * The trailing \"@\" character is not part of the user information and MUST\n     * NOT be added.\n     */\n    public function getUserInfo(): ?string;\n\n    /**\n     * Retrieve the host component of the URI.\n     *\n     * If no host is present this method MUST return a null value.\n     *\n     * The value returned MUST be normalized to lowercase, per RFC 3986\n     * Section 3.2.2.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-3.2.2\n     */\n    public function getHost(): ?string;\n\n    /**\n     * Retrieve the port component of the URI.\n     *\n     * If a port is present, and it is non-standard for the current scheme,\n     * this method MUST return it as an integer. If the port is the standard port\n     * used with the current scheme, this method SHOULD return null.\n     *\n     * If no port is present, and no scheme is present, this method MUST return\n     * a null value.\n     *\n     * If no port is present, but a scheme is present, this method MAY return\n     * the standard port for that scheme, but SHOULD return null.\n     */\n    public function getPort(): ?int;\n\n    /**\n     * Retrieve the path component of the URI.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * Normally, the empty path \"\" and absolute path \"/\" are considered equal as\n     * defined in RFC 7230 Section 2.7.3. But this method MUST NOT automatically\n     * do this normalization because in contexts with a trimmed base path, e.g.\n     * the front controller, this difference becomes significant. It's the task\n     * of the user to handle both \"\" and \"/\".\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.3.\n     *\n     * As an example, if the value should include a slash (\"/\") not intended as\n     * delimiter between path segments, that value MUST be passed in encoded\n     * form (e.g., \"%2F\") to the instance.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.3\n     */\n    public function getPath(): string;\n\n    /**\n     * Retrieve the query string of the URI.\n     *\n     * If no host is present this method MUST return a null value.\n     *\n     * The leading \"?\" character is not part of the query and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.4.\n     *\n     * As an example, if a value in a key/value pair of the query string should\n     * include an ampersand (\"&\") not intended as a delimiter between values,\n     * that value MUST be passed in encoded form (e.g., \"%26\") to the instance.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.4\n     */\n    public function getQuery(): ?string;\n\n    /**\n     * Retrieve the fragment component of the URI.\n     *\n     * If no host is present this method MUST return a null value.\n     *\n     * The leading \"#\" character is not part of the fragment and MUST NOT be\n     * added.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986, Sections 2 and 3.5.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-2\n     * @see https://tools.ietf.org/html/rfc3986#section-3.5\n     */\n    public function getFragment(): ?string;\n\n    /**\n     * Returns an associative array containing all the URI components.\n     *\n     * The returned array is similar to PHP's parse_url return value with the following\n     * differences:\n     *\n     * <ul>\n     * <li>All components are present in the returned array</li>\n     * <li>Empty and undefined component are treated differently. And empty component is\n     *   set to the empty string while an undefined component is set to the `null` value.</li>\n     * </ul>\n     *\n     * @link https://tools.ietf.org/html/rfc3986\n     *\n     * @return ComponentMap\n     */\n    public function getComponents(): array;\n\n    /**\n     * Return an instance with the specified scheme.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified scheme.\n     *\n     * A null value provided for the scheme is equivalent to removing the scheme\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withScheme(Stringable|string|null $scheme): self;\n\n    /**\n     * Return an instance with the specified user information.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified user information.\n     *\n     * Password is optional, but the user information MUST include the\n     * user; a null value for the user is equivalent to removing user\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withUserInfo(Stringable|string|null $user, Stringable|string|null $password = null): self;\n\n    /**\n     * Return an instance with the specified host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified host.\n     *\n     * A null value provided for the host is equivalent to removing the host\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     * @throws MissingFeature for component or transformations\n     *                        requiring IDN support when IDN support is not present\n     *                        or misconfigured.\n     */\n    public function withHost(Stringable|string|null $host): self;\n\n    /**\n     * Return an instance with the specified port.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified port.\n     *\n     * A null value provided for the port is equivalent to removing the port\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withPort(?int $port): self;\n\n    /**\n     * Return an instance with the specified path.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified path.\n     *\n     * The path can either be empty or absolute (starting with a slash) or\n     * rootless (not starting with a slash). Implementations MUST support all\n     * three syntaxes.\n     *\n     * Users can provide both encoded and decoded path characters.\n     * Implementations ensure the correct encoding as outlined in getPath().\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withPath(Stringable|string $path): self;\n\n    /**\n     * Return an instance with the specified query string.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified query string.\n     *\n     * Users can provide both encoded and decoded query characters.\n     * Implementations ensure the correct encoding as outlined in getQuery().\n     *\n     * A null value provided for the query is equivalent to removing the query\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withQuery(Stringable|string|null $query): self;\n\n    /**\n     * Return an instance with the specified URI fragment.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified URI fragment.\n     *\n     * Users can provide both encoded and decoded fragment characters.\n     * Implementations ensure the correct encoding as outlined in getFragment().\n     *\n     * A null value provided for the fragment is equivalent to removing the fragment\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withFragment(Stringable|string|null $fragment): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/FragmentInterface.php","ext":"php","size":559,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\n/**\n * @method self normalize() returns the normalized string representation of the component\n */\ninterface FragmentInterface extends UriComponentInterface\n{\n    /**\n     * Returns the decoded fragment.\n     */\n    public function decoded(): ?string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriAccess.php","ext":"php","size":716,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Psr\\Http\\Message\\UriInterface as Psr7UriInterface;\n\n/**\n * @method self when(callable|bool $condition, callable $onSuccess, ?callable $onFail = null) conditionally return a new instance\n */\ninterface UriAccess\n{\n    public function getUri(): UriInterface|Psr7UriInterface;\n\n    /**\n     * Returns the RFC3986 string representation of the complete URI.\n     */\n    public function getUriString(): string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriComponentInterface.php","ext":"php","size":2585,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse JsonSerializable;\nuse Stringable;\n\n/**\n * @method static when(callable|bool $condition, callable $onSuccess, ?callable $onFail = null) conditionally return a new instance\n */\ninterface UriComponentInterface extends JsonSerializable, Stringable\n{\n    /**\n     * Returns the instance string representation.\n     *\n     * If the instance is defined, the value returned MUST be percent-encoded,\n     * but MUST NOT double-encode any characters. To determine what characters\n     * to encode, please refer to RFC 3986, Sections 2 and 3.\n     *\n     * If the instance is not defined null is returned\n     */\n    public function value(): ?string;\n\n    /**\n     * Returns the instance string representation.\n     *\n     * If the instance is defined, the value returned MUST be percent-encoded,\n     * but MUST NOT double-encode any characters. To determine what characters\n     * to encode, please refer to RFC 3986, Sections 2 and 3.\n     *\n     * If the instance is not defined an empty string is returned\n     */\n    public function toString(): string;\n\n    /**\n     * Returns the instance string representation.\n     *\n     * If the instance is defined, the value returned MUST be percent-encoded,\n     * but MUST NOT double-encode any characters. To determine what characters\n     * to encode, please refer to RFC 3986, Sections 2 and 3.\n     *\n     * If the instance is not defined an empty string is returned\n     */\n    public function __toString(): string;\n\n    /**\n     * Returns the instance json representation.\n     *\n     * If the instance is defined, the value returned MUST be percent-encoded,\n     * but MUST NOT double-encode any characters. To determine what characters\n     * to encode, please refer to RFC 3986 or RFC 1738.\n     *\n     * If the instance is not defined null is returned\n     */\n    public function jsonSerialize(): ?string;\n\n    /**\n     * Returns the instance string representation with its optional URI delimiters.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode any\n     * characters. To determine what characters to encode, please refer to RFC 3986,\n     * Sections 2 and 3.\n     *\n     * If the instance is not defined an empty string is returned\n     */\n    public function getUriComponent(): string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/PortInterface.php","ext":"php","size":470,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\ninterface PortInterface extends UriComponentInterface\n{\n    /**\n     * Returns the integer representation of the Port.\n     */\n    public function toInt(): ?int;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/DataPathInterface.php","ext":"php","size":2759,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse SplFileObject;\nuse Stringable;\n\ninterface DataPathInterface extends PathInterface\n{\n    /**\n     * Retrieve the data mime type associated to the URI.\n     *\n     * If no mimetype is present, this method MUST return the default mimetype 'text/plain'.\n     *\n     * @see http://tools.ietf.org/html/rfc2397#section-2\n     */\n    public function getMimeType(): string;\n\n    /**\n     * Retrieve the parameters associated with the Mime Type of the URI.\n     *\n     * If no parameters is present, this method MUST return the default parameter 'charset=US-ASCII'.\n     *\n     * @see http://tools.ietf.org/html/rfc2397#section-2\n     */\n    public function getParameters(): string;\n\n    /**\n     * Retrieve the mediatype associated with the URI.\n     *\n     * If no mediatype is present, this method MUST return the default parameter 'text/plain;charset=US-ASCII'.\n     *\n     * @see http://tools.ietf.org/html/rfc2397#section-3\n     *\n     * @return string The URI scheme.\n     */\n    public function getMediaType(): string;\n\n    /**\n     * Retrieves the data string.\n     *\n     * Retrieves the data part of the path. If no data part is provided return\n     * an empty string\n     */\n    public function getData(): string;\n\n    /**\n     * Tells whether the data is binary safe encoded.\n     */\n    public function isBinaryData(): bool;\n\n    /**\n     * Save the data to a specific file.\n     */\n    public function save(string $path, string $mode = 'w'): SplFileObject;\n\n    /**\n     * Returns an instance where the data part is base64 encoded.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance where the data part is base64 encoded\n     */\n    public function toBinary(): self;\n\n    /**\n     * Returns an instance where the data part is url encoded following RFC3986 rules.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance where the data part is url encoded\n     */\n    public function toAscii(): self;\n\n    /**\n     * Return an instance with the specified mediatype parameters.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified mediatype parameters.\n     *\n     * Users must provide encoded characters.\n     *\n     * An empty parameters value is equivalent to removing the parameter.\n     */\n    public function withParameters(Stringable|string $parameters): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriRenderer.php","ext":"php","size":3027,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse DOMException;\nuse JsonSerializable;\nuse League\\Uri\\UriString;\nuse RuntimeException;\nuse SplFileInfo;\nuse SplFileObject;\nuse Stringable;\n\n/**\n * @phpstan-import-type ComponentMap from UriString\n */\ninterface UriRenderer extends JsonSerializable\n{\n    /**\n     * Returns the string representation as a URI reference.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     */\n    public function toString(): string;\n\n    /**\n     * Returns the human-readable string representation of the URI as an IRI.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc3987\n     */\n    public function toDisplayString(): string;\n\n    /**\n     * Returns the string representation as a URI reference.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-4.1\n     * @see ::toString\n     */\n    public function jsonSerialize(): string;\n\n    /**\n     * Returns the markdown string representation of the anchor tag with the current instance as its href attribute.\n     */\n    public function toMarkdownAnchor(?string $linkTextTemplate = null): string;\n\n    /**\n     * Returns the HTML string representation of the anchor tag with the current instance as its href attribute.\n     *\n     * @param iterable<string, string|null> $attributes an ordered map of key value. you must quote the value if needed\n     *\n     * @throws DOMException\n     */\n    public function toHtmlAnchor(?string $linkTextTemplate = null, iterable $attributes = []): string;\n\n    /**\n     * Returns the Unix filesystem path. The method returns null for any other scheme except the file scheme.\n     */\n    public function toUnixPath(): ?string;\n\n    /**\n     * Returns the Windows filesystem path. The method returns null for any other scheme except the file scheme.\n     */\n    public function toWindowsPath(): ?string;\n\n    /**\n     * Returns an associative array containing all the URI components.\n     *\n     * @return ComponentMap\n     */\n    public function toComponents(): array;\n\n    /**\n     * Returns a string representation of a File URI according to RFC8089.\n     *\n     * The method will return null if the URI scheme is not the `file` scheme\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc8089\n     */\n    public function toRfc8089(): ?string;\n\n    /**\n     * Save the data to a specific file.\n     *\n     * The method returns the number of bytes written to the file\n     * or null for any other scheme except the data scheme\n     *\n     * @param SplFileInfo|SplFileObject|resource|Stringable|string $destination\n     * @param ?resource $context\n     *\n     * @throws RuntimeException if the content can not be stored.\n     */\n    public function toFileContents(mixed $destination, $context = null): ?int;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/DomainHostInterface.php","ext":"php","size":3276,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Countable;\nuse Iterator;\nuse IteratorAggregate;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\n/**\n * @extends IteratorAggregate<string>\n */\ninterface DomainHostInterface extends Countable, HostInterface, IteratorAggregate\n{\n    /**\n     * Returns the labels total number.\n     */\n    public function count(): int;\n\n    /**\n     * Iterate over the Domain labels.\n     *\n     * @return Iterator<string>\n     */\n    public function getIterator(): Iterator;\n\n    /**\n     * Retrieves a single host label.\n     *\n     * If the label offset has not been set, returns the null value.\n     */\n    public function get(int $offset): ?string;\n\n    /**\n     * Returns the associated key for a specific label or all the keys.\n     *\n     * @return int[]\n     */\n    public function keys(?string $label = null): array;\n\n    /**\n     * Tells whether the domain is absolute.\n     */\n    public function isAbsolute(): bool;\n\n    /**\n     * Prepends a label to the host.\n     */\n    public function prepend(Stringable|string $label): self;\n\n    /**\n     * Appends a label to the host.\n     */\n    public function append(Stringable|string $label): self;\n\n    /**\n     * Extracts a slice of $length elements starting at position $offset from the host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the selected slice.\n     *\n     * If $length is null it returns all elements from $offset to the end of the Domain.\n     */\n    public function slice(int $offset, ?int $length = null): self;\n\n    /**\n     * Returns an instance with its Root label.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2.2\n     */\n    public function withRootLabel(): self;\n\n    /**\n     * Returns an instance without its Root label.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2.2\n     */\n    public function withoutRootLabel(): self;\n\n    /**\n     * Returns an instance with the modified label.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the new label\n     *\n     * If $key is non-negative, the added label will be the label at $key position from the start.\n     * If $key is negative, the added label will be the label at $key position from the end.\n     *\n     * @throws SyntaxError If the key is invalid\n     */\n    public function withLabel(int $key, Stringable|string $label): self;\n\n    /**\n     * Returns an instance without the specified label.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified component\n     *\n     * If $key is non-negative, the removed label will be the label at $key position from the start.\n     * If $key is negative, the removed label will be the label at $key position from the end.\n     *\n     * @throws SyntaxError If the key is invalid\n     */\n    public function withoutLabel(int ...$keys): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/AuthorityInterface.php","ext":"php","size":3048,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\ninterface AuthorityInterface extends UriComponentInterface\n{\n    /**\n     * Returns the host component of the authority.\n     */\n    public function getHost(): ?string;\n\n    /**\n     * Returns the port component of the authority.\n     */\n    public function getPort(): ?int;\n\n    /**\n     * Returns the user information component of the authority.\n     */\n    public function getUserInfo(): ?string;\n\n    /**\n     * Returns an associative array containing all the Authority components.\n     *\n     * The returned a hashmap similar to PHP's parse_url return value\n     *\n     * @link https://tools.ietf.org/html/rfc3986\n     *\n     * @return array{user: ?string, pass : ?string, host: ?string, port: ?int}\n     */\n    public function components(): array;\n\n    /**\n     * Return an instance with the specified host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified host.\n     *\n     * A null value provided for the host is equivalent to removing the host\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     * @throws MissingFeature for component or transformations\n     *                        requiring IDN support when IDN support is not present\n     *                        or misconfigured.\n     */\n    public function withHost(Stringable|string|null $host): self;\n\n    /**\n     * Return an instance with the specified port.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified port.\n     *\n     * A null value provided for the port is equivalent to removing the port\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withPort(?int $port): self;\n\n    /**\n     * Return an instance with the specified user information.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified user information.\n     *\n     * Password is optional, but the user information MUST include the\n     * user; a null value for the user is equivalent to removing user\n     * information.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in an object in invalid state.\n     */\n    public function withUserInfo(Stringable|string|null $user, Stringable|string|null $password = null): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/SegmentedPathInterface.php","ext":"php","size":4493,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Countable;\nuse Iterator;\nuse IteratorAggregate;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\n/**\n * @extends IteratorAggregate<string>\n */\ninterface SegmentedPathInterface extends Countable, IteratorAggregate, PathInterface\n{\n    /**\n     * Returns the total number of segments in the path.\n     */\n    public function count(): int;\n\n    /**\n     * Iterate over the path segment.\n     *\n     * @return Iterator<string>\n     */\n    public function getIterator(): Iterator;\n\n    /**\n     * Returns parent directory's path.\n     */\n    public function getDirname(): string;\n\n    /**\n     * Returns the path basename.\n     */\n    public function getBasename(): string;\n\n    /**\n     * Returns the basename extension.\n     */\n    public function getExtension(): string;\n\n    /**\n     * Retrieves a single path segment.\n     *\n     * If the segment offset has not been set, returns null.\n     */\n    public function get(int $offset): ?string;\n\n    /**\n     * Returns the associated key for a specific segment.\n     *\n     * If a value is specified only the keys associated with\n     * the given value will be returned\n     *\n     * @return array<int>\n     */\n    public function keys(Stringable|string|null $segment = null): array;\n\n    /**\n     * Appends a segment to the path.\n     */\n    public function append(Stringable|string $segment): self;\n\n    /**\n     * Extracts a slice of $length elements starting at position $offset from the host.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the selected slice.\n     *\n     * If $length is null it returns all elements from $offset to the end of the Path.\n     */\n    public function slice(int $offset, ?int $length = null): self;\n\n    /**\n     * Prepends a segment to the path.\n     */\n    public function prepend(Stringable|string $segment): self;\n\n    /**\n     * Returns an instance with the modified segment.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the new segment\n     *\n     * If $key is non-negative, the added segment will be the segment at $key position from the start.\n     * If $key is negative, the added segment will be the segment at $key position from the end.\n     *\n     * @throws SyntaxError If the key is invalid\n     */\n    public function withSegment(int $key, Stringable|string $segment): self;\n\n    /**\n     * Returns an instance without the specified segment.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified component\n     *\n     * If $key is non-negative, the removed segment will be the segment at $key position from the start.\n     * If $key is negative, the removed segment will be the segment at $key position from the end.\n     *\n     * @throws SyntaxError If the key is invalid\n     */\n    public function withoutSegment(int ...$keys): self;\n\n    /**\n     * Returns an instance without duplicate delimiters.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component normalized by removing\n     * multiple consecutive empty segment\n     */\n    public function withoutEmptySegments(): self;\n\n    /**\n     * Returns an instance with the specified parent directory's path.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the extension basename modified.\n     */\n    public function withDirname(Stringable|string $path): self;\n\n    /**\n     * Returns an instance with the specified basename.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the extension basename modified.\n     */\n    public function withBasename(Stringable|string $basename): self;\n\n    /**\n     * Returns an instance with the specified basename extension.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the extension basename modified.\n     */\n    public function withExtension(Stringable|string $extension): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/HostInterface.php","ext":"php","size":1300,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\n/**\n * @method string|null encoded() returns RFC3986 encoded host\n */\ninterface HostInterface extends UriComponentInterface\n{\n    /**\n     * Returns the ascii representation.\n     */\n    public function toAscii(): ?string;\n\n    /**\n     * Returns the unicode representation.\n     */\n    public function toUnicode(): ?string;\n\n    /**\n     * Returns the IP version.\n     *\n     * If the host is a not an IP this method will return null\n     */\n    public function getIpVersion(): ?string;\n\n    /**\n     * Returns the IP component If the Host is an IP address.\n     *\n     * If the host is a not an IP this method will return null\n     */\n    public function getIp(): ?string;\n\n    /**\n     * Tells whether the host is a domain name.\n     */\n    public function isDomain(): bool;\n\n    /**\n     * Tells whether the host is an IP Address.\n     */\n    public function isIp(): bool;\n\n    /**\n     * Tells whether the host is a registered name.\n     */\n    public function isRegisteredName(): bool;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/QueryInterface.php","ext":"php","size":9015,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Countable;\nuse Deprecated;\nuse Iterator;\nuse IteratorAggregate;\nuse Stringable;\n\n/**\n * @extends IteratorAggregate<array{0:string, 1:string|null}>\n *\n * @method self withoutPairByKey(string ...$keys) Returns an instance without pairs with the specified keys.\n * @method self withoutPairByValue(Stringable|string|int|bool|null ...$values) Returns an instance without pairs with the specified values.\n * @method self withoutPairByKeyValue(string $key, Stringable|string|int|bool|null $value) Returns an instance without pairs with the specified key/value pair\n * @method bool hasPair(string $key, ?string $value) Tells whether the pair exists in the query.\n * @method ?string toFormData() Returns the string representation using the applicat/www-form-urlencoded rules\n * @method ?string toRFC3986() Returns the string representation using RFC3986 rules\n * @method self normalize() returns the normalized string representation of the component\n */\ninterface QueryInterface extends Countable, IteratorAggregate, UriComponentInterface\n{\n    /**\n     * Returns the query separator.\n     *\n     * @return non-empty-string\n     */\n    public function getSeparator(): string;\n\n    /**\n     * Returns the number of key/value pairs present in the object.\n     */\n    public function count(): int;\n\n    /**\n     * Returns an iterator allowing to go through all key/value pairs contained in this object.\n     *\n     * The pair is represented as an array where the first value is the pair key\n     * and the second value the pair value.\n     *\n     * The key of each pair is a string\n     * The value of each pair is a scalar or the null value\n     *\n     * @return Iterator<int, array{0:string, 1:string|null}>\n     */\n    public function getIterator(): Iterator;\n\n    /**\n     * Returns an iterator allowing to go through all key/value pairs contained in this object.\n     *\n     * The return type is as an Iterator where its offset is the pair key and its value the pair value.\n     *\n     * The key of each pair is a string\n     * The value of each pair is a scalar or the null value\n     *\n     * @return iterable<string, string|null>\n     */\n    public function pairs(): iterable;\n\n    /**\n     * Tells whether a list of pair with a specific key exists.\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-has\n     */\n    public function has(string ...$keys): bool;\n\n    /**\n     * Returns the first value associated to the given pair name.\n     *\n     * If no value is found null is returned\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-get\n     */\n    public function get(string $key): ?string;\n\n    /**\n     * Returns all the values associated to the given pair name as an array or all\n     * the instance pairs.\n     *\n     * If no value is found an empty array is returned\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-getall\n     *\n     * @return array<int, string|null>\n     */\n    public function getAll(string $key): array;\n\n    /**\n     * Returns the store PHP variables as elements of an array.\n     *\n     * The result is similar as PHP parse_str when used with its\n     * second argument with the difference that variable names are\n     * not mangled.\n     *\n     * @see http://php.net/parse_str\n     * @see https://wiki.php.net/rfc/on_demand_name_mangling\n     *\n     * @return array the collection of stored PHP variables or the empty array if no input is given,\n     */\n    public function parameters(): array;\n\n    /**\n     * Returns the value attached to the specific key.\n     *\n     * The result is similar to PHP parse_str with the difference that variable\n     * names are not mangled.\n     *\n     * If a key is submitted it will return the value attached to it or null\n     *\n     * @see http://php.net/parse_str\n     * @see https://wiki.php.net/rfc/on_demand_name_mangling\n     *\n     * @return mixed the collection of stored PHP variables or the empty array if no input is given,\n     *               the single value of a stored PHP variable or null if the variable is not present in the collection\n     */\n    public function parameter(string $name): mixed;\n\n    /**\n     * Tells whether a list of variable with specific names exists.\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-has\n     */\n    public function hasParameter(string ...$names): bool;\n\n    /**\n     * Returns the RFC1738 encoded query.\n     */\n    public function toRFC1738(): ?string;\n\n    /**\n     * Returns an instance with a different separator.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the query component with a different separator\n     */\n    public function withSeparator(string $separator): self;\n\n    /**\n     * Returns an instance with the new pairs set to it.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified query\n     *\n     * @see ::withPair\n     */\n    public function merge(Stringable|string $query): self;\n\n    /**\n     * Returns an instance with the new pairs appended to it.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified query\n     *\n     * If the pair already exists the value will be added to it.\n     */\n    public function append(Stringable|string $query): self;\n\n    /**\n     * Returns a new instance with a specified key/value pair appended as a new pair.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified query\n     */\n    public function appendTo(string $key, Stringable|string|int|bool|null $value): self;\n\n    /**\n     * Sorts the query string by offset, maintaining offset to data correlations.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified query\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-sort\n     */\n    public function sort(): self;\n\n    /**\n     * Returns an instance without duplicate key/value pair.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the query component normalized by removing\n     * duplicate pairs whose key/value are the same.\n     */\n    public function withoutDuplicates(): self;\n\n    /**\n     * Returns an instance without empty key/value where the value is the null value.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the query component normalized by removing\n     * empty pairs.\n     *\n     * A pair is considered empty if its value is equal to the null value\n     */\n    public function withoutEmptyPairs(): self;\n\n    /**\n     * Returns an instance where numeric indices associated to PHP's array like key are removed.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the query component normalized so that numeric indexes\n     * are removed from the pair key value.\n     *\n     * i.e.: toto[3]=bar[3]&foo=bar becomes toto[]=bar[3]&foo=bar\n     */\n    public function withoutNumericIndices(): self;\n\n    /**\n     * Returns an instance with a new key/value pair added to it.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified query\n     *\n     * If the pair already exists the value will replace the existing value.\n     *\n     * @see https://url.spec.whatwg.org/#dom-urlsearchparams-set\n     */\n    public function withPair(string $key, Stringable|string|int|float|bool|null $value): self;\n\n    /**\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.3.0\n     * @codeCoverageIgnore\n     * @see QueryInterface::withoutPairByKey()\n     *\n     * Returns an instance without the specified keys.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified component\n     */\n    #[Deprecated(message:'use League\\Uri\\Contracts\\QueryInterface::withoutPairByKey() instead', since:'league/uri-interfaces:7.3.0')]\n    public function withoutPair(string ...$keys): self;\n\n    /**\n     * Returns an instance without the specified params.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the modified component without PHP's value.\n     * PHP's mangled is not taken into account.\n     */\n    public function withoutParameters(string ...$names): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriInspector.php","ext":"php","size":2064,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse League\\Uri\\ComparisonMode;\n\ninterface UriInspector\n{\n    /**\n     * Tells whether the URI instance represents an opaque URI.\n     */\n    public function isOpaque(): bool;\n\n    /**\n     * Tells whether the URI represents an absolute URI.\n     */\n    public function isAbsolute(): bool;\n\n    /**\n     * Tells whether the URI represents a network path URI.\n     */\n    public function isNetworkPath(): bool;\n\n    /**\n     * Tells whether the URI represents an absolute URI path.\n     */\n    public function isAbsolutePath(): bool;\n\n    /**\n     * Tells whether the given URI object represents a relative path.\n     */\n    public function isRelativePath(): bool;\n\n    /**\n     * Tells whether the given URI object represents the same document.\n     *\n     * It never takes the fragment into account\n     */\n    public function isSameDocument(UriInterface $uri): bool;\n\n    /**\n     * Tells whether the given URI object represents the same document.\n     *\n     * It can take the fragment into account if it is explicitly specified\n     */\n    public function equals(UriInterface $uri, ComparisonMode $comparisonMode = ComparisonMode::ExcludeFragment): bool;\n\n    /**\n     * Tells whether the `file` scheme base URI represents a local file.\n     */\n    public function isLocalFile(): bool;\n\n    /**\n     * Tells whether the URI comes from a different origin than the current instance.\n     */\n    public function isCrossOrigin(UriInterface $uri): bool;\n\n    /**\n     * Tells whether the URI shares the same origin as the current instance.\n     */\n    public function isSameOrigin(UriInterface $uri): bool;\n\n    /**\n     * Returns the URI origin as described in the WHATWG URL Living standard specification.\n     */\n    public function getOrigin(): ?string;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UriException.php","ext":"php","size":367,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Throwable;\n\ninterface UriException extends Throwable\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/PathInterface.php","ext":"php","size":2966,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse League\\Uri\\Exceptions\\SyntaxError;\n\n/**\n * @method static normalize() returns the normalized string representation of the component\n */\ninterface PathInterface extends UriComponentInterface\n{\n    /**\n     * Returns the decoded path.\n     */\n    public function decoded(): string;\n\n    /**\n     * Tells whether the path is absolute or relative.\n     */\n    public function isAbsolute(): bool;\n\n    /**\n     * Tells whether the path has a trailing slash.\n     */\n    public function hasTrailingSlash(): bool;\n\n    /**\n     * Returns an instance without dot segments.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component normalized by removing\n     * the dot segment.\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in a object in invalid state.\n     */\n    public function withoutDotSegments(): self;\n\n    /**\n     * Returns an instance with a leading slash.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component with a leading slash\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in a object in invalid state.\n     */\n    public function withLeadingSlash(): self;\n\n    /**\n     * Returns an instance without a leading slash.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component without a leading slash\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in a object in invalid state.\n     */\n    public function withoutLeadingSlash(): self;\n\n    /**\n     * Returns an instance with a trailing slash.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component with a trailing slash\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in a object in invalid state.\n     */\n    public function withTrailingSlash(): self;\n\n    /**\n     * Returns an instance without a trailing slash.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the path component without a trailing slash\n     *\n     * @throws SyntaxError for invalid component or transformations\n     *                     that would result in a object in invalid state.\n     */\n    public function withoutTrailingSlash(): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Contracts/UserInfoInterface.php","ext":"php","size":1802,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Contracts;\n\nuse Stringable;\n\ninterface UserInfoInterface extends UriComponentInterface\n{\n    /**\n     * Returns the user component part.\n     */\n    public function getUser(): ?string;\n\n    /**\n     * Returns the pass component part.\n     */\n    public function getPass(): ?string;\n\n    /**\n     * Returns an associative array containing all the User Info components.\n     *\n     * The returned a hashmap similar to PHP's parse_url return value\n     *\n     * @link https://tools.ietf.org/html/rfc3986\n     *\n     * @return array{user: ?string, pass : ?string}\n     */\n    public function components(): array;\n\n    /**\n     * Returns an instance with the specified user and/or pass.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified new username\n     * otherwise it returns the same instance unchanged.\n     *\n     * A variable equal to null is equivalent to removing the complete user information.\n     */\n    public function withUser(Stringable|string|null $username): self;\n\n    /**\n     * Returns an instance with the specified user and/or pass.\n     *\n     * This method MUST retain the state of the current instance, and return\n     * an instance that contains the specified password if the user is specified\n     * otherwise it returns the same instance unchanged.\n     *\n     * An empty user is equivalent to removing the user information.\n     */\n    public function withPass(Stringable|string|null $password): self;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Encoder.php","ext":"php","size":15708,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse Closure;\nuse Deprecated;\nuse League\\Uri\\Contracts\\UriComponentInterface;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\IPv6\\Converter as IPv6Converter;\nuse SensitiveParameter;\nuse Stringable;\n\nuse function explode;\nuse function filter_var;\nuse function gettype;\nuse function in_array;\nuse function is_scalar;\nuse function preg_match;\nuse function preg_replace_callback;\nuse function rawurldecode;\nuse function rawurlencode;\nuse function sprintf;\nuse function str_starts_with;\nuse function strtolower;\nuse function strtoupper;\n\nuse const FILTER_FLAG_IPV4;\nuse const FILTER_VALIDATE_IP;\n\nfinal class Encoder\n{\n    private const REGEXP_CHARS_INVALID = '/[\\x00-\\x1f\\x7f]/';\n    private const REGEXP_CHARS_ENCODED = ',%[A-Fa-f0-9]{2},';\n    private const REGEXP_CHARS_PREVENTS_DECODING = ',%\n     \t2[A-F|1-2|4-9]|\n        3[0-9|B|D]|\n        4[1-9|A-F]|\n        5[0-9|A|F]|\n        6[1-9|A-F]|\n        7[0-9|E]\n    ,ix';\n    private const REGEXP_PART_SUBDELIM = \"\\!\\$&'\\(\\)\\*\\+,;\\=%\";\n    private const REGEXP_PART_UNRESERVED = 'A-Za-z\\d_\\-.~';\n    private const REGEXP_PART_ENCODED = '%(?![A-Fa-f\\d]{2})';\n\n    /**\n     * Unreserved characters.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc3986.html#section-2.3\n     */\n    private const REGEXP_UNRESERVED_CHARACTERS = ',%(2[1-9A-Fa-f]|[3-7][0-9A-Fa-f]|61|62|64|65|66|7[AB]|5F),';\n\n    /**\n     * Tell whether the user component is correctly encoded.\n     */\n    public static function isUserEncoded(Stringable|string|null $encoded): bool\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.']+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return null === $encoded || 1 !== preg_match($pattern, (string) $encoded);\n    }\n\n    /**\n     * Encode User.\n     *\n     * All generic delimiters MUST be encoded\n     */\n    public static function encodeUser(Stringable|string|null $component): ?string\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.']+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return self::encode($component, $pattern);\n    }\n\n    /**\n     * Normalize user component.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizeUser(Stringable|string|null $user): ?string\n    {\n        return self::encodeUser(self::decodeUnreservedCharacters($user));\n    }\n\n    /**\n     * Tell whether the password component is correctly encoded.\n     */\n    public static function isPasswordEncoded(#[SensitiveParameter] Stringable|string|null $encoded): bool\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return null === $encoded || 1 !== preg_match($pattern, (string) $encoded);\n    }\n\n    /**\n     * Encode Password.\n     *\n     * Generic delimiters \":\" MUST NOT be encoded\n     */\n    public static function encodePassword(#[SensitiveParameter] Stringable|string|null $component): ?string\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return self::encode($component, $pattern);\n    }\n\n    /**\n     * Normalize password component.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizePassword(#[SensitiveParameter] Stringable|string|null $password): ?string\n    {\n        return self::encodePassword(self::decodeUnreservedCharacters($password));\n    }\n\n    /**\n     * Tell whether the userInfo component is correctly encoded.\n     */\n    public static function isUserInfoEncoded(#[SensitiveParameter] Stringable|string|null $userInfo): bool\n    {\n        if (null === $userInfo) {\n            return true;\n        }\n\n        [$user, $password] = explode(':', (string) $userInfo, 2) + [1 => null];\n\n        return self::isUserEncoded($user)\n            && self::isPasswordEncoded($password);\n    }\n\n    public static function encodeUserInfo(#[SensitiveParameter] Stringable|string|null $userInfo): ?string\n    {\n        if (null === $userInfo) {\n            return null;\n        }\n\n        [$user, $password] = explode(':', (string) $userInfo, 2) + [1 => null];\n        $userInfo = self::encodeUser($user);\n        if (null === $password) {\n            return $userInfo;\n        }\n\n        return $userInfo.':'.self::encodePassword($password);\n    }\n\n    public static function normalizeUserInfo(#[SensitiveParameter] Stringable|string|null $userInfo): ?string\n    {\n        if (null === $userInfo) {\n            return null;\n        }\n\n        [$user, $password] = explode(':', (string) $userInfo, 2) + [1 => null];\n        $userInfo = self::normalizeUser($user);\n        if (null === $password) {\n            return $userInfo;\n        }\n\n        return $userInfo.':'.self::normalizePassword($password);\n    }\n\n    /**\n     * Decodes all the URI component characters.\n     */\n    public static function decodeAll(Stringable|string|null $component): ?string\n    {\n        return self::decode($component, static fn (array $matches): string => rawurldecode($matches[0]));\n    }\n\n    /**\n     * Decodes the URI component without decoding the unreserved characters which are already encoded.\n     */\n    public static function decodeNecessary(Stringable|string|int|null $component): ?string\n    {\n        $decoder = static function (array $matches): string {\n            if (1 === preg_match(self::REGEXP_CHARS_PREVENTS_DECODING, $matches[0])) {\n                return strtoupper($matches[0]);\n            }\n\n            return rawurldecode($matches[0]);\n        };\n\n        return self::decode($component, $decoder);\n    }\n\n    /**\n     * Decodes the component unreserved characters.\n     */\n    public static function decodeUnreservedCharacters(Stringable|string|null $str): ?string\n    {\n        if (null === $str) {\n            return null;\n        }\n\n        return preg_replace_callback(\n            self::REGEXP_UNRESERVED_CHARACTERS,\n            static fn (array $matches): string => rawurldecode($matches[0]),\n            (string) $str\n        );\n    }\n\n    /**\n     * Tell whether the path component is correctly encoded.\n     */\n    public static function isPathEncoded(Stringable|string|null $encoded): bool\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':@\\/]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return null === $encoded || 1 !== preg_match($pattern, (string) $encoded);\n    }\n\n    /**\n     * Encode Path.\n     *\n     * Generic delimiters \":\", \"@\", and \"/\" MUST NOT be encoded\n     */\n    public static function encodePath(Stringable|string|null $component): string\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':@\\/]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return (string) self::encode($component, $pattern);\n    }\n\n    /**\n     * Decodes the path component while preserving characters that should not be decoded in the context of a full valid URI.\n     */\n    public static function decodePath(Stringable|string|null $path): ?string\n    {\n        $decoder = static function (array $matches): string {\n            $encodedChar = strtoupper($matches[0]);\n\n            return in_array($encodedChar, ['%2F', '%20', '%3F', '%23'], true) ? $encodedChar : rawurldecode($encodedChar);\n        };\n\n        return self::decode($path, $decoder);\n    }\n\n    /**\n     * Normalize path component.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizePath(Stringable|string|null $component): ?string\n    {\n        return self::encodePath(self::decodePath($component));\n    }\n\n    /**\n     * Tell whether the query component is correctly encoded.\n     */\n    public static function isQueryEncoded(Stringable|string|null $encoded): bool\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.'\\/?%]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return null === $encoded || 1 !== preg_match($pattern, (string) $encoded);\n    }\n\n    /**\n     * Decodes the query component while preserving characters that should not be decoded in the context of a full valid URI.\n     */\n    public static function decodeQuery(Stringable|string|null $path): ?string\n    {\n        $decoder = static function (array $matches): string {\n            $encodedChar = strtoupper($matches[0]);\n\n            return in_array($encodedChar, ['%26', '%3D', '%20', '%23'], true) ? $encodedChar : rawurldecode($encodedChar);\n        };\n\n        return self::decode($path, $decoder);\n    }\n\n    /**\n     * Normalize query component.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizeQuery(Stringable|string|null $query): ?string\n    {\n        return self::encodeQueryOrFragment(self::decodeQuery($query));\n    }\n\n    /**\n     * Tell whether the query component is correctly encoded.\n     */\n    public static function isFragmentEncoded(Stringable|string|null $encoded): bool\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':@\\/?%]|'.self::REGEXP_PART_ENCODED.'/';\n\n        return null === $encoded || 1 !== preg_match($pattern, (string) $encoded);\n    }\n\n    /**\n     * Decodes the fragment component while preserving characters that should not be decoded in the context of a full valid URI.\n     */\n    public static function decodeFragment(Stringable|string|null $path): ?string\n    {\n        return self::decode($path, static fn (array $matches): string => '%20' === $matches[0] ? $matches[0] : rawurldecode($matches[0]));\n    }\n\n    /**\n     * Normalize fragment component.\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizeFragment(Stringable|string|null $fragment): ?string\n    {\n        return self::encodeQueryOrFragment(self::decodeFragment($fragment));\n    }\n\n    /**\n     * Normalize host component.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc3986.html#section-3.2.2\n     *\n     * The value returned MUST be percent-encoded, but MUST NOT double-encode\n     * any characters. To determine what characters to encode, please refer to\n     * RFC 3986.\n     */\n    public static function normalizeHost(Stringable|string|null $host): ?string\n    {\n        if ($host instanceof Stringable) {\n            $host = (string) $host;\n        }\n\n        if (null === $host || '' === $host || false !== filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n            return $host;\n        }\n\n        if (str_starts_with($host, '[')) {\n            return IPv6Converter::normalize($host);\n        }\n\n        $host = strtolower($host);\n\n        return (!str_contains($host, '%')) ? $host : preg_replace_callback(\n            '/%[a-f0-9]{2}/',\n            fn (array $matches) => 1 === preg_match('/%([0-7][0-9a-f])/', $matches[0]) ? rawurldecode($matches[0]) : strtoupper($matches[0]),\n            $host\n        );\n    }\n\n    /**\n     * Encode Query or Fragment.\n     *\n     * Generic delimiters \":\", \"@\", \"?\", and \"/\" MUST NOT be encoded\n     */\n    public static function encodeQueryOrFragment(Stringable|string|null $component): ?string\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.self::REGEXP_PART_SUBDELIM.':@\\/?]+|'.self::REGEXP_PART_ENCODED.'/';\n\n        return self::encode($component, $pattern);\n    }\n\n    public static function encodeQueryKeyValue(mixed $component): ?string\n    {\n        static $pattern = '/[^'.self::REGEXP_PART_UNRESERVED.']+|'.self::REGEXP_PART_ENCODED.'/';\n        $encoder = static fn (array $found): string => 1 === preg_match('/[^'.self::REGEXP_PART_UNRESERVED.']/', rawurldecode($found[0])) ? rawurlencode($found[0]) : $found[0];\n        $filteredComponent = self::filterComponent($component);\n\n        return match (true) {\n            null === $filteredComponent => throw new SyntaxError(sprintf('A pair key/value must be a scalar value `%s` given.', gettype($component))),\n            1 === preg_match(self::REGEXP_CHARS_INVALID, $filteredComponent) => rawurlencode($filteredComponent),\n            default => (string) preg_replace_callback($pattern, $encoder, $filteredComponent),\n        };\n    }\n\n    private static function filterComponent(mixed $component): ?string\n    {\n        return match (true) {\n            true === $component => '1',\n            false === $component => '0',\n            $component instanceof UriComponentInterface => $component->value(),\n            $component instanceof Stringable,\n            is_scalar($component) => (string) $component,\n            null === $component => null,\n            default => throw new SyntaxError(sprintf('The component must be a scalar value `%s` given.', gettype($component))),\n        };\n    }\n\n    /**\n     * Encodes the URI component characters using a regular expression to find which characters need encoding.\n     */\n    private static function encode(Stringable|string|int|bool|null $component, string $pattern): ?string\n    {\n        $component = self::filterComponent($component);\n        if (null === $component || '' === $component) {\n            return $component;\n        }\n\n        return (string) preg_replace_callback(\n            $pattern,\n            static fn (array $found): string => 1 === preg_match('/[^'.self::REGEXP_PART_UNRESERVED.']/', rawurldecode($found[0])) ? rawurlencode($found[0]) : $found[0],\n            $component\n        );\n    }\n\n    /**\n     * Decodes the URI component characters using a closure.\n     */\n    private static function decode(Stringable|string|int|null $component, Closure $decoder): ?string\n    {\n        $component = self::filterComponent($component);\n        if (null === $component || '' === $component) {\n            return $component;\n        }\n\n        if (1 === preg_match(self::REGEXP_CHARS_INVALID, $component)) {\n            throw new SyntaxError('Invalid component string: '.$component.'.');\n        }\n\n        if (1 === preg_match(self::REGEXP_CHARS_ENCODED, $component)) {\n            return (string) preg_replace_callback(self::REGEXP_CHARS_ENCODED, $decoder, $component);\n        }\n\n        return $component;\n    }\n\n    /**\n     * Decodes the URI component without decoding the unreserved characters which are already encoded.\n     *\n     * DEPRECATION WARNING! This method will be removed in the next major point release.\n     *\n     * @deprecated Since version 7.6.0\n     * @codeCoverageIgnore\n     * @see Encoder::decodeNecessary()\n     *\n     * Create a new instance from the environment.\n     */\n    #[Deprecated(message:'use League\\Uri\\Encoder::decodeNecessary() instead', since:'league/uri:7.6.0')]\n    public static function decodePartial(Stringable|string|int|null $component): ?string\n    {\n        return self::decodeNecessary($component);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv4/Calculator.php","ext":"php","size":2616,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv4;\n\ninterface Calculator\n{\n    /**\n     * Add numbers.\n     *\n     * @param mixed $value1 a number that will be added to $value2\n     * @param mixed $value2 a number that will be added to $value1\n     *\n     * @return mixed the addition result\n     */\n    public function add(mixed $value1, mixed $value2);\n\n    /**\n     * Subtract one number from another.\n     *\n     * @param mixed $value1 a number that will be subtracted of $value2\n     * @param mixed $value2 a number that will be subtracted to $value1\n     *\n     * @return mixed the subtraction result\n     */\n    public function sub(mixed $value1, mixed $value2);\n\n    /**\n     * Multiply numbers.\n     *\n     * @param mixed $value1 a number that will be multiplied by $value2\n     * @param mixed $value2 a number that will be multiplied by $value1\n     *\n     * @return mixed the multiplication result\n     */\n    public function multiply(mixed $value1, mixed $value2);\n\n    /**\n     * Divide numbers.\n     *\n     * @param mixed $value The number being divided.\n     * @param mixed $base The number that $value is being divided by.\n     *\n     * @return mixed the result of the division\n     */\n    public function div(mixed $value, mixed $base);\n\n    /**\n     * Raise an number to the power of exponent.\n     *\n     * @param mixed $value scalar, the base to use\n     *\n     * @return mixed the value raised to the power of exp.\n     */\n    public function pow(mixed $value, int $exponent);\n\n    /**\n     * Returns the int point remainder (modulo) of the division of the arguments.\n     *\n     * @param mixed $value The dividend\n     * @param mixed $base The divisor\n     *\n     * @return mixed the remainder\n     */\n    public function mod(mixed $value, mixed $base);\n\n    /**\n     * Number comparison.\n     *\n     * @param mixed $value1 the first value\n     * @param mixed $value2 the second value\n     *\n     * @return int Returns < 0 if value1 is less than value2; > 0 if value1 is greater than value2, and 0 if they are equal.\n     */\n    public function compare(mixed $value1, mixed $value2): int;\n\n    /**\n     * Get the decimal integer value of a variable.\n     *\n     * @param mixed $value The scalar value being converted to an integer\n     *\n     * @return mixed the integer value\n     */\n    public function baseConvert(mixed $value, int $base);\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv4/NativeCalculator.php","ext":"php","size":1269,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv4;\n\nuse function floor;\nuse function intval;\n\nfinal class NativeCalculator implements Calculator\n{\n    public function baseConvert(mixed $value, int $base): int\n    {\n        return intval((string) $value, $base);\n    }\n\n    public function pow(mixed $value, int $exponent)\n    {\n        return $value ** $exponent;\n    }\n\n    public function compare(mixed $value1, mixed $value2): int\n    {\n        return $value1 <=> $value2;\n    }\n\n    public function multiply(mixed $value1, mixed $value2): int\n    {\n        return $value1 * $value2;\n    }\n\n    public function div(mixed $value, mixed $base): int\n    {\n        return (int) floor($value / $base);\n    }\n\n    public function mod(mixed $value, mixed $base): int\n    {\n        return $value % $base;\n    }\n\n    public function add(mixed $value1, mixed $value2): int\n    {\n        return $value1 + $value2;\n    }\n\n    public function sub(mixed $value1, mixed $value2): int\n    {\n        return $value1 - $value2;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv4/BCMathCalculator.php","ext":"php","size":2269,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv4;\n\nuse function bcadd;\nuse function bccomp;\nuse function bcdiv;\nuse function bcmod;\nuse function bcmul;\nuse function bcpow;\nuse function bcsub;\nuse function str_split;\n\nfinal class BCMathCalculator implements Calculator\n{\n    private const SCALE = 0;\n    private const CONVERSION_TABLE = [\n        '0' => '0', '1' => '1', '2' => '2', '3' => '3',\n        '4' => '4', '5' => '5', '6' => '6', '7' => '7',\n        '8' => '8', '9' => '9', 'a' => '10', 'b' => '11',\n        'c' => '12', 'd' => '13', 'e' => '14', 'f' => '15',\n    ];\n\n    public function baseConvert(mixed $value, int $base): string\n    {\n        $value = (string) $value;\n        if (10 === $base) {\n            return $value;\n        }\n\n        $base = (string) $base;\n        $decimal = '0';\n        foreach (str_split($value) as $char) {\n            $decimal = bcadd($this->multiply($decimal, $base), self::CONVERSION_TABLE[$char], self::SCALE);\n        }\n\n        return $decimal;\n    }\n\n    public function pow(mixed $value, int $exponent): string\n    {\n        return bcpow((string) $value, (string) $exponent, self::SCALE);\n    }\n\n    public function compare(mixed $value1, mixed $value2): int\n    {\n        return bccomp((string) $value1, (string) $value2, self::SCALE);\n    }\n\n    public function multiply(mixed $value1, mixed $value2): string\n    {\n        return bcmul((string) $value1, (string) $value2, self::SCALE);\n    }\n\n    public function div(mixed $value, mixed $base): string\n    {\n        return bcdiv((string) $value, (string) $base, self::SCALE);\n    }\n\n    public function mod(mixed $value, mixed $base): string\n    {\n        return bcmod((string) $value, (string) $base, self::SCALE);\n    }\n\n    public function add(mixed $value1, mixed $value2): string\n    {\n        return bcadd((string) $value1, (string) $value2, self::SCALE);\n    }\n\n    public function sub(mixed $value1, mixed $value2): string\n    {\n        return bcsub((string) $value1, (string) $value2, self::SCALE);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv4/GMPCalculator.php","ext":"php","size":1505,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv4;\n\nuse GMP;\n\nuse function gmp_add;\nuse function gmp_cmp;\nuse function gmp_div_q;\nuse function gmp_init;\nuse function gmp_mod;\nuse function gmp_mul;\nuse function gmp_pow;\nuse function gmp_sub;\n\nuse const GMP_ROUND_MINUSINF;\n\nfinal class GMPCalculator implements Calculator\n{\n    public function baseConvert(mixed $value, int $base): GMP\n    {\n        return gmp_init($value, $base);\n    }\n\n    public function pow(mixed $value, int $exponent): GMP\n    {\n        return gmp_pow($value, $exponent);\n    }\n\n    public function compare(mixed $value1, mixed $value2): int\n    {\n        return gmp_cmp($value1, $value2);\n    }\n\n    public function multiply(mixed $value1, mixed $value2): GMP\n    {\n        return gmp_mul($value1, $value2);\n    }\n\n    public function div(mixed $value, mixed $base): GMP\n    {\n        return gmp_div_q($value, $base, GMP_ROUND_MINUSINF);\n    }\n\n    public function mod(mixed $value, mixed $base): GMP\n    {\n        return gmp_mod($value, $base);\n    }\n\n    public function add(mixed $value1, mixed $value2): GMP\n    {\n        return gmp_add($value1, $value2);\n    }\n\n    public function sub(mixed $value1, mixed $value2): GMP\n    {\n        return gmp_sub($value1, $value2);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv4/Converter.php","ext":"php","size":8887,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv4;\n\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\FeatureDetection;\nuse Stringable;\n\nuse function array_pop;\nuse function count;\nuse function explode;\nuse function extension_loaded;\nuse function hexdec;\nuse function long2ip;\nuse function ltrim;\nuse function preg_match;\nuse function str_ends_with;\nuse function substr;\n\nuse const FILTER_FLAG_IPV4;\nuse const FILTER_FLAG_IPV6;\nuse const FILTER_VALIDATE_IP;\n\nfinal class Converter\n{\n    private const REGEXP_IPV4_HOST = '/\n        (?(DEFINE) # . is missing as it is used to separate labels\n            (?<hexadecimal>0x[[:xdigit:]]*)\n            (?<octal>0[0-7]*)\n            (?<decimal>\\d+)\n            (?<ipv4_part>(?:(?&hexadecimal)|(?&octal)|(?&decimal))*)\n        )\n        ^(?:(?&ipv4_part)\\.){0,3}(?&ipv4_part)\\.?$\n    /x';\n    private const REGEXP_IPV4_NUMBER_PER_BASE = [\n        '/^0x(?<number>[[:xdigit:]]*)$/' => 16,\n        '/^0(?<number>[0-7]*)$/' => 8,\n        '/^(?<number>\\d+)$/' => 10,\n    ];\n\n    private const IPV6_6TO4_PREFIX = '2002:';\n    private const IPV4_MAPPED_PREFIX = '::ffff:';\n\n    private readonly mixed $maxIPv4Number;\n\n    public function __construct(\n        private readonly Calculator $calculator\n    ) {\n        $this->maxIPv4Number = $calculator->sub($calculator->pow(2, 32), 1);\n    }\n\n    /**\n     * Returns an instance using a GMP calculator.\n     */\n    public static function fromGMP(): self\n    {\n        return new self(new GMPCalculator());\n    }\n\n    /**\n     * Returns an instance using a Bcmath calculator.\n     */\n    public static function fromBCMath(): self\n    {\n        return new self(new BCMathCalculator());\n    }\n\n    /**\n     * Returns an instance using a PHP native calculator (requires 64bits PHP).\n     */\n    public static function fromNative(): self\n    {\n        return new self(new NativeCalculator());\n    }\n\n    /**\n     * Returns an instance using a detected calculator depending on the PHP environment.\n     *\n     * @throws MissingFeature If no Calculator implementing object can be used on the platform\n     *\n     * @codeCoverageIgnore\n     */\n    public static function fromEnvironment(): self\n    {\n        FeatureDetection::supportsIPv4Conversion();\n\n        return match (true) {\n            extension_loaded('gmp') => self::fromGMP(),\n            extension_loaded('bcmath') => self::fromBCMath(),\n            default => self::fromNative(),\n        };\n    }\n\n    public function isIpv4(Stringable|string|null $host): bool\n    {\n        if (null === $host) {\n            return false;\n        }\n\n        if (null !== $this->toDecimal($host)) {\n            return true;\n        }\n\n        $host = (string) $host;\n        if (false === filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return false;\n        }\n\n        $ipAddress = strtolower((string) inet_ntop((string) inet_pton($host)));\n        if (str_starts_with($ipAddress, self::IPV4_MAPPED_PREFIX)) {\n            return false !== filter_var(substr($ipAddress, 7), FILTER_VALIDATE_IP, FILTER_FLAG_IPV4);\n        }\n\n        if (!str_starts_with($ipAddress, self::IPV6_6TO4_PREFIX)) {\n            return false;\n        }\n\n        $hexParts = explode(':', substr($ipAddress, 5, 9));\n        if (count($hexParts) < 2) {\n            return false;\n        }\n\n        $ipAddress = long2ip((int) hexdec($hexParts[0]) * 65536 + (int) hexdec($hexParts[1]));\n\n        return '' !== $ipAddress && false !== $ipAddress;\n    }\n\n    public function toIPv6Using6to4(Stringable|string|null $host): ?string\n    {\n        $host = $this->toDecimal($host);\n        if (null === $host) {\n            return null;\n        }\n\n        /** @var array<string> $parts */\n        $parts = array_map(\n            fn (string $part): string => sprintf('%02x', $part),\n            explode('.', $host)\n        );\n\n        return '['.self::IPV6_6TO4_PREFIX.$parts[0].$parts[1].':'.$parts[2].$parts[3].'::]';\n    }\n\n    public function toIPv6UsingMapping(Stringable|string|null $host): ?string\n    {\n        $host = $this->toDecimal($host);\n        if (null === $host) {\n            return null;\n        }\n\n        return '['.self::IPV4_MAPPED_PREFIX.$host.']';\n    }\n\n    public function toOctal(Stringable|string|null $host): ?string\n    {\n        $host = $this->toDecimal($host);\n\n        return match (null) {\n            $host => null,\n            default => implode('.', array_map(\n                fn ($value) => str_pad(decoct((int) $value), 4, '0', STR_PAD_LEFT),\n                explode('.', $host)\n            )),\n        };\n    }\n\n    public function toHexadecimal(Stringable|string|null $host): ?string\n    {\n        $host = $this->toDecimal($host);\n\n        return match (null) {\n            $host => null,\n            default => '0x'.implode('', array_map(\n                fn ($value) => dechex((int) $value),\n                explode('.', $host)\n            )),\n        };\n    }\n\n    /**\n     * Tries to convert a IPv4 hexadecimal or a IPv4 octal notation into a IPv4 dot-decimal notation if possible\n     * otherwise returns null.\n     *\n     * @see https://url.spec.whatwg.org/#concept-ipv4-parser\n     */\n    public function toDecimal(Stringable|string|null $host): ?string\n    {\n        $host = (string) $host;\n        if (str_starts_with($host, '[') && str_ends_with($host, ']')) {\n            $host = substr($host, 1, -1);\n            if (false === filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n                return null;\n            }\n\n            $ipAddress = strtolower((string) inet_ntop((string) inet_pton($host)));\n            if (str_starts_with($ipAddress, self::IPV4_MAPPED_PREFIX)) {\n                return substr($ipAddress, 7);\n            }\n\n            if (!str_starts_with($ipAddress, self::IPV6_6TO4_PREFIX)) {\n                return null;\n            }\n\n            $hexParts = explode(':', substr($ipAddress, 5, 9));\n\n            return (string) match (true) {\n                count($hexParts) < 2 => null,\n                default => long2ip((int) hexdec($hexParts[0]) * 65536 + (int) hexdec($hexParts[1])),\n            };\n        }\n\n        if (1 !== preg_match(self::REGEXP_IPV4_HOST, $host)) {\n            return null;\n        }\n\n        if (str_ends_with($host, '.')) {\n            $host = substr($host, 0, -1);\n        }\n\n        $numbers = [];\n        foreach (explode('.', $host) as $label) {\n            $number = $this->labelToNumber($label);\n            if (null === $number) {\n                return null;\n            }\n\n            $numbers[] = $number;\n        }\n\n        $ipv4 = array_pop($numbers);\n        $max = $this->calculator->pow(256, 6 - count($numbers));\n        if ($this->calculator->compare($ipv4, $max) > 0) {\n            return null;\n        }\n\n        foreach ($numbers as $offset => $number) {\n            if ($this->calculator->compare($number, 255) > 0) {\n                return null;\n            }\n\n            $ipv4 = $this->calculator->add($ipv4, $this->calculator->multiply(\n                $number,\n                $this->calculator->pow(256, 3 - $offset)\n            ));\n        }\n\n        return $this->long2Ip($ipv4);\n    }\n\n    /**\n     * Converts a domain label into a IPv4 integer part.\n     *\n     * @see https://url.spec.whatwg.org/#ipv4-number-parser\n     *\n     * @return mixed returns null if it cannot correctly convert the label\n     */\n    private function labelToNumber(string $label): mixed\n    {\n        foreach (self::REGEXP_IPV4_NUMBER_PER_BASE as $regexp => $base) {\n            if (1 !== preg_match($regexp, $label, $matches)) {\n                continue;\n            }\n\n            $number = ltrim($matches['number'], '0');\n            if ('' === $number) {\n                return 0;\n            }\n\n            $number = $this->calculator->baseConvert($number, $base);\n            if (0 <= $this->calculator->compare($number, 0) && 0 >= $this->calculator->compare($number, $this->maxIPv4Number)) {\n                return $number;\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates the dot-decimal notation for IPv4.\n     *\n     * @see https://url.spec.whatwg.org/#concept-ipv4-parser\n     *\n     * @param mixed $ipAddress the number representation of the IPV4address\n     */\n    private function long2Ip(mixed $ipAddress): string\n    {\n        $output = '';\n        for ($offset = 0; $offset < 4; $offset++) {\n            $output = $this->calculator->mod($ipAddress, 256).$output;\n            if ($offset < 3) {\n                $output = '.'.$output;\n            }\n            $ipAddress = $this->calculator->div($ipAddress, 256);\n        }\n\n        return $output;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/KeyValuePair/Converter.php","ext":"php","size":6397,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\KeyValuePair;\n\nuse League\\Uri\\Contracts\\UriComponentInterface;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse Stringable;\n\nuse function array_combine;\nuse function explode;\nuse function implode;\nuse function is_float;\nuse function is_int;\nuse function is_string;\nuse function json_encode;\nuse function preg_match;\nuse function str_replace;\n\nuse const JSON_PRESERVE_ZERO_FRACTION;\nuse const PHP_QUERY_RFC1738;\nuse const PHP_QUERY_RFC3986;\n\nfinal class Converter\n{\n    private const REGEXP_INVALID_CHARS = '/[\\x00-\\x1f\\x7f]/';\n\n    /**\n     * @param non-empty-string $separator the query string separator\n     * @param array<string> $fromRfc3986 contains all the RFC3986 encoded characters to be converted\n     * @param array<string> $toEncoding contains all the expected encoded characters\n     */\n    private function __construct(\n        private readonly string $separator,\n        private readonly array $fromRfc3986 = [],\n        private readonly array $toEncoding = [],\n    ) {\n        if ('' === $this->separator) {\n            throw new SyntaxError('The separator character must be a non empty string.');\n        }\n    }\n\n    /**\n     * @param non-empty-string $separator\n     */\n    public static function new(string $separator): self\n    {\n        return new self($separator);\n    }\n\n    /**\n     * @param non-empty-string $separator\n     */\n    public static function fromRFC3986(string $separator = '&'): self\n    {\n        return self::new($separator);\n    }\n\n    /**\n     * @param non-empty-string $separator\n     */\n    public static function fromRFC1738(string $separator = '&'): self\n    {\n        return self::new($separator)\n            ->withEncodingMap(['%20' => '+']);\n    }\n\n    /**\n     * @param non-empty-string $separator\n     *\n     * @see https://url.spec.whatwg.org/#application/x-www-form-urlencoded\n     */\n    public static function fromFormData(string $separator = '&'): self\n    {\n        return self::new($separator)\n            ->withEncodingMap(['%20' => '+', '%2A' => '*']);\n    }\n\n    public static function fromEncodingType(int $encType): self\n    {\n        return match ($encType) {\n            PHP_QUERY_RFC3986 => self::fromRFC3986(),\n            PHP_QUERY_RFC1738 => self::fromRFC1738(),\n            default => throw new SyntaxError('Unknown or Unsupported encoding.'),\n        };\n    }\n\n    /**\n     * @return non-empty-string\n     */\n    public function separator(): string\n    {\n        return $this->separator;\n    }\n\n    /**\n     * @return array<string, string>\n     */\n    public function encodingMap(): array\n    {\n        return array_combine($this->fromRfc3986, $this->toEncoding);\n    }\n\n    /**\n     * @return array<non-empty-list<string|null>>\n     */\n    public function toPairs(Stringable|string|int|float|bool|null $value): array\n    {\n        $value = match (true) {\n            $value instanceof UriComponentInterface => $value->value(),\n            $value instanceof Stringable, is_int($value) => (string) $value,\n            false === $value => '0',\n            true === $value => '1',\n            default => $value,\n        };\n\n        if (null === $value) {\n            return [];\n        }\n\n        $value = match (1) {\n            preg_match(self::REGEXP_INVALID_CHARS, (string) $value) => throw new SyntaxError('Invalid query string: `'.$value.'`.'),\n            default => str_replace($this->toEncoding, $this->fromRfc3986, (string) $value),\n        };\n\n        return array_map(\n            fn (string $pair): array => explode('=', $pair, 2) + [1 => null],\n            explode($this->separator, $value)\n        );\n    }\n\n    private static function vString(Stringable|string|bool|int|float|null $value): ?string\n    {\n        return match (true) {\n            $value => '1',\n            false === $value => '0',\n            null === $value => null,\n            is_float($value) => (string) json_encode($value, JSON_PRESERVE_ZERO_FRACTION),\n            default => (string) $value,\n        };\n    }\n\n    /**\n     * @param iterable<array{0:string|null, 1:Stringable|string|bool|int|float|null}> $pairs\n     */\n    public function toValue(iterable $pairs): ?string\n    {\n        $filteredPairs = [];\n        foreach ($pairs as $pair) {\n            $filteredPairs[] = match (true) {\n                !is_string($pair[0]) => throw new SyntaxError('the pair key MUST be a string;, `'.gettype($pair[0]).'` given.'),\n                null === $pair[1] => self::vString($pair[0]),\n                default => self::vString($pair[0]).'='.self::vString($pair[1]),\n            };\n        }\n\n        return match ([]) {\n            $filteredPairs => null,\n            default => str_replace($this->fromRfc3986, $this->toEncoding, implode($this->separator, $filteredPairs)),\n        };\n    }\n\n    /**\n     * @param non-empty-string $separator\n     */\n    public function withSeparator(string $separator): self\n    {\n        return match ($this->separator) {\n            $separator => $this,\n            default => new self($separator, $this->fromRfc3986, $this->toEncoding),\n        };\n    }\n\n    /**\n     * Sets the conversion map.\n     *\n     * Each key from the iterable structure represents the RFC3986 encoded characters as string,\n     * while each value represents the expected output encoded characters\n     */\n    public function withEncodingMap(iterable $encodingMap): self\n    {\n        $fromRfc3986 = [];\n        $toEncoding = [];\n        foreach ($encodingMap as $from => $to) {\n            [$fromRfc3986[], $toEncoding[]] = match (true) {\n                !is_string($from) => throw new SyntaxError('The encoding output must be a string; `'.gettype($from).'` given.'),\n                $to instanceof Stringable,\n                is_string($to) => [$from, (string) $to],\n                default => throw new SyntaxError('The encoding output must be a string; `'.gettype($to).'` given.'),\n            };\n        }\n\n        return match (true) {\n            $fromRfc3986 !== $this->fromRfc3986,\n            $toEncoding !== $this->toEncoding => new self($this->separator, $fromRfc3986, $toEncoding),\n            default => $this,\n        };\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/UriString.php","ext":"php","size":27531,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse League\\Uri\\Exceptions\\ConversionFailed;\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\Idna\\Converter as IdnaConverter;\nuse League\\Uri\\IPv6\\Converter as IPv6Converter;\nuse Stringable;\nuse Throwable;\n\nuse function array_merge;\nuse function array_pop;\nuse function array_reduce;\nuse function defined;\nuse function explode;\nuse function filter_var;\nuse function function_exists;\nuse function implode;\nuse function in_array;\nuse function inet_pton;\nuse function preg_match;\nuse function rawurldecode;\nuse function sprintf;\nuse function strpos;\nuse function strtolower;\nuse function substr;\n\nuse const FILTER_FLAG_IPV4;\nuse const FILTER_FLAG_IPV6;\nuse const FILTER_VALIDATE_IP;\n\n/**\n * A class to parse a URI string according to RFC3986.\n *\n * @link    https://tools.ietf.org/html/rfc3986\n * @package League\\Uri\n * @author  Ignace Nyamagana Butera <nyamsprod@gmail.com>\n * @since   6.0.0\n *\n * @phpstan-type AuthorityMap array{user: ?string, pass: ?string, host: ?string, port: ?int}\n * @phpstan-type ComponentMap array{scheme: ?string, user: ?string, pass: ?string, host: ?string, port: ?int, path: string, query: ?string, fragment: ?string}\n * @phpstan-type InputComponentMap array{scheme? : ?string, user? : ?string, pass? : ?string, host? : ?string, port? : ?int, path? : ?string, query? : ?string, fragment? : ?string}\n */\nfinal class UriString\n{\n    /**\n     * Default URI component values.\n     *\n     * @var ComponentMap\n     */\n    private const URI_COMPONENTS = [\n        'scheme' => null, 'user' => null, 'pass' => null, 'host' => null,\n        'port' => null, 'path' => '', 'query' => null, 'fragment' => null,\n    ];\n\n    /**\n     * Simple URI which do not need any parsing.\n     *\n     * @var array<string, array<string>>\n     */\n    private const URI_SHORTCUTS = [\n        '' => ['path' => ''],\n        '#' => ['fragment' => ''],\n        '?' => ['query' => ''],\n        '?#' => ['query' => '', 'fragment' => ''],\n        '/' => ['path' => '/'],\n        '//' => ['host' => ''],\n        '///' => ['host' => '', 'path' => '/'],\n    ];\n\n    /**\n     * Range of invalid characters in URI 3986 string.\n     *\n     * @var string\n     */\n    private const REGEXP_INVALID_URI_RFC3986_CHARS = '/^(?:[A-Za-z0-9\\-._~:\\/?#[\\]@!$&\\'()*+,;=%]|%[0-9A-Fa-f]{2})*$/';\n\n    /**\n     * Range of invalid characters in URI 3987 string.\n     *\n     * @var string\n     */\n    private const REGEXP_INVALID_URI_RFC3987_CHARS = '/[\\x00-\\x1f\\x7f\\s]/';\n\n    /**\n     * RFC3986 regular expression URI splitter.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#appendix-B\n     * @var string\n     */\n    private const REGEXP_URI_PARTS = ',^\n        (?<scheme>(?<scontent>[^:/?\\#]+):)?    # URI scheme component\n        (?<authority>//(?<acontent>[^/?\\#]*))? # URI authority part\n        (?<path>[^?\\#]*)                       # URI path component\n        (?<query>\\?(?<qcontent>[^\\#]*))?       # URI query component\n        (?<fragment>\\#(?<fcontent>.*))?        # URI fragment component\n    ,x';\n\n    /**\n     * URI scheme regular expression.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.1\n     * @var string\n     */\n    private const REGEXP_URI_SCHEME = '/^([a-z][a-z\\d+.-]*)?$/i';\n\n    /**\n     * IPvFuture regular expression.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @var string\n     */\n    private const REGEXP_IP_FUTURE = '/^\n        v(?<version>[A-F0-9])+\\.\n        (?:\n            (?<unreserved>[a-z0-9_~\\-\\.])|\n            (?<sub_delims>[!$&\\'()*+,;=:])  # also include the : character\n        )+\n    $/ix';\n\n    /**\n     * General registered name regular expression.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @var string\n     */\n    private const REGEXP_REGISTERED_NAME = '/(?(DEFINE)\n        (?<unreserved>[a-z0-9_~\\-])   # . is missing as it is used to separate labels\n        (?<sub_delims>[!$&\\'()*+,;=])\n        (?<encoded>%[A-F0-9]{2})\n        (?<reg_name>(?:(?&unreserved)|(?&sub_delims)|(?&encoded))*)\n    )\n    ^(?:(?&reg_name)\\.)*(?&reg_name)\\.?$/ix';\n\n    /**\n     * Invalid characters in host regular expression.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @var string\n     */\n    private const REGEXP_INVALID_HOST_CHARS = '/\n        [:\\/?#\\[\\]@ ]  # gen-delims characters as well as the space character\n    /ix';\n\n    /**\n     * Invalid path for URI without scheme and authority regular expression.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.3\n     * @var string\n     */\n    private const REGEXP_INVALID_PATH = ',^(([^/]*):)(.*)?/,';\n\n    /**\n     * Host and Port splitter regular expression.\n     *\n     * @var string\n     */\n    private const REGEXP_HOST_PORT = ',^(?<host>\\[.*\\]|[^:]*)(:(?<port>.*))?$,';\n\n    /**\n     * IDN Host detector regular expression.\n     *\n     * @var string\n     */\n    private const REGEXP_IDN_PATTERN = '/[^\\x20-\\x7f]/';\n\n    /** @var array<string,int> */\n    private const DOT_SEGMENTS = ['.' => 1, '..' => 1];\n\n    /**\n     * Only the address block fe80::/10 can have a Zone ID attach to\n     * let's detect the link local significant 10 bits.\n     *\n     * @var string\n     */\n    private const ZONE_ID_ADDRESS_BLOCK = \"\\xfe\\x80\";\n\n    /**\n     * Maximum number of host cached.\n     *\n     * @var int\n     */\n    private const MAXIMUM_HOST_CACHED = 100;\n\n    /**\n     * Generate a URI string representation from its parsed representation\n     * returned by League\\UriString::parse() or PHP's parse_url.\n     *\n     * If you supply your own array, you are responsible for providing\n     * valid components without their URI delimiters.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-5.3\n     * @link https://tools.ietf.org/html/rfc3986#section-7.5\n     *\n     * @param InputComponentMap $components\n     */\n    public static function build(array $components): string\n    {\n        return self::buildUri(\n            $components['scheme'] ?? null,\n            self::buildAuthority($components),\n            $components['path'] ?? null,\n            $components['query'] ?? null,\n            $components['fragment'] ?? null,\n        );\n    }\n\n    /**\n     * Generate a URI string representation based on RFC3986 algorithm.\n     *\n     * valid URI component MUST be provided without their URI delimiters\n     * but properly encoded.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-5.3\n     * @link https://tools.ietf.org/html/rfc3986#section-7.5§\n     */\n    public static function buildUri(\n        ?string $scheme,\n        ?string $authority,\n        ?string $path,\n        ?string $query,\n        ?string $fragment,\n    ): string {\n        self::validateComponents($scheme, $authority, $path);\n        $uri = '';\n        if (null !== $scheme) {\n            $uri .= $scheme.':';\n        }\n\n        if (null !== $authority) {\n            $uri .= '//'.$authority;\n        }\n\n        $uri .= $path;\n        if (null !== $query) {\n            $uri .= '?'.$query;\n        }\n\n        if (null !== $fragment) {\n            $uri .= '#'.$fragment;\n        }\n\n        return $uri;\n    }\n\n    /**\n     * Generate a URI authority representation from its parsed representation.\n     *\n     * @param InputComponentMap $components\n     */\n    public static function buildAuthority(array $components): ?string\n    {\n        if (!isset($components['host'])) {\n            return null;\n        }\n\n        $authority = $components['host'];\n        if (isset($components['port'])) {\n            $authority .= ':'.$components['port'];\n        }\n\n        if (!isset($components['user'])) {\n            return $authority;\n        }\n\n        $userInfo = self::buildUserInfo($components);\n        if (null !== $userInfo) {\n            return $userInfo.'@'.$authority;\n        }\n\n        return $authority;\n    }\n\n    /**\n     * Generate a URI UserInfo representation from the URI parsed representation.\n     *\n     * @param InputComponentMap $components\n     */\n    public static function buildUserInfo(array $components): ?string\n    {\n        if (!isset($components['user'])) {\n            return null;\n        }\n\n        $userInfo = $components['user'];\n        if (! isset($components['pass'])) {\n            return $userInfo;\n        }\n\n        return $userInfo.':'.$components['pass'];\n    }\n\n    /**\n     * Parses and normalizes the URI following RFC3986 destructive and non-destructive constraints.\n     *\n     * @throws SyntaxError if the URI is not parsable\n     *\n     * @return ComponentMap\n     */\n    public static function parseNormalized(Stringable|string $uri): array\n    {\n        $components = self::parse($uri);\n        if (null !== $components['scheme']) {\n            $components['scheme'] = strtolower($components['scheme']);\n        }\n\n        static $isSupported = null;\n        $isSupported ??= (function_exists('\\idn_to_ascii') && defined('\\INTL_IDNA_VARIANT_UTS46'));\n\n        $host = $components['host'];\n        if (null !== $host && false === filter_var($host, FILTER_VALIDATE_IP, FILTER_FLAG_IPV4)) {\n            $host = (string) Encoder::normalizeHost($host);\n            if ($isSupported) {\n                $idnaHost = IdnaConverter::toAscii($host);\n                if (!$idnaHost->hasErrors()) {\n                    $host = $idnaHost->domain();\n                }\n            }\n\n            $components['host'] = $host;\n        }\n\n        $path = $components['path'];\n        if ('/' === ($path[0] ?? '') || '' !== $components['scheme'].self::buildAuthority($components)) {\n            $path = self::removeDotSegments($path);\n        }\n\n        $path = Encoder::normalizePath($path);\n        if (null !== self::buildAuthority($components) && ('/' === $path)) {\n            $path = '';\n        }\n\n        $components['path'] = (string) $path;\n        $components['query'] = Encoder::normalizeQuery($components['query']);\n        $components['fragment'] = Encoder::normalizeFragment($components['fragment']);\n        $components['user'] = Encoder::normalizeUser($components['user']);\n        $components['pass'] = Encoder::normalizePassword($components['pass']);\n\n        return $components;\n    }\n\n    /**\n     * Parses and normalizes the URI following RFC3986 destructive and non-destructive constraints.\n     *\n     * @throws SyntaxError if the URI is not parsable\n     */\n    public static function normalize(Stringable|string $uri): string\n    {\n        return self::build(self::parseNormalized($uri));\n    }\n\n    /**\n     * Parses and normalizes the URI following RFC3986 destructive and non-destructive constraints.\n     *\n     * @throws SyntaxError if the URI is not parsable\n     */\n    public static function normalizeAuthority(Stringable|string|null $authority): ?string\n    {\n        if (null === $authority) {\n            return null;\n        }\n\n        $components = UriString::parseAuthority($authority);\n        if (null !== $components['host'] &&\n            false === filter_var($components['host'], FILTER_VALIDATE_IP, FILTER_FLAG_IPV4) &&\n            !IPv6Converter::isIpv6($components['host'])\n        ) {\n            $components['host'] = IdnaConverter::toUnicode((string) $components['host'])->domain();\n        }\n\n        $components['user'] = Encoder::decodeUnreservedCharacters($components['user']);\n        $components['pass'] = Encoder::decodeUnreservedCharacters($components['pass']);\n\n        return (string) self::buildAuthority($components);\n    }\n\n    /**\n     * Resolves a URI against a base URI using RFC3986 rules.\n     *\n     * This method MUST retain the state of the submitted URI instance, and return\n     * a URI instance of the same type that contains the applied modifications.\n     *\n     * This method MUST be transparent when dealing with error and exceptions.\n     * It MUST not alter or silence them apart from validating its own parameters.\n     *\n     * @see https://www.rfc-editor.org/rfc/rfc3986.html#section-5\n     *\n     * @throws SyntaxError if the BaseUri is not absolute or in absence of a BaseUri if the uri is not absolute\n     */\n    public static function resolve(Stringable|string $uri, Stringable|string|null $baseUri = null): string\n    {\n        $uri = (string) $uri;\n        if ('' === $uri) {\n            $uri = $baseUri ?? throw new SyntaxError('The uri can not be the empty string when there\\'s no base URI.');\n        }\n\n        $uriComponents = self::parse($uri);\n        $baseUriComponents = $uriComponents;\n        if (null !== $baseUri && (string) $uri !== (string) $baseUri) {\n            $baseUriComponents = self::parse($baseUri);\n        }\n\n        if (null === $baseUriComponents['scheme']) {\n            throw new SyntaxError('The base URI must be an absolute URI or null; If the base URI is null the URI must be an absolute URI.');\n        }\n\n        if (null !== $uriComponents['scheme'] && '' !== $uriComponents['scheme']) {\n            $uriComponents['path'] = self::removeDotSegments($uriComponents['path']);\n\n            return UriString::build($uriComponents);\n        }\n\n        if (null !== self::buildAuthority($uriComponents)) {\n            $uriComponents['scheme'] = $baseUriComponents['scheme'];\n            $uriComponents['path'] = self::removeDotSegments($uriComponents['path']);\n\n            return UriString::build($uriComponents);\n        }\n\n        [$path, $query] = self::resolvePathAndQuery($uriComponents, $baseUriComponents);\n        $path = UriString::removeDotSegments($path);\n        if ('' !== $path && '/' !== $path[0] && null !== self::buildAuthority($baseUriComponents)) {\n            $path = '/'.$path;\n        }\n\n        $baseUriComponents['path'] = $path;\n        $baseUriComponents['query'] = $query;\n        $baseUriComponents['fragment'] = $uriComponents['fragment'];\n\n        return UriString::build($baseUriComponents);\n    }\n\n    /**\n     * Filter Dot segment according to RFC3986.\n     *\n     * @see http://tools.ietf.org/html/rfc3986#section-5.2.4\n     */\n    public static function removeDotSegments(Stringable|string $path): string\n    {\n        $path = (string) $path;\n        if (!str_contains($path, '.')) {\n            return $path;\n        }\n\n        $reducer = function (array $carry, string $segment): array {\n            if ('..' === $segment) {\n                array_pop($carry);\n\n                return $carry;\n            }\n\n            if (!isset(self::DOT_SEGMENTS[$segment])) {\n                $carry[] = $segment;\n            }\n\n            return $carry;\n        };\n\n        $oldSegments = explode('/', $path);\n        $newPath = implode('/', array_reduce($oldSegments, $reducer(...), []));\n        if (isset(self::DOT_SEGMENTS[$oldSegments[array_key_last($oldSegments)]])) {\n            $newPath .= '/';\n        }\n\n        return $newPath;\n    }\n\n    /**\n     * Resolves an URI path and query component.\n     *\n     * @param ComponentMap $uri\n     * @param ComponentMap $baseUri\n     *\n     * @return array{0:string, 1:string|null}\n     */\n    private static function resolvePathAndQuery(array $uri, array $baseUri): array\n    {\n        if (str_starts_with($uri['path'], '/')) {\n            return [$uri['path'], $uri['query']];\n        }\n\n        if ('' === $uri['path']) {\n            return [$baseUri['path'], $uri['query'] ?? $baseUri['query']];\n        }\n\n        $targetPath = $uri['path'];\n        if (null !== self::buildAuthority($baseUri) && '' === $baseUri['path']) {\n            $targetPath = '/'.$targetPath;\n        }\n\n        if ('' !== $baseUri['path']) {\n            $segments = explode('/', $baseUri['path']);\n            array_pop($segments);\n            if ([] !== $segments) {\n                $targetPath = implode('/', $segments).'/'.$targetPath;\n            }\n        }\n\n        return [$targetPath, $uri['query']];\n    }\n\n    public static function containsValidRfc3986Characters(Stringable|string $uri): bool\n    {\n        return 1 === preg_match(self::REGEXP_INVALID_URI_RFC3986_CHARS, (string) $uri);\n    }\n\n    public static function containsValidRfc3987Characters(Stringable|string $uri): bool\n    {\n        return 1 !== preg_match(self::REGEXP_INVALID_URI_RFC3987_CHARS, (string) $uri);\n    }\n\n    /**\n     * Parse a URI string into its components.\n     *\n     * This method parses a URI and returns an associative array containing any\n     * of the various components of the URI that are present.\n     *\n     * <code>\n     * $components = UriString::parse('http://foo@test.example.com:42?query#');\n     * var_export($components);\n     * //will display\n     * array(\n     *   'scheme' => 'http',           // the URI scheme component\n     *   'user' => 'foo',              // the URI user component\n     *   'pass' => null,               // the URI pass component\n     *   'host' => 'test.example.com', // the URI host component\n     *   'port' => 42,                 // the URI port component\n     *   'path' => '',                 // the URI path component\n     *   'query' => 'query',           // the URI query component\n     *   'fragment' => '',             // the URI fragment component\n     * );\n     * </code>\n     *\n     * The returned array is similar to PHP's parse_url return value with the following\n     * differences:\n     *\n     * <ul>\n     * <li>All components are always present in the returned array</li>\n     * <li>Empty and undefined component are treated differently. And empty component is\n     *   set to the empty string while an undefined component is set to the `null` value.</li>\n     * <li>The path component is never undefined</li>\n     * <li>The method parses the URI following the RFC3986 rules, but you are still\n     *   required to validate the returned components against its related scheme specific rules.</li>\n     * </ul>\n     *\n     * @link https://tools.ietf.org/html/rfc3986\n     *\n     * @throws SyntaxError if the URI contains invalid characters\n     * @throws SyntaxError if the URI contains an invalid scheme\n     * @throws SyntaxError if the URI contains an invalid path\n     *\n     * @return ComponentMap\n     */\n    public static function parse(Stringable|string|int $uri): array\n    {\n        $uri = (string) $uri;\n        if (isset(self::URI_SHORTCUTS[$uri])) {\n            /** @var ComponentMap $components */\n            $components = [...self::URI_COMPONENTS, ...self::URI_SHORTCUTS[$uri]];\n\n            return $components;\n        }\n\n        self::containsValidRfc3987Characters($uri) || throw new SyntaxError(sprintf('The uri `%s` contains invalid characters', $uri));\n\n        //if the first character is a known URI delimiter parsing can be simplified\n        $first_char = $uri[0];\n\n        //The URI is made of the fragment only\n        if ('#' === $first_char) {\n            [, $fragment] = explode('#', $uri, 2);\n            $components = self::URI_COMPONENTS;\n            $components['fragment'] = $fragment;\n\n            return $components;\n        }\n\n        //The URI is made of the query and fragment\n        if ('?' === $first_char) {\n            [, $partial] = explode('?', $uri, 2);\n            [$query, $fragment] = explode('#', $partial, 2) + [1 => null];\n            $components = self::URI_COMPONENTS;\n            $components['query'] = $query;\n            $components['fragment'] = $fragment;\n\n            return $components;\n        }\n\n        //use RFC3986 URI regexp to split the URI\n        preg_match(self::REGEXP_URI_PARTS, $uri, $parts);\n        $parts += ['query' => '', 'fragment' => ''];\n\n        if (':' === ($parts['scheme']  ?? null) || 1 !== preg_match(self::REGEXP_URI_SCHEME, $parts['scontent'] ?? '')) {\n            throw new SyntaxError(sprintf('The uri `%s` contains an invalid scheme', $uri));\n        }\n\n        if ('' === ($parts['scheme'] ?? '').($parts['authority'] ?? '') && 1 === preg_match(self::REGEXP_INVALID_PATH, $parts['path'] ?? '')) {\n            throw new SyntaxError(sprintf('The uri `%s` contains an invalid path.', $uri));\n        }\n\n        /** @var ComponentMap $components */\n        $components = array_merge(\n            self::URI_COMPONENTS,\n            '' === ($parts['authority'] ?? null) ? [] : self::parseAuthority($parts['acontent'] ?? null),\n            [\n                'path' => $parts['path'] ?? '',\n                'scheme' => '' === ($parts['scheme'] ?? null) ? null : ($parts['scontent'] ?? null),\n                'query' => '' === $parts['query'] ? null : ($parts['qcontent'] ?? null),\n                'fragment' => '' === $parts['fragment'] ? null : ($parts['fcontent'] ?? null),\n            ]\n        );\n\n        return $components;\n    }\n\n    /**\n     * Assert the URI internal state is valid.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3\n     * @link https://tools.ietf.org/html/rfc3986#section-3.3\n     *\n     * @throws SyntaxError\n     */\n    private static function validateComponents(?string $scheme, ?string $authority, ?string $path): void\n    {\n        if (null !== $authority) {\n            if (null !== $path && '' !== $path && '/' !== $path[0]) {\n                throw new SyntaxError('If an authority is present the path must be empty or start with a `/`.');\n            }\n\n            return;\n        }\n\n        if (null === $path || '' === $path) {\n            return;\n        }\n\n        if (str_starts_with($path, '//')) {\n            throw new SyntaxError('If there is no authority the path `'.$path.'` cannot start with a `//`.');\n        }\n\n        if (null !== $scheme || false === ($pos = strpos($path, ':'))) {\n            return;\n        }\n\n        if (!str_contains(substr($path, 0, $pos), '/')) {\n            throw new SyntaxError('In absence of a scheme and an authority the first path segment cannot contain a colon (\":\") character.');\n        }\n    }\n\n    /**\n     * Parses the URI authority part.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2\n     *\n     * @throws SyntaxError If the port component is invalid\n     *\n     * @return AuthorityMap\n     */\n    public static function parseAuthority(Stringable|string|null $authority): array\n    {\n        $components = ['user' => null, 'pass' => null, 'host' => null, 'port' => null];\n        if (null === $authority) {\n            return $components;\n        }\n\n        $authority = (string) $authority;\n        $components['host'] = '';\n        if ('' === $authority) {\n            return $components;\n        }\n\n        $parts = explode('@', $authority, 2);\n        if (isset($parts[1])) {\n            [$components['user'], $components['pass']] = explode(':', $parts[0], 2) + [1 => null];\n        }\n\n        preg_match(self::REGEXP_HOST_PORT, $parts[1] ?? $parts[0], $matches);\n        $matches += ['port' => ''];\n\n        $components['port'] = self::filterPort($matches['port']);\n        $components['host'] = self::filterHost($matches['host'] ?? '');\n\n        return $components;\n    }\n\n    /**\n     * Filter and format the port component.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     *\n     * @throws SyntaxError if the registered name is invalid\n     */\n    private static function filterPort(string $port): ?int\n    {\n        return match (true) {\n            '' === $port => null,\n            1 === preg_match('/^\\d*$/', $port) => (int) $port,\n            default => throw new SyntaxError(sprintf('The port `%s` is invalid', $port)),\n        };\n    }\n\n    /**\n     * Returns whether a hostname is valid.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     *\n     * @throws SyntaxError if the registered name is invalid\n     */\n    private static function filterHost(Stringable|string|null $host): ?string\n    {\n        if (null !== $host) {\n            $host = (string) $host;\n        }\n\n        if (null === $host || '' === $host) {\n            return $host;\n        }\n\n        /** @var array<string, 1> $hostCache */\n        static $hostCache = [];\n        if (isset($hostCache[$host])) {\n            return $host;\n        }\n\n        if (self::MAXIMUM_HOST_CACHED < count($hostCache)) {\n            array_shift($hostCache);\n        }\n\n        if ('[' !== $host[0] || !str_ends_with($host, ']')) {\n            self::filterRegisteredName($host);\n            $hostCache[$host] = 1;\n\n            return $host;\n        }\n\n        if (self::isIpHost(substr($host, 1, -1))) {\n            $hostCache[$host] = 1;\n\n            return $host;\n        }\n\n        throw new SyntaxError(sprintf('Host `%s` is invalid : the IP host is malformed', $host));\n    }\n\n    /**\n     * Tells whether the scheme component is valid.\n     */\n    public static function isValidScheme(Stringable|string|null $scheme): bool\n    {\n        return null === $scheme || 1 === preg_match('/^[A-Za-z]([-A-Za-z\\d+.]+)?$/', (string) $scheme);\n    }\n\n    /**\n     * Tells whether the host component is valid.\n     */\n    public static function isValidHost(Stringable|string|null $host): bool\n    {\n        try {\n            self::filterHost($host);\n            return true;\n        } catch (Throwable) {\n            return false;\n        }\n    }\n\n    /**\n     * Throws if the host is not a registered name and not a valid IDN host.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     *\n     * @throws SyntaxError if the registered name is invalid\n     * @throws MissingFeature if IDN support or ICU requirement are not available or met.\n     * @throws ConversionFailed if the submitted IDN host cannot be converted to a valid ascii form\n     */\n    private static function filterRegisteredName(string $host): void\n    {\n        $formattedHost = rawurldecode($host);\n        if ($formattedHost !== $host) {\n            if (IdnaConverter::toAscii($formattedHost)->hasErrors()) {\n                throw new SyntaxError(sprintf('Host `%s` is invalid: the host is not a valid registered name', $host));\n            }\n\n            return;\n        }\n\n        if (1 === preg_match(self::REGEXP_REGISTERED_NAME, $formattedHost)) {\n            return;\n        }\n\n        //to test IDN host non-ascii characters must be present in the host\n        if (1 !== preg_match(self::REGEXP_IDN_PATTERN, $formattedHost)) {\n            throw new SyntaxError(sprintf('Host `%s` is invalid: the host is not a valid registered name', $host));\n        }\n\n        IdnaConverter::toAsciiOrFail($host);\n    }\n\n    /**\n     * Validates a IPv6/IPfuture host.\n     *\n     * @link https://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @link https://tools.ietf.org/html/rfc6874#section-2\n     * @link https://tools.ietf.org/html/rfc6874#section-4\n     */\n    private static function isIpHost(string $ipHost): bool\n    {\n        if (false !== filter_var($ipHost, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return true;\n        }\n\n        if (1 === preg_match(self::REGEXP_IP_FUTURE, $ipHost, $matches)) {\n            return !in_array($matches['version'], ['4', '6'], true);\n        }\n\n        $pos = strpos($ipHost, '%');\n        if (false === $pos || 1 === preg_match(self::REGEXP_INVALID_HOST_CHARS, rawurldecode(substr($ipHost, $pos)))) {\n            return false;\n        }\n\n        $ipHost = substr($ipHost, 0, $pos);\n\n        return false !== filter_var($ipHost, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)\n            && str_starts_with((string)inet_pton($ipHost), self::ZONE_ID_ADDRESS_BLOCK);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Idna/Result.php","ext":"php","size":1443,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Idna;\n\n/**\n * @see https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/uidna_8h.html\n */\nfinal class Result\n{\n    private function __construct(\n        private readonly string $domain,\n        private readonly bool $isTransitionalDifferent,\n        /** @var array<Error> */\n        private readonly array $errors\n    ) {\n    }\n\n    /**\n     * @param array{result:string, isTransitionalDifferent:bool, errors:int} $infos\n     */\n    public static function fromIntl(array $infos): self\n    {\n        return new self($infos['result'], $infos['isTransitionalDifferent'], Error::filterByErrorBytes($infos['errors']));\n    }\n\n    public function domain(): string\n    {\n        return $this->domain;\n    }\n\n    public function isTransitionalDifferent(): bool\n    {\n        return $this->isTransitionalDifferent;\n    }\n\n    /**\n     * @return array<Error>\n     */\n    public function errors(): array\n    {\n        return $this->errors;\n    }\n\n    public function hasErrors(): bool\n    {\n        return [] !== $this->errors;\n    }\n\n    public function hasError(Error $error): bool\n    {\n        return in_array($error, $this->errors, true);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Idna/Option.php","ext":"php","size":4497,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Idna;\n\nuse ReflectionClass;\nuse ReflectionClassConstant;\n\n/**\n * @see https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/uidna_8h.html\n */\nfinal class Option\n{\n    private const DEFAULT                    = 0;\n    private const ALLOW_UNASSIGNED           = 1;\n    private const USE_STD3_RULES             = 2;\n    private const CHECK_BIDI                 = 4;\n    private const CHECK_CONTEXTJ             = 8;\n    private const NONTRANSITIONAL_TO_ASCII   = 0x10;\n    private const NONTRANSITIONAL_TO_UNICODE = 0x20;\n    private const CHECK_CONTEXTO             = 0x40;\n\n    private function __construct(private readonly int $value)\n    {\n    }\n\n    private static function cases(): array\n    {\n        static $assoc;\n        if (null === $assoc) {\n            $assoc = [];\n            $fooClass = new ReflectionClass(self::class);\n            foreach ($fooClass->getConstants(ReflectionClassConstant::IS_PRIVATE) as $name => $value) {\n                $assoc[$name] = $value;\n            }\n        }\n\n        return $assoc;\n    }\n\n    public static function new(int $bytes = self::DEFAULT): self\n    {\n        return new self(array_reduce(\n            self::cases(),\n            fn (int $value, int $option) => 0 !== ($option & $bytes) ? ($value | $option) : $value,\n            self::DEFAULT\n        ));\n    }\n\n    public static function forIDNA2008Ascii(): self\n    {\n        return self::new()\n            ->nonTransitionalToAscii()\n            ->checkBidi()\n            ->useSTD3Rules()\n            ->checkContextJ();\n    }\n\n    public static function forIDNA2008Unicode(): self\n    {\n        return self::new()\n            ->nonTransitionalToUnicode()\n            ->checkBidi()\n            ->useSTD3Rules()\n            ->checkContextJ();\n    }\n\n    public function toBytes(): int\n    {\n        return $this->value;\n    }\n\n    /** array<string, int> */\n    public function list(): array\n    {\n        return array_keys(array_filter(\n            self::cases(),\n            fn (int $value) => 0 !== ($value & $this->value)\n        ));\n    }\n\n    public function allowUnassigned(): self\n    {\n        return $this->add(self::ALLOW_UNASSIGNED);\n    }\n\n    public function disallowUnassigned(): self\n    {\n        return $this->remove(self::ALLOW_UNASSIGNED);\n    }\n\n    public function useSTD3Rules(): self\n    {\n        return $this->add(self::USE_STD3_RULES);\n    }\n\n    public function prohibitSTD3Rules(): self\n    {\n        return $this->remove(self::USE_STD3_RULES);\n    }\n\n    public function checkBidi(): self\n    {\n        return $this->add(self::CHECK_BIDI);\n    }\n\n    public function ignoreBidi(): self\n    {\n        return $this->remove(self::CHECK_BIDI);\n    }\n\n    public function checkContextJ(): self\n    {\n        return $this->add(self::CHECK_CONTEXTJ);\n    }\n\n    public function ignoreContextJ(): self\n    {\n        return $this->remove(self::CHECK_CONTEXTJ);\n    }\n\n    public function checkContextO(): self\n    {\n        return $this->add(self::CHECK_CONTEXTO);\n    }\n\n    public function ignoreContextO(): self\n    {\n        return $this->remove(self::CHECK_CONTEXTO);\n    }\n\n    public function nonTransitionalToAscii(): self\n    {\n        return $this->add(self::NONTRANSITIONAL_TO_ASCII);\n    }\n\n    public function transitionalToAscii(): self\n    {\n        return $this->remove(self::NONTRANSITIONAL_TO_ASCII);\n    }\n\n    public function nonTransitionalToUnicode(): self\n    {\n        return $this->add(self::NONTRANSITIONAL_TO_UNICODE);\n    }\n\n    public function transitionalToUnicode(): self\n    {\n        return $this->remove(self::NONTRANSITIONAL_TO_UNICODE);\n    }\n\n    public function add(Option|int|null $option = null): self\n    {\n        return match (true) {\n            null === $option => $this,\n            $option instanceof self => self::new($this->value | $option->value),\n            default => self::new($this->value | $option),\n        };\n    }\n\n    public function remove(Option|int|null $option = null): self\n    {\n        return match (true) {\n            null === $option => $this,\n            $option instanceof self => self::new($this->value & ~$option->value),\n            default => self::new($this->value & ~$option),\n        };\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Idna/Converter.php","ext":"php","size":7192,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Idna;\n\nuse League\\Uri\\Exceptions\\ConversionFailed;\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\FeatureDetection;\nuse Stringable;\n\nuse function idn_to_ascii;\nuse function idn_to_utf8;\nuse function rawurldecode;\nuse function strtolower;\n\nuse const INTL_IDNA_VARIANT_UTS46;\n\n/**\n * @see https://unicode-org.github.io/icu-docs/apidoc/released/icu4c/uidna_8h.html\n */\nfinal class Converter\n{\n    private const REGEXP_IDNA_PATTERN = '/[^\\x20-\\x7f]/';\n    private const MAX_DOMAIN_LENGTH = 253;\n    private const MAX_LABEL_LENGTH = 63;\n\n    /**\n     * General registered name regular expression.\n     *\n     * @see https://tools.ietf.org/html/rfc3986#section-3.2.2\n     * @see https://regex101.com/r/fptU8V/1\n     */\n    private const REGEXP_REGISTERED_NAME = '/\n        (?(DEFINE)\n            (?<unreserved>[a-z0-9_~\\-])   # . is missing as it is used to separate labels\n            (?<sub_delims>[!$&\\'()*+,;=])\n            (?<encoded>%[A-F0-9]{2})\n            (?<reg_name>(?:(?&unreserved)|(?&sub_delims)|(?&encoded))*)\n        )\n            ^(?:(?&reg_name)\\.)*(?&reg_name)\\.?$\n        /ix';\n\n    /**\n     * Converts the input to its IDNA ASCII form or throw on failure.\n     *\n     * @see Converter::toAscii()\n     *\n     * @throws SyntaxError if the string cannot be converted to UNICODE using IDN UTS46 algorithm\n     * @throws ConversionFailed if the conversion returns error\n     */\n    public static function toAsciiOrFail(Stringable|string $domain, Option|int|null $options = null): string\n    {\n        $result = self::toAscii($domain, $options);\n\n        return match (true) {\n            $result->hasErrors() => throw ConversionFailed::dueToIdnError($domain, $result),\n            default => $result->domain(),\n        };\n    }\n\n    /**\n     * Converts the input to its IDNA ASCII form.\n     *\n     * This method returns the string converted to IDN ASCII form\n     *\n     * @throws SyntaxError if the string cannot be converted to ASCII using IDN UTS46 algorithm\n     */\n    public static function toAscii(Stringable|string $domain, Option|int|null $options = null): Result\n    {\n        $domain = rawurldecode((string) $domain);\n\n        if (1 === preg_match(self::REGEXP_IDNA_PATTERN, $domain)) {\n            FeatureDetection::supportsIdn();\n\n            $flags = match (true) {\n                null === $options => Option::forIDNA2008Ascii(),\n                $options instanceof Option => $options,\n                default => Option::new($options),\n            };\n\n            idn_to_ascii($domain, $flags->toBytes(), INTL_IDNA_VARIANT_UTS46, $idnaInfo);\n\n            if ([] === $idnaInfo) {\n                return Result::fromIntl([\n                    'result' => strtolower($domain),\n                    'isTransitionalDifferent' => false,\n                    'errors' => self::validateDomainAndLabelLength($domain),\n                ]);\n            }\n\n            return Result::fromIntl($idnaInfo);\n        }\n\n        $error = Error::NONE->value;\n        if (1 !== preg_match(self::REGEXP_REGISTERED_NAME, $domain)) {\n            $error |= Error::DISALLOWED->value;\n        }\n\n        return Result::fromIntl([\n            'result' => strtolower($domain),\n            'isTransitionalDifferent' => false,\n            'errors' => self::validateDomainAndLabelLength($domain) | $error,\n        ]);\n    }\n\n    /**\n     * Converts the input to its IDNA UNICODE form or throw on failure.\n     *\n     * @see Converter::toUnicode()\n     *\n     * @throws ConversionFailed if the conversion returns error\n     */\n    public static function toUnicodeOrFail(Stringable|string $domain, Option|int|null $options = null): string\n    {\n        $result = self::toUnicode($domain, $options);\n\n        return match (true) {\n            $result->hasErrors() => throw ConversionFailed::dueToIdnError($domain, $result),\n            default => $result->domain(),\n        };\n    }\n\n    /**\n     * Converts the input to its IDNA UNICODE form.\n     *\n     * This method returns the string converted to IDN UNICODE form\n     *\n     * @throws SyntaxError if the string cannot be converted to UNICODE using IDN UTS46 algorithm\n     */\n    public static function toUnicode(Stringable|string $domain, Option|int|null $options = null): Result\n    {\n        $domain = rawurldecode((string) $domain);\n\n        if (false === stripos($domain, 'xn--')) {\n            return Result::fromIntl(['result' => strtolower($domain), 'isTransitionalDifferent' => false, 'errors' => Error::NONE->value]);\n        }\n\n        FeatureDetection::supportsIdn();\n\n        $flags = match (true) {\n            null === $options => Option::forIDNA2008Unicode(),\n            $options instanceof Option => $options,\n            default => Option::new($options),\n        };\n\n        idn_to_utf8($domain, $flags->toBytes(), INTL_IDNA_VARIANT_UTS46, $idnaInfo);\n\n        if ([] === $idnaInfo) {\n            return Result::fromIntl(['result' => strtolower($domain), 'isTransitionalDifferent' => false, 'errors' => Error::NONE->value]);\n        }\n\n        return Result::fromIntl($idnaInfo);\n    }\n\n    /**\n     * Tells whether the submitted host is a valid IDN regardless of its format.\n     *\n     * Returns false if the host is invalid or if its conversion yield the same result\n     */\n    public static function isIdn(Stringable|string|null $domain): bool\n    {\n        $domain = strtolower(rawurldecode((string) $domain));\n        $result = match (1) {\n            preg_match(self::REGEXP_IDNA_PATTERN, $domain) => self::toAscii($domain),\n            default => self::toUnicode($domain),\n        };\n\n        return match (true) {\n            $result->hasErrors() => false,\n            default => $result->domain() !== $domain,\n        };\n    }\n\n    /**\n     * Adapted from https://github.com/TRowbotham/idna.\n     *\n     * @see https://github.com/TRowbotham/idna/blob/master/src/Idna.php#L236\n     */\n    private static function validateDomainAndLabelLength(string $domain): int\n    {\n        $error = Error::NONE->value;\n        $labels = explode('.', $domain);\n        $maxDomainSize = self::MAX_DOMAIN_LENGTH;\n        $length = count($labels);\n\n        // If the last label is empty, and it is not the first label, then it is the root label.\n        // Increase the max size by 1, making it 254, to account for the root label's \".\"\n        // delimiter. This also means we don't need to check the last label's length for being too\n        // long.\n        if ($length > 1 && '' === $labels[$length - 1]) {\n            ++$maxDomainSize;\n            array_pop($labels);\n        }\n\n        if (strlen($domain) > $maxDomainSize) {\n            $error |= Error::DOMAIN_NAME_TOO_LONG->value;\n        }\n\n        foreach ($labels as $label) {\n            if (strlen($label) > self::MAX_LABEL_LENGTH) {\n                $error |= Error::LABEL_TOO_LONG->value;\n\n                break;\n            }\n        }\n\n        return $error;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Idna/Error.php","ext":"php","size":2856,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Uri\\Idna;\n\nenum Error: int\n{\n    case NONE                   = 0;\n    case EMPTY_LABEL            = 1;\n    case LABEL_TOO_LONG         = 2;\n    case DOMAIN_NAME_TOO_LONG   = 4;\n    case LEADING_HYPHEN         = 8;\n    case TRAILING_HYPHEN        = 0x10;\n    case HYPHEN_3_4             = 0x20;\n    case LEADING_COMBINING_MARK = 0x40;\n    case DISALLOWED             = 0x80;\n    case PUNYCODE               = 0x100;\n    case LABEL_HAS_DOT          = 0x200;\n    case INVALID_ACE_LABEL      = 0x400;\n    case BIDI                   = 0x800;\n    case CONTEXTJ               = 0x1000;\n    case CONTEXTO_PUNCTUATION   = 0x2000;\n    case CONTEXTO_DIGITS        = 0x4000;\n\n    public function description(): string\n    {\n        return match ($this) {\n            self::NONE => 'No error has occurred',\n            self::EMPTY_LABEL => 'a non-final domain name label (or the whole domain name) is empty',\n            self::LABEL_TOO_LONG => 'a domain name label is longer than 63 bytes',\n            self::DOMAIN_NAME_TOO_LONG => 'a domain name is longer than 255 bytes in its storage form',\n            self::LEADING_HYPHEN => 'a label starts with a hyphen-minus (\"-\")',\n            self::TRAILING_HYPHEN => 'a label ends with a hyphen-minus (\"-\")',\n            self::HYPHEN_3_4 => 'a label contains hyphen-minus (\"-\") in the third and fourth positions',\n            self::LEADING_COMBINING_MARK => 'a label starts with a combining mark',\n            self::DISALLOWED => 'a label or domain name contains disallowed characters',\n            self::PUNYCODE => 'a label starts with \"xn--\" but does not contain valid Punycode',\n            self::LABEL_HAS_DOT => 'a label contains a dot=full stop',\n            self::INVALID_ACE_LABEL => 'An ACE label does not contain a valid label string',\n            self::BIDI => 'a label does not meet the IDNA BiDi requirements (for right-to-left characters)',\n            self::CONTEXTJ => 'a label does not meet the IDNA CONTEXTJ requirements',\n            self::CONTEXTO_DIGITS => 'a label does not meet the IDNA CONTEXTO requirements for digits',\n            self::CONTEXTO_PUNCTUATION => 'a label does not meet the IDNA CONTEXTO requirements for punctuation characters. Some punctuation characters \"Would otherwise have been DISALLOWED\" but are allowed in certain contexts',\n        };\n    }\n\n    public static function filterByErrorBytes(int $errors): array\n    {\n        return array_values(\n            array_filter(\n                self::cases(),\n                fn (self $error): bool => 0 !== ($error->value & $errors)\n            )\n        );\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/FeatureDetection.php","ext":"php","size":2229,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse finfo;\nuse League\\Uri\\Exceptions\\MissingFeature;\nuse League\\Uri\\IPv4\\Calculator;\n\nuse function class_exists;\nuse function defined;\nuse function extension_loaded;\nuse function function_exists;\n\nuse const PHP_INT_SIZE;\n\n/**\n * Allow detecting features needed to make the packages work.\n */\nfinal class FeatureDetection\n{\n    public static function supportsFileDetection(): void\n    {\n        static $isSupported = null;\n        $isSupported = $isSupported ?? class_exists(finfo::class);\n\n        if (!$isSupported) {\n            throw new MissingFeature('Support for file type detection requires the `fileinfo` extension.');\n        }\n    }\n\n    public static function supportsIdn(): void\n    {\n        static $isSupported = null;\n        $isSupported = $isSupported ?? (function_exists('\\idn_to_ascii') && defined('\\INTL_IDNA_VARIANT_UTS46'));\n\n        if (!$isSupported) {\n            throw new MissingFeature('Support for IDN host requires the `intl` extension for best performance or run \"composer require symfony/polyfill-intl-idn\" to install a polyfill.');\n        }\n    }\n\n    public static function supportsIPv4Conversion(): void\n    {\n        static $isSupported = null;\n        $isSupported = $isSupported ?? (extension_loaded('gmp') || extension_loaded('bcmath') || (4 < PHP_INT_SIZE));\n\n        if (!$isSupported) {\n            throw new MissingFeature('A '.Calculator::class.' implementation could not be automatically loaded. To perform IPv4 conversion use a x.64 PHP build or install one of the following extension GMP or BCMath. You can also ship your own implmentation.');\n        }\n    }\n\n    public static function supportsDom(): void\n    {\n        static $isSupported = null;\n        $isSupported = $isSupported ?? extension_loaded('dom');\n\n        if (!$isSupported) {\n            throw new MissingFeature('To use a DOM related feature, the DOM extension must be installed in your system.');\n        }\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/IPv6/Converter.php","ext":"php","size":4671,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\IPv6;\n\nuse Stringable;\nuse ValueError;\n\nuse function filter_var;\nuse function implode;\nuse function inet_pton;\nuse function str_split;\nuse function strtolower;\nuse function unpack;\n\nuse const FILTER_FLAG_IPV6;\nuse const FILTER_VALIDATE_IP;\n\nfinal class Converter\n{\n    /**\n     * Significant 10 bits of IP to detect Zone ID regular expression pattern.\n     *\n     * @var string\n     */\n    private const HOST_ADDRESS_BLOCK = \"\\xfe\\x80\";\n\n    public static function compressIp(string $ipAddress): string\n    {\n        return match (filter_var($ipAddress, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            false => throw new ValueError('The submitted IP is not a valid IPv6 address.'),\n            default =>  strtolower((string) inet_ntop((string) inet_pton($ipAddress))),\n        };\n    }\n\n    public static function expandIp(string $ipAddress): string\n    {\n        if (false === filter_var($ipAddress, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            throw new ValueError('The submitted IP is not a valid IPv6 address.');\n        }\n\n        $hex = (array) unpack('H*hex', (string) inet_pton($ipAddress));\n\n        return implode(':', str_split(strtolower($hex['hex'] ?? ''), 4));\n    }\n\n    public static function compress(Stringable|string|null $host): ?string\n    {\n        $components = self::parse($host);\n        if (null === $components['ipAddress']) {\n            return match ($host) {\n                null => $host,\n                default => (string) $host,\n            };\n        }\n\n        $components['ipAddress'] = self::compressIp($components['ipAddress']);\n\n        return self::build($components);\n    }\n\n    public static function expand(Stringable|string|null $host): ?string\n    {\n        $components = self::parse($host);\n        if (null === $components['ipAddress']) {\n            return match ($host) {\n                null => $host,\n                default => (string) $host,\n            };\n        }\n\n        $components['ipAddress'] = self::expandIp($components['ipAddress']);\n\n        return self::build($components);\n    }\n\n    public static function build(array $components): string\n    {\n        $components['ipAddress'] ??= null;\n        $components['zoneIdentifier'] ??= null;\n\n        if (null === $components['ipAddress']) {\n            return '';\n        }\n\n        return '['.$components['ipAddress'].match ($components['zoneIdentifier']) {\n            null => '',\n            default => '%'.$components['zoneIdentifier'],\n        }.']';\n    }\n\n    /**\n     * @return array{ipAddress:string|null, zoneIdentifier:string|null}\n     */\n    private static function parse(Stringable|string|null $host): array\n    {\n        if (null === $host) {\n            return ['ipAddress' => null, 'zoneIdentifier' => null];\n        }\n\n        $host = (string) $host;\n        if ('' === $host) {\n            return ['ipAddress' => null, 'zoneIdentifier' => null];\n        }\n\n        if (!str_starts_with($host, '[')) {\n            return ['ipAddress' => null, 'zoneIdentifier' => null];\n        }\n\n        if (!str_ends_with($host, ']')) {\n            return ['ipAddress' => null, 'zoneIdentifier' => null];\n        }\n\n        [$ipv6, $zoneIdentifier] = explode('%', substr($host, 1, -1), 2) + [1 => null];\n        if (false === filter_var($ipv6, FILTER_VALIDATE_IP, FILTER_FLAG_IPV6)) {\n            return ['ipAddress' => null, 'zoneIdentifier' => null];\n        }\n\n        return match (true) {\n            null === $zoneIdentifier,\n            is_string($ipv6) && str_starts_with((string)inet_pton($ipv6), self::HOST_ADDRESS_BLOCK) =>  ['ipAddress' => $ipv6, 'zoneIdentifier' => $zoneIdentifier],\n            default => ['ipAddress' => null, 'zoneIdentifier' => null],\n        };\n    }\n\n    /**\n     * Tells whether the host is an IPv6.\n     */\n    public static function isIpv6(Stringable|string|null $host): bool\n    {\n        return null !== self::parse($host)['ipAddress'];\n    }\n\n    public static function normalize(Stringable|string|null $host): ?string\n    {\n        if (null === $host || '' === $host) {\n            return $host;\n        }\n\n        $host = (string) $host;\n        $components = self::parse($host);\n        if (null === $components['ipAddress']) {\n            return strtolower($host);\n        }\n\n        $components['ipAddress'] = strtolower($components['ipAddress']);\n\n        return self::build($components);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Exceptions/ConversionFailed.php","ext":"php","size":1099,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Exceptions;\n\nuse League\\Uri\\Idna\\Error;\nuse League\\Uri\\Idna\\Result;\nuse Stringable;\n\nfinal class ConversionFailed extends SyntaxError\n{\n    private function __construct(\n        string $message,\n        private readonly string $host,\n        private readonly Result $result\n    ) {\n        parent::__construct($message);\n    }\n\n    public static function dueToIdnError(Stringable|string $host, Result $result): self\n    {\n        $reasons = array_map(fn (Error $error): string => $error->description(), $result->errors());\n\n        return new self('Host `'.$host.'` is invalid: '.implode('; ', $reasons).'.', (string) $host, $result);\n    }\n\n    public function getHost(): string\n    {\n        return $this->host;\n    }\n\n    public function getResult(): Result\n    {\n        return $this->result;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Exceptions/MissingFeature.php","ext":"php","size":443,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Exceptions;\n\nuse League\\Uri\\Contracts\\UriException;\nuse RuntimeException;\n\nclass MissingFeature extends RuntimeException implements UriException\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Exceptions/OffsetOutOfBounds.php","ext":"php","size":355,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Exceptions;\n\nclass OffsetOutOfBounds extends SyntaxError\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/Exceptions/SyntaxError.php","ext":"php","size":456,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri\\Exceptions;\n\nuse InvalidArgumentException;\nuse League\\Uri\\Contracts\\UriException;\n\nclass SyntaxError extends InvalidArgumentException implements UriException\n{\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/uri-interfaces/QueryString.php","ext":"php","size":9315,"mtime":1756373564,"type":"text","content":"<?php\n\n/**\n * League.Uri (https://uri.thephpleague.com)\n *\n * (c) Ignace Nyamagana Butera <nyamsprod@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\ndeclare(strict_types=1);\n\nnamespace League\\Uri;\n\nuse League\\Uri\\Exceptions\\SyntaxError;\nuse League\\Uri\\KeyValuePair\\Converter;\nuse Stringable;\n\nuse function array_key_exists;\nuse function array_keys;\nuse function is_array;\nuse function rawurldecode;\nuse function strpos;\nuse function substr;\n\nuse const PHP_QUERY_RFC3986;\n\n/**\n * A class to parse the URI query string.\n *\n * @see https://tools.ietf.org/html/rfc3986#section-3.4\n */\nfinal class QueryString\n{\n    private const PAIR_VALUE_DECODED = 1;\n    private const PAIR_VALUE_PRESERVED = 2;\n\n    /**\n     * @codeCoverageIgnore\n     */\n    private function __construct()\n    {\n    }\n\n    /**\n     * Build a query string from a list of pairs.\n     *\n     * @see QueryString::buildFromPairs()\n     * @see https://datatracker.ietf.org/doc/html/rfc3986#section-2.2\n     *\n     * @param iterable<array{0:string, 1:string|float|int|bool|null}> $pairs\n     * @param non-empty-string $separator\n     *\n     * @throws SyntaxError If the encoding type is invalid\n     * @throws SyntaxError If a pair is invalid\n     */\n    public static function build(iterable $pairs, string $separator = '&', int $encType = PHP_QUERY_RFC3986): ?string\n    {\n        return self::buildFromPairs($pairs, Converter::fromEncodingType($encType)->withSeparator($separator));\n    }\n\n    /**\n     * Build a query string from a list of pairs.\n     *\n     * The method expects the return value from Query::parse to build\n     * a valid query string. This method differs from PHP http_build_query as\n     * it does not modify parameters keys.\n     *\n     *  If a reserved character is found in a URI component and\n     *  no delimiting role is known for that character, then it must be\n     *  interpreted as representing the data octet corresponding to that\n     *  character's encoding in US-ASCII.\n     *\n     * @see https://datatracker.ietf.org/doc/html/rfc3986#section-2.2\n     *\n     * @param iterable<array{0:string, 1:string|float|int|bool|null}> $pairs\n     *\n     * @throws SyntaxError If the encoding type is invalid\n     * @throws SyntaxError If a pair is invalid\n     */\n    public static function buildFromPairs(iterable $pairs, ?Converter $converter = null): ?string\n    {\n        $keyValuePairs = [];\n        foreach ($pairs as $pair) {\n            if (!is_array($pair) || [0, 1] !== array_keys($pair)) {\n                throw new SyntaxError('A pair must be a sequential array starting at `0` and containing two elements.');\n            }\n\n            $keyValuePairs[] = [(string) Encoder::encodeQueryKeyValue($pair[0]), match(null) {\n                $pair[1] => null,\n                default => Encoder::encodeQueryKeyValue($pair[1]),\n            }];\n        }\n\n        return ($converter ?? Converter::fromRFC3986())->toValue($keyValuePairs);\n    }\n\n    /**\n     * Parses the query string like parse_str without mangling the results.\n     *\n     * @see QueryString::extractFromValue()\n     * @see http://php.net/parse_str\n     * @see https://wiki.php.net/rfc/on_demand_name_mangling\n     *\n     * @param non-empty-string $separator\n     *\n     * @throws SyntaxError\n     */\n    public static function extract(Stringable|string|bool|null $query, string $separator = '&', int $encType = PHP_QUERY_RFC3986): array\n    {\n        return self::extractFromValue($query, Converter::fromEncodingType($encType)->withSeparator($separator));\n    }\n\n    /**\n     * Parses the query string like parse_str without mangling the results.\n     *\n     * The result is similar as PHP parse_str when used with its\n     * second argument with the difference that variable names are\n     * not mangled.\n     *\n     * @see http://php.net/parse_str\n     * @see https://wiki.php.net/rfc/on_demand_name_mangling\n     *\n     * @throws SyntaxError\n     */\n    public static function extractFromValue(Stringable|string|bool|null $query, ?Converter $converter = null): array\n    {\n        return self::convert(self::decodePairs(\n            ($converter ?? Converter::fromRFC3986())->toPairs($query),\n            self::PAIR_VALUE_PRESERVED\n        ));\n    }\n\n    /**\n     * Parses a query string into a collection of key/value pairs.\n     *\n     * @param non-empty-string $separator\n     *\n     * @throws SyntaxError\n     *\n     * @return array<int, array{0:string, 1:string|null}>\n     */\n    public static function parse(Stringable|string|bool|null $query, string $separator = '&', int $encType = PHP_QUERY_RFC3986): array\n    {\n        return self::parseFromValue($query, Converter::fromEncodingType($encType)->withSeparator($separator));\n    }\n\n    /**\n     * Parses a query string into a collection of key/value pairs.\n     *\n     * @throws SyntaxError\n     *\n     * @return array<int, array{0:string, 1:string|null}>\n     */\n    public static function parseFromValue(Stringable|string|bool|null $query, ?Converter $converter = null): array\n    {\n        return self::decodePairs(\n            ($converter ?? Converter::fromRFC3986())->toPairs($query),\n            self::PAIR_VALUE_DECODED\n        );\n    }\n\n    /**\n     * @param array<non-empty-list<string|null>> $pairs\n     *\n     * @return array<int, array{0:string, 1:string|null}>\n     */\n    private static function decodePairs(array $pairs, int $pairValueState): array\n    {\n        $decodePair = static function (array $pair, int $pairValueState): array {\n            [$key, $value] = $pair;\n\n            return match ($pairValueState) {\n                self::PAIR_VALUE_PRESERVED => [(string) Encoder::decodeAll($key), $value],\n                default => [(string) Encoder::decodeAll($key), Encoder::decodeAll($value)],\n            };\n        };\n\n        return array_reduce(\n            $pairs,\n            fn (array $carry, array $pair) => [...$carry, $decodePair($pair, $pairValueState)],\n            []\n        );\n    }\n\n    /**\n     * Converts a collection of key/value pairs and returns\n     * the store PHP variables as elements of an array.\n     */\n    public static function convert(iterable $pairs): array\n    {\n        $returnedValue = [];\n        foreach ($pairs as $pair) {\n            $returnedValue = self::extractPhpVariable($returnedValue, $pair);\n        }\n\n        return $returnedValue;\n    }\n\n    /**\n     * Parses a query pair like parse_str without mangling the results array keys.\n     *\n     * <ul>\n     * <li>empty name are not saved</li>\n     * <li>If the value from name is duplicated its corresponding value will be overwritten</li>\n     * <li>if no \"[\" is detected the value is added to the return array with the name as index</li>\n     * <li>if no \"]\" is detected after detecting a \"[\" the value is added to the return array with the name as index</li>\n     * <li>if there's a mismatch in bracket usage the remaining part is dropped</li>\n     * <li>“.” and “ ” are not converted to “_”</li>\n     * <li>If there is no “]”, then the first “[” is not converted to becomes an “_”</li>\n     * <li>no whitespace trimming is done on the key value</li>\n     * </ul>\n     *\n     * @see https://php.net/parse_str\n     * @see https://wiki.php.net/rfc/on_demand_name_mangling\n     * @see https://github.com/php/php-src/blob/master/ext/standard/tests/strings/parse_str_basic1.phpt\n     * @see https://github.com/php/php-src/blob/master/ext/standard/tests/strings/parse_str_basic2.phpt\n     * @see https://github.com/php/php-src/blob/master/ext/standard/tests/strings/parse_str_basic3.phpt\n     * @see https://github.com/php/php-src/blob/master/ext/standard/tests/strings/parse_str_basic4.phpt\n     *\n     * @param array $data the submitted array\n     * @param array|string $name the pair key\n     * @param string $value the pair value\n     */\n    private static function extractPhpVariable(array $data, array|string $name, string $value = ''): array\n    {\n        if (is_array($name)) {\n            [$name, $value] = $name;\n            $value = rawurldecode((string) $value);\n        }\n\n        if ('' === $name) {\n            return $data;\n        }\n\n        $leftBracketPosition = strpos($name, '[');\n        if (false === $leftBracketPosition) {\n            $data[$name] = $value;\n\n            return $data;\n        }\n\n        $rightBracketPosition = strpos($name, ']', $leftBracketPosition);\n        if (false === $rightBracketPosition) {\n            $data[$name] = $value;\n\n            return $data;\n        }\n\n        $key = substr($name, 0, $leftBracketPosition);\n        if ('' === $key) {\n            $key = '0';\n        }\n\n        if (!array_key_exists($key, $data) || !is_array($data[$key])) {\n            $data[$key] = [];\n        }\n\n        $remaining = substr($name, $rightBracketPosition + 1);\n        if (!str_starts_with($remaining, '[') || !str_contains($remaining, ']')) {\n            $remaining = '';\n        }\n\n        $name = substr($name, $leftBracketPosition + 1, $rightBracketPosition - $leftBracketPosition - 1).$remaining;\n        if ('' === $name) {\n            $data[$key][] = $value;\n\n            return $data;\n        }\n\n        $data[$key] = self::extractPhpVariable($data[$key], $name, $value);\n\n        return $data;\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/LICENSE.md","ext":"md","size":1513,"mtime":1756373564,"type":"text","content":"BSD 3-Clause License\n\nCopyright (c) 2023, Colin O'Dell. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/CHANGELOG.md","ext":"md","size":1283,"mtime":1756373564,"type":"text","content":"# Change Log\nAll notable changes to this project will be documented in this file.\nUpdates should follow the [Keep a CHANGELOG](https://keepachangelog.com/) principles.\n\n## [Unreleased][unreleased]\n\n## [1.2.0] - 2022-12-11\n\n### Changed\n\n- Values can now be set prior to the corresponding schema being registered.\n- `exists()` and `get()` now only trigger validation for the relevant schema, not the entire config at once.\n\n## [1.1.1] - 2021-08-14\n\n### Changed\n\n - Bumped the minimum version of dflydev/dot-access-data for PHP 8.1 support\n\n## [1.1.0] - 2021-06-19\n\n### Changed\n\n- Bumped the minimum PHP version to 7.4+\n- Bumped the minimum version of nette/schema to 1.2.0\n\n## [1.0.1] - 2021-05-31\n\n### Fixed\n\n- Fixed the `ConfigurationExceptionInterface` marker interface not extending `Throwable` (#2)\n\n## [1.0.0] - 2021-05-31\n\nInitial release! 🎉\n\n[unreleased]: https://github.com/thephpleague/config/compare/v1.2.0...main\n[1.2.0]: https://github.com/thephpleague/config/compare/v1.1.1...v.1.2.0\n[1.1.1]: https://github.com/thephpleague/config/compare/v1.1.0...v1.1.1\n[1.1.0]: https://github.com/thephpleague/config/compare/v1.0.1...v1.1.0\n[1.0.1]: https://github.com/thephpleague/config/compare/v1.0.0...v1.0.1\n[1.0.0]: https://github.com/thephpleague/config/releases/tag/v1.0.0\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/MutableConfigurationInterface.php","ext":"php","size":818,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\nuse League\\Config\\Exception\\UnknownOptionException;\n\n/**\n * Interface for setting/merging user-defined configuration values into the configuration object\n */\ninterface MutableConfigurationInterface\n{\n    /**\n     * @param mixed $value\n     *\n     * @throws UnknownOptionException if $key contains a nested path which doesn't point to an array value\n     */\n    public function set(string $key, $value): void;\n\n    /**\n     * @param array<string, mixed> $config\n     */\n    public function merge(array $config = []): void;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/ConfigurationProviderInterface.php","ext":"php","size":485,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\n/**\n * Interface for a service which provides a readable configuration object\n */\ninterface ConfigurationProviderInterface\n{\n    public function getConfiguration(): ConfigurationInterface;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/SchemaBuilderInterface.php","ext":"php","size":586,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\nuse Nette\\Schema\\Schema;\n\n/**\n * Interface that allows new schemas to be added to a configuration\n */\ninterface SchemaBuilderInterface\n{\n    /**\n     * Registers a new configuration schema at the given top-level key\n     */\n    public function addSchema(string $key, Schema $schema): void;\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/ReadOnlyConfiguration.php","ext":"php","size":802,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\n/**\n * Provides read-only access to a given Configuration object\n */\nfinal class ReadOnlyConfiguration implements ConfigurationInterface\n{\n    private Configuration $config;\n\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n    }\n\n    /**\n     * {@inheritDoc}\n     */\n    public function get(string $key)\n    {\n        return $this->config->get($key);\n    }\n\n    public function exists(string $key): bool\n    {\n        return $this->config->exists($key);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/Configuration.php","ext":"php","size":6449,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\nuse Dflydev\\DotAccessData\\Data;\nuse Dflydev\\DotAccessData\\DataInterface;\nuse Dflydev\\DotAccessData\\Exception\\DataException;\nuse Dflydev\\DotAccessData\\Exception\\InvalidPathException;\nuse League\\Config\\Exception\\UnknownOptionException;\nuse League\\Config\\Exception\\ValidationException;\nuse Nette\\Schema\\Expect;\nuse Nette\\Schema\\Processor;\nuse Nette\\Schema\\Schema;\nuse Nette\\Schema\\ValidationException as NetteValidationException;\n\nfinal class Configuration implements ConfigurationBuilderInterface, ConfigurationInterface\n{\n    /** @psalm-readonly */\n    private Data $userConfig;\n\n    /**\n     * @var array<string, Schema>\n     *\n     * @psalm-allow-private-mutation\n     */\n    private array $configSchemas = [];\n\n    /** @psalm-allow-private-mutation */\n    private Data $finalConfig;\n\n    /**\n     * @var array<string, mixed>\n     *\n     * @psalm-allow-private-mutation\n     */\n    private array $cache = [];\n\n    /** @psalm-readonly */\n    private ConfigurationInterface $reader;\n\n    /**\n     * @param array<string, Schema> $baseSchemas\n     */\n    public function __construct(array $baseSchemas = [])\n    {\n        $this->configSchemas = $baseSchemas;\n        $this->userConfig    = new Data();\n        $this->finalConfig   = new Data();\n\n        $this->reader = new ReadOnlyConfiguration($this);\n    }\n\n    /**\n     * Registers a new configuration schema at the given top-level key\n     *\n     * @psalm-allow-private-mutation\n     */\n    public function addSchema(string $key, Schema $schema): void\n    {\n        $this->invalidate();\n\n        $this->configSchemas[$key] = $schema;\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @psalm-allow-private-mutation\n     */\n    public function merge(array $config = []): void\n    {\n        $this->invalidate();\n\n        $this->userConfig->import($config, DataInterface::REPLACE);\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @psalm-allow-private-mutation\n     */\n    public function set(string $key, $value): void\n    {\n        $this->invalidate();\n\n        try {\n            $this->userConfig->set($key, $value);\n        } catch (DataException $ex) {\n            throw new UnknownOptionException($ex->getMessage(), $key, (int) $ex->getCode(), $ex);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @psalm-external-mutation-free\n     */\n    public function get(string $key)\n    {\n        if (\\array_key_exists($key, $this->cache)) {\n            return $this->cache[$key];\n        }\n\n        try {\n            $this->build(self::getTopLevelKey($key));\n\n            return $this->cache[$key] = $this->finalConfig->get($key);\n        } catch (InvalidPathException $ex) {\n            throw new UnknownOptionException($ex->getMessage(), $key, (int) $ex->getCode(), $ex);\n        }\n    }\n\n    /**\n     * {@inheritDoc}\n     *\n     * @psalm-external-mutation-free\n     */\n    public function exists(string $key): bool\n    {\n        if (\\array_key_exists($key, $this->cache)) {\n            return true;\n        }\n\n        try {\n            $this->build(self::getTopLevelKey($key));\n\n            return $this->finalConfig->has($key);\n        } catch (InvalidPathException | UnknownOptionException $ex) {\n            return false;\n        }\n    }\n\n    /**\n     * @psalm-mutation-free\n     */\n    public function reader(): ConfigurationInterface\n    {\n        return $this->reader;\n    }\n\n    /**\n     * @psalm-external-mutation-free\n     */\n    private function invalidate(): void\n    {\n        $this->cache       = [];\n        $this->finalConfig = new Data();\n    }\n\n    /**\n     * Applies the schema against the configuration to return the final configuration\n     *\n     * @throws ValidationException|UnknownOptionException|InvalidPathException\n     *\n     * @psalm-allow-private-mutation\n     */\n    private function build(string $topLevelKey): void\n    {\n        if ($this->finalConfig->has($topLevelKey)) {\n            return;\n        }\n\n        if (! isset($this->configSchemas[$topLevelKey])) {\n            throw new UnknownOptionException(\\sprintf('Missing config schema for \"%s\"', $topLevelKey), $topLevelKey);\n        }\n\n        try {\n            $userData = [$topLevelKey => $this->userConfig->get($topLevelKey)];\n        } catch (DataException $ex) {\n            $userData = [];\n        }\n\n        try {\n            $schema    = $this->configSchemas[$topLevelKey];\n            $processor = new Processor();\n\n            $processed = $processor->process(Expect::structure([$topLevelKey => $schema]), $userData);\n            \\assert($processed instanceof \\stdClass);\n\n            $this->raiseAnyDeprecationNotices($processor->getWarnings());\n\n            $this->finalConfig->import(self::convertStdClassesToArrays($processed));\n        } catch (NetteValidationException $ex) {\n            throw new ValidationException($ex);\n        }\n    }\n\n    /**\n     * Recursively converts stdClass instances to arrays\n     *\n     * @phpstan-template T\n     *\n     * @param T $data\n     *\n     * @return mixed\n     *\n     * @phpstan-return ($data is \\stdClass ? array<string, mixed> : T)\n     *\n     * @psalm-pure\n     */\n    private static function convertStdClassesToArrays($data)\n    {\n        if ($data instanceof \\stdClass) {\n            $data = (array) $data;\n        }\n\n        if (\\is_array($data)) {\n            foreach ($data as $k => $v) {\n                $data[$k] = self::convertStdClassesToArrays($v);\n            }\n        }\n\n        return $data;\n    }\n\n    /**\n     * @param string[] $warnings\n     */\n    private function raiseAnyDeprecationNotices(array $warnings): void\n    {\n        foreach ($warnings as $warning) {\n            @\\trigger_error($warning, \\E_USER_DEPRECATED);\n        }\n    }\n\n    /**\n     * @throws InvalidPathException\n     */\n    private static function getTopLevelKey(string $path): string\n    {\n        if (\\strlen($path) === 0) {\n            throw new InvalidPathException('Path cannot be an empty string');\n        }\n\n        $path = \\str_replace(['.', '/'], '.', $path);\n\n        $firstDelimiter = \\strpos($path, '.');\n        if ($firstDelimiter === false) {\n            return $path;\n        }\n\n        return \\substr($path, 0, $firstDelimiter);\n    }\n}\n"},{"base":"plugins","rel":"hostinger-ai-assistant/vendor/league/config/src/ConfigurationAwareInterface.php","ext":"php","size":516,"mtime":1756373564,"type":"text","content":"<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of the league/config package.\n *\n * (c) Colin O'Dell <colinodell@gmail.com>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nnamespace League\\Config;\n\n/**\n * Implement this class to facilitate setter injection of the configuration where needed\n */\ninterface ConfigurationAwareInterface\n{\n    public function setConfiguration(ConfigurationInterface $configuration): void;\n}\n"}]